
004LED_Periodic_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08005f14  08005f14  00015f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060a4  080060a4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080060a4  080060a4  000160a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060ac  080060ac  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060ac  080060ac  000160ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060b0  080060b0  000160b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080060b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00014414  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20014430  20014430  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012311  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029e3  00000000  00000000  0003235d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001130  00000000  00000000  00034d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fc8  00000000  00000000  00035e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023754  00000000  00000000  00036e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013157  00000000  00000000  0005a58c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6c89  00000000  00000000  0006d6e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014436c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004764  00000000  00000000  001443bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005efc 	.word	0x08005efc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08005efc 	.word	0x08005efc

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e5c 	.word	0x20012e5c

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fba5 	bl	8000cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f86d 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8d5 	bl	8000724 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter.
  DWT_CTRL |= ( 1 << 0);
 800057a:	4b2d      	ldr	r3, [pc, #180]	; (8000630 <main+0xc8>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a2c      	ldr	r2, [pc, #176]	; (8000630 <main+0xc8>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(250000);
 8000586:	482b      	ldr	r0, [pc, #172]	; (8000634 <main+0xcc>)
 8000588:	f003 fac2 	bl	8003b10 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 800058c:	f003 f8ea 	bl	8003764 <SEGGER_SYSVIEW_Conf>

 // SEGGER_SYSVIEW_Start();

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	2302      	movs	r3, #2
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2300      	movs	r3, #0
 800059c:	22c8      	movs	r2, #200	; 0xc8
 800059e:	4926      	ldr	r1, [pc, #152]	; (8000638 <main+0xd0>)
 80005a0:	4826      	ldr	r0, [pc, #152]	; (800063c <main+0xd4>)
 80005a2:	f001 fe97 	bl	80022d4 <xTaskCreate>
 80005a6:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005a8:	69fb      	ldr	r3, [r7, #28]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d00a      	beq.n	80005c4 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b2:	f383 8811 	msr	BASEPRI, r3
 80005b6:	f3bf 8f6f 	isb	sy
 80005ba:	f3bf 8f4f 	dsb	sy
 80005be:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005c0:	bf00      	nop
 80005c2:	e7fe      	b.n	80005c2 <main+0x5a>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL, 2, &task2_handle);
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2302      	movs	r3, #2
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	22c8      	movs	r2, #200	; 0xc8
 80005d2:	491b      	ldr	r1, [pc, #108]	; (8000640 <main+0xd8>)
 80005d4:	481b      	ldr	r0, [pc, #108]	; (8000644 <main+0xdc>)
 80005d6:	f001 fe7d 	bl	80022d4 <xTaskCreate>
 80005da:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d00a      	beq.n	80005f8 <main+0x90>
        __asm volatile
 80005e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e6:	f383 8811 	msr	BASEPRI, r3
 80005ea:	f3bf 8f6f 	isb	sy
 80005ee:	f3bf 8f4f 	dsb	sy
 80005f2:	617b      	str	r3, [r7, #20]
    }
 80005f4:	bf00      	nop
 80005f6:	e7fe      	b.n	80005f6 <main+0x8e>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &task3_handle);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	2302      	movs	r3, #2
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2300      	movs	r3, #0
 8000602:	22c8      	movs	r2, #200	; 0xc8
 8000604:	4910      	ldr	r1, [pc, #64]	; (8000648 <main+0xe0>)
 8000606:	4811      	ldr	r0, [pc, #68]	; (800064c <main+0xe4>)
 8000608:	f001 fe64 	bl	80022d4 <xTaskCreate>
 800060c:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d00a      	beq.n	800062a <main+0xc2>
        __asm volatile
 8000614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000618:	f383 8811 	msr	BASEPRI, r3
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f3bf 8f4f 	dsb	sy
 8000624:	613b      	str	r3, [r7, #16]
    }
 8000626:	bf00      	nop
 8000628:	e7fe      	b.n	8000628 <main+0xc0>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800062a:	f002 f839 	bl	80026a0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062e:	e7fe      	b.n	800062e <main+0xc6>
 8000630:	e0001000 	.word	0xe0001000
 8000634:	0003d090 	.word	0x0003d090
 8000638:	08005f14 	.word	0x08005f14
 800063c:	080009e1 	.word	0x080009e1
 8000640:	08005f24 	.word	0x08005f24
 8000644:	08000a19 	.word	0x08000a19
 8000648:	08005f34 	.word	0x08005f34
 800064c:	08000a51 	.word	0x08000a51

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	; 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f005 fc44 	bl	8005eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b28      	ldr	r3, [pc, #160]	; (800071c <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	; (800071c <SystemClock_Config+0xcc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	; (800071c <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <SystemClock_Config+0xd0>)
 800069a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c0:	2308      	movs	r3, #8
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006c4:	23a8      	movs	r3, #168	; 0xa8
 80006c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006cc:	2307      	movs	r3, #7
 80006ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fde5 	bl	80012a4 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e0:	f000 f9e4 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2105      	movs	r1, #5
 8000702:	4618      	mov	r0, r3
 8000704:	f001 f846 	bl	8001794 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800070e:	f000 f9cd 	bl	8000aac <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	; 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	; 0x30
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
 800073e:	4ba2      	ldr	r3, [pc, #648]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4aa1      	ldr	r2, [pc, #644]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000744:	f043 0310 	orr.w	r3, r3, #16
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b9f      	ldr	r3, [pc, #636]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0310 	and.w	r3, r3, #16
 8000752:	61bb      	str	r3, [r7, #24]
 8000754:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	4b9b      	ldr	r3, [pc, #620]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a9a      	ldr	r2, [pc, #616]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b98      	ldr	r3, [pc, #608]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b94      	ldr	r3, [pc, #592]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a93      	ldr	r2, [pc, #588]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b91      	ldr	r3, [pc, #580]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b8d      	ldr	r3, [pc, #564]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a8c      	ldr	r2, [pc, #560]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b8a      	ldr	r3, [pc, #552]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b86      	ldr	r3, [pc, #536]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a85      	ldr	r2, [pc, #532]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b83      	ldr	r3, [pc, #524]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b7f      	ldr	r3, [pc, #508]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a7e      	ldr	r2, [pc, #504]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007d0:	f043 0308 	orr.w	r3, r3, #8
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b7c      	ldr	r3, [pc, #496]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0308 	and.w	r3, r3, #8
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2108      	movs	r1, #8
 80007e6:	4879      	ldr	r0, [pc, #484]	; (80009cc <MX_GPIO_Init+0x2a8>)
 80007e8:	f000 fd28 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	2101      	movs	r1, #1
 80007f0:	4877      	ldr	r0, [pc, #476]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 80007f2:	f000 fd23 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007f6:	2200      	movs	r2, #0
 80007f8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007fc:	4875      	ldr	r0, [pc, #468]	; (80009d4 <MX_GPIO_Init+0x2b0>)
 80007fe:	f000 fd1d 	bl	800123c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000802:	2308      	movs	r3, #8
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	486c      	ldr	r0, [pc, #432]	; (80009cc <MX_GPIO_Init+0x2a8>)
 800081a:	f000 fb73 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800081e:	2301      	movs	r3, #1
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4866      	ldr	r0, [pc, #408]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 8000836:	f000 fb65 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800083a:	2308      	movs	r3, #8
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800084a:	2305      	movs	r3, #5
 800084c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	485e      	ldr	r0, [pc, #376]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 8000856:	f000 fb55 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800085a:	2301      	movs	r3, #1
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	485a      	ldr	r0, [pc, #360]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 8000870:	f000 fb48 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000874:	2310      	movs	r3, #16
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000884:	2306      	movs	r3, #6
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4852      	ldr	r0, [pc, #328]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 8000890:	f000 fb38 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000894:	23e0      	movs	r3, #224	; 0xe0
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008a4:	2305      	movs	r3, #5
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	484a      	ldr	r0, [pc, #296]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 80008b0:	f000 fb28 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008b4:	2304      	movs	r3, #4
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b8:	2300      	movs	r3, #0
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	4845      	ldr	r0, [pc, #276]	; (80009dc <MX_GPIO_Init+0x2b8>)
 80008c8:	f000 fb1c 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008de:	2305      	movs	r3, #5
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	483c      	ldr	r0, [pc, #240]	; (80009dc <MX_GPIO_Init+0x2b8>)
 80008ea:	f000 fb0b 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ee:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008f2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	4833      	ldr	r0, [pc, #204]	; (80009d4 <MX_GPIO_Init+0x2b0>)
 8000908:	f000 fafc 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800090c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800091e:	2306      	movs	r3, #6
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4829      	ldr	r0, [pc, #164]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 800092a:	f000 faeb 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800092e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4825      	ldr	r0, [pc, #148]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 8000944:	f000 fade 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000948:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800095a:	230a      	movs	r3, #10
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	481c      	ldr	r0, [pc, #112]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 8000966:	f000 facd 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800096a:	2320      	movs	r3, #32
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4815      	ldr	r0, [pc, #84]	; (80009d4 <MX_GPIO_Init+0x2b0>)
 800097e:	f000 fac1 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000982:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000988:	2312      	movs	r3, #18
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000994:	2304      	movs	r3, #4
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	480f      	ldr	r0, [pc, #60]	; (80009dc <MX_GPIO_Init+0x2b8>)
 80009a0:	f000 fab0 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009a4:	2302      	movs	r3, #2
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009a8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_GPIO_Init+0x2a8>)
 80009ba:	f000 faa3 	bl	8000f04 <HAL_GPIO_Init>

}
 80009be:	bf00      	nop
 80009c0:	3730      	adds	r7, #48	; 0x30
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40020800 	.word	0x40020800
 80009d4:	40020c00 	.word	0x40020c00
 80009d8:	40020000 	.word	0x40020000
 80009dc:	40020400 	.word	0x40020400

080009e0 <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler(void* parameters)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 80009e8:	f001 ff64 	bl	80028b4 <xTaskGetTickCount>
 80009ec:	4603      	mov	r3, r0
 80009ee:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED!!");
 80009f0:	4807      	ldr	r0, [pc, #28]	; (8000a10 <led_green_handler+0x30>)
 80009f2:	f005 f99b 	bl	8005d2c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80009f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009fa:	4806      	ldr	r0, [pc, #24]	; (8000a14 <led_green_handler+0x34>)
 80009fc:	f000 fc37 	bl	800126e <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(1000));
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f001 fdc7 	bl	800259c <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED!!");
 8000a0e:	e7ef      	b.n	80009f0 <led_green_handler+0x10>
 8000a10:	08005f44 	.word	0x08005f44
 8000a14:	40020c00 	.word	0x40020c00

08000a18 <led_red_handler>:
	}

}

static void led_red_handler(void* parameters)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 8000a20:	f001 ff48 	bl	80028b4 <xTaskGetTickCount>
 8000a24:	4603      	mov	r3, r0
 8000a26:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling RED LED!!");
 8000a28:	4807      	ldr	r0, [pc, #28]	; (8000a48 <led_red_handler+0x30>)
 8000a2a:	f005 f97f 	bl	8005d2c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a32:	4806      	ldr	r0, [pc, #24]	; (8000a4c <led_red_handler+0x34>)
 8000a34:	f000 fc1b 	bl	800126e <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(400));
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000a40:	4618      	mov	r0, r3
 8000a42:	f001 fdab 	bl	800259c <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling RED LED!!");
 8000a46:	e7ef      	b.n	8000a28 <led_red_handler+0x10>
 8000a48:	08005f5c 	.word	0x08005f5c
 8000a4c:	40020c00 	.word	0x40020c00

08000a50 <led_orange_handler>:
	}
}

static void led_orange_handler(void* parameters)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 8000a58:	f001 ff2c 	bl	80028b4 <xTaskGetTickCount>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling ORANGE LED!!");
 8000a60:	4807      	ldr	r0, [pc, #28]	; (8000a80 <led_orange_handler+0x30>)
 8000a62:	f005 f963 	bl	8005d2c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000a66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a6a:	4806      	ldr	r0, [pc, #24]	; (8000a84 <led_orange_handler+0x34>)
 8000a6c:	f000 fbff 	bl	800126e <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(800));
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f001 fd8f 	bl	800259c <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling ORANGE LED!!");
 8000a7e:	e7ef      	b.n	8000a60 <led_orange_handler+0x10>
 8000a80:	08005f70 	.word	0x08005f70
 8000a84:	40020c00 	.word	0x40020c00

08000a88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d101      	bne.n	8000a9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a9a:	f000 f931 	bl	8000d00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40001000 	.word	0x40001000

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
	...

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <HAL_MspInit+0x4c>)
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a08      	ldr	r2, [pc, #32]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000afa:	f002 fa7d 	bl	8002ff8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800

08000b0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08e      	sub	sp, #56	; 0x38
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	4b33      	ldr	r3, [pc, #204]	; (8000bf0 <HAL_InitTick+0xe4>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	4a32      	ldr	r2, [pc, #200]	; (8000bf0 <HAL_InitTick+0xe4>)
 8000b26:	f043 0310 	orr.w	r3, r3, #16
 8000b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2c:	4b30      	ldr	r3, [pc, #192]	; (8000bf0 <HAL_InitTick+0xe4>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	f003 0310 	and.w	r3, r3, #16
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b38:	f107 0210 	add.w	r2, r7, #16
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4611      	mov	r1, r2
 8000b42:	4618      	mov	r0, r3
 8000b44:	f001 f832 	bl	8001bac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b48:	6a3b      	ldr	r3, [r7, #32]
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d103      	bne.n	8000b5a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b52:	f001 f817 	bl	8001b84 <HAL_RCC_GetPCLK1Freq>
 8000b56:	6378      	str	r0, [r7, #52]	; 0x34
 8000b58:	e004      	b.n	8000b64 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b5a:	f001 f813 	bl	8001b84 <HAL_RCC_GetPCLK1Freq>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b66:	4a23      	ldr	r2, [pc, #140]	; (8000bf4 <HAL_InitTick+0xe8>)
 8000b68:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6c:	0c9b      	lsrs	r3, r3, #18
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b72:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b74:	4a21      	ldr	r2, [pc, #132]	; (8000bfc <HAL_InitTick+0xf0>)
 8000b76:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b78:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b7e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b80:	4a1d      	ldr	r2, [pc, #116]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b84:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b92:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b98:	4817      	ldr	r0, [pc, #92]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b9a:	f001 f839 	bl	8001c10 <HAL_TIM_Base_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ba4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d11b      	bne.n	8000be4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bac:	4812      	ldr	r0, [pc, #72]	; (8000bf8 <HAL_InitTick+0xec>)
 8000bae:	f001 f889 	bl	8001cc4 <HAL_TIM_Base_Start_IT>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000bb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d111      	bne.n	8000be4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bc0:	2036      	movs	r0, #54	; 0x36
 8000bc2:	f000 f991 	bl	8000ee8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b0f      	cmp	r3, #15
 8000bca:	d808      	bhi.n	8000bde <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	2036      	movs	r0, #54	; 0x36
 8000bd2:	f000 f96d 	bl	8000eb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <HAL_InitTick+0xf4>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6013      	str	r3, [r2, #0]
 8000bdc:	e002      	b.n	8000be4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000be4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3738      	adds	r7, #56	; 0x38
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	431bde83 	.word	0x431bde83
 8000bf8:	20000038 	.word	0x20000038
 8000bfc:	40001000 	.word	0x40001000
 8000c00:	20000004 	.word	0x20000004

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <NMI_Handler+0x4>

08000c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <MemManage_Handler+0x4>

08000c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <TIM6_DAC_IRQHandler+0x10>)
 8000c36:	f001 f8b5 	bl	8001da4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000038 	.word	0x20000038

08000c44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <SystemInit+0x20>)
 8000c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <SystemInit+0x20>)
 8000c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c6c:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c6e:	490e      	ldr	r1, [pc, #56]	; (8000ca8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c70:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c74:	e002      	b.n	8000c7c <LoopCopyDataInit>

08000c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7a:	3304      	adds	r3, #4

08000c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c80:	d3f9      	bcc.n	8000c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c82:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c84:	4c0b      	ldr	r4, [pc, #44]	; (8000cb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c88:	e001      	b.n	8000c8e <LoopFillZerobss>

08000c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c8c:	3204      	adds	r2, #4

08000c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c90:	d3fb      	bcc.n	8000c8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c92:	f7ff ffd7 	bl	8000c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c96:	f005 f8e7 	bl	8005e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9a:	f7ff fc65 	bl	8000568 <main>
  bx  lr    
 8000c9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ca0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000cac:	080060b4 	.word	0x080060b4
  ldr r2, =_sbss
 8000cb0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000cb4:	20014430 	.word	0x20014430

08000cb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb8:	e7fe      	b.n	8000cb8 <ADC_IRQHandler>
	...

08000cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	; (8000cfc <HAL_Init+0x40>)
 8000cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <HAL_Init+0x40>)
 8000cd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <HAL_Init+0x40>)
 8000cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f000 f8d8 	bl	8000e9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cea:	2000      	movs	r0, #0
 8000cec:	f7ff ff0e 	bl	8000b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf0:	f7ff fee4 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023c00 	.word	0x40023c00

08000d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x20>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_IncTick+0x24>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <HAL_IncTick+0x24>)
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000008 	.word	0x20000008
 8000d24:	20000080 	.word	0x20000080

08000d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <HAL_GetTick+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000080 	.word	0x20000080

08000d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d72:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	60d3      	str	r3, [r2, #12]
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	0a1b      	lsrs	r3, r3, #8
 8000d92:	f003 0307 	and.w	r3, r3, #7
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	db0b      	blt.n	8000dce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	f003 021f 	and.w	r2, r3, #31
 8000dbc:	4907      	ldr	r1, [pc, #28]	; (8000ddc <__NVIC_EnableIRQ+0x38>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	095b      	lsrs	r3, r3, #5
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000e100 	.word	0xe000e100

08000de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	db0a      	blt.n	8000e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	490c      	ldr	r1, [pc, #48]	; (8000e2c <__NVIC_SetPriority+0x4c>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	0112      	lsls	r2, r2, #4
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	440b      	add	r3, r1
 8000e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e08:	e00a      	b.n	8000e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4908      	ldr	r1, [pc, #32]	; (8000e30 <__NVIC_SetPriority+0x50>)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	f003 030f 	and.w	r3, r3, #15
 8000e16:	3b04      	subs	r3, #4
 8000e18:	0112      	lsls	r2, r2, #4
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	761a      	strb	r2, [r3, #24]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f1c3 0307 	rsb	r3, r3, #7
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	bf28      	it	cs
 8000e52:	2304      	movcs	r3, #4
 8000e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	d902      	bls.n	8000e64 <NVIC_EncodePriority+0x30>
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3b03      	subs	r3, #3
 8000e62:	e000      	b.n	8000e66 <NVIC_EncodePriority+0x32>
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	f04f 32ff 	mov.w	r2, #4294967295
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43da      	mvns	r2, r3
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	401a      	ands	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
 8000e86:	43d9      	mvns	r1, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	4313      	orrs	r3, r2
         );
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3724      	adds	r7, #36	; 0x24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ff4c 	bl	8000d40 <__NVIC_SetPriorityGrouping>
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
 8000ebc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec2:	f7ff ff61 	bl	8000d88 <__NVIC_GetPriorityGrouping>
 8000ec6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	68b9      	ldr	r1, [r7, #8]
 8000ecc:	6978      	ldr	r0, [r7, #20]
 8000ece:	f7ff ffb1 	bl	8000e34 <NVIC_EncodePriority>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed8:	4611      	mov	r1, r2
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff80 	bl	8000de0 <__NVIC_SetPriority>
}
 8000ee0:	bf00      	nop
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff54 	bl	8000da4 <__NVIC_EnableIRQ>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
 8000f1e:	e16b      	b.n	80011f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f20:	2201      	movs	r2, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	f040 815a 	bne.w	80011f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d005      	beq.n	8000f56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d130      	bne.n	8000fb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	68da      	ldr	r2, [r3, #12]
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	091b      	lsrs	r3, r3, #4
 8000fa2:	f003 0201 	and.w	r2, r3, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	d017      	beq.n	8000ff4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	2203      	movs	r2, #3
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d123      	bne.n	8001048 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	08da      	lsrs	r2, r3, #3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3208      	adds	r2, #8
 8001008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	220f      	movs	r2, #15
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	691a      	ldr	r2, [r3, #16]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	08da      	lsrs	r2, r3, #3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3208      	adds	r2, #8
 8001042:	69b9      	ldr	r1, [r7, #24]
 8001044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0203 	and.w	r2, r3, #3
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001084:	2b00      	cmp	r3, #0
 8001086:	f000 80b4 	beq.w	80011f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	4b60      	ldr	r3, [pc, #384]	; (8001210 <HAL_GPIO_Init+0x30c>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	4a5f      	ldr	r2, [pc, #380]	; (8001210 <HAL_GPIO_Init+0x30c>)
 8001094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001098:	6453      	str	r3, [r2, #68]	; 0x44
 800109a:	4b5d      	ldr	r3, [pc, #372]	; (8001210 <HAL_GPIO_Init+0x30c>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010a6:	4a5b      	ldr	r2, [pc, #364]	; (8001214 <HAL_GPIO_Init+0x310>)
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	3302      	adds	r3, #2
 80010ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	220f      	movs	r2, #15
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a52      	ldr	r2, [pc, #328]	; (8001218 <HAL_GPIO_Init+0x314>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d02b      	beq.n	800112a <HAL_GPIO_Init+0x226>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a51      	ldr	r2, [pc, #324]	; (800121c <HAL_GPIO_Init+0x318>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d025      	beq.n	8001126 <HAL_GPIO_Init+0x222>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a50      	ldr	r2, [pc, #320]	; (8001220 <HAL_GPIO_Init+0x31c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d01f      	beq.n	8001122 <HAL_GPIO_Init+0x21e>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4f      	ldr	r2, [pc, #316]	; (8001224 <HAL_GPIO_Init+0x320>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d019      	beq.n	800111e <HAL_GPIO_Init+0x21a>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4e      	ldr	r2, [pc, #312]	; (8001228 <HAL_GPIO_Init+0x324>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d013      	beq.n	800111a <HAL_GPIO_Init+0x216>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4d      	ldr	r2, [pc, #308]	; (800122c <HAL_GPIO_Init+0x328>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d00d      	beq.n	8001116 <HAL_GPIO_Init+0x212>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4c      	ldr	r2, [pc, #304]	; (8001230 <HAL_GPIO_Init+0x32c>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d007      	beq.n	8001112 <HAL_GPIO_Init+0x20e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4b      	ldr	r2, [pc, #300]	; (8001234 <HAL_GPIO_Init+0x330>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d101      	bne.n	800110e <HAL_GPIO_Init+0x20a>
 800110a:	2307      	movs	r3, #7
 800110c:	e00e      	b.n	800112c <HAL_GPIO_Init+0x228>
 800110e:	2308      	movs	r3, #8
 8001110:	e00c      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001112:	2306      	movs	r3, #6
 8001114:	e00a      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001116:	2305      	movs	r3, #5
 8001118:	e008      	b.n	800112c <HAL_GPIO_Init+0x228>
 800111a:	2304      	movs	r3, #4
 800111c:	e006      	b.n	800112c <HAL_GPIO_Init+0x228>
 800111e:	2303      	movs	r3, #3
 8001120:	e004      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001122:	2302      	movs	r3, #2
 8001124:	e002      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <HAL_GPIO_Init+0x228>
 800112a:	2300      	movs	r3, #0
 800112c:	69fa      	ldr	r2, [r7, #28]
 800112e:	f002 0203 	and.w	r2, r2, #3
 8001132:	0092      	lsls	r2, r2, #2
 8001134:	4093      	lsls	r3, r2
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800113c:	4935      	ldr	r1, [pc, #212]	; (8001214 <HAL_GPIO_Init+0x310>)
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	3302      	adds	r3, #2
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800114a:	4b3b      	ldr	r3, [pc, #236]	; (8001238 <HAL_GPIO_Init+0x334>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800116e:	4a32      	ldr	r2, [pc, #200]	; (8001238 <HAL_GPIO_Init+0x334>)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001174:	4b30      	ldr	r3, [pc, #192]	; (8001238 <HAL_GPIO_Init+0x334>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001198:	4a27      	ldr	r2, [pc, #156]	; (8001238 <HAL_GPIO_Init+0x334>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800119e:	4b26      	ldr	r3, [pc, #152]	; (8001238 <HAL_GPIO_Init+0x334>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011c2:	4a1d      	ldr	r2, [pc, #116]	; (8001238 <HAL_GPIO_Init+0x334>)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <HAL_GPIO_Init+0x334>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011ec:	4a12      	ldr	r2, [pc, #72]	; (8001238 <HAL_GPIO_Init+0x334>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3301      	adds	r3, #1
 80011f6:	61fb      	str	r3, [r7, #28]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	2b0f      	cmp	r3, #15
 80011fc:	f67f ae90 	bls.w	8000f20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3724      	adds	r7, #36	; 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	40013800 	.word	0x40013800
 8001218:	40020000 	.word	0x40020000
 800121c:	40020400 	.word	0x40020400
 8001220:	40020800 	.word	0x40020800
 8001224:	40020c00 	.word	0x40020c00
 8001228:	40021000 	.word	0x40021000
 800122c:	40021400 	.word	0x40021400
 8001230:	40021800 	.word	0x40021800
 8001234:	40021c00 	.word	0x40021c00
 8001238:	40013c00 	.word	0x40013c00

0800123c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
 8001248:	4613      	mov	r3, r2
 800124a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800124c:	787b      	ldrb	r3, [r7, #1]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001252:	887a      	ldrh	r2, [r7, #2]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001258:	e003      	b.n	8001262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	041a      	lsls	r2, r3, #16
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	619a      	str	r2, [r3, #24]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800126e:	b480      	push	{r7}
 8001270:	b085      	sub	sp, #20
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	460b      	mov	r3, r1
 8001278:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001280:	887a      	ldrh	r2, [r7, #2]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	4013      	ands	r3, r2
 8001286:	041a      	lsls	r2, r3, #16
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	43d9      	mvns	r1, r3
 800128c:	887b      	ldrh	r3, [r7, #2]
 800128e:	400b      	ands	r3, r1
 8001290:	431a      	orrs	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	619a      	str	r2, [r3, #24]
}
 8001296:	bf00      	nop
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e267      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d075      	beq.n	80013ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012c2:	4b88      	ldr	r3, [pc, #544]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	d00c      	beq.n	80012e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ce:	4b85      	ldr	r3, [pc, #532]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d112      	bne.n	8001300 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012da:	4b82      	ldr	r3, [pc, #520]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012e6:	d10b      	bne.n	8001300 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e8:	4b7e      	ldr	r3, [pc, #504]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d05b      	beq.n	80013ac <HAL_RCC_OscConfig+0x108>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d157      	bne.n	80013ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e242      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001308:	d106      	bne.n	8001318 <HAL_RCC_OscConfig+0x74>
 800130a:	4b76      	ldr	r3, [pc, #472]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a75      	ldr	r2, [pc, #468]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	e01d      	b.n	8001354 <HAL_RCC_OscConfig+0xb0>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001320:	d10c      	bne.n	800133c <HAL_RCC_OscConfig+0x98>
 8001322:	4b70      	ldr	r3, [pc, #448]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a6f      	ldr	r2, [pc, #444]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	4b6d      	ldr	r3, [pc, #436]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a6c      	ldr	r2, [pc, #432]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	e00b      	b.n	8001354 <HAL_RCC_OscConfig+0xb0>
 800133c:	4b69      	ldr	r3, [pc, #420]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a68      	ldr	r2, [pc, #416]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	4b66      	ldr	r3, [pc, #408]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a65      	ldr	r2, [pc, #404]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 800134e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d013      	beq.n	8001384 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff fce4 	bl	8000d28 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001364:	f7ff fce0 	bl	8000d28 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b64      	cmp	r3, #100	; 0x64
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e207      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001376:	4b5b      	ldr	r3, [pc, #364]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0f0      	beq.n	8001364 <HAL_RCC_OscConfig+0xc0>
 8001382:	e014      	b.n	80013ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff fcd0 	bl	8000d28 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800138c:	f7ff fccc 	bl	8000d28 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b64      	cmp	r3, #100	; 0x64
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e1f3      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139e:	4b51      	ldr	r3, [pc, #324]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0xe8>
 80013aa:	e000      	b.n	80013ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d063      	beq.n	8001482 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ba:	4b4a      	ldr	r3, [pc, #296]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00b      	beq.n	80013de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013c6:	4b47      	ldr	r3, [pc, #284]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ce:	2b08      	cmp	r3, #8
 80013d0:	d11c      	bne.n	800140c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013d2:	4b44      	ldr	r3, [pc, #272]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d116      	bne.n	800140c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013de:	4b41      	ldr	r3, [pc, #260]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d005      	beq.n	80013f6 <HAL_RCC_OscConfig+0x152>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d001      	beq.n	80013f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e1c7      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f6:	4b3b      	ldr	r3, [pc, #236]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	4937      	ldr	r1, [pc, #220]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001406:	4313      	orrs	r3, r2
 8001408:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140a:	e03a      	b.n	8001482 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d020      	beq.n	8001456 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001414:	4b34      	ldr	r3, [pc, #208]	; (80014e8 <HAL_RCC_OscConfig+0x244>)
 8001416:	2201      	movs	r2, #1
 8001418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141a:	f7ff fc85 	bl	8000d28 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001422:	f7ff fc81 	bl	8000d28 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e1a8      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001434:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f0      	beq.n	8001422 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001440:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	4925      	ldr	r1, [pc, #148]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001450:	4313      	orrs	r3, r2
 8001452:	600b      	str	r3, [r1, #0]
 8001454:	e015      	b.n	8001482 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001456:	4b24      	ldr	r3, [pc, #144]	; (80014e8 <HAL_RCC_OscConfig+0x244>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145c:	f7ff fc64 	bl	8000d28 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001464:	f7ff fc60 	bl	8000d28 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e187      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001476:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	2b00      	cmp	r3, #0
 800148c:	d036      	beq.n	80014fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d016      	beq.n	80014c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_RCC_OscConfig+0x248>)
 8001498:	2201      	movs	r2, #1
 800149a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800149c:	f7ff fc44 	bl	8000d28 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a4:	f7ff fc40 	bl	8000d28 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e167      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80014b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0x200>
 80014c2:	e01b      	b.n	80014fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <HAL_RCC_OscConfig+0x248>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ca:	f7ff fc2d 	bl	8000d28 <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d0:	e00e      	b.n	80014f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d2:	f7ff fc29 	bl	8000d28 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d907      	bls.n	80014f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e150      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
 80014e4:	40023800 	.word	0x40023800
 80014e8:	42470000 	.word	0x42470000
 80014ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f0:	4b88      	ldr	r3, [pc, #544]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80014f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1ea      	bne.n	80014d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	2b00      	cmp	r3, #0
 8001506:	f000 8097 	beq.w	8001638 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800150a:	2300      	movs	r3, #0
 800150c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800150e:	4b81      	ldr	r3, [pc, #516]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10f      	bne.n	800153a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	4b7d      	ldr	r3, [pc, #500]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	4a7c      	ldr	r2, [pc, #496]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001528:	6413      	str	r3, [r2, #64]	; 0x40
 800152a:	4b7a      	ldr	r3, [pc, #488]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001536:	2301      	movs	r3, #1
 8001538:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153a:	4b77      	ldr	r3, [pc, #476]	; (8001718 <HAL_RCC_OscConfig+0x474>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001542:	2b00      	cmp	r3, #0
 8001544:	d118      	bne.n	8001578 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001546:	4b74      	ldr	r3, [pc, #464]	; (8001718 <HAL_RCC_OscConfig+0x474>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a73      	ldr	r2, [pc, #460]	; (8001718 <HAL_RCC_OscConfig+0x474>)
 800154c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001552:	f7ff fbe9 	bl	8000d28 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800155a:	f7ff fbe5 	bl	8000d28 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e10c      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156c:	4b6a      	ldr	r3, [pc, #424]	; (8001718 <HAL_RCC_OscConfig+0x474>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f0      	beq.n	800155a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d106      	bne.n	800158e <HAL_RCC_OscConfig+0x2ea>
 8001580:	4b64      	ldr	r3, [pc, #400]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001584:	4a63      	ldr	r2, [pc, #396]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6713      	str	r3, [r2, #112]	; 0x70
 800158c:	e01c      	b.n	80015c8 <HAL_RCC_OscConfig+0x324>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	2b05      	cmp	r3, #5
 8001594:	d10c      	bne.n	80015b0 <HAL_RCC_OscConfig+0x30c>
 8001596:	4b5f      	ldr	r3, [pc, #380]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159a:	4a5e      	ldr	r2, [pc, #376]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6713      	str	r3, [r2, #112]	; 0x70
 80015a2:	4b5c      	ldr	r3, [pc, #368]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80015a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a6:	4a5b      	ldr	r2, [pc, #364]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6713      	str	r3, [r2, #112]	; 0x70
 80015ae:	e00b      	b.n	80015c8 <HAL_RCC_OscConfig+0x324>
 80015b0:	4b58      	ldr	r3, [pc, #352]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80015b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b4:	4a57      	ldr	r2, [pc, #348]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80015b6:	f023 0301 	bic.w	r3, r3, #1
 80015ba:	6713      	str	r3, [r2, #112]	; 0x70
 80015bc:	4b55      	ldr	r3, [pc, #340]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80015be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c0:	4a54      	ldr	r2, [pc, #336]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80015c2:	f023 0304 	bic.w	r3, r3, #4
 80015c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d015      	beq.n	80015fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d0:	f7ff fbaa 	bl	8000d28 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d6:	e00a      	b.n	80015ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d8:	f7ff fba6 	bl	8000d28 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e0cb      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ee:	4b49      	ldr	r3, [pc, #292]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80015f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0ee      	beq.n	80015d8 <HAL_RCC_OscConfig+0x334>
 80015fa:	e014      	b.n	8001626 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fc:	f7ff fb94 	bl	8000d28 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001602:	e00a      	b.n	800161a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001604:	f7ff fb90 	bl	8000d28 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001612:	4293      	cmp	r3, r2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e0b5      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161a:	4b3e      	ldr	r3, [pc, #248]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 800161c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1ee      	bne.n	8001604 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001626:	7dfb      	ldrb	r3, [r7, #23]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d105      	bne.n	8001638 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800162c:	4b39      	ldr	r3, [pc, #228]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	4a38      	ldr	r2, [pc, #224]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001632:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001636:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 80a1 	beq.w	8001784 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001642:	4b34      	ldr	r3, [pc, #208]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b08      	cmp	r3, #8
 800164c:	d05c      	beq.n	8001708 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d141      	bne.n	80016da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001656:	4b31      	ldr	r3, [pc, #196]	; (800171c <HAL_RCC_OscConfig+0x478>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165c:	f7ff fb64 	bl	8000d28 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001664:	f7ff fb60 	bl	8000d28 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e087      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001676:	4b27      	ldr	r3, [pc, #156]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69da      	ldr	r2, [r3, #28]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001690:	019b      	lsls	r3, r3, #6
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001698:	085b      	lsrs	r3, r3, #1
 800169a:	3b01      	subs	r3, #1
 800169c:	041b      	lsls	r3, r3, #16
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a4:	061b      	lsls	r3, r3, #24
 80016a6:	491b      	ldr	r1, [pc, #108]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ac:	4b1b      	ldr	r3, [pc, #108]	; (800171c <HAL_RCC_OscConfig+0x478>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b2:	f7ff fb39 	bl	8000d28 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ba:	f7ff fb35 	bl	8000d28 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e05c      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016cc:	4b11      	ldr	r3, [pc, #68]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x416>
 80016d8:	e054      	b.n	8001784 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <HAL_RCC_OscConfig+0x478>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fb22 	bl	8000d28 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e8:	f7ff fb1e 	bl	8000d28 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e045      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x444>
 8001706:	e03d      	b.n	8001784 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d107      	bne.n	8001720 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e038      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
 8001714:	40023800 	.word	0x40023800
 8001718:	40007000 	.word	0x40007000
 800171c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <HAL_RCC_OscConfig+0x4ec>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d028      	beq.n	8001780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001738:	429a      	cmp	r2, r3
 800173a:	d121      	bne.n	8001780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001746:	429a      	cmp	r2, r3
 8001748:	d11a      	bne.n	8001780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001750:	4013      	ands	r3, r2
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001756:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001758:	4293      	cmp	r3, r2
 800175a:	d111      	bne.n	8001780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001766:	085b      	lsrs	r3, r3, #1
 8001768:	3b01      	subs	r3, #1
 800176a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800176c:	429a      	cmp	r2, r3
 800176e:	d107      	bne.n	8001780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800177c:	429a      	cmp	r2, r3
 800177e:	d001      	beq.n	8001784 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800

08001794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0cc      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017a8:	4b68      	ldr	r3, [pc, #416]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d90c      	bls.n	80017d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b6:	4b65      	ldr	r3, [pc, #404]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017be:	4b63      	ldr	r3, [pc, #396]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d001      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0b8      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d020      	beq.n	800181e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e8:	4b59      	ldr	r3, [pc, #356]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	4a58      	ldr	r2, [pc, #352]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d005      	beq.n	800180c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001800:	4b53      	ldr	r3, [pc, #332]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	4a52      	ldr	r2, [pc, #328]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800180a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800180c:	4b50      	ldr	r3, [pc, #320]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	494d      	ldr	r1, [pc, #308]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	4313      	orrs	r3, r2
 800181c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d044      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d107      	bne.n	8001842 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001832:	4b47      	ldr	r3, [pc, #284]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d119      	bne.n	8001872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e07f      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d003      	beq.n	8001852 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800184e:	2b03      	cmp	r3, #3
 8001850:	d107      	bne.n	8001862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001852:	4b3f      	ldr	r3, [pc, #252]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d109      	bne.n	8001872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e06f      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001862:	4b3b      	ldr	r3, [pc, #236]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e067      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001872:	4b37      	ldr	r3, [pc, #220]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f023 0203 	bic.w	r2, r3, #3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	4934      	ldr	r1, [pc, #208]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	4313      	orrs	r3, r2
 8001882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001884:	f7ff fa50 	bl	8000d28 <HAL_GetTick>
 8001888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188a:	e00a      	b.n	80018a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800188c:	f7ff fa4c 	bl	8000d28 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	f241 3288 	movw	r2, #5000	; 0x1388
 800189a:	4293      	cmp	r3, r2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e04f      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a2:	4b2b      	ldr	r3, [pc, #172]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 020c 	and.w	r2, r3, #12
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d1eb      	bne.n	800188c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018b4:	4b25      	ldr	r3, [pc, #148]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d20c      	bcs.n	80018dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c2:	4b22      	ldr	r3, [pc, #136]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ca:	4b20      	ldr	r3, [pc, #128]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d001      	beq.n	80018dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e032      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d008      	beq.n	80018fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	4916      	ldr	r1, [pc, #88]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	2b00      	cmp	r3, #0
 8001904:	d009      	beq.n	800191a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001906:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	490e      	ldr	r1, [pc, #56]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	4313      	orrs	r3, r2
 8001918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800191a:	f000 f821 	bl	8001960 <HAL_RCC_GetSysClockFreq>
 800191e:	4602      	mov	r2, r0
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	091b      	lsrs	r3, r3, #4
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	490a      	ldr	r1, [pc, #40]	; (8001954 <HAL_RCC_ClockConfig+0x1c0>)
 800192c:	5ccb      	ldrb	r3, [r1, r3]
 800192e:	fa22 f303 	lsr.w	r3, r2, r3
 8001932:	4a09      	ldr	r2, [pc, #36]	; (8001958 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_RCC_ClockConfig+0x1c8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff f8e6 	bl	8000b0c <HAL_InitTick>

  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40023c00 	.word	0x40023c00
 8001950:	40023800 	.word	0x40023800
 8001954:	08006050 	.word	0x08006050
 8001958:	20000000 	.word	0x20000000
 800195c:	20000004 	.word	0x20000004

08001960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001964:	b094      	sub	sp, #80	; 0x50
 8001966:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	647b      	str	r3, [r7, #68]	; 0x44
 800196c:	2300      	movs	r3, #0
 800196e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001970:	2300      	movs	r3, #0
 8001972:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001978:	4b79      	ldr	r3, [pc, #484]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x200>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 030c 	and.w	r3, r3, #12
 8001980:	2b08      	cmp	r3, #8
 8001982:	d00d      	beq.n	80019a0 <HAL_RCC_GetSysClockFreq+0x40>
 8001984:	2b08      	cmp	r3, #8
 8001986:	f200 80e1 	bhi.w	8001b4c <HAL_RCC_GetSysClockFreq+0x1ec>
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <HAL_RCC_GetSysClockFreq+0x34>
 800198e:	2b04      	cmp	r3, #4
 8001990:	d003      	beq.n	800199a <HAL_RCC_GetSysClockFreq+0x3a>
 8001992:	e0db      	b.n	8001b4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001994:	4b73      	ldr	r3, [pc, #460]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001996:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001998:	e0db      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800199a:	4b73      	ldr	r3, [pc, #460]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x208>)
 800199c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800199e:	e0d8      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019a0:	4b6f      	ldr	r3, [pc, #444]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x200>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019a8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019aa:	4b6d      	ldr	r3, [pc, #436]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x200>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d063      	beq.n	8001a7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b6:	4b6a      	ldr	r3, [pc, #424]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x200>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	099b      	lsrs	r3, r3, #6
 80019bc:	2200      	movs	r2, #0
 80019be:	63bb      	str	r3, [r7, #56]	; 0x38
 80019c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019c8:	633b      	str	r3, [r7, #48]	; 0x30
 80019ca:	2300      	movs	r3, #0
 80019cc:	637b      	str	r3, [r7, #52]	; 0x34
 80019ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019d2:	4622      	mov	r2, r4
 80019d4:	462b      	mov	r3, r5
 80019d6:	f04f 0000 	mov.w	r0, #0
 80019da:	f04f 0100 	mov.w	r1, #0
 80019de:	0159      	lsls	r1, r3, #5
 80019e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019e4:	0150      	lsls	r0, r2, #5
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4621      	mov	r1, r4
 80019ec:	1a51      	subs	r1, r2, r1
 80019ee:	6139      	str	r1, [r7, #16]
 80019f0:	4629      	mov	r1, r5
 80019f2:	eb63 0301 	sbc.w	r3, r3, r1
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	f04f 0300 	mov.w	r3, #0
 8001a00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a04:	4659      	mov	r1, fp
 8001a06:	018b      	lsls	r3, r1, #6
 8001a08:	4651      	mov	r1, sl
 8001a0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a0e:	4651      	mov	r1, sl
 8001a10:	018a      	lsls	r2, r1, #6
 8001a12:	4651      	mov	r1, sl
 8001a14:	ebb2 0801 	subs.w	r8, r2, r1
 8001a18:	4659      	mov	r1, fp
 8001a1a:	eb63 0901 	sbc.w	r9, r3, r1
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a32:	4690      	mov	r8, r2
 8001a34:	4699      	mov	r9, r3
 8001a36:	4623      	mov	r3, r4
 8001a38:	eb18 0303 	adds.w	r3, r8, r3
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	462b      	mov	r3, r5
 8001a40:	eb49 0303 	adc.w	r3, r9, r3
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a52:	4629      	mov	r1, r5
 8001a54:	024b      	lsls	r3, r1, #9
 8001a56:	4621      	mov	r1, r4
 8001a58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	024a      	lsls	r2, r1, #9
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a66:	2200      	movs	r2, #0
 8001a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a70:	f7fe fbf8 	bl	8000264 <__aeabi_uldivmod>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4613      	mov	r3, r2
 8001a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a7c:	e058      	b.n	8001b30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a7e:	4b38      	ldr	r3, [pc, #224]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	099b      	lsrs	r3, r3, #6
 8001a84:	2200      	movs	r2, #0
 8001a86:	4618      	mov	r0, r3
 8001a88:	4611      	mov	r1, r2
 8001a8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a8e:	623b      	str	r3, [r7, #32]
 8001a90:	2300      	movs	r3, #0
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
 8001a94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a98:	4642      	mov	r2, r8
 8001a9a:	464b      	mov	r3, r9
 8001a9c:	f04f 0000 	mov.w	r0, #0
 8001aa0:	f04f 0100 	mov.w	r1, #0
 8001aa4:	0159      	lsls	r1, r3, #5
 8001aa6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aaa:	0150      	lsls	r0, r2, #5
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4641      	mov	r1, r8
 8001ab2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ab6:	4649      	mov	r1, r9
 8001ab8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ac8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001acc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ad0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ad4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	00eb      	lsls	r3, r5, #3
 8001ae2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ae6:	00e2      	lsls	r2, r4, #3
 8001ae8:	4614      	mov	r4, r2
 8001aea:	461d      	mov	r5, r3
 8001aec:	4643      	mov	r3, r8
 8001aee:	18e3      	adds	r3, r4, r3
 8001af0:	603b      	str	r3, [r7, #0]
 8001af2:	464b      	mov	r3, r9
 8001af4:	eb45 0303 	adc.w	r3, r5, r3
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b06:	4629      	mov	r1, r5
 8001b08:	028b      	lsls	r3, r1, #10
 8001b0a:	4621      	mov	r1, r4
 8001b0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b10:	4621      	mov	r1, r4
 8001b12:	028a      	lsls	r2, r1, #10
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
 8001b1e:	61fa      	str	r2, [r7, #28]
 8001b20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b24:	f7fe fb9e 	bl	8000264 <__aeabi_uldivmod>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	0c1b      	lsrs	r3, r3, #16
 8001b36:	f003 0303 	and.w	r3, r3, #3
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b4a:	e002      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3750      	adds	r7, #80	; 0x50
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800
 8001b64:	00f42400 	.word	0x00f42400
 8001b68:	007a1200 	.word	0x007a1200

08001b6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b70:	4b03      	ldr	r3, [pc, #12]	; (8001b80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b72:	681b      	ldr	r3, [r3, #0]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20000000 	.word	0x20000000

08001b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b88:	f7ff fff0 	bl	8001b6c <HAL_RCC_GetHCLKFreq>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	0a9b      	lsrs	r3, r3, #10
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	4903      	ldr	r1, [pc, #12]	; (8001ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b9a:	5ccb      	ldrb	r3, [r1, r3]
 8001b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	08006060 	.word	0x08006060

08001bac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	220f      	movs	r2, #15
 8001bba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_RCC_GetClockConfig+0x5c>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 0203 	and.w	r2, r3, #3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bc8:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <HAL_RCC_GetClockConfig+0x5c>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <HAL_RCC_GetClockConfig+0x5c>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001be0:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <HAL_RCC_GetClockConfig+0x5c>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	08db      	lsrs	r3, r3, #3
 8001be6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bee:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <HAL_RCC_GetClockConfig+0x60>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0207 	and.w	r2, r3, #7
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	601a      	str	r2, [r3, #0]
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40023c00 	.word	0x40023c00

08001c10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e041      	b.n	8001ca6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d106      	bne.n	8001c3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f839 	bl	8001cae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4610      	mov	r0, r2
 8001c50:	f000 f9d8 	bl	8002004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
	...

08001cc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d001      	beq.n	8001cdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e04e      	b.n	8001d7a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0201 	orr.w	r2, r2, #1
 8001cf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a23      	ldr	r2, [pc, #140]	; (8001d88 <HAL_TIM_Base_Start_IT+0xc4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d022      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d06:	d01d      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a1f      	ldr	r2, [pc, #124]	; (8001d8c <HAL_TIM_Base_Start_IT+0xc8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d018      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a1e      	ldr	r2, [pc, #120]	; (8001d90 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d013      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a1c      	ldr	r2, [pc, #112]	; (8001d94 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d00e      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a1b      	ldr	r2, [pc, #108]	; (8001d98 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d009      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a19      	ldr	r2, [pc, #100]	; (8001d9c <HAL_TIM_Base_Start_IT+0xd8>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d004      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a18      	ldr	r2, [pc, #96]	; (8001da0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d111      	bne.n	8001d68 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2b06      	cmp	r3, #6
 8001d54:	d010      	beq.n	8001d78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f042 0201 	orr.w	r2, r2, #1
 8001d64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d66:	e007      	b.n	8001d78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0201 	orr.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	40010000 	.word	0x40010000
 8001d8c:	40000400 	.word	0x40000400
 8001d90:	40000800 	.word	0x40000800
 8001d94:	40000c00 	.word	0x40000c00
 8001d98:	40010400 	.word	0x40010400
 8001d9c:	40014000 	.word	0x40014000
 8001da0:	40001800 	.word	0x40001800

08001da4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d122      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d11b      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f06f 0202 	mvn.w	r2, #2
 8001dd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f8ee 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8001dec:	e005      	b.n	8001dfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f8e0 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f8f1 	bl	8001fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d122      	bne.n	8001e54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d11b      	bne.n	8001e54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f06f 0204 	mvn.w	r2, #4
 8001e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2202      	movs	r2, #2
 8001e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f8c4 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8001e40:	e005      	b.n	8001e4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f8b6 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f8c7 	bl	8001fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	d122      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d11b      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f06f 0208 	mvn.w	r2, #8
 8001e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f89a 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8001e94:	e005      	b.n	8001ea2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f88c 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f89d 	bl	8001fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	f003 0310 	and.w	r3, r3, #16
 8001eb2:	2b10      	cmp	r3, #16
 8001eb4:	d122      	bne.n	8001efc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	2b10      	cmp	r3, #16
 8001ec2:	d11b      	bne.n	8001efc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0210 	mvn.w	r2, #16
 8001ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2208      	movs	r2, #8
 8001ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f870 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8001ee8:	e005      	b.n	8001ef6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f862 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f873 	bl	8001fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d10e      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d107      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0201 	mvn.w	r2, #1
 8001f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7fe fdb0 	bl	8000a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f32:	2b80      	cmp	r3, #128	; 0x80
 8001f34:	d10e      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f40:	2b80      	cmp	r3, #128	; 0x80
 8001f42:	d107      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f902 	bl	8002158 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5e:	2b40      	cmp	r3, #64	; 0x40
 8001f60:	d10e      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f6c:	2b40      	cmp	r3, #64	; 0x40
 8001f6e:	d107      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f838 	bl	8001ff0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	f003 0320 	and.w	r3, r3, #32
 8001f8a:	2b20      	cmp	r3, #32
 8001f8c:	d10e      	bne.n	8001fac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 0320 	and.w	r3, r3, #32
 8001f98:	2b20      	cmp	r3, #32
 8001f9a:	d107      	bne.n	8001fac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0220 	mvn.w	r2, #32
 8001fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f8cc 	bl	8002144 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fac:	bf00      	nop
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a40      	ldr	r2, [pc, #256]	; (8002118 <TIM_Base_SetConfig+0x114>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d013      	beq.n	8002044 <TIM_Base_SetConfig+0x40>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002022:	d00f      	beq.n	8002044 <TIM_Base_SetConfig+0x40>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a3d      	ldr	r2, [pc, #244]	; (800211c <TIM_Base_SetConfig+0x118>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d00b      	beq.n	8002044 <TIM_Base_SetConfig+0x40>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a3c      	ldr	r2, [pc, #240]	; (8002120 <TIM_Base_SetConfig+0x11c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d007      	beq.n	8002044 <TIM_Base_SetConfig+0x40>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a3b      	ldr	r2, [pc, #236]	; (8002124 <TIM_Base_SetConfig+0x120>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d003      	beq.n	8002044 <TIM_Base_SetConfig+0x40>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a3a      	ldr	r2, [pc, #232]	; (8002128 <TIM_Base_SetConfig+0x124>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d108      	bne.n	8002056 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800204a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a2f      	ldr	r2, [pc, #188]	; (8002118 <TIM_Base_SetConfig+0x114>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d02b      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002064:	d027      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a2c      	ldr	r2, [pc, #176]	; (800211c <TIM_Base_SetConfig+0x118>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d023      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a2b      	ldr	r2, [pc, #172]	; (8002120 <TIM_Base_SetConfig+0x11c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d01f      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a2a      	ldr	r2, [pc, #168]	; (8002124 <TIM_Base_SetConfig+0x120>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d01b      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a29      	ldr	r2, [pc, #164]	; (8002128 <TIM_Base_SetConfig+0x124>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d017      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a28      	ldr	r2, [pc, #160]	; (800212c <TIM_Base_SetConfig+0x128>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d013      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a27      	ldr	r2, [pc, #156]	; (8002130 <TIM_Base_SetConfig+0x12c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00f      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a26      	ldr	r2, [pc, #152]	; (8002134 <TIM_Base_SetConfig+0x130>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d00b      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a25      	ldr	r2, [pc, #148]	; (8002138 <TIM_Base_SetConfig+0x134>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d007      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a24      	ldr	r2, [pc, #144]	; (800213c <TIM_Base_SetConfig+0x138>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d003      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a23      	ldr	r2, [pc, #140]	; (8002140 <TIM_Base_SetConfig+0x13c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d108      	bne.n	80020c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <TIM_Base_SetConfig+0x114>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d003      	beq.n	80020fc <TIM_Base_SetConfig+0xf8>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a0c      	ldr	r2, [pc, #48]	; (8002128 <TIM_Base_SetConfig+0x124>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d103      	bne.n	8002104 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	691a      	ldr	r2, [r3, #16]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	615a      	str	r2, [r3, #20]
}
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40010000 	.word	0x40010000
 800211c:	40000400 	.word	0x40000400
 8002120:	40000800 	.word	0x40000800
 8002124:	40000c00 	.word	0x40000c00
 8002128:	40010400 	.word	0x40010400
 800212c:	40014000 	.word	0x40014000
 8002130:	40014400 	.word	0x40014400
 8002134:	40014800 	.word	0x40014800
 8002138:	40001800 	.word	0x40001800
 800213c:	40001c00 	.word	0x40001c00
 8002140:	40002000 	.word	0x40002000

08002144 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f103 0208 	add.w	r2, r3, #8
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f04f 32ff 	mov.w	r2, #4294967295
 8002184:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f103 0208 	add.w	r2, r3, #8
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f103 0208 	add.w	r2, r3, #8
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80021c6:	b480      	push	{r7}
 80021c8:	b085      	sub	sp, #20
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	601a      	str	r2, [r3, #0]
}
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800220e:	b480      	push	{r7}
 8002210:	b085      	sub	sp, #20
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002224:	d103      	bne.n	800222e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	e00c      	b.n	8002248 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3308      	adds	r3, #8
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	e002      	b.n	800223c <vListInsert+0x2e>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	429a      	cmp	r2, r3
 8002246:	d2f6      	bcs.n	8002236 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	601a      	str	r2, [r3, #0]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6892      	ldr	r2, [r2, #8]
 8002296:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6852      	ldr	r2, [r2, #4]
 80022a0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d103      	bne.n	80022b4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	1e5a      	subs	r2, r3, #1
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08c      	sub	sp, #48	; 0x30
 80022d8:	af04      	add	r7, sp, #16
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	4613      	mov	r3, r2
 80022e2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80022e4:	88fb      	ldrh	r3, [r7, #6]
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f001 f82f 	bl	800334c <pvPortMalloc>
 80022ee:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00e      	beq.n	8002314 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80022f6:	2058      	movs	r0, #88	; 0x58
 80022f8:	f001 f828 	bl	800334c <pvPortMalloc>
 80022fc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	631a      	str	r2, [r3, #48]	; 0x30
 800230a:	e005      	b.n	8002318 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800230c:	6978      	ldr	r0, [r7, #20]
 800230e:	f001 f8fd 	bl	800350c <vPortFree>
 8002312:	e001      	b.n	8002318 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d013      	beq.n	8002346 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800231e:	88fa      	ldrh	r2, [r7, #6]
 8002320:	2300      	movs	r3, #0
 8002322:	9303      	str	r3, [sp, #12]
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	9302      	str	r3, [sp, #8]
 8002328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68b9      	ldr	r1, [r7, #8]
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f000 f80e 	bl	8002356 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800233a:	69f8      	ldr	r0, [r7, #28]
 800233c:	f000 f8a2 	bl	8002484 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002340:	2301      	movs	r3, #1
 8002342:	61bb      	str	r3, [r7, #24]
 8002344:	e002      	b.n	800234c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002346:	f04f 33ff 	mov.w	r3, #4294967295
 800234a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800234c:	69bb      	ldr	r3, [r7, #24]
    }
 800234e:	4618      	mov	r0, r3
 8002350:	3720      	adds	r7, #32
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b088      	sub	sp, #32
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
 8002362:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002366:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	461a      	mov	r2, r3
 800236e:	21a5      	movs	r1, #165	; 0xa5
 8002370:	f003 fdbc 	bl	8005eec <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800237e:	3b01      	subs	r3, #1
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	f023 0307 	bic.w	r3, r3, #7
 800238c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00a      	beq.n	80023ae <prvInitialiseNewTask+0x58>
        __asm volatile
 8002398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800239c:	f383 8811 	msr	BASEPRI, r3
 80023a0:	f3bf 8f6f 	isb	sy
 80023a4:	f3bf 8f4f 	dsb	sy
 80023a8:	617b      	str	r3, [r7, #20]
    }
 80023aa:	bf00      	nop
 80023ac:	e7fe      	b.n	80023ac <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d01f      	beq.n	80023f4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023b4:	2300      	movs	r3, #0
 80023b6:	61fb      	str	r3, [r7, #28]
 80023b8:	e012      	b.n	80023e0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	4413      	add	r3, r2
 80023c0:	7819      	ldrb	r1, [r3, #0]
 80023c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	4413      	add	r3, r2
 80023c8:	3334      	adds	r3, #52	; 0x34
 80023ca:	460a      	mov	r2, r1
 80023cc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	4413      	add	r3, r2
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d006      	beq.n	80023e8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3301      	adds	r3, #1
 80023de:	61fb      	str	r3, [r7, #28]
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	2b09      	cmp	r3, #9
 80023e4:	d9e9      	bls.n	80023ba <prvInitialiseNewTask+0x64>
 80023e6:	e000      	b.n	80023ea <prvInitialiseNewTask+0x94>
            {
                break;
 80023e8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80023ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80023f2:	e003      	b.n	80023fc <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80023f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80023fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d901      	bls.n	8002406 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002402:	2304      	movs	r3, #4
 8002404:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002408:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800240a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800240c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002410:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002414:	2200      	movs	r2, #0
 8002416:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241a:	3304      	adds	r3, #4
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff fec5 	bl	80021ac <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002424:	3318      	adds	r3, #24
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fec0 	bl	80021ac <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800242c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002430:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002434:	f1c3 0205 	rsb	r2, r3, #5
 8002438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800243c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002440:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002444:	3350      	adds	r3, #80	; 0x50
 8002446:	2204      	movs	r2, #4
 8002448:	2100      	movs	r1, #0
 800244a:	4618      	mov	r0, r3
 800244c:	f003 fd4e 	bl	8005eec <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002452:	3354      	adds	r3, #84	; 0x54
 8002454:	2201      	movs	r2, #1
 8002456:	2100      	movs	r1, #0
 8002458:	4618      	mov	r0, r3
 800245a:	f003 fd47 	bl	8005eec <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	68f9      	ldr	r1, [r7, #12]
 8002462:	69b8      	ldr	r0, [r7, #24]
 8002464:	f000 fc98 	bl	8002d98 <pxPortInitialiseStack>
 8002468:	4602      	mov	r2, r0
 800246a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800246e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002476:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002478:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800247a:	bf00      	nop
 800247c:	3720      	adds	r7, #32
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002484:	b5b0      	push	{r4, r5, r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af02      	add	r7, sp, #8
 800248a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800248c:	f000 fe32 	bl	80030f4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002490:	4b3b      	ldr	r3, [pc, #236]	; (8002580 <prvAddNewTaskToReadyList+0xfc>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	3301      	adds	r3, #1
 8002496:	4a3a      	ldr	r2, [pc, #232]	; (8002580 <prvAddNewTaskToReadyList+0xfc>)
 8002498:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800249a:	4b3a      	ldr	r3, [pc, #232]	; (8002584 <prvAddNewTaskToReadyList+0x100>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d109      	bne.n	80024b6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80024a2:	4a38      	ldr	r2, [pc, #224]	; (8002584 <prvAddNewTaskToReadyList+0x100>)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80024a8:	4b35      	ldr	r3, [pc, #212]	; (8002580 <prvAddNewTaskToReadyList+0xfc>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d110      	bne.n	80024d2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80024b0:	f000 fb60 	bl	8002b74 <prvInitialiseTaskLists>
 80024b4:	e00d      	b.n	80024d2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80024b6:	4b34      	ldr	r3, [pc, #208]	; (8002588 <prvAddNewTaskToReadyList+0x104>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d109      	bne.n	80024d2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80024be:	4b31      	ldr	r3, [pc, #196]	; (8002584 <prvAddNewTaskToReadyList+0x100>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d802      	bhi.n	80024d2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80024cc:	4a2d      	ldr	r2, [pc, #180]	; (8002584 <prvAddNewTaskToReadyList+0x100>)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80024d2:	4b2e      	ldr	r3, [pc, #184]	; (800258c <prvAddNewTaskToReadyList+0x108>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	3301      	adds	r3, #1
 80024d8:	4a2c      	ldr	r2, [pc, #176]	; (800258c <prvAddNewTaskToReadyList+0x108>)
 80024da:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80024dc:	4b2b      	ldr	r3, [pc, #172]	; (800258c <prvAddNewTaskToReadyList+0x108>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d016      	beq.n	8002518 <prvAddNewTaskToReadyList+0x94>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f003 fa1b 	bl	8005928 <SEGGER_SYSVIEW_OnTaskCreate>
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	461d      	mov	r5, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	461c      	mov	r4, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	1ae3      	subs	r3, r4, r3
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	462b      	mov	r3, r5
 8002514:	f001 f9c8 	bl	80038a8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4618      	mov	r0, r3
 800251c:	f003 fa88 	bl	8005a30 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002524:	2201      	movs	r2, #1
 8002526:	409a      	lsls	r2, r3
 8002528:	4b19      	ldr	r3, [pc, #100]	; (8002590 <prvAddNewTaskToReadyList+0x10c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4313      	orrs	r3, r2
 800252e:	4a18      	ldr	r2, [pc, #96]	; (8002590 <prvAddNewTaskToReadyList+0x10c>)
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4a15      	ldr	r2, [pc, #84]	; (8002594 <prvAddNewTaskToReadyList+0x110>)
 8002540:	441a      	add	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3304      	adds	r3, #4
 8002546:	4619      	mov	r1, r3
 8002548:	4610      	mov	r0, r2
 800254a:	f7ff fe3c 	bl	80021c6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800254e:	f000 fe01 	bl	8003154 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002552:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <prvAddNewTaskToReadyList+0x104>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00e      	beq.n	8002578 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800255a:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <prvAddNewTaskToReadyList+0x100>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002564:	429a      	cmp	r2, r3
 8002566:	d207      	bcs.n	8002578 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002568:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <prvAddNewTaskToReadyList+0x114>)
 800256a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	f3bf 8f4f 	dsb	sy
 8002574:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002578:	bf00      	nop
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bdb0      	pop	{r4, r5, r7, pc}
 8002580:	2000015c 	.word	0x2000015c
 8002584:	20000084 	.word	0x20000084
 8002588:	20000168 	.word	0x20000168
 800258c:	20000178 	.word	0x20000178
 8002590:	20000164 	.word	0x20000164
 8002594:	20000088 	.word	0x20000088
 8002598:	e000ed04 	.word	0xe000ed04

0800259c <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 800259c:	b580      	push	{r7, lr}
 800259e:	b08a      	sub	sp, #40	; 0x28
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80025a6:	2300      	movs	r3, #0
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10a      	bne.n	80025c6 <xTaskDelayUntil+0x2a>
        __asm volatile
 80025b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b4:	f383 8811 	msr	BASEPRI, r3
 80025b8:	f3bf 8f6f 	isb	sy
 80025bc:	f3bf 8f4f 	dsb	sy
 80025c0:	617b      	str	r3, [r7, #20]
    }
 80025c2:	bf00      	nop
 80025c4:	e7fe      	b.n	80025c4 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10a      	bne.n	80025e2 <xTaskDelayUntil+0x46>
        __asm volatile
 80025cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d0:	f383 8811 	msr	BASEPRI, r3
 80025d4:	f3bf 8f6f 	isb	sy
 80025d8:	f3bf 8f4f 	dsb	sy
 80025dc:	613b      	str	r3, [r7, #16]
    }
 80025de:	bf00      	nop
 80025e0:	e7fe      	b.n	80025e0 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 80025e2:	4b2c      	ldr	r3, [pc, #176]	; (8002694 <xTaskDelayUntil+0xf8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00a      	beq.n	8002600 <xTaskDelayUntil+0x64>
        __asm volatile
 80025ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ee:	f383 8811 	msr	BASEPRI, r3
 80025f2:	f3bf 8f6f 	isb	sy
 80025f6:	f3bf 8f4f 	dsb	sy
 80025fa:	60fb      	str	r3, [r7, #12]
    }
 80025fc:	bf00      	nop
 80025fe:	e7fe      	b.n	80025fe <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 8002600:	f000 f8aa 	bl	8002758 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8002604:	4b24      	ldr	r3, [pc, #144]	; (8002698 <xTaskDelayUntil+0xfc>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	4413      	add	r3, r2
 8002612:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6a3a      	ldr	r2, [r7, #32]
 800261a:	429a      	cmp	r2, r3
 800261c:	d20b      	bcs.n	8002636 <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	69fa      	ldr	r2, [r7, #28]
 8002624:	429a      	cmp	r2, r3
 8002626:	d211      	bcs.n	800264c <xTaskDelayUntil+0xb0>
 8002628:	69fa      	ldr	r2, [r7, #28]
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	429a      	cmp	r2, r3
 800262e:	d90d      	bls.n	800264c <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8002630:	2301      	movs	r3, #1
 8002632:	627b      	str	r3, [r7, #36]	; 0x24
 8002634:	e00a      	b.n	800264c <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	69fa      	ldr	r2, [r7, #28]
 800263c:	429a      	cmp	r2, r3
 800263e:	d303      	bcc.n	8002648 <xTaskDelayUntil+0xac>
 8002640:	69fa      	ldr	r2, [r7, #28]
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	429a      	cmp	r2, r3
 8002646:	d901      	bls.n	800264c <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8002648:	2301      	movs	r3, #1
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69fa      	ldr	r2, [r7, #28]
 8002650:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	2b00      	cmp	r3, #0
 8002656:	d009      	beq.n	800266c <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8002658:	2024      	movs	r0, #36	; 0x24
 800265a:	f002 fd51 	bl	8005100 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800265e:	69fa      	ldr	r2, [r7, #28]
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2100      	movs	r1, #0
 8002666:	4618      	mov	r0, r3
 8002668:	f000 fb1e 	bl	8002ca8 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800266c:	f000 f882 	bl	8002774 <xTaskResumeAll>
 8002670:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d107      	bne.n	8002688 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 8002678:	4b08      	ldr	r3, [pc, #32]	; (800269c <xTaskDelayUntil+0x100>)
 800267a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	f3bf 8f4f 	dsb	sy
 8002684:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800268a:	4618      	mov	r0, r3
 800268c:	3728      	adds	r7, #40	; 0x28
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20000184 	.word	0x20000184
 8002698:	20000160 	.word	0x20000160
 800269c:	e000ed04 	.word	0xe000ed04

080026a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80026a6:	4b24      	ldr	r3, [pc, #144]	; (8002738 <vTaskStartScheduler+0x98>)
 80026a8:	9301      	str	r3, [sp, #4]
 80026aa:	2300      	movs	r3, #0
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	2300      	movs	r3, #0
 80026b0:	2282      	movs	r2, #130	; 0x82
 80026b2:	4922      	ldr	r1, [pc, #136]	; (800273c <vTaskStartScheduler+0x9c>)
 80026b4:	4822      	ldr	r0, [pc, #136]	; (8002740 <vTaskStartScheduler+0xa0>)
 80026b6:	f7ff fe0d 	bl	80022d4 <xTaskCreate>
 80026ba:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d124      	bne.n	800270c <vTaskStartScheduler+0x6c>
        __asm volatile
 80026c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c6:	f383 8811 	msr	BASEPRI, r3
 80026ca:	f3bf 8f6f 	isb	sy
 80026ce:	f3bf 8f4f 	dsb	sy
 80026d2:	60bb      	str	r3, [r7, #8]
    }
 80026d4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80026d6:	4b1b      	ldr	r3, [pc, #108]	; (8002744 <vTaskStartScheduler+0xa4>)
 80026d8:	f04f 32ff 	mov.w	r2, #4294967295
 80026dc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80026de:	4b1a      	ldr	r3, [pc, #104]	; (8002748 <vTaskStartScheduler+0xa8>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80026e4:	4b19      	ldr	r3, [pc, #100]	; (800274c <vTaskStartScheduler+0xac>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80026ea:	4b19      	ldr	r3, [pc, #100]	; (8002750 <vTaskStartScheduler+0xb0>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	4b12      	ldr	r3, [pc, #72]	; (8002738 <vTaskStartScheduler+0x98>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d102      	bne.n	80026fc <vTaskStartScheduler+0x5c>
 80026f6:	f003 f8fb 	bl	80058f0 <SEGGER_SYSVIEW_OnIdle>
 80026fa:	e004      	b.n	8002706 <vTaskStartScheduler+0x66>
 80026fc:	4b14      	ldr	r3, [pc, #80]	; (8002750 <vTaskStartScheduler+0xb0>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f003 f953 	bl	80059ac <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002706:	f000 fbd5 	bl	8002eb4 <xPortStartScheduler>
 800270a:	e00e      	b.n	800272a <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002712:	d10a      	bne.n	800272a <vTaskStartScheduler+0x8a>
        __asm volatile
 8002714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002718:	f383 8811 	msr	BASEPRI, r3
 800271c:	f3bf 8f6f 	isb	sy
 8002720:	f3bf 8f4f 	dsb	sy
 8002724:	607b      	str	r3, [r7, #4]
    }
 8002726:	bf00      	nop
 8002728:	e7fe      	b.n	8002728 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800272a:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <vTaskStartScheduler+0xb4>)
 800272c:	681b      	ldr	r3, [r3, #0]
}
 800272e:	bf00      	nop
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000180 	.word	0x20000180
 800273c:	08005f88 	.word	0x08005f88
 8002740:	08002b45 	.word	0x08002b45
 8002744:	2000017c 	.word	0x2000017c
 8002748:	20000168 	.word	0x20000168
 800274c:	20000160 	.word	0x20000160
 8002750:	20000084 	.word	0x20000084
 8002754:	2000000c 	.word	0x2000000c

08002758 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800275c:	4b04      	ldr	r3, [pc, #16]	; (8002770 <vTaskSuspendAll+0x18>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	3301      	adds	r3, #1
 8002762:	4a03      	ldr	r2, [pc, #12]	; (8002770 <vTaskSuspendAll+0x18>)
 8002764:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002766:	bf00      	nop
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	20000184 	.word	0x20000184

08002774 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800277e:	2300      	movs	r3, #0
 8002780:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002782:	4b43      	ldr	r3, [pc, #268]	; (8002890 <xTaskResumeAll+0x11c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10a      	bne.n	80027a0 <xTaskResumeAll+0x2c>
        __asm volatile
 800278a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278e:	f383 8811 	msr	BASEPRI, r3
 8002792:	f3bf 8f6f 	isb	sy
 8002796:	f3bf 8f4f 	dsb	sy
 800279a:	603b      	str	r3, [r7, #0]
    }
 800279c:	bf00      	nop
 800279e:	e7fe      	b.n	800279e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80027a0:	f000 fca8 	bl	80030f4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80027a4:	4b3a      	ldr	r3, [pc, #232]	; (8002890 <xTaskResumeAll+0x11c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	3b01      	subs	r3, #1
 80027aa:	4a39      	ldr	r2, [pc, #228]	; (8002890 <xTaskResumeAll+0x11c>)
 80027ac:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027ae:	4b38      	ldr	r3, [pc, #224]	; (8002890 <xTaskResumeAll+0x11c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d165      	bne.n	8002882 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80027b6:	4b37      	ldr	r3, [pc, #220]	; (8002894 <xTaskResumeAll+0x120>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d061      	beq.n	8002882 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027be:	e032      	b.n	8002826 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027c0:	4b35      	ldr	r3, [pc, #212]	; (8002898 <xTaskResumeAll+0x124>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	3318      	adds	r3, #24
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff fd57 	bl	8002280 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3304      	adds	r3, #4
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fd52 	bl	8002280 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4618      	mov	r0, r3
 80027e0:	f003 f926 	bl	8005a30 <SEGGER_SYSVIEW_OnTaskStartReady>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	2201      	movs	r2, #1
 80027ea:	409a      	lsls	r2, r3
 80027ec:	4b2b      	ldr	r3, [pc, #172]	; (800289c <xTaskResumeAll+0x128>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	4a2a      	ldr	r2, [pc, #168]	; (800289c <xTaskResumeAll+0x128>)
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027fa:	4613      	mov	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4a27      	ldr	r2, [pc, #156]	; (80028a0 <xTaskResumeAll+0x12c>)
 8002804:	441a      	add	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	3304      	adds	r3, #4
 800280a:	4619      	mov	r1, r3
 800280c:	4610      	mov	r0, r2
 800280e:	f7ff fcda 	bl	80021c6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002816:	4b23      	ldr	r3, [pc, #140]	; (80028a4 <xTaskResumeAll+0x130>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281c:	429a      	cmp	r2, r3
 800281e:	d302      	bcc.n	8002826 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002820:	4b21      	ldr	r3, [pc, #132]	; (80028a8 <xTaskResumeAll+0x134>)
 8002822:	2201      	movs	r2, #1
 8002824:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002826:	4b1c      	ldr	r3, [pc, #112]	; (8002898 <xTaskResumeAll+0x124>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1c8      	bne.n	80027c0 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002834:	f000 fa1c 	bl	8002c70 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002838:	4b1c      	ldr	r3, [pc, #112]	; (80028ac <xTaskResumeAll+0x138>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d010      	beq.n	8002866 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002844:	f000 f858 	bl	80028f8 <xTaskIncrementTick>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d002      	beq.n	8002854 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800284e:	4b16      	ldr	r3, [pc, #88]	; (80028a8 <xTaskResumeAll+0x134>)
 8002850:	2201      	movs	r2, #1
 8002852:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3b01      	subs	r3, #1
 8002858:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f1      	bne.n	8002844 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002860:	4b12      	ldr	r3, [pc, #72]	; (80028ac <xTaskResumeAll+0x138>)
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002866:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <xTaskResumeAll+0x134>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d009      	beq.n	8002882 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800286e:	2301      	movs	r3, #1
 8002870:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002872:	4b0f      	ldr	r3, [pc, #60]	; (80028b0 <xTaskResumeAll+0x13c>)
 8002874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	f3bf 8f4f 	dsb	sy
 800287e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002882:	f000 fc67 	bl	8003154 <vPortExitCritical>

    return xAlreadyYielded;
 8002886:	68bb      	ldr	r3, [r7, #8]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20000184 	.word	0x20000184
 8002894:	2000015c 	.word	0x2000015c
 8002898:	2000011c 	.word	0x2000011c
 800289c:	20000164 	.word	0x20000164
 80028a0:	20000088 	.word	0x20000088
 80028a4:	20000084 	.word	0x20000084
 80028a8:	20000170 	.word	0x20000170
 80028ac:	2000016c 	.word	0x2000016c
 80028b0:	e000ed04 	.word	0xe000ed04

080028b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80028ba:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <xTaskGetTickCount+0x1c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80028c0:	687b      	ldr	r3, [r7, #4]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	20000160 	.word	0x20000160

080028d4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028da:	f000 fcf7 	bl	80032cc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80028de:	2300      	movs	r3, #0
 80028e0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80028e2:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <xTaskGetTickCountFromISR+0x20>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80028e8:	683b      	ldr	r3, [r7, #0]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20000160 	.word	0x20000160

080028f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002902:	4b50      	ldr	r3, [pc, #320]	; (8002a44 <xTaskIncrementTick+0x14c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	f040 8092 	bne.w	8002a30 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800290c:	4b4e      	ldr	r3, [pc, #312]	; (8002a48 <xTaskIncrementTick+0x150>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	3301      	adds	r3, #1
 8002912:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002914:	4a4c      	ldr	r2, [pc, #304]	; (8002a48 <xTaskIncrementTick+0x150>)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d120      	bne.n	8002962 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002920:	4b4a      	ldr	r3, [pc, #296]	; (8002a4c <xTaskIncrementTick+0x154>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00a      	beq.n	8002940 <xTaskIncrementTick+0x48>
        __asm volatile
 800292a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800292e:	f383 8811 	msr	BASEPRI, r3
 8002932:	f3bf 8f6f 	isb	sy
 8002936:	f3bf 8f4f 	dsb	sy
 800293a:	603b      	str	r3, [r7, #0]
    }
 800293c:	bf00      	nop
 800293e:	e7fe      	b.n	800293e <xTaskIncrementTick+0x46>
 8002940:	4b42      	ldr	r3, [pc, #264]	; (8002a4c <xTaskIncrementTick+0x154>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	4b42      	ldr	r3, [pc, #264]	; (8002a50 <xTaskIncrementTick+0x158>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a40      	ldr	r2, [pc, #256]	; (8002a4c <xTaskIncrementTick+0x154>)
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	4a40      	ldr	r2, [pc, #256]	; (8002a50 <xTaskIncrementTick+0x158>)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6013      	str	r3, [r2, #0]
 8002954:	4b3f      	ldr	r3, [pc, #252]	; (8002a54 <xTaskIncrementTick+0x15c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	3301      	adds	r3, #1
 800295a:	4a3e      	ldr	r2, [pc, #248]	; (8002a54 <xTaskIncrementTick+0x15c>)
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	f000 f987 	bl	8002c70 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002962:	4b3d      	ldr	r3, [pc, #244]	; (8002a58 <xTaskIncrementTick+0x160>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	429a      	cmp	r2, r3
 800296a:	d34c      	bcc.n	8002a06 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800296c:	4b37      	ldr	r3, [pc, #220]	; (8002a4c <xTaskIncrementTick+0x154>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d104      	bne.n	8002980 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002976:	4b38      	ldr	r3, [pc, #224]	; (8002a58 <xTaskIncrementTick+0x160>)
 8002978:	f04f 32ff 	mov.w	r2, #4294967295
 800297c:	601a      	str	r2, [r3, #0]
                    break;
 800297e:	e042      	b.n	8002a06 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002980:	4b32      	ldr	r3, [pc, #200]	; (8002a4c <xTaskIncrementTick+0x154>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	429a      	cmp	r2, r3
 8002996:	d203      	bcs.n	80029a0 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002998:	4a2f      	ldr	r2, [pc, #188]	; (8002a58 <xTaskIncrementTick+0x160>)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800299e:	e032      	b.n	8002a06 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	3304      	adds	r3, #4
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff fc6b 	bl	8002280 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d004      	beq.n	80029bc <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	3318      	adds	r3, #24
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff fc62 	bl	8002280 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	4618      	mov	r0, r3
 80029c0:	f003 f836 	bl	8005a30 <SEGGER_SYSVIEW_OnTaskStartReady>
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c8:	2201      	movs	r2, #1
 80029ca:	409a      	lsls	r2, r3
 80029cc:	4b23      	ldr	r3, [pc, #140]	; (8002a5c <xTaskIncrementTick+0x164>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	4a22      	ldr	r2, [pc, #136]	; (8002a5c <xTaskIncrementTick+0x164>)
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4a1f      	ldr	r2, [pc, #124]	; (8002a60 <xTaskIncrementTick+0x168>)
 80029e4:	441a      	add	r2, r3
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	3304      	adds	r3, #4
 80029ea:	4619      	mov	r1, r3
 80029ec:	4610      	mov	r0, r2
 80029ee:	f7ff fbea 	bl	80021c6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f6:	4b1b      	ldr	r3, [pc, #108]	; (8002a64 <xTaskIncrementTick+0x16c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d3b5      	bcc.n	800296c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002a00:	2301      	movs	r3, #1
 8002a02:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a04:	e7b2      	b.n	800296c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002a06:	4b17      	ldr	r3, [pc, #92]	; (8002a64 <xTaskIncrementTick+0x16c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a0c:	4914      	ldr	r1, [pc, #80]	; (8002a60 <xTaskIncrementTick+0x168>)
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d901      	bls.n	8002a22 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002a22:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <xTaskIncrementTick+0x170>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d007      	beq.n	8002a3a <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	617b      	str	r3, [r7, #20]
 8002a2e:	e004      	b.n	8002a3a <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002a30:	4b0e      	ldr	r3, [pc, #56]	; (8002a6c <xTaskIncrementTick+0x174>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	3301      	adds	r3, #1
 8002a36:	4a0d      	ldr	r2, [pc, #52]	; (8002a6c <xTaskIncrementTick+0x174>)
 8002a38:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002a3a:	697b      	ldr	r3, [r7, #20]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	20000184 	.word	0x20000184
 8002a48:	20000160 	.word	0x20000160
 8002a4c:	20000114 	.word	0x20000114
 8002a50:	20000118 	.word	0x20000118
 8002a54:	20000174 	.word	0x20000174
 8002a58:	2000017c 	.word	0x2000017c
 8002a5c:	20000164 	.word	0x20000164
 8002a60:	20000088 	.word	0x20000088
 8002a64:	20000084 	.word	0x20000084
 8002a68:	20000170 	.word	0x20000170
 8002a6c:	2000016c 	.word	0x2000016c

08002a70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002a76:	4b2d      	ldr	r3, [pc, #180]	; (8002b2c <vTaskSwitchContext+0xbc>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002a7e:	4b2c      	ldr	r3, [pc, #176]	; (8002b30 <vTaskSwitchContext+0xc0>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002a84:	e04d      	b.n	8002b22 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002a86:	4b2a      	ldr	r3, [pc, #168]	; (8002b30 <vTaskSwitchContext+0xc0>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a8c:	4b29      	ldr	r3, [pc, #164]	; (8002b34 <vTaskSwitchContext+0xc4>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	fab3 f383 	clz	r3, r3
 8002a98:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002a9a:	7afb      	ldrb	r3, [r7, #11]
 8002a9c:	f1c3 031f 	rsb	r3, r3, #31
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	4925      	ldr	r1, [pc, #148]	; (8002b38 <vTaskSwitchContext+0xc8>)
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	440b      	add	r3, r1
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10a      	bne.n	8002acc <vTaskSwitchContext+0x5c>
        __asm volatile
 8002ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aba:	f383 8811 	msr	BASEPRI, r3
 8002abe:	f3bf 8f6f 	isb	sy
 8002ac2:	f3bf 8f4f 	dsb	sy
 8002ac6:	607b      	str	r3, [r7, #4]
    }
 8002ac8:	bf00      	nop
 8002aca:	e7fe      	b.n	8002aca <vTaskSwitchContext+0x5a>
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4a18      	ldr	r2, [pc, #96]	; (8002b38 <vTaskSwitchContext+0xc8>)
 8002ad8:	4413      	add	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	3308      	adds	r3, #8
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d104      	bne.n	8002afc <vTaskSwitchContext+0x8c>
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	605a      	str	r2, [r3, #4]
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	4a0e      	ldr	r2, [pc, #56]	; (8002b3c <vTaskSwitchContext+0xcc>)
 8002b04:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002b06:	4b0d      	ldr	r3, [pc, #52]	; (8002b3c <vTaskSwitchContext+0xcc>)
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <vTaskSwitchContext+0xd0>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d102      	bne.n	8002b18 <vTaskSwitchContext+0xa8>
 8002b12:	f002 feed 	bl	80058f0 <SEGGER_SYSVIEW_OnIdle>
}
 8002b16:	e004      	b.n	8002b22 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002b18:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <vTaskSwitchContext+0xcc>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f002 ff45 	bl	80059ac <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002b22:	bf00      	nop
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000184 	.word	0x20000184
 8002b30:	20000170 	.word	0x20000170
 8002b34:	20000164 	.word	0x20000164
 8002b38:	20000088 	.word	0x20000088
 8002b3c:	20000084 	.word	0x20000084
 8002b40:	20000180 	.word	0x20000180

08002b44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002b4c:	f000 f852 	bl	8002bf4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002b50:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <prvIdleTask+0x28>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d9f9      	bls.n	8002b4c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002b58:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <prvIdleTask+0x2c>)
 8002b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	f3bf 8f4f 	dsb	sy
 8002b64:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002b68:	e7f0      	b.n	8002b4c <prvIdleTask+0x8>
 8002b6a:	bf00      	nop
 8002b6c:	20000088 	.word	0x20000088
 8002b70:	e000ed04 	.word	0xe000ed04

08002b74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	607b      	str	r3, [r7, #4]
 8002b7e:	e00c      	b.n	8002b9a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4a12      	ldr	r2, [pc, #72]	; (8002bd4 <prvInitialiseTaskLists+0x60>)
 8002b8c:	4413      	add	r3, r2
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff faec 	bl	800216c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3301      	adds	r3, #1
 8002b98:	607b      	str	r3, [r7, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d9ef      	bls.n	8002b80 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002ba0:	480d      	ldr	r0, [pc, #52]	; (8002bd8 <prvInitialiseTaskLists+0x64>)
 8002ba2:	f7ff fae3 	bl	800216c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002ba6:	480d      	ldr	r0, [pc, #52]	; (8002bdc <prvInitialiseTaskLists+0x68>)
 8002ba8:	f7ff fae0 	bl	800216c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002bac:	480c      	ldr	r0, [pc, #48]	; (8002be0 <prvInitialiseTaskLists+0x6c>)
 8002bae:	f7ff fadd 	bl	800216c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002bb2:	480c      	ldr	r0, [pc, #48]	; (8002be4 <prvInitialiseTaskLists+0x70>)
 8002bb4:	f7ff fada 	bl	800216c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002bb8:	480b      	ldr	r0, [pc, #44]	; (8002be8 <prvInitialiseTaskLists+0x74>)
 8002bba:	f7ff fad7 	bl	800216c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002bbe:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <prvInitialiseTaskLists+0x78>)
 8002bc0:	4a05      	ldr	r2, [pc, #20]	; (8002bd8 <prvInitialiseTaskLists+0x64>)
 8002bc2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002bc4:	4b0a      	ldr	r3, [pc, #40]	; (8002bf0 <prvInitialiseTaskLists+0x7c>)
 8002bc6:	4a05      	ldr	r2, [pc, #20]	; (8002bdc <prvInitialiseTaskLists+0x68>)
 8002bc8:	601a      	str	r2, [r3, #0]
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000088 	.word	0x20000088
 8002bd8:	200000ec 	.word	0x200000ec
 8002bdc:	20000100 	.word	0x20000100
 8002be0:	2000011c 	.word	0x2000011c
 8002be4:	20000130 	.word	0x20000130
 8002be8:	20000148 	.word	0x20000148
 8002bec:	20000114 	.word	0x20000114
 8002bf0:	20000118 	.word	0x20000118

08002bf4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002bfa:	e019      	b.n	8002c30 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002bfc:	f000 fa7a 	bl	80030f4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c00:	4b10      	ldr	r3, [pc, #64]	; (8002c44 <prvCheckTasksWaitingTermination+0x50>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff fb37 	bl	8002280 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002c12:	4b0d      	ldr	r3, [pc, #52]	; (8002c48 <prvCheckTasksWaitingTermination+0x54>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	4a0b      	ldr	r2, [pc, #44]	; (8002c48 <prvCheckTasksWaitingTermination+0x54>)
 8002c1a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <prvCheckTasksWaitingTermination+0x58>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3b01      	subs	r3, #1
 8002c22:	4a0a      	ldr	r2, [pc, #40]	; (8002c4c <prvCheckTasksWaitingTermination+0x58>)
 8002c24:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002c26:	f000 fa95 	bl	8003154 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f810 	bl	8002c50 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c30:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <prvCheckTasksWaitingTermination+0x58>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1e1      	bne.n	8002bfc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002c38:	bf00      	nop
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	20000130 	.word	0x20000130
 8002c48:	2000015c 	.word	0x2000015c
 8002c4c:	20000144 	.word	0x20000144

08002c50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 fc55 	bl	800350c <vPortFree>
                vPortFree( pxTCB );
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 fc52 	bl	800350c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002c68:	bf00      	nop
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c74:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <prvResetNextTaskUnblockTime+0x30>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d104      	bne.n	8002c88 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002c7e:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <prvResetNextTaskUnblockTime+0x34>)
 8002c80:	f04f 32ff 	mov.w	r2, #4294967295
 8002c84:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002c86:	e005      	b.n	8002c94 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <prvResetNextTaskUnblockTime+0x30>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a04      	ldr	r2, [pc, #16]	; (8002ca4 <prvResetNextTaskUnblockTime+0x34>)
 8002c92:	6013      	str	r3, [r2, #0]
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	20000114 	.word	0x20000114
 8002ca4:	2000017c 	.word	0x2000017c

08002ca8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002cb2:	4b32      	ldr	r3, [pc, #200]	; (8002d7c <prvAddCurrentTaskToDelayedList+0xd4>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002cb8:	4b31      	ldr	r3, [pc, #196]	; (8002d80 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff fade 	bl	8002280 <uxListRemove>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10b      	bne.n	8002ce2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002cca:	4b2d      	ldr	r3, [pc, #180]	; (8002d80 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	43da      	mvns	r2, r3
 8002cd8:	4b2a      	ldr	r3, [pc, #168]	; (8002d84 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	4a29      	ldr	r2, [pc, #164]	; (8002d84 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002ce0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce8:	d110      	bne.n	8002d0c <prvAddCurrentTaskToDelayedList+0x64>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00d      	beq.n	8002d0c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002cf0:	4b23      	ldr	r3, [pc, #140]	; (8002d80 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	211b      	movs	r1, #27
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f002 fedc 	bl	8005ab4 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002cfc:	4b20      	ldr	r3, [pc, #128]	; (8002d80 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	3304      	adds	r3, #4
 8002d02:	4619      	mov	r1, r3
 8002d04:	4820      	ldr	r0, [pc, #128]	; (8002d88 <prvAddCurrentTaskToDelayedList+0xe0>)
 8002d06:	f7ff fa5e 	bl	80021c6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002d0a:	e032      	b.n	8002d72 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4413      	add	r3, r2
 8002d12:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002d14:	4b1a      	ldr	r3, [pc, #104]	; (8002d80 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d20f      	bcs.n	8002d44 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002d24:	4b16      	ldr	r3, [pc, #88]	; (8002d80 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2104      	movs	r1, #4
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f002 fec2 	bl	8005ab4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d30:	4b16      	ldr	r3, [pc, #88]	; (8002d8c <prvAddCurrentTaskToDelayedList+0xe4>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	4b12      	ldr	r3, [pc, #72]	; (8002d80 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	f7ff fa66 	bl	800220e <vListInsert>
}
 8002d42:	e016      	b.n	8002d72 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002d44:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2104      	movs	r1, #4
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f002 feb2 	bl	8005ab4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d50:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	3304      	adds	r3, #4
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4610      	mov	r0, r2
 8002d5e:	f7ff fa56 	bl	800220e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002d62:	4b0c      	ldr	r3, [pc, #48]	; (8002d94 <prvAddCurrentTaskToDelayedList+0xec>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d202      	bcs.n	8002d72 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8002d6c:	4a09      	ldr	r2, [pc, #36]	; (8002d94 <prvAddCurrentTaskToDelayedList+0xec>)
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	6013      	str	r3, [r2, #0]
}
 8002d72:	bf00      	nop
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000160 	.word	0x20000160
 8002d80:	20000084 	.word	0x20000084
 8002d84:	20000164 	.word	0x20000164
 8002d88:	20000148 	.word	0x20000148
 8002d8c:	20000118 	.word	0x20000118
 8002d90:	20000114 	.word	0x20000114
 8002d94:	2000017c 	.word	0x2000017c

08002d98 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	3b04      	subs	r3, #4
 8002da8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002db0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	3b04      	subs	r3, #4
 8002db6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f023 0201 	bic.w	r2, r3, #1
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	3b04      	subs	r3, #4
 8002dc6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002dc8:	4a0c      	ldr	r2, [pc, #48]	; (8002dfc <pxPortInitialiseStack+0x64>)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	3b14      	subs	r3, #20
 8002dd2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	3b04      	subs	r3, #4
 8002dde:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f06f 0202 	mvn.w	r2, #2
 8002de6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	3b20      	subs	r3, #32
 8002dec:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002dee:	68fb      	ldr	r3, [r7, #12]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	08002e01 	.word	0x08002e01

08002e00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002e06:	2300      	movs	r3, #0
 8002e08:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002e0a:	4b12      	ldr	r3, [pc, #72]	; (8002e54 <prvTaskExitError+0x54>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e12:	d00a      	beq.n	8002e2a <prvTaskExitError+0x2a>
        __asm volatile
 8002e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e18:	f383 8811 	msr	BASEPRI, r3
 8002e1c:	f3bf 8f6f 	isb	sy
 8002e20:	f3bf 8f4f 	dsb	sy
 8002e24:	60fb      	str	r3, [r7, #12]
    }
 8002e26:	bf00      	nop
 8002e28:	e7fe      	b.n	8002e28 <prvTaskExitError+0x28>
        __asm volatile
 8002e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2e:	f383 8811 	msr	BASEPRI, r3
 8002e32:	f3bf 8f6f 	isb	sy
 8002e36:	f3bf 8f4f 	dsb	sy
 8002e3a:	60bb      	str	r3, [r7, #8]
    }
 8002e3c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002e3e:	bf00      	nop
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0fc      	beq.n	8002e40 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002e46:	bf00      	nop
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	20000010 	.word	0x20000010
	...

08002e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002e60:	4b07      	ldr	r3, [pc, #28]	; (8002e80 <pxCurrentTCBConst2>)
 8002e62:	6819      	ldr	r1, [r3, #0]
 8002e64:	6808      	ldr	r0, [r1, #0]
 8002e66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e6a:	f380 8809 	msr	PSP, r0
 8002e6e:	f3bf 8f6f 	isb	sy
 8002e72:	f04f 0000 	mov.w	r0, #0
 8002e76:	f380 8811 	msr	BASEPRI, r0
 8002e7a:	4770      	bx	lr
 8002e7c:	f3af 8000 	nop.w

08002e80 <pxCurrentTCBConst2>:
 8002e80:	20000084 	.word	0x20000084
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002e84:	bf00      	nop
 8002e86:	bf00      	nop

08002e88 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002e88:	4808      	ldr	r0, [pc, #32]	; (8002eac <prvPortStartFirstTask+0x24>)
 8002e8a:	6800      	ldr	r0, [r0, #0]
 8002e8c:	6800      	ldr	r0, [r0, #0]
 8002e8e:	f380 8808 	msr	MSP, r0
 8002e92:	f04f 0000 	mov.w	r0, #0
 8002e96:	f380 8814 	msr	CONTROL, r0
 8002e9a:	b662      	cpsie	i
 8002e9c:	b661      	cpsie	f
 8002e9e:	f3bf 8f4f 	dsb	sy
 8002ea2:	f3bf 8f6f 	isb	sy
 8002ea6:	df00      	svc	0
 8002ea8:	bf00      	nop
 8002eaa:	0000      	.short	0x0000
 8002eac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002eb0:	bf00      	nop
 8002eb2:	bf00      	nop

08002eb4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002eba:	4b46      	ldr	r3, [pc, #280]	; (8002fd4 <xPortStartScheduler+0x120>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a46      	ldr	r2, [pc, #280]	; (8002fd8 <xPortStartScheduler+0x124>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d10a      	bne.n	8002eda <xPortStartScheduler+0x26>
        __asm volatile
 8002ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec8:	f383 8811 	msr	BASEPRI, r3
 8002ecc:	f3bf 8f6f 	isb	sy
 8002ed0:	f3bf 8f4f 	dsb	sy
 8002ed4:	613b      	str	r3, [r7, #16]
    }
 8002ed6:	bf00      	nop
 8002ed8:	e7fe      	b.n	8002ed8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002eda:	4b3e      	ldr	r3, [pc, #248]	; (8002fd4 <xPortStartScheduler+0x120>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a3f      	ldr	r2, [pc, #252]	; (8002fdc <xPortStartScheduler+0x128>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d10a      	bne.n	8002efa <xPortStartScheduler+0x46>
        __asm volatile
 8002ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee8:	f383 8811 	msr	BASEPRI, r3
 8002eec:	f3bf 8f6f 	isb	sy
 8002ef0:	f3bf 8f4f 	dsb	sy
 8002ef4:	60fb      	str	r3, [r7, #12]
    }
 8002ef6:	bf00      	nop
 8002ef8:	e7fe      	b.n	8002ef8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002efa:	4b39      	ldr	r3, [pc, #228]	; (8002fe0 <xPortStartScheduler+0x12c>)
 8002efc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	22ff      	movs	r2, #255	; 0xff
 8002f0a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	4b31      	ldr	r3, [pc, #196]	; (8002fe4 <xPortStartScheduler+0x130>)
 8002f20:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002f22:	4b31      	ldr	r3, [pc, #196]	; (8002fe8 <xPortStartScheduler+0x134>)
 8002f24:	2207      	movs	r2, #7
 8002f26:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f28:	e009      	b.n	8002f3e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002f2a:	4b2f      	ldr	r3, [pc, #188]	; (8002fe8 <xPortStartScheduler+0x134>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	4a2d      	ldr	r2, [pc, #180]	; (8002fe8 <xPortStartScheduler+0x134>)
 8002f32:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f3e:	78fb      	ldrb	r3, [r7, #3]
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f46:	2b80      	cmp	r3, #128	; 0x80
 8002f48:	d0ef      	beq.n	8002f2a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002f4a:	4b27      	ldr	r3, [pc, #156]	; (8002fe8 <xPortStartScheduler+0x134>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f1c3 0307 	rsb	r3, r3, #7
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d00a      	beq.n	8002f6c <xPortStartScheduler+0xb8>
        __asm volatile
 8002f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5a:	f383 8811 	msr	BASEPRI, r3
 8002f5e:	f3bf 8f6f 	isb	sy
 8002f62:	f3bf 8f4f 	dsb	sy
 8002f66:	60bb      	str	r3, [r7, #8]
    }
 8002f68:	bf00      	nop
 8002f6a:	e7fe      	b.n	8002f6a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f6c:	4b1e      	ldr	r3, [pc, #120]	; (8002fe8 <xPortStartScheduler+0x134>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	021b      	lsls	r3, r3, #8
 8002f72:	4a1d      	ldr	r2, [pc, #116]	; (8002fe8 <xPortStartScheduler+0x134>)
 8002f74:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f76:	4b1c      	ldr	r3, [pc, #112]	; (8002fe8 <xPortStartScheduler+0x134>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f7e:	4a1a      	ldr	r2, [pc, #104]	; (8002fe8 <xPortStartScheduler+0x134>)
 8002f80:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002f8a:	4b18      	ldr	r3, [pc, #96]	; (8002fec <xPortStartScheduler+0x138>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a17      	ldr	r2, [pc, #92]	; (8002fec <xPortStartScheduler+0x138>)
 8002f90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f94:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002f96:	4b15      	ldr	r3, [pc, #84]	; (8002fec <xPortStartScheduler+0x138>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a14      	ldr	r2, [pc, #80]	; (8002fec <xPortStartScheduler+0x138>)
 8002f9c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002fa0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002fa2:	f000 f963 	bl	800326c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002fa6:	4b12      	ldr	r3, [pc, #72]	; (8002ff0 <xPortStartScheduler+0x13c>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002fac:	f000 f982 	bl	80032b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002fb0:	4b10      	ldr	r3, [pc, #64]	; (8002ff4 <xPortStartScheduler+0x140>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a0f      	ldr	r2, [pc, #60]	; (8002ff4 <xPortStartScheduler+0x140>)
 8002fb6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002fba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002fbc:	f7ff ff64 	bl	8002e88 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002fc0:	f7ff fd56 	bl	8002a70 <vTaskSwitchContext>
    prvTaskExitError();
 8002fc4:	f7ff ff1c 	bl	8002e00 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	e000ed00 	.word	0xe000ed00
 8002fd8:	410fc271 	.word	0x410fc271
 8002fdc:	410fc270 	.word	0x410fc270
 8002fe0:	e000e400 	.word	0xe000e400
 8002fe4:	20000188 	.word	0x20000188
 8002fe8:	2000018c 	.word	0x2000018c
 8002fec:	e000ed20 	.word	0xe000ed20
 8002ff0:	20000010 	.word	0x20000010
 8002ff4:	e000ef34 	.word	0xe000ef34

08002ff8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b087      	sub	sp, #28
 8002ffc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002ffe:	4b37      	ldr	r3, [pc, #220]	; (80030dc <vInitPrioGroupValue+0xe4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a37      	ldr	r2, [pc, #220]	; (80030e0 <vInitPrioGroupValue+0xe8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d10a      	bne.n	800301e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300c:	f383 8811 	msr	BASEPRI, r3
 8003010:	f3bf 8f6f 	isb	sy
 8003014:	f3bf 8f4f 	dsb	sy
 8003018:	613b      	str	r3, [r7, #16]
    }
 800301a:	bf00      	nop
 800301c:	e7fe      	b.n	800301c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800301e:	4b2f      	ldr	r3, [pc, #188]	; (80030dc <vInitPrioGroupValue+0xe4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a30      	ldr	r2, [pc, #192]	; (80030e4 <vInitPrioGroupValue+0xec>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d10a      	bne.n	800303e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302c:	f383 8811 	msr	BASEPRI, r3
 8003030:	f3bf 8f6f 	isb	sy
 8003034:	f3bf 8f4f 	dsb	sy
 8003038:	60fb      	str	r3, [r7, #12]
    }
 800303a:	bf00      	nop
 800303c:	e7fe      	b.n	800303c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800303e:	4b2a      	ldr	r3, [pc, #168]	; (80030e8 <vInitPrioGroupValue+0xf0>)
 8003040:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	b2db      	uxtb	r3, r3
 8003048:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	22ff      	movs	r2, #255	; 0xff
 800304e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	b2db      	uxtb	r3, r3
 8003056:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003058:	78fb      	ldrb	r3, [r7, #3]
 800305a:	b2db      	uxtb	r3, r3
 800305c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003060:	b2da      	uxtb	r2, r3
 8003062:	4b22      	ldr	r3, [pc, #136]	; (80030ec <vInitPrioGroupValue+0xf4>)
 8003064:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003066:	4b22      	ldr	r3, [pc, #136]	; (80030f0 <vInitPrioGroupValue+0xf8>)
 8003068:	2207      	movs	r2, #7
 800306a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800306c:	e009      	b.n	8003082 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800306e:	4b20      	ldr	r3, [pc, #128]	; (80030f0 <vInitPrioGroupValue+0xf8>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	3b01      	subs	r3, #1
 8003074:	4a1e      	ldr	r2, [pc, #120]	; (80030f0 <vInitPrioGroupValue+0xf8>)
 8003076:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003078:	78fb      	ldrb	r3, [r7, #3]
 800307a:	b2db      	uxtb	r3, r3
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	b2db      	uxtb	r3, r3
 8003080:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003082:	78fb      	ldrb	r3, [r7, #3]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800308a:	2b80      	cmp	r3, #128	; 0x80
 800308c:	d0ef      	beq.n	800306e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800308e:	4b18      	ldr	r3, [pc, #96]	; (80030f0 <vInitPrioGroupValue+0xf8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f1c3 0307 	rsb	r3, r3, #7
 8003096:	2b04      	cmp	r3, #4
 8003098:	d00a      	beq.n	80030b0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800309a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309e:	f383 8811 	msr	BASEPRI, r3
 80030a2:	f3bf 8f6f 	isb	sy
 80030a6:	f3bf 8f4f 	dsb	sy
 80030aa:	60bb      	str	r3, [r7, #8]
    }
 80030ac:	bf00      	nop
 80030ae:	e7fe      	b.n	80030ae <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80030b0:	4b0f      	ldr	r3, [pc, #60]	; (80030f0 <vInitPrioGroupValue+0xf8>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	021b      	lsls	r3, r3, #8
 80030b6:	4a0e      	ldr	r2, [pc, #56]	; (80030f0 <vInitPrioGroupValue+0xf8>)
 80030b8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80030ba:	4b0d      	ldr	r3, [pc, #52]	; (80030f0 <vInitPrioGroupValue+0xf8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030c2:	4a0b      	ldr	r2, [pc, #44]	; (80030f0 <vInitPrioGroupValue+0xf8>)
 80030c4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80030ce:	bf00      	nop
 80030d0:	371c      	adds	r7, #28
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	e000ed00 	.word	0xe000ed00
 80030e0:	410fc271 	.word	0x410fc271
 80030e4:	410fc270 	.word	0x410fc270
 80030e8:	e000e400 	.word	0xe000e400
 80030ec:	20000188 	.word	0x20000188
 80030f0:	2000018c 	.word	0x2000018c

080030f4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
        __asm volatile
 80030fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fe:	f383 8811 	msr	BASEPRI, r3
 8003102:	f3bf 8f6f 	isb	sy
 8003106:	f3bf 8f4f 	dsb	sy
 800310a:	607b      	str	r3, [r7, #4]
    }
 800310c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800310e:	4b0f      	ldr	r3, [pc, #60]	; (800314c <vPortEnterCritical+0x58>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	3301      	adds	r3, #1
 8003114:	4a0d      	ldr	r2, [pc, #52]	; (800314c <vPortEnterCritical+0x58>)
 8003116:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003118:	4b0c      	ldr	r3, [pc, #48]	; (800314c <vPortEnterCritical+0x58>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d10f      	bne.n	8003140 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003120:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <vPortEnterCritical+0x5c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00a      	beq.n	8003140 <vPortEnterCritical+0x4c>
        __asm volatile
 800312a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800312e:	f383 8811 	msr	BASEPRI, r3
 8003132:	f3bf 8f6f 	isb	sy
 8003136:	f3bf 8f4f 	dsb	sy
 800313a:	603b      	str	r3, [r7, #0]
    }
 800313c:	bf00      	nop
 800313e:	e7fe      	b.n	800313e <vPortEnterCritical+0x4a>
    }
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	20000010 	.word	0x20000010
 8003150:	e000ed04 	.word	0xe000ed04

08003154 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800315a:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <vPortExitCritical+0x50>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10a      	bne.n	8003178 <vPortExitCritical+0x24>
        __asm volatile
 8003162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003166:	f383 8811 	msr	BASEPRI, r3
 800316a:	f3bf 8f6f 	isb	sy
 800316e:	f3bf 8f4f 	dsb	sy
 8003172:	607b      	str	r3, [r7, #4]
    }
 8003174:	bf00      	nop
 8003176:	e7fe      	b.n	8003176 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003178:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <vPortExitCritical+0x50>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	3b01      	subs	r3, #1
 800317e:	4a09      	ldr	r2, [pc, #36]	; (80031a4 <vPortExitCritical+0x50>)
 8003180:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003182:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <vPortExitCritical+0x50>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d105      	bne.n	8003196 <vPortExitCritical+0x42>
 800318a:	2300      	movs	r3, #0
 800318c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003194:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	20000010 	.word	0x20000010
	...

080031b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80031b0:	f3ef 8009 	mrs	r0, PSP
 80031b4:	f3bf 8f6f 	isb	sy
 80031b8:	4b15      	ldr	r3, [pc, #84]	; (8003210 <pxCurrentTCBConst>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	f01e 0f10 	tst.w	lr, #16
 80031c0:	bf08      	it	eq
 80031c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80031c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031ca:	6010      	str	r0, [r2, #0]
 80031cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80031d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80031d4:	f380 8811 	msr	BASEPRI, r0
 80031d8:	f3bf 8f4f 	dsb	sy
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	f7ff fc46 	bl	8002a70 <vTaskSwitchContext>
 80031e4:	f04f 0000 	mov.w	r0, #0
 80031e8:	f380 8811 	msr	BASEPRI, r0
 80031ec:	bc09      	pop	{r0, r3}
 80031ee:	6819      	ldr	r1, [r3, #0]
 80031f0:	6808      	ldr	r0, [r1, #0]
 80031f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031f6:	f01e 0f10 	tst.w	lr, #16
 80031fa:	bf08      	it	eq
 80031fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003200:	f380 8809 	msr	PSP, r0
 8003204:	f3bf 8f6f 	isb	sy
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	f3af 8000 	nop.w

08003210 <pxCurrentTCBConst>:
 8003210:	20000084 	.word	0x20000084
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003214:	bf00      	nop
 8003216:	bf00      	nop

08003218 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
        __asm volatile
 800321e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003222:	f383 8811 	msr	BASEPRI, r3
 8003226:	f3bf 8f6f 	isb	sy
 800322a:	f3bf 8f4f 	dsb	sy
 800322e:	607b      	str	r3, [r7, #4]
    }
 8003230:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003232:	f002 fae3 	bl	80057fc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003236:	f7ff fb5f 	bl	80028f8 <xTaskIncrementTick>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d006      	beq.n	800324e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003240:	f002 fb3a 	bl	80058b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003244:	4b08      	ldr	r3, [pc, #32]	; (8003268 <SysTick_Handler+0x50>)
 8003246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	e001      	b.n	8003252 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800324e:	f002 fb17 	bl	8005880 <SEGGER_SYSVIEW_RecordExitISR>
 8003252:	2300      	movs	r3, #0
 8003254:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	f383 8811 	msr	BASEPRI, r3
    }
 800325c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800325e:	bf00      	nop
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	e000ed04 	.word	0xe000ed04

0800326c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003270:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <vPortSetupTimerInterrupt+0x34>)
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003276:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <vPortSetupTimerInterrupt+0x38>)
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800327c:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <vPortSetupTimerInterrupt+0x3c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a0a      	ldr	r2, [pc, #40]	; (80032ac <vPortSetupTimerInterrupt+0x40>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	099b      	lsrs	r3, r3, #6
 8003288:	4a09      	ldr	r2, [pc, #36]	; (80032b0 <vPortSetupTimerInterrupt+0x44>)
 800328a:	3b01      	subs	r3, #1
 800328c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800328e:	4b04      	ldr	r3, [pc, #16]	; (80032a0 <vPortSetupTimerInterrupt+0x34>)
 8003290:	2207      	movs	r2, #7
 8003292:	601a      	str	r2, [r3, #0]
}
 8003294:	bf00      	nop
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	e000e010 	.word	0xe000e010
 80032a4:	e000e018 	.word	0xe000e018
 80032a8:	20000000 	.word	0x20000000
 80032ac:	10624dd3 	.word	0x10624dd3
 80032b0:	e000e014 	.word	0xe000e014

080032b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80032b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80032c4 <vPortEnableVFP+0x10>
 80032b8:	6801      	ldr	r1, [r0, #0]
 80032ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80032be:	6001      	str	r1, [r0, #0]
 80032c0:	4770      	bx	lr
 80032c2:	0000      	.short	0x0000
 80032c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80032c8:	bf00      	nop
 80032ca:	bf00      	nop

080032cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80032d2:	f3ef 8305 	mrs	r3, IPSR
 80032d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2b0f      	cmp	r3, #15
 80032dc:	d914      	bls.n	8003308 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80032de:	4a17      	ldr	r2, [pc, #92]	; (800333c <vPortValidateInterruptPriority+0x70>)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4413      	add	r3, r2
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80032e8:	4b15      	ldr	r3, [pc, #84]	; (8003340 <vPortValidateInterruptPriority+0x74>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	7afa      	ldrb	r2, [r7, #11]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d20a      	bcs.n	8003308 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80032f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f6:	f383 8811 	msr	BASEPRI, r3
 80032fa:	f3bf 8f6f 	isb	sy
 80032fe:	f3bf 8f4f 	dsb	sy
 8003302:	607b      	str	r3, [r7, #4]
    }
 8003304:	bf00      	nop
 8003306:	e7fe      	b.n	8003306 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003308:	4b0e      	ldr	r3, [pc, #56]	; (8003344 <vPortValidateInterruptPriority+0x78>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003310:	4b0d      	ldr	r3, [pc, #52]	; (8003348 <vPortValidateInterruptPriority+0x7c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	429a      	cmp	r2, r3
 8003316:	d90a      	bls.n	800332e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331c:	f383 8811 	msr	BASEPRI, r3
 8003320:	f3bf 8f6f 	isb	sy
 8003324:	f3bf 8f4f 	dsb	sy
 8003328:	603b      	str	r3, [r7, #0]
    }
 800332a:	bf00      	nop
 800332c:	e7fe      	b.n	800332c <vPortValidateInterruptPriority+0x60>
    }
 800332e:	bf00      	nop
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	e000e3f0 	.word	0xe000e3f0
 8003340:	20000188 	.word	0x20000188
 8003344:	e000ed0c 	.word	0xe000ed0c
 8003348:	2000018c 	.word	0x2000018c

0800334c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08a      	sub	sp, #40	; 0x28
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003354:	2300      	movs	r3, #0
 8003356:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003358:	f7ff f9fe 	bl	8002758 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800335c:	4b65      	ldr	r3, [pc, #404]	; (80034f4 <pvPortMalloc+0x1a8>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003364:	f000 f934 	bl	80035d0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003368:	4b63      	ldr	r3, [pc, #396]	; (80034f8 <pvPortMalloc+0x1ac>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4013      	ands	r3, r2
 8003370:	2b00      	cmp	r3, #0
 8003372:	f040 80a7 	bne.w	80034c4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d02d      	beq.n	80033d8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800337c:	2208      	movs	r2, #8
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	429a      	cmp	r2, r3
 8003386:	d227      	bcs.n	80033d8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003388:	2208      	movs	r2, #8
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4413      	add	r3, r2
 800338e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	2b00      	cmp	r3, #0
 8003398:	d021      	beq.n	80033de <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f023 0307 	bic.w	r3, r3, #7
 80033a0:	3308      	adds	r3, #8
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d214      	bcs.n	80033d2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f023 0307 	bic.w	r3, r3, #7
 80033ae:	3308      	adds	r3, #8
 80033b0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d010      	beq.n	80033de <pvPortMalloc+0x92>
        __asm volatile
 80033bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c0:	f383 8811 	msr	BASEPRI, r3
 80033c4:	f3bf 8f6f 	isb	sy
 80033c8:	f3bf 8f4f 	dsb	sy
 80033cc:	617b      	str	r3, [r7, #20]
    }
 80033ce:	bf00      	nop
 80033d0:	e7fe      	b.n	80033d0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80033d6:	e002      	b.n	80033de <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80033d8:	2300      	movs	r3, #0
 80033da:	607b      	str	r3, [r7, #4]
 80033dc:	e000      	b.n	80033e0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80033de:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d06e      	beq.n	80034c4 <pvPortMalloc+0x178>
 80033e6:	4b45      	ldr	r3, [pc, #276]	; (80034fc <pvPortMalloc+0x1b0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d869      	bhi.n	80034c4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80033f0:	4b43      	ldr	r3, [pc, #268]	; (8003500 <pvPortMalloc+0x1b4>)
 80033f2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80033f4:	4b42      	ldr	r3, [pc, #264]	; (8003500 <pvPortMalloc+0x1b4>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80033fa:	e004      	b.n	8003406 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	429a      	cmp	r2, r3
 800340e:	d903      	bls.n	8003418 <pvPortMalloc+0xcc>
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1f1      	bne.n	80033fc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003418:	4b36      	ldr	r3, [pc, #216]	; (80034f4 <pvPortMalloc+0x1a8>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800341e:	429a      	cmp	r2, r3
 8003420:	d050      	beq.n	80034c4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2208      	movs	r2, #8
 8003428:	4413      	add	r3, r2
 800342a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	1ad2      	subs	r2, r2, r3
 800343c:	2308      	movs	r3, #8
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	429a      	cmp	r2, r3
 8003442:	d91f      	bls.n	8003484 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4413      	add	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <pvPortMalloc+0x120>
        __asm volatile
 8003456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345a:	f383 8811 	msr	BASEPRI, r3
 800345e:	f3bf 8f6f 	isb	sy
 8003462:	f3bf 8f4f 	dsb	sy
 8003466:	613b      	str	r3, [r7, #16]
    }
 8003468:	bf00      	nop
 800346a:	e7fe      	b.n	800346a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	1ad2      	subs	r2, r2, r3
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800347e:	69b8      	ldr	r0, [r7, #24]
 8003480:	f000 f908 	bl	8003694 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003484:	4b1d      	ldr	r3, [pc, #116]	; (80034fc <pvPortMalloc+0x1b0>)
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	4a1b      	ldr	r2, [pc, #108]	; (80034fc <pvPortMalloc+0x1b0>)
 8003490:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003492:	4b1a      	ldr	r3, [pc, #104]	; (80034fc <pvPortMalloc+0x1b0>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	4b1b      	ldr	r3, [pc, #108]	; (8003504 <pvPortMalloc+0x1b8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d203      	bcs.n	80034a6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800349e:	4b17      	ldr	r3, [pc, #92]	; (80034fc <pvPortMalloc+0x1b0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a18      	ldr	r2, [pc, #96]	; (8003504 <pvPortMalloc+0x1b8>)
 80034a4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	4b13      	ldr	r3, [pc, #76]	; (80034f8 <pvPortMalloc+0x1ac>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	431a      	orrs	r2, r3
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80034ba:	4b13      	ldr	r3, [pc, #76]	; (8003508 <pvPortMalloc+0x1bc>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	3301      	adds	r3, #1
 80034c0:	4a11      	ldr	r2, [pc, #68]	; (8003508 <pvPortMalloc+0x1bc>)
 80034c2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80034c4:	f7ff f956 	bl	8002774 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00a      	beq.n	80034e8 <pvPortMalloc+0x19c>
        __asm volatile
 80034d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d6:	f383 8811 	msr	BASEPRI, r3
 80034da:	f3bf 8f6f 	isb	sy
 80034de:	f3bf 8f4f 	dsb	sy
 80034e2:	60fb      	str	r3, [r7, #12]
    }
 80034e4:	bf00      	nop
 80034e6:	e7fe      	b.n	80034e6 <pvPortMalloc+0x19a>
    return pvReturn;
 80034e8:	69fb      	ldr	r3, [r7, #28]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3728      	adds	r7, #40	; 0x28
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	20012d98 	.word	0x20012d98
 80034f8:	20012dac 	.word	0x20012dac
 80034fc:	20012d9c 	.word	0x20012d9c
 8003500:	20012d90 	.word	0x20012d90
 8003504:	20012da0 	.word	0x20012da0
 8003508:	20012da4 	.word	0x20012da4

0800350c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d04d      	beq.n	80035ba <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800351e:	2308      	movs	r3, #8
 8003520:	425b      	negs	r3, r3
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	4413      	add	r3, r2
 8003526:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	4b24      	ldr	r3, [pc, #144]	; (80035c4 <vPortFree+0xb8>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4013      	ands	r3, r2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10a      	bne.n	8003550 <vPortFree+0x44>
        __asm volatile
 800353a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353e:	f383 8811 	msr	BASEPRI, r3
 8003542:	f3bf 8f6f 	isb	sy
 8003546:	f3bf 8f4f 	dsb	sy
 800354a:	60fb      	str	r3, [r7, #12]
    }
 800354c:	bf00      	nop
 800354e:	e7fe      	b.n	800354e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00a      	beq.n	800356e <vPortFree+0x62>
        __asm volatile
 8003558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355c:	f383 8811 	msr	BASEPRI, r3
 8003560:	f3bf 8f6f 	isb	sy
 8003564:	f3bf 8f4f 	dsb	sy
 8003568:	60bb      	str	r3, [r7, #8]
    }
 800356a:	bf00      	nop
 800356c:	e7fe      	b.n	800356c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	4b14      	ldr	r3, [pc, #80]	; (80035c4 <vPortFree+0xb8>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4013      	ands	r3, r2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d01e      	beq.n	80035ba <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d11a      	bne.n	80035ba <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	4b0e      	ldr	r3, [pc, #56]	; (80035c4 <vPortFree+0xb8>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	43db      	mvns	r3, r3
 800358e:	401a      	ands	r2, r3
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003594:	f7ff f8e0 	bl	8002758 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <vPortFree+0xbc>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4413      	add	r3, r2
 80035a2:	4a09      	ldr	r2, [pc, #36]	; (80035c8 <vPortFree+0xbc>)
 80035a4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80035a6:	6938      	ldr	r0, [r7, #16]
 80035a8:	f000 f874 	bl	8003694 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80035ac:	4b07      	ldr	r3, [pc, #28]	; (80035cc <vPortFree+0xc0>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	3301      	adds	r3, #1
 80035b2:	4a06      	ldr	r2, [pc, #24]	; (80035cc <vPortFree+0xc0>)
 80035b4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80035b6:	f7ff f8dd 	bl	8002774 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80035ba:	bf00      	nop
 80035bc:	3718      	adds	r7, #24
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20012dac 	.word	0x20012dac
 80035c8:	20012d9c 	.word	0x20012d9c
 80035cc:	20012da8 	.word	0x20012da8

080035d0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80035d6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80035da:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80035dc:	4b27      	ldr	r3, [pc, #156]	; (800367c <prvHeapInit+0xac>)
 80035de:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00c      	beq.n	8003604 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	3307      	adds	r3, #7
 80035ee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f023 0307 	bic.w	r3, r3, #7
 80035f6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	4a1f      	ldr	r2, [pc, #124]	; (800367c <prvHeapInit+0xac>)
 8003600:	4413      	add	r3, r2
 8003602:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003608:	4a1d      	ldr	r2, [pc, #116]	; (8003680 <prvHeapInit+0xb0>)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800360e:	4b1c      	ldr	r3, [pc, #112]	; (8003680 <prvHeapInit+0xb0>)
 8003610:	2200      	movs	r2, #0
 8003612:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	4413      	add	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800361c:	2208      	movs	r2, #8
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f023 0307 	bic.w	r3, r3, #7
 800362a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4a15      	ldr	r2, [pc, #84]	; (8003684 <prvHeapInit+0xb4>)
 8003630:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003632:	4b14      	ldr	r3, [pc, #80]	; (8003684 <prvHeapInit+0xb4>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2200      	movs	r2, #0
 8003638:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800363a:	4b12      	ldr	r3, [pc, #72]	; (8003684 <prvHeapInit+0xb4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	1ad2      	subs	r2, r2, r3
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003650:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <prvHeapInit+0xb4>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	4a0a      	ldr	r2, [pc, #40]	; (8003688 <prvHeapInit+0xb8>)
 800365e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	4a09      	ldr	r2, [pc, #36]	; (800368c <prvHeapInit+0xbc>)
 8003666:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003668:	4b09      	ldr	r3, [pc, #36]	; (8003690 <prvHeapInit+0xc0>)
 800366a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800366e:	601a      	str	r2, [r3, #0]
}
 8003670:	bf00      	nop
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	20000190 	.word	0x20000190
 8003680:	20012d90 	.word	0x20012d90
 8003684:	20012d98 	.word	0x20012d98
 8003688:	20012da0 	.word	0x20012da0
 800368c:	20012d9c 	.word	0x20012d9c
 8003690:	20012dac 	.word	0x20012dac

08003694 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800369c:	4b28      	ldr	r3, [pc, #160]	; (8003740 <prvInsertBlockIntoFreeList+0xac>)
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	e002      	b.n	80036a8 <prvInsertBlockIntoFreeList+0x14>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d8f7      	bhi.n	80036a2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	4413      	add	r3, r2
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d108      	bne.n	80036d6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	441a      	add	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	441a      	add	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d118      	bne.n	800371c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	4b15      	ldr	r3, [pc, #84]	; (8003744 <prvInsertBlockIntoFreeList+0xb0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d00d      	beq.n	8003712 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	441a      	add	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	e008      	b.n	8003724 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003712:	4b0c      	ldr	r3, [pc, #48]	; (8003744 <prvInsertBlockIntoFreeList+0xb0>)
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	e003      	b.n	8003724 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	429a      	cmp	r2, r3
 800372a:	d002      	beq.n	8003732 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003732:	bf00      	nop
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	20012d90 	.word	0x20012d90
 8003744:	20012d98 	.word	0x20012d98

08003748 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800374c:	4803      	ldr	r0, [pc, #12]	; (800375c <_cbSendSystemDesc+0x14>)
 800374e:	f001 ffff 	bl	8005750 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003752:	4803      	ldr	r0, [pc, #12]	; (8003760 <_cbSendSystemDesc+0x18>)
 8003754:	f001 fffc 	bl	8005750 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003758:	bf00      	nop
 800375a:	bd80      	pop	{r7, pc}
 800375c:	08005f90 	.word	0x08005f90
 8003760:	08005fd4 	.word	0x08005fd4

08003764 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003768:	4b06      	ldr	r3, [pc, #24]	; (8003784 <SEGGER_SYSVIEW_Conf+0x20>)
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	4b05      	ldr	r3, [pc, #20]	; (8003784 <SEGGER_SYSVIEW_Conf+0x20>)
 800376e:	6819      	ldr	r1, [r3, #0]
 8003770:	4b05      	ldr	r3, [pc, #20]	; (8003788 <SEGGER_SYSVIEW_Conf+0x24>)
 8003772:	4a06      	ldr	r2, [pc, #24]	; (800378c <SEGGER_SYSVIEW_Conf+0x28>)
 8003774:	f001 fc70 	bl	8005058 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003778:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800377c:	f001 fcb0 	bl	80050e0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003780:	bf00      	nop
 8003782:	bd80      	pop	{r7, pc}
 8003784:	20000000 	.word	0x20000000
 8003788:	08003749 	.word	0x08003749
 800378c:	08006068 	.word	0x08006068

08003790 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003792:	b085      	sub	sp, #20
 8003794:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003796:	2300      	movs	r3, #0
 8003798:	607b      	str	r3, [r7, #4]
 800379a:	e033      	b.n	8003804 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800379c:	491e      	ldr	r1, [pc, #120]	; (8003818 <_cbSendTaskList+0x88>)
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	491a      	ldr	r1, [pc, #104]	; (8003818 <_cbSendTaskList+0x88>)
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	3304      	adds	r3, #4
 80037bc:	6819      	ldr	r1, [r3, #0]
 80037be:	4c16      	ldr	r4, [pc, #88]	; (8003818 <_cbSendTaskList+0x88>)
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4423      	add	r3, r4
 80037cc:	3308      	adds	r3, #8
 80037ce:	681c      	ldr	r4, [r3, #0]
 80037d0:	4d11      	ldr	r5, [pc, #68]	; (8003818 <_cbSendTaskList+0x88>)
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	4613      	mov	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	442b      	add	r3, r5
 80037de:	330c      	adds	r3, #12
 80037e0:	681d      	ldr	r5, [r3, #0]
 80037e2:	4e0d      	ldr	r6, [pc, #52]	; (8003818 <_cbSendTaskList+0x88>)
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	4613      	mov	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4433      	add	r3, r6
 80037f0:	3310      	adds	r3, #16
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	462b      	mov	r3, r5
 80037f8:	4622      	mov	r2, r4
 80037fa:	f000 f8bd 	bl	8003978 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3301      	adds	r3, #1
 8003802:	607b      	str	r3, [r7, #4]
 8003804:	4b05      	ldr	r3, [pc, #20]	; (800381c <_cbSendTaskList+0x8c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	429a      	cmp	r2, r3
 800380c:	d3c6      	bcc.n	800379c <_cbSendTaskList+0xc>
  }
}
 800380e:	bf00      	nop
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003818:	20012db0 	.word	0x20012db0
 800381c:	20012e50 	.word	0x20012e50

08003820 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003824:	b082      	sub	sp, #8
 8003826:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003828:	f7ff f854 	bl	80028d4 <xTaskGetTickCountFromISR>
 800382c:	4603      	mov	r3, r0
 800382e:	2200      	movs	r2, #0
 8003830:	469a      	mov	sl, r3
 8003832:	4693      	mov	fp, r2
 8003834:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003838:	e9d7 0100 	ldrd	r0, r1, [r7]
 800383c:	4602      	mov	r2, r0
 800383e:	460b      	mov	r3, r1
 8003840:	f04f 0a00 	mov.w	sl, #0
 8003844:	f04f 0b00 	mov.w	fp, #0
 8003848:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800384c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003850:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003854:	4652      	mov	r2, sl
 8003856:	465b      	mov	r3, fp
 8003858:	1a14      	subs	r4, r2, r0
 800385a:	eb63 0501 	sbc.w	r5, r3, r1
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	f04f 0300 	mov.w	r3, #0
 8003866:	00ab      	lsls	r3, r5, #2
 8003868:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800386c:	00a2      	lsls	r2, r4, #2
 800386e:	4614      	mov	r4, r2
 8003870:	461d      	mov	r5, r3
 8003872:	eb14 0800 	adds.w	r8, r4, r0
 8003876:	eb45 0901 	adc.w	r9, r5, r1
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003886:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800388a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800388e:	4690      	mov	r8, r2
 8003890:	4699      	mov	r9, r3
 8003892:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003896:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800389a:	4610      	mov	r0, r2
 800389c:	4619      	mov	r1, r3
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080038a8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
 80038b4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80038b6:	2205      	movs	r2, #5
 80038b8:	492b      	ldr	r1, [pc, #172]	; (8003968 <SYSVIEW_AddTask+0xc0>)
 80038ba:	68b8      	ldr	r0, [r7, #8]
 80038bc:	f002 faf8 	bl	8005eb0 <memcmp>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d04b      	beq.n	800395e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80038c6:	4b29      	ldr	r3, [pc, #164]	; (800396c <SYSVIEW_AddTask+0xc4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b07      	cmp	r3, #7
 80038cc:	d903      	bls.n	80038d6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80038ce:	4828      	ldr	r0, [pc, #160]	; (8003970 <SYSVIEW_AddTask+0xc8>)
 80038d0:	f002 fa40 	bl	8005d54 <SEGGER_SYSVIEW_Warn>
    return;
 80038d4:	e044      	b.n	8003960 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80038d6:	4b25      	ldr	r3, [pc, #148]	; (800396c <SYSVIEW_AddTask+0xc4>)
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	4926      	ldr	r1, [pc, #152]	; (8003974 <SYSVIEW_AddTask+0xcc>)
 80038dc:	4613      	mov	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80038ea:	4b20      	ldr	r3, [pc, #128]	; (800396c <SYSVIEW_AddTask+0xc4>)
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	4921      	ldr	r1, [pc, #132]	; (8003974 <SYSVIEW_AddTask+0xcc>)
 80038f0:	4613      	mov	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	3304      	adds	r3, #4
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003900:	4b1a      	ldr	r3, [pc, #104]	; (800396c <SYSVIEW_AddTask+0xc4>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	491b      	ldr	r1, [pc, #108]	; (8003974 <SYSVIEW_AddTask+0xcc>)
 8003906:	4613      	mov	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	3308      	adds	r3, #8
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003916:	4b15      	ldr	r3, [pc, #84]	; (800396c <SYSVIEW_AddTask+0xc4>)
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	4916      	ldr	r1, [pc, #88]	; (8003974 <SYSVIEW_AddTask+0xcc>)
 800391c:	4613      	mov	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	330c      	adds	r3, #12
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800392c:	4b0f      	ldr	r3, [pc, #60]	; (800396c <SYSVIEW_AddTask+0xc4>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	4910      	ldr	r1, [pc, #64]	; (8003974 <SYSVIEW_AddTask+0xcc>)
 8003932:	4613      	mov	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	3310      	adds	r3, #16
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003942:	4b0a      	ldr	r3, [pc, #40]	; (800396c <SYSVIEW_AddTask+0xc4>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	3301      	adds	r3, #1
 8003948:	4a08      	ldr	r2, [pc, #32]	; (800396c <SYSVIEW_AddTask+0xc4>)
 800394a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	68b9      	ldr	r1, [r7, #8]
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 f80e 	bl	8003978 <SYSVIEW_SendTaskInfo>
 800395c:	e000      	b.n	8003960 <SYSVIEW_AddTask+0xb8>
    return;
 800395e:	bf00      	nop

}
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	08005fe4 	.word	0x08005fe4
 800396c:	20012e50 	.word	0x20012e50
 8003970:	08005fec 	.word	0x08005fec
 8003974:	20012db0 	.word	0x20012db0

08003978 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003978:	b580      	push	{r7, lr}
 800397a:	b08a      	sub	sp, #40	; 0x28
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
 8003984:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003986:	f107 0314 	add.w	r3, r7, #20
 800398a:	2214      	movs	r2, #20
 800398c:	2100      	movs	r1, #0
 800398e:	4618      	mov	r0, r3
 8003990:	f002 faac 	bl	8005eec <memset>
  TaskInfo.TaskID     = TaskID;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80039a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80039a8:	f107 0314 	add.w	r3, r7, #20
 80039ac:	4618      	mov	r0, r3
 80039ae:	f001 fdd7 	bl	8005560 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80039b2:	bf00      	nop
 80039b4:	3728      	adds	r7, #40	; 0x28
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <__NVIC_EnableIRQ>:
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	db0b      	blt.n	80039e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	f003 021f 	and.w	r2, r3, #31
 80039d4:	4907      	ldr	r1, [pc, #28]	; (80039f4 <__NVIC_EnableIRQ+0x38>)
 80039d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	2001      	movs	r0, #1
 80039de:	fa00 f202 	lsl.w	r2, r0, r2
 80039e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	e000e100 	.word	0xe000e100

080039f8 <__NVIC_SetPriority>:
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	6039      	str	r1, [r7, #0]
 8003a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	db0a      	blt.n	8003a22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	490c      	ldr	r1, [pc, #48]	; (8003a44 <__NVIC_SetPriority+0x4c>)
 8003a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a16:	0112      	lsls	r2, r2, #4
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a20:	e00a      	b.n	8003a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	4908      	ldr	r1, [pc, #32]	; (8003a48 <__NVIC_SetPriority+0x50>)
 8003a28:	79fb      	ldrb	r3, [r7, #7]
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	3b04      	subs	r3, #4
 8003a30:	0112      	lsls	r2, r2, #4
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	440b      	add	r3, r1
 8003a36:	761a      	strb	r2, [r3, #24]
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	e000e100 	.word	0xe000e100
 8003a48:	e000ed00 	.word	0xe000ed00

08003a4c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003a52:	f002 f9db 	bl	8005e0c <SEGGER_SYSVIEW_IsStarted>
 8003a56:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8003a5e:	f001 fc03 	bl	8005268 <SEGGER_SYSVIEW_Start>
  }
}
 8003a62:	bf00      	nop
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
	...

08003a6c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003a76:	4b0c      	ldr	r3, [pc, #48]	; (8003aa8 <_cbOnUARTRx+0x3c>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d806      	bhi.n	8003a8c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8003a7e:	4b0a      	ldr	r3, [pc, #40]	; (8003aa8 <_cbOnUARTRx+0x3c>)
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	3301      	adds	r3, #1
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	4b08      	ldr	r3, [pc, #32]	; (8003aa8 <_cbOnUARTRx+0x3c>)
 8003a88:	701a      	strb	r2, [r3, #0]
    goto Done;
 8003a8a:	e009      	b.n	8003aa0 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8003a8c:	f7ff ffde 	bl	8003a4c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003a90:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <_cbOnUARTRx+0x3c>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	4618      	mov	r0, r3
 8003a96:	1dfb      	adds	r3, r7, #7
 8003a98:	2201      	movs	r2, #1
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	f000 fb9c 	bl	80041d8 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003aa0:	bf00      	nop
}
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	20000014 	.word	0x20000014

08003aac <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003ab4:	4b14      	ldr	r3, [pc, #80]	; (8003b08 <_cbOnUARTTx+0x5c>)
 8003ab6:	785b      	ldrb	r3, [r3, #1]
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d80f      	bhi.n	8003adc <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8003abc:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <_cbOnUARTTx+0x5c>)
 8003abe:	785b      	ldrb	r3, [r3, #1]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4b12      	ldr	r3, [pc, #72]	; (8003b0c <_cbOnUARTTx+0x60>)
 8003ac4:	5c9a      	ldrb	r2, [r3, r2]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8003aca:	4b0f      	ldr	r3, [pc, #60]	; (8003b08 <_cbOnUARTTx+0x5c>)
 8003acc:	785b      	ldrb	r3, [r3, #1]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	4b0d      	ldr	r3, [pc, #52]	; (8003b08 <_cbOnUARTTx+0x5c>)
 8003ad4:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003ada:	e00f      	b.n	8003afc <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003adc:	4b0a      	ldr	r3, [pc, #40]	; (8003b08 <_cbOnUARTTx+0x5c>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fa1b 	bl	8003f20 <SEGGER_RTT_ReadUpBufferNoLock>
 8003aea:	4603      	mov	r3, r0
 8003aec:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	da02      	bge.n	8003afa <_cbOnUARTTx+0x4e>
    r = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	e000      	b.n	8003afc <_cbOnUARTTx+0x50>
  }
Done:
 8003afa:	bf00      	nop
  return r;
 8003afc:	68fb      	ldr	r3, [r7, #12]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20000014 	.word	0x20000014
 8003b0c:	08006070 	.word	0x08006070

08003b10 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003b18:	4a04      	ldr	r2, [pc, #16]	; (8003b2c <SEGGER_UART_init+0x1c>)
 8003b1a:	4905      	ldr	r1, [pc, #20]	; (8003b30 <SEGGER_UART_init+0x20>)
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f863 	bl	8003be8 <HIF_UART_Init>
}
 8003b22:	bf00      	nop
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	08003a6d 	.word	0x08003a6d
 8003b30:	08003aad 	.word	0x08003aad

08003b34 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003b3a:	4b1e      	ldr	r3, [pc, #120]	; (8003bb4 <USART2_IRQHandler+0x80>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f003 0320 	and.w	r3, r3, #32
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d011      	beq.n	8003b6e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003b4a:	4b1b      	ldr	r3, [pc, #108]	; (8003bb8 <USART2_IRQHandler+0x84>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f003 030b 	and.w	r3, r3, #11
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d108      	bne.n	8003b6e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003b5c:	4b17      	ldr	r3, [pc, #92]	; (8003bbc <USART2_IRQHandler+0x88>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d004      	beq.n	8003b6e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003b64:	4b15      	ldr	r3, [pc, #84]	; (8003bbc <USART2_IRQHandler+0x88>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	79fa      	ldrb	r2, [r7, #7]
 8003b6a:	4610      	mov	r0, r2
 8003b6c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d01a      	beq.n	8003bae <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003b78:	4b11      	ldr	r3, [pc, #68]	; (8003bc0 <USART2_IRQHandler+0x8c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d015      	beq.n	8003bac <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003b80:	4b0f      	ldr	r3, [pc, #60]	; (8003bc0 <USART2_IRQHandler+0x8c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	1dfa      	adds	r2, r7, #7
 8003b86:	4610      	mov	r0, r2
 8003b88:	4798      	blx	r3
 8003b8a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d106      	bne.n	8003ba0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003b92:	4b0c      	ldr	r3, [pc, #48]	; (8003bc4 <USART2_IRQHandler+0x90>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a0b      	ldr	r2, [pc, #44]	; (8003bc4 <USART2_IRQHandler+0x90>)
 8003b98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b9c:	6013      	str	r3, [r2, #0]
 8003b9e:	e006      	b.n	8003bae <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003ba0:	4b04      	ldr	r3, [pc, #16]	; (8003bb4 <USART2_IRQHandler+0x80>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003ba4:	79fa      	ldrb	r2, [r7, #7]
 8003ba6:	4b04      	ldr	r3, [pc, #16]	; (8003bb8 <USART2_IRQHandler+0x84>)
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	e000      	b.n	8003bae <USART2_IRQHandler+0x7a>
      return;
 8003bac:	bf00      	nop
    }
  }
}
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40004400 	.word	0x40004400
 8003bb8:	40004404 	.word	0x40004404
 8003bbc:	20012e54 	.word	0x20012e54
 8003bc0:	20012e58 	.word	0x20012e58
 8003bc4:	4000440c 	.word	0x4000440c

08003bc8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003bcc:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a04      	ldr	r2, [pc, #16]	; (8003be4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bd6:	6013      	str	r3, [r2, #0]
}
 8003bd8:	bf00      	nop
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	4000440c 	.word	0x4000440c

08003be8 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003bf4:	4b2e      	ldr	r3, [pc, #184]	; (8003cb0 <HIF_UART_Init+0xc8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a2d      	ldr	r2, [pc, #180]	; (8003cb0 <HIF_UART_Init+0xc8>)
 8003bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bfe:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8003c00:	4b2c      	ldr	r3, [pc, #176]	; (8003cb4 <HIF_UART_Init+0xcc>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a2b      	ldr	r2, [pc, #172]	; (8003cb4 <HIF_UART_Init+0xcc>)
 8003c06:	f043 0301 	orr.w	r3, r3, #1
 8003c0a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8003c0c:	4b2a      	ldr	r3, [pc, #168]	; (8003cb8 <HIF_UART_Init+0xd0>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c18:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8003c20:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003c22:	4a25      	ldr	r2, [pc, #148]	; (8003cb8 <HIF_UART_Init+0xd0>)
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003c28:	4b24      	ldr	r3, [pc, #144]	; (8003cbc <HIF_UART_Init+0xd4>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c34:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003c3c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8003c3e:	4a1f      	ldr	r2, [pc, #124]	; (8003cbc <HIF_UART_Init+0xd4>)
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003c44:	4b1e      	ldr	r3, [pc, #120]	; (8003cc0 <HIF_UART_Init+0xd8>)
 8003c46:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8003c4a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8003c4c:	4b1d      	ldr	r3, [pc, #116]	; (8003cc4 <HIF_UART_Init+0xdc>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003c52:	4b1d      	ldr	r3, [pc, #116]	; (8003cc8 <HIF_UART_Init+0xe0>)
 8003c54:	2280      	movs	r2, #128	; 0x80
 8003c56:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8003c5e:	4a1b      	ldr	r2, [pc, #108]	; (8003ccc <HIF_UART_Init+0xe4>)
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c66:	3301      	adds	r3, #1
 8003c68:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	085b      	lsrs	r3, r3, #1
 8003c6e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c76:	d302      	bcc.n	8003c7e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003c78:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003c7c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d004      	beq.n	8003c8e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	4a11      	ldr	r2, [pc, #68]	; (8003cd0 <HIF_UART_Init+0xe8>)
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8003c8e:	4a11      	ldr	r2, [pc, #68]	; (8003cd4 <HIF_UART_Init+0xec>)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003c94:	4a10      	ldr	r2, [pc, #64]	; (8003cd8 <HIF_UART_Init+0xf0>)
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003c9a:	2106      	movs	r1, #6
 8003c9c:	2026      	movs	r0, #38	; 0x26
 8003c9e:	f7ff feab 	bl	80039f8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003ca2:	2026      	movs	r0, #38	; 0x26
 8003ca4:	f7ff fe8a 	bl	80039bc <__NVIC_EnableIRQ>
}
 8003ca8:	bf00      	nop
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40023840 	.word	0x40023840
 8003cb4:	40023830 	.word	0x40023830
 8003cb8:	40020020 	.word	0x40020020
 8003cbc:	40020000 	.word	0x40020000
 8003cc0:	4000440c 	.word	0x4000440c
 8003cc4:	40004410 	.word	0x40004410
 8003cc8:	40004414 	.word	0x40004414
 8003ccc:	0501bd00 	.word	0x0501bd00
 8003cd0:	40004408 	.word	0x40004408
 8003cd4:	20012e54 	.word	0x20012e54
 8003cd8:	20012e58 	.word	0x20012e58

08003cdc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003ce2:	4b26      	ldr	r3, [pc, #152]	; (8003d7c <_DoInit+0xa0>)
 8003ce4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003ce6:	22a8      	movs	r2, #168	; 0xa8
 8003ce8:	2100      	movs	r1, #0
 8003cea:	6838      	ldr	r0, [r7, #0]
 8003cec:	f002 f8fe 	bl	8005eec <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	2203      	movs	r2, #3
 8003cf4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2203      	movs	r2, #3
 8003cfa:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	4a20      	ldr	r2, [pc, #128]	; (8003d80 <_DoInit+0xa4>)
 8003d00:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	4a1f      	ldr	r2, [pc, #124]	; (8003d84 <_DoInit+0xa8>)
 8003d06:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d0e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	2200      	movs	r2, #0
 8003d14:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	4a16      	ldr	r2, [pc, #88]	; (8003d80 <_DoInit+0xa4>)
 8003d26:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	4a17      	ldr	r2, [pc, #92]	; (8003d88 <_DoInit+0xac>)
 8003d2c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2210      	movs	r2, #16
 8003d32:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	2200      	movs	r2, #0
 8003d38:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	2200      	movs	r2, #0
 8003d44:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003d46:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	607b      	str	r3, [r7, #4]
 8003d4e:	e00c      	b.n	8003d6a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f1c3 030f 	rsb	r3, r3, #15
 8003d56:	4a0d      	ldr	r2, [pc, #52]	; (8003d8c <_DoInit+0xb0>)
 8003d58:	5cd1      	ldrb	r1, [r2, r3]
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4413      	add	r3, r2
 8003d60:	460a      	mov	r2, r1
 8003d62:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3301      	adds	r3, #1
 8003d68:	607b      	str	r3, [r7, #4]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b0f      	cmp	r3, #15
 8003d6e:	d9ef      	bls.n	8003d50 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003d70:	f3bf 8f5f 	dmb	sy
}
 8003d74:	bf00      	nop
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	20012e5c 	.word	0x20012e5c
 8003d80:	0800603c 	.word	0x0800603c
 8003d84:	20012f04 	.word	0x20012f04
 8003d88:	20013304 	.word	0x20013304
 8003d8c:	08006074 	.word	0x08006074

08003d90 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b08a      	sub	sp, #40	; 0x28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d905      	bls.n	8003dc0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003dbe:	e007      	b.n	8003dd0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	69b9      	ldr	r1, [r7, #24]
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	1acb      	subs	r3, r1, r3
 8003dca:	4413      	add	r3, r2
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	bf28      	it	cs
 8003dde:	4613      	movcs	r3, r2
 8003de0:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4293      	cmp	r3, r2
 8003de8:	bf28      	it	cs
 8003dea:	4613      	movcs	r3, r2
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	4413      	add	r3, r2
 8003df6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dfa:	68b9      	ldr	r1, [r7, #8]
 8003dfc:	6978      	ldr	r0, [r7, #20]
 8003dfe:	f002 f867 	bl	8005ed0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003e02:	6a3a      	ldr	r2, [r7, #32]
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	4413      	add	r3, r2
 8003e08:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	4413      	add	r3, r2
 8003e10:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003e1a:	69fa      	ldr	r2, [r7, #28]
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	4413      	add	r3, r2
 8003e20:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	69fa      	ldr	r2, [r7, #28]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d101      	bne.n	8003e30 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003e30:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	69fa      	ldr	r2, [r7, #28]
 8003e38:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1b2      	bne.n	8003da6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003e40:	6a3b      	ldr	r3, [r7, #32]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3728      	adds	r7, #40	; 0x28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b088      	sub	sp, #32
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	60f8      	str	r0, [r7, #12]
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d911      	bls.n	8003e92 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	4413      	add	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	68b9      	ldr	r1, [r7, #8]
 8003e7c:	6938      	ldr	r0, [r7, #16]
 8003e7e:	f002 f827 	bl	8005ed0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003e82:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003e86:	69fa      	ldr	r2, [r7, #28]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	441a      	add	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003e90:	e01f      	b.n	8003ed2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	68b9      	ldr	r1, [r7, #8]
 8003ea4:	6938      	ldr	r0, [r7, #16]
 8003ea6:	f002 f813 	bl	8005ed0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	6938      	ldr	r0, [r7, #16]
 8003ec4:	f002 f804 	bl	8005ed0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003ec8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	60da      	str	r2, [r3, #12]
}
 8003ed2:	bf00      	nop
 8003ed4:	3720      	adds	r7, #32
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003eda:	b480      	push	{r7}
 8003edc:	b087      	sub	sp, #28
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d808      	bhi.n	8003f08 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689a      	ldr	r2, [r3, #8]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	1ad2      	subs	r2, r2, r3
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	4413      	add	r3, r2
 8003f02:	3b01      	subs	r3, #1
 8003f04:	617b      	str	r3, [r7, #20]
 8003f06:	e004      	b.n	8003f12 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003f12:	697b      	ldr	r3, [r7, #20]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	371c      	adds	r7, #28
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b08c      	sub	sp, #48	; 0x30
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003f2c:	4b3e      	ldr	r3, [pc, #248]	; (8004028 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003f2e:	623b      	str	r3, [r7, #32]
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003f3a:	f7ff fecf 	bl	8003cdc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	4613      	mov	r3, r2
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	4413      	add	r3, r2
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	4a37      	ldr	r2, [pc, #220]	; (8004028 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003f4c:	4413      	add	r3, r2
 8003f4e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003f60:	2300      	movs	r3, #0
 8003f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003f64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d92b      	bls.n	8003fc4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	bf28      	it	cs
 8003f7e:	4613      	movcs	r3, r2
 8003f80:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f88:	4413      	add	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	6939      	ldr	r1, [r7, #16]
 8003f90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f92:	f001 ff9d 	bl	8005ed0 <memcpy>
    NumBytesRead += NumBytesRem;
 8003f96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003fae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d101      	bne.n	8003fc4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	bf28      	it	cs
 8003fd4:	4613      	movcs	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d019      	beq.n	8004012 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe4:	4413      	add	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	6939      	ldr	r1, [r7, #16]
 8003fec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fee:	f001 ff6f 	bl	8005ed0 <memcpy>
    NumBytesRead += NumBytesRem;
 8003ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	4413      	add	r3, r2
 8004000:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800400a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	4413      	add	r3, r2
 8004010:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800401c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800401e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004020:	4618      	mov	r0, r3
 8004022:	3730      	adds	r7, #48	; 0x30
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	20012e5c 	.word	0x20012e5c

0800402c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800402c:	b580      	push	{r7, lr}
 800402e:	b08c      	sub	sp, #48	; 0x30
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004038:	4b3e      	ldr	r3, [pc, #248]	; (8004134 <SEGGER_RTT_ReadNoLock+0x108>)
 800403a:	623b      	str	r3, [r7, #32]
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <SEGGER_RTT_ReadNoLock+0x1e>
 8004046:	f7ff fe49 	bl	8003cdc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	4613      	mov	r3, r2
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	4413      	add	r3, r2
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	3360      	adds	r3, #96	; 0x60
 8004056:	4a37      	ldr	r2, [pc, #220]	; (8004134 <SEGGER_RTT_ReadNoLock+0x108>)
 8004058:	4413      	add	r3, r2
 800405a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800406c:	2300      	movs	r3, #0
 800406e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	429a      	cmp	r2, r3
 8004076:	d92b      	bls.n	80040d0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4293      	cmp	r3, r2
 8004088:	bf28      	it	cs
 800408a:	4613      	movcs	r3, r2
 800408c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004094:	4413      	add	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	6939      	ldr	r1, [r7, #16]
 800409c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800409e:	f001 ff17 	bl	8005ed0 <memcpy>
    NumBytesRead += NumBytesRem;
 80040a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	4413      	add	r3, r2
 80040a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80040aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	4413      	add	r3, r2
 80040b0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80040ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	4413      	add	r3, r2
 80040c0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d101      	bne.n	80040d0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80040cc:	2300      	movs	r3, #0
 80040ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4293      	cmp	r3, r2
 80040de:	bf28      	it	cs
 80040e0:	4613      	movcs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d019      	beq.n	800411e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f0:	4413      	add	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	6939      	ldr	r1, [r7, #16]
 80040f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040fa:	f001 fee9 	bl	8005ed0 <memcpy>
    NumBytesRead += NumBytesRem;
 80040fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	4413      	add	r3, r2
 8004104:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	4413      	add	r3, r2
 800410c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004116:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	4413      	add	r3, r2
 800411c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800411e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004128:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800412a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800412c:	4618      	mov	r0, r3
 800412e:	3730      	adds	r7, #48	; 0x30
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	20012e5c 	.word	0x20012e5c

08004138 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004138:	b580      	push	{r7, lr}
 800413a:	b088      	sub	sp, #32
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	4613      	mov	r3, r2
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	4413      	add	r3, r2
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	3360      	adds	r3, #96	; 0x60
 8004154:	4a1f      	ldr	r2, [pc, #124]	; (80041d4 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8004156:	4413      	add	r3, r2
 8004158:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d029      	beq.n	80041b6 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8004162:	2b02      	cmp	r3, #2
 8004164:	d82e      	bhi.n	80041c4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800416a:	2b01      	cmp	r3, #1
 800416c:	d013      	beq.n	8004196 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800416e:	e029      	b.n	80041c4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004170:	6978      	ldr	r0, [r7, #20]
 8004172:	f7ff feb2 	bl	8003eda <_GetAvailWriteSpace>
 8004176:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	429a      	cmp	r2, r3
 800417e:	d202      	bcs.n	8004186 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8004180:	2300      	movs	r3, #0
 8004182:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004184:	e021      	b.n	80041ca <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	69b9      	ldr	r1, [r7, #24]
 800418e:	6978      	ldr	r0, [r7, #20]
 8004190:	f7ff fe5b 	bl	8003e4a <_WriteNoCheck>
    break;
 8004194:	e019      	b.n	80041ca <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004196:	6978      	ldr	r0, [r7, #20]
 8004198:	f7ff fe9f 	bl	8003eda <_GetAvailWriteSpace>
 800419c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	4293      	cmp	r3, r2
 80041a4:	bf28      	it	cs
 80041a6:	4613      	movcs	r3, r2
 80041a8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80041aa:	69fa      	ldr	r2, [r7, #28]
 80041ac:	69b9      	ldr	r1, [r7, #24]
 80041ae:	6978      	ldr	r0, [r7, #20]
 80041b0:	f7ff fe4b 	bl	8003e4a <_WriteNoCheck>
    break;
 80041b4:	e009      	b.n	80041ca <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	69b9      	ldr	r1, [r7, #24]
 80041ba:	6978      	ldr	r0, [r7, #20]
 80041bc:	f7ff fde8 	bl	8003d90 <_WriteBlocking>
 80041c0:	61f8      	str	r0, [r7, #28]
    break;
 80041c2:	e002      	b.n	80041ca <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80041c4:	2300      	movs	r3, #0
 80041c6:	61fb      	str	r3, [r7, #28]
    break;
 80041c8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80041ca:	69fb      	ldr	r3, [r7, #28]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3720      	adds	r7, #32
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	20012e5c 	.word	0x20012e5c

080041d8 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80041e4:	4b0e      	ldr	r3, [pc, #56]	; (8004220 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80041e6:	61fb      	str	r3, [r7, #28]
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <SEGGER_RTT_WriteDownBuffer+0x1e>
 80041f2:	f7ff fd73 	bl	8003cdc <_DoInit>
  SEGGER_RTT_LOCK();
 80041f6:	f3ef 8311 	mrs	r3, BASEPRI
 80041fa:	f04f 0120 	mov.w	r1, #32
 80041fe:	f381 8811 	msr	BASEPRI, r1
 8004202:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	68b9      	ldr	r1, [r7, #8]
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f7ff ff95 	bl	8004138 <SEGGER_RTT_WriteDownBufferNoLock>
 800420e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004216:	697b      	ldr	r3, [r7, #20]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3720      	adds	r7, #32
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	20012e5c 	.word	0x20012e5c

08004224 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004224:	b580      	push	{r7, lr}
 8004226:	b088      	sub	sp, #32
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
 8004230:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004232:	4b3d      	ldr	r3, [pc, #244]	; (8004328 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004234:	61bb      	str	r3, [r7, #24]
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004240:	f7ff fd4c 	bl	8003cdc <_DoInit>
  SEGGER_RTT_LOCK();
 8004244:	f3ef 8311 	mrs	r3, BASEPRI
 8004248:	f04f 0120 	mov.w	r1, #32
 800424c:	f381 8811 	msr	BASEPRI, r1
 8004250:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004252:	4b35      	ldr	r3, [pc, #212]	; (8004328 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004254:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004256:	2300      	movs	r3, #0
 8004258:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800425a:	6939      	ldr	r1, [r7, #16]
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	1c5a      	adds	r2, r3, #1
 8004260:	4613      	mov	r3, r2
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	4413      	add	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	440b      	add	r3, r1
 800426a:	3304      	adds	r3, #4
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d008      	beq.n	8004284 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	3301      	adds	r3, #1
 8004276:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	69fa      	ldr	r2, [r7, #28]
 800427e:	429a      	cmp	r2, r3
 8004280:	dbeb      	blt.n	800425a <SEGGER_RTT_AllocUpBuffer+0x36>
 8004282:	e000      	b.n	8004286 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004284:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	69fa      	ldr	r2, [r7, #28]
 800428c:	429a      	cmp	r2, r3
 800428e:	da3f      	bge.n	8004310 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004290:	6939      	ldr	r1, [r7, #16]
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	1c5a      	adds	r2, r3, #1
 8004296:	4613      	mov	r3, r2
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	4413      	add	r3, r2
 800429c:	00db      	lsls	r3, r3, #3
 800429e:	440b      	add	r3, r1
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80042a4:	6939      	ldr	r1, [r7, #16]
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	1c5a      	adds	r2, r3, #1
 80042aa:	4613      	mov	r3, r2
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	4413      	add	r3, r2
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	440b      	add	r3, r1
 80042b4:	3304      	adds	r3, #4
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80042ba:	6939      	ldr	r1, [r7, #16]
 80042bc:	69fa      	ldr	r2, [r7, #28]
 80042be:	4613      	mov	r3, r2
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	4413      	add	r3, r2
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	440b      	add	r3, r1
 80042c8:	3320      	adds	r3, #32
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80042ce:	6939      	ldr	r1, [r7, #16]
 80042d0:	69fa      	ldr	r2, [r7, #28]
 80042d2:	4613      	mov	r3, r2
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	4413      	add	r3, r2
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	440b      	add	r3, r1
 80042dc:	3328      	adds	r3, #40	; 0x28
 80042de:	2200      	movs	r2, #0
 80042e0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80042e2:	6939      	ldr	r1, [r7, #16]
 80042e4:	69fa      	ldr	r2, [r7, #28]
 80042e6:	4613      	mov	r3, r2
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	4413      	add	r3, r2
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	440b      	add	r3, r1
 80042f0:	3324      	adds	r3, #36	; 0x24
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80042f6:	6939      	ldr	r1, [r7, #16]
 80042f8:	69fa      	ldr	r2, [r7, #28]
 80042fa:	4613      	mov	r3, r2
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	4413      	add	r3, r2
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	440b      	add	r3, r1
 8004304:	332c      	adds	r3, #44	; 0x2c
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800430a:	f3bf 8f5f 	dmb	sy
 800430e:	e002      	b.n	8004316 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004310:	f04f 33ff 	mov.w	r3, #4294967295
 8004314:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800431c:	69fb      	ldr	r3, [r7, #28]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3720      	adds	r7, #32
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	20012e5c 	.word	0x20012e5c

0800432c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800432c:	b580      	push	{r7, lr}
 800432e:	b08a      	sub	sp, #40	; 0x28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800433a:	4b21      	ldr	r3, [pc, #132]	; (80043c0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800433c:	623b      	str	r3, [r7, #32]
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004348:	f7ff fcc8 	bl	8003cdc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800434c:	4b1c      	ldr	r3, [pc, #112]	; (80043c0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800434e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2b02      	cmp	r3, #2
 8004354:	d82c      	bhi.n	80043b0 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004356:	f3ef 8311 	mrs	r3, BASEPRI
 800435a:	f04f 0120 	mov.w	r1, #32
 800435e:	f381 8811 	msr	BASEPRI, r1
 8004362:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	4613      	mov	r3, r2
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	4413      	add	r3, r2
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	3360      	adds	r3, #96	; 0x60
 8004370:	69fa      	ldr	r2, [r7, #28]
 8004372:	4413      	add	r3, r2
 8004374:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00e      	beq.n	800439a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2200      	movs	r2, #0
 8004392:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	2200      	movs	r2, #0
 8004398:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800439e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80043a0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80043aa:	2300      	movs	r3, #0
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
 80043ae:	e002      	b.n	80043b6 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80043b0:	f04f 33ff 	mov.w	r3, #4294967295
 80043b4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3728      	adds	r7, #40	; 0x28
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	20012e5c 	.word	0x20012e5c

080043c4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80043d0:	2300      	movs	r3, #0
 80043d2:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00f      	beq.n	80043fa <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80043da:	e002      	b.n	80043e2 <_EncodeStr+0x1e>
      Len++;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	3301      	adds	r3, #1
 80043e0:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	4413      	add	r3, r2
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1f6      	bne.n	80043dc <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d901      	bls.n	80043fa <_EncodeStr+0x36>
      Len = Limit;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	2bfe      	cmp	r3, #254	; 0xfe
 80043fe:	d806      	bhi.n	800440e <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	1c5a      	adds	r2, r3, #1
 8004404:	60fa      	str	r2, [r7, #12]
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	701a      	strb	r2, [r3, #0]
 800440c:	e011      	b.n	8004432 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	60fa      	str	r2, [r7, #12]
 8004414:	22ff      	movs	r2, #255	; 0xff
 8004416:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	1c5a      	adds	r2, r3, #1
 800441c:	60fa      	str	r2, [r7, #12]
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	0a19      	lsrs	r1, r3, #8
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	60fa      	str	r2, [r7, #12]
 800442e:	b2ca      	uxtb	r2, r1
 8004430:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004432:	2300      	movs	r3, #0
 8004434:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004436:	e00a      	b.n	800444e <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	1c53      	adds	r3, r2, #1
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	1c59      	adds	r1, r3, #1
 8004442:	60f9      	str	r1, [r7, #12]
 8004444:	7812      	ldrb	r2, [r2, #0]
 8004446:	701a      	strb	r2, [r3, #0]
    n++;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	3301      	adds	r3, #1
 800444c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	429a      	cmp	r2, r3
 8004454:	d3f0      	bcc.n	8004438 <_EncodeStr+0x74>
  }
  return pPayload;
 8004456:	68fb      	ldr	r3, [r7, #12]
}
 8004458:	4618      	mov	r0, r3
 800445a:	371c      	adds	r7, #28
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3307      	adds	r3, #7
}
 8004470:	4618      	mov	r0, r3
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004482:	4b35      	ldr	r3, [pc, #212]	; (8004558 <_HandleIncomingPacket+0xdc>)
 8004484:	7e1b      	ldrb	r3, [r3, #24]
 8004486:	4618      	mov	r0, r3
 8004488:	1cfb      	adds	r3, r7, #3
 800448a:	2201      	movs	r2, #1
 800448c:	4619      	mov	r1, r3
 800448e:	f7ff fdcd 	bl	800402c <SEGGER_RTT_ReadNoLock>
 8004492:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d052      	beq.n	8004540 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800449a:	78fb      	ldrb	r3, [r7, #3]
 800449c:	2b80      	cmp	r3, #128	; 0x80
 800449e:	d031      	beq.n	8004504 <_HandleIncomingPacket+0x88>
 80044a0:	2b80      	cmp	r3, #128	; 0x80
 80044a2:	dc40      	bgt.n	8004526 <_HandleIncomingPacket+0xaa>
 80044a4:	2b07      	cmp	r3, #7
 80044a6:	dc15      	bgt.n	80044d4 <_HandleIncomingPacket+0x58>
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	dd3c      	ble.n	8004526 <_HandleIncomingPacket+0xaa>
 80044ac:	3b01      	subs	r3, #1
 80044ae:	2b06      	cmp	r3, #6
 80044b0:	d839      	bhi.n	8004526 <_HandleIncomingPacket+0xaa>
 80044b2:	a201      	add	r2, pc, #4	; (adr r2, 80044b8 <_HandleIncomingPacket+0x3c>)
 80044b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b8:	080044db 	.word	0x080044db
 80044bc:	080044e1 	.word	0x080044e1
 80044c0:	080044e7 	.word	0x080044e7
 80044c4:	080044ed 	.word	0x080044ed
 80044c8:	080044f3 	.word	0x080044f3
 80044cc:	080044f9 	.word	0x080044f9
 80044d0:	080044ff 	.word	0x080044ff
 80044d4:	2b7f      	cmp	r3, #127	; 0x7f
 80044d6:	d035      	beq.n	8004544 <_HandleIncomingPacket+0xc8>
 80044d8:	e025      	b.n	8004526 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80044da:	f000 fec5 	bl	8005268 <SEGGER_SYSVIEW_Start>
      break;
 80044de:	e036      	b.n	800454e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80044e0:	f000 ff7e 	bl	80053e0 <SEGGER_SYSVIEW_Stop>
      break;
 80044e4:	e033      	b.n	800454e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80044e6:	f001 f957 	bl	8005798 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80044ea:	e030      	b.n	800454e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80044ec:	f001 f91c 	bl	8005728 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80044f0:	e02d      	b.n	800454e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80044f2:	f000 ff9b 	bl	800542c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80044f6:	e02a      	b.n	800454e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80044f8:	f001 fbda 	bl	8005cb0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80044fc:	e027      	b.n	800454e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80044fe:	f001 fbb9 	bl	8005c74 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004502:	e024      	b.n	800454e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004504:	4b14      	ldr	r3, [pc, #80]	; (8004558 <_HandleIncomingPacket+0xdc>)
 8004506:	7e1b      	ldrb	r3, [r3, #24]
 8004508:	4618      	mov	r0, r3
 800450a:	1cfb      	adds	r3, r7, #3
 800450c:	2201      	movs	r2, #1
 800450e:	4619      	mov	r1, r3
 8004510:	f7ff fd8c 	bl	800402c <SEGGER_RTT_ReadNoLock>
 8004514:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d015      	beq.n	8004548 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800451c:	78fb      	ldrb	r3, [r7, #3]
 800451e:	4618      	mov	r0, r3
 8004520:	f001 fb28 	bl	8005b74 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004524:	e010      	b.n	8004548 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004526:	78fb      	ldrb	r3, [r7, #3]
 8004528:	b25b      	sxtb	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	da0e      	bge.n	800454c <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800452e:	4b0a      	ldr	r3, [pc, #40]	; (8004558 <_HandleIncomingPacket+0xdc>)
 8004530:	7e1b      	ldrb	r3, [r3, #24]
 8004532:	4618      	mov	r0, r3
 8004534:	1cfb      	adds	r3, r7, #3
 8004536:	2201      	movs	r2, #1
 8004538:	4619      	mov	r1, r3
 800453a:	f7ff fd77 	bl	800402c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800453e:	e005      	b.n	800454c <_HandleIncomingPacket+0xd0>
    }
  }
 8004540:	bf00      	nop
 8004542:	e004      	b.n	800454e <_HandleIncomingPacket+0xd2>
      break;
 8004544:	bf00      	nop
 8004546:	e002      	b.n	800454e <_HandleIncomingPacket+0xd2>
      break;
 8004548:	bf00      	nop
 800454a:	e000      	b.n	800454e <_HandleIncomingPacket+0xd2>
      break;
 800454c:	bf00      	nop
}
 800454e:	bf00      	nop
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	2001431c 	.word	0x2001431c

0800455c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800455c:	b580      	push	{r7, lr}
 800455e:	b08c      	sub	sp, #48	; 0x30
 8004560:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004562:	2301      	movs	r3, #1
 8004564:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004566:	1d3b      	adds	r3, r7, #4
 8004568:	3301      	adds	r3, #1
 800456a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004570:	4b32      	ldr	r3, [pc, #200]	; (800463c <_TrySendOverflowPacket+0xe0>)
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	62bb      	str	r3, [r7, #40]	; 0x28
 8004576:	e00b      	b.n	8004590 <_TrySendOverflowPacket+0x34>
 8004578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457a:	b2da      	uxtb	r2, r3
 800457c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457e:	1c59      	adds	r1, r3, #1
 8004580:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004582:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	701a      	strb	r2, [r3, #0]
 800458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458c:	09db      	lsrs	r3, r3, #7
 800458e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004592:	2b7f      	cmp	r3, #127	; 0x7f
 8004594:	d8f0      	bhi.n	8004578 <_TrySendOverflowPacket+0x1c>
 8004596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800459c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800459e:	b2d2      	uxtb	r2, r2
 80045a0:	701a      	strb	r2, [r3, #0]
 80045a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80045a6:	4b26      	ldr	r3, [pc, #152]	; (8004640 <_TrySendOverflowPacket+0xe4>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80045ac:	4b23      	ldr	r3, [pc, #140]	; (800463c <_TrySendOverflowPacket+0xe0>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	627b      	str	r3, [r7, #36]	; 0x24
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	623b      	str	r3, [r7, #32]
 80045be:	e00b      	b.n	80045d8 <_TrySendOverflowPacket+0x7c>
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	1c59      	adds	r1, r3, #1
 80045c8:	6279      	str	r1, [r7, #36]	; 0x24
 80045ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	701a      	strb	r2, [r3, #0]
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	09db      	lsrs	r3, r3, #7
 80045d6:	623b      	str	r3, [r7, #32]
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	2b7f      	cmp	r3, #127	; 0x7f
 80045dc:	d8f0      	bhi.n	80045c0 <_TrySendOverflowPacket+0x64>
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	627a      	str	r2, [r7, #36]	; 0x24
 80045e4:	6a3a      	ldr	r2, [r7, #32]
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	701a      	strb	r2, [r3, #0]
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80045ee:	4b13      	ldr	r3, [pc, #76]	; (800463c <_TrySendOverflowPacket+0xe0>)
 80045f0:	785b      	ldrb	r3, [r3, #1]
 80045f2:	4618      	mov	r0, r3
 80045f4:	1d3b      	adds	r3, r7, #4
 80045f6:	69fa      	ldr	r2, [r7, #28]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	461a      	mov	r2, r3
 80045fc:	1d3b      	adds	r3, r7, #4
 80045fe:	4619      	mov	r1, r3
 8004600:	f7fb fde6 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004604:	4603      	mov	r3, r0
 8004606:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004608:	f7ff fade 	bl	8003bc8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d009      	beq.n	8004626 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004612:	4a0a      	ldr	r2, [pc, #40]	; (800463c <_TrySendOverflowPacket+0xe0>)
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004618:	4b08      	ldr	r3, [pc, #32]	; (800463c <_TrySendOverflowPacket+0xe0>)
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	3b01      	subs	r3, #1
 800461e:	b2da      	uxtb	r2, r3
 8004620:	4b06      	ldr	r3, [pc, #24]	; (800463c <_TrySendOverflowPacket+0xe0>)
 8004622:	701a      	strb	r2, [r3, #0]
 8004624:	e004      	b.n	8004630 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004626:	4b05      	ldr	r3, [pc, #20]	; (800463c <_TrySendOverflowPacket+0xe0>)
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	3301      	adds	r3, #1
 800462c:	4a03      	ldr	r2, [pc, #12]	; (800463c <_TrySendOverflowPacket+0xe0>)
 800462e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004630:	693b      	ldr	r3, [r7, #16]
}
 8004632:	4618      	mov	r0, r3
 8004634:	3730      	adds	r7, #48	; 0x30
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	2001431c 	.word	0x2001431c
 8004640:	e0001004 	.word	0xe0001004

08004644 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004644:	b580      	push	{r7, lr}
 8004646:	b08a      	sub	sp, #40	; 0x28
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004650:	4b96      	ldr	r3, [pc, #600]	; (80048ac <_SendPacket+0x268>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d010      	beq.n	800467a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004658:	4b94      	ldr	r3, [pc, #592]	; (80048ac <_SendPacket+0x268>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 8130 	beq.w	80048c2 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004662:	4b92      	ldr	r3, [pc, #584]	; (80048ac <_SendPacket+0x268>)
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	2b02      	cmp	r3, #2
 8004668:	d109      	bne.n	800467e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800466a:	f7ff ff77 	bl	800455c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800466e:	4b8f      	ldr	r3, [pc, #572]	; (80048ac <_SendPacket+0x268>)
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b01      	cmp	r3, #1
 8004674:	f040 8127 	bne.w	80048c6 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8004678:	e001      	b.n	800467e <_SendPacket+0x3a>
    goto Send;
 800467a:	bf00      	nop
 800467c:	e000      	b.n	8004680 <_SendPacket+0x3c>
Send:
 800467e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b1f      	cmp	r3, #31
 8004684:	d809      	bhi.n	800469a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004686:	4b89      	ldr	r3, [pc, #548]	; (80048ac <_SendPacket+0x268>)
 8004688:	69da      	ldr	r2, [r3, #28]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	fa22 f303 	lsr.w	r3, r2, r3
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b00      	cmp	r3, #0
 8004696:	f040 8118 	bne.w	80048ca <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b17      	cmp	r3, #23
 800469e:	d807      	bhi.n	80046b0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	3b01      	subs	r3, #1
 80046a4:	60fb      	str	r3, [r7, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	701a      	strb	r2, [r3, #0]
 80046ae:	e0c4      	b.n	800483a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	2b7f      	cmp	r3, #127	; 0x7f
 80046bc:	d912      	bls.n	80046e4 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	09da      	lsrs	r2, r3, #7
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	3b01      	subs	r3, #1
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	b2d2      	uxtb	r2, r2
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	3a01      	subs	r2, #1
 80046d6:	60fa      	str	r2, [r7, #12]
 80046d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	701a      	strb	r2, [r3, #0]
 80046e2:	e006      	b.n	80046f2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	3b01      	subs	r3, #1
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b7e      	cmp	r3, #126	; 0x7e
 80046f6:	d807      	bhi.n	8004708 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	b2da      	uxtb	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	701a      	strb	r2, [r3, #0]
 8004706:	e098      	b.n	800483a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800470e:	d212      	bcs.n	8004736 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	09da      	lsrs	r2, r3, #7
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	3b01      	subs	r3, #1
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	b2db      	uxtb	r3, r3
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	3a01      	subs	r2, #1
 8004728:	60fa      	str	r2, [r7, #12]
 800472a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800472e:	b2da      	uxtb	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	701a      	strb	r2, [r3, #0]
 8004734:	e081      	b.n	800483a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800473c:	d21d      	bcs.n	800477a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	0b9a      	lsrs	r2, r3, #14
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	3b01      	subs	r3, #1
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	b2d2      	uxtb	r2, r2
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	09db      	lsrs	r3, r3, #7
 8004752:	b2db      	uxtb	r3, r3
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	3a01      	subs	r2, #1
 8004758:	60fa      	str	r2, [r7, #12]
 800475a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800475e:	b2da      	uxtb	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	b2db      	uxtb	r3, r3
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	3a01      	subs	r2, #1
 800476c:	60fa      	str	r2, [r7, #12]
 800476e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004772:	b2da      	uxtb	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	701a      	strb	r2, [r3, #0]
 8004778:	e05f      	b.n	800483a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004780:	d228      	bcs.n	80047d4 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	0d5a      	lsrs	r2, r3, #21
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	3b01      	subs	r3, #1
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	b2d2      	uxtb	r2, r2
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	0b9b      	lsrs	r3, r3, #14
 8004796:	b2db      	uxtb	r3, r3
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	3a01      	subs	r2, #1
 800479c:	60fa      	str	r2, [r7, #12]
 800479e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	09db      	lsrs	r3, r3, #7
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	3a01      	subs	r2, #1
 80047b2:	60fa      	str	r2, [r7, #12]
 80047b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	3a01      	subs	r2, #1
 80047c6:	60fa      	str	r2, [r7, #12]
 80047c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	701a      	strb	r2, [r3, #0]
 80047d2:	e032      	b.n	800483a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	0f1a      	lsrs	r2, r3, #28
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	3b01      	subs	r3, #1
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	0d5b      	lsrs	r3, r3, #21
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	3a01      	subs	r2, #1
 80047ee:	60fa      	str	r2, [r7, #12]
 80047f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	0b9b      	lsrs	r3, r3, #14
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	3a01      	subs	r2, #1
 8004804:	60fa      	str	r2, [r7, #12]
 8004806:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800480a:	b2da      	uxtb	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	09db      	lsrs	r3, r3, #7
 8004814:	b2db      	uxtb	r3, r3
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	3a01      	subs	r2, #1
 800481a:	60fa      	str	r2, [r7, #12]
 800481c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004820:	b2da      	uxtb	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	b2db      	uxtb	r3, r3
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	3a01      	subs	r2, #1
 800482e:	60fa      	str	r2, [r7, #12]
 8004830:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004834:	b2da      	uxtb	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800483a:	4b1d      	ldr	r3, [pc, #116]	; (80048b0 <_SendPacket+0x26c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004840:	4b1a      	ldr	r3, [pc, #104]	; (80048ac <_SendPacket+0x268>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	627b      	str	r3, [r7, #36]	; 0x24
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	623b      	str	r3, [r7, #32]
 8004852:	e00b      	b.n	800486c <_SendPacket+0x228>
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	b2da      	uxtb	r2, r3
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	1c59      	adds	r1, r3, #1
 800485c:	6279      	str	r1, [r7, #36]	; 0x24
 800485e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	701a      	strb	r2, [r3, #0]
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	09db      	lsrs	r3, r3, #7
 800486a:	623b      	str	r3, [r7, #32]
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	2b7f      	cmp	r3, #127	; 0x7f
 8004870:	d8f0      	bhi.n	8004854 <_SendPacket+0x210>
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	1c5a      	adds	r2, r3, #1
 8004876:	627a      	str	r2, [r7, #36]	; 0x24
 8004878:	6a3a      	ldr	r2, [r7, #32]
 800487a:	b2d2      	uxtb	r2, r2
 800487c:	701a      	strb	r2, [r3, #0]
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004882:	4b0a      	ldr	r3, [pc, #40]	; (80048ac <_SendPacket+0x268>)
 8004884:	785b      	ldrb	r3, [r3, #1]
 8004886:	4618      	mov	r0, r3
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	461a      	mov	r2, r3
 8004890:	68f9      	ldr	r1, [r7, #12]
 8004892:	f7fb fc9d 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004896:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004898:	f7ff f996 	bl	8003bc8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d008      	beq.n	80048b4 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80048a2:	4a02      	ldr	r2, [pc, #8]	; (80048ac <_SendPacket+0x268>)
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	60d3      	str	r3, [r2, #12]
 80048a8:	e010      	b.n	80048cc <_SendPacket+0x288>
 80048aa:	bf00      	nop
 80048ac:	2001431c 	.word	0x2001431c
 80048b0:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80048b4:	4b19      	ldr	r3, [pc, #100]	; (800491c <_SendPacket+0x2d8>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	3301      	adds	r3, #1
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	4b17      	ldr	r3, [pc, #92]	; (800491c <_SendPacket+0x2d8>)
 80048be:	701a      	strb	r2, [r3, #0]
 80048c0:	e004      	b.n	80048cc <_SendPacket+0x288>
    goto SendDone;
 80048c2:	bf00      	nop
 80048c4:	e002      	b.n	80048cc <_SendPacket+0x288>
      goto SendDone;
 80048c6:	bf00      	nop
 80048c8:	e000      	b.n	80048cc <_SendPacket+0x288>
      goto SendDone;
 80048ca:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80048cc:	4b13      	ldr	r3, [pc, #76]	; (800491c <_SendPacket+0x2d8>)
 80048ce:	7e1b      	ldrb	r3, [r3, #24]
 80048d0:	4619      	mov	r1, r3
 80048d2:	4a13      	ldr	r2, [pc, #76]	; (8004920 <_SendPacket+0x2dc>)
 80048d4:	460b      	mov	r3, r1
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	440b      	add	r3, r1
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	4413      	add	r3, r2
 80048de:	336c      	adds	r3, #108	; 0x6c
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	4b0e      	ldr	r3, [pc, #56]	; (800491c <_SendPacket+0x2d8>)
 80048e4:	7e1b      	ldrb	r3, [r3, #24]
 80048e6:	4618      	mov	r0, r3
 80048e8:	490d      	ldr	r1, [pc, #52]	; (8004920 <_SendPacket+0x2dc>)
 80048ea:	4603      	mov	r3, r0
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	4403      	add	r3, r0
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	440b      	add	r3, r1
 80048f4:	3370      	adds	r3, #112	; 0x70
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d00b      	beq.n	8004914 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80048fc:	4b07      	ldr	r3, [pc, #28]	; (800491c <_SendPacket+0x2d8>)
 80048fe:	789b      	ldrb	r3, [r3, #2]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d107      	bne.n	8004914 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004904:	4b05      	ldr	r3, [pc, #20]	; (800491c <_SendPacket+0x2d8>)
 8004906:	2201      	movs	r2, #1
 8004908:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800490a:	f7ff fdb7 	bl	800447c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800490e:	4b03      	ldr	r3, [pc, #12]	; (800491c <_SendPacket+0x2d8>)
 8004910:	2200      	movs	r2, #0
 8004912:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004914:	bf00      	nop
 8004916:	3728      	adds	r7, #40	; 0x28
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	2001431c 	.word	0x2001431c
 8004920:	20012e5c 	.word	0x20012e5c

08004924 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004924:	b580      	push	{r7, lr}
 8004926:	b08a      	sub	sp, #40	; 0x28
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	460b      	mov	r3, r1
 800492e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	3301      	adds	r3, #1
 800493a:	2b80      	cmp	r3, #128	; 0x80
 800493c:	d80a      	bhi.n	8004954 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	1c59      	adds	r1, r3, #1
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	6051      	str	r1, [r2, #4]
 8004948:	78fa      	ldrb	r2, [r7, #3]
 800494a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	2b80      	cmp	r3, #128	; 0x80
 800495a:	d15a      	bne.n	8004a12 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691a      	ldr	r2, [r3, #16]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	b2d2      	uxtb	r2, r2
 8004966:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	627b      	str	r3, [r7, #36]	; 0x24
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	623b      	str	r3, [r7, #32]
 800497c:	e00b      	b.n	8004996 <_StoreChar+0x72>
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	b2da      	uxtb	r2, r3
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	1c59      	adds	r1, r3, #1
 8004986:	6279      	str	r1, [r7, #36]	; 0x24
 8004988:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800498c:	b2d2      	uxtb	r2, r2
 800498e:	701a      	strb	r2, [r3, #0]
 8004990:	6a3b      	ldr	r3, [r7, #32]
 8004992:	09db      	lsrs	r3, r3, #7
 8004994:	623b      	str	r3, [r7, #32]
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	2b7f      	cmp	r3, #127	; 0x7f
 800499a:	d8f0      	bhi.n	800497e <_StoreChar+0x5a>
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	1c5a      	adds	r2, r3, #1
 80049a0:	627a      	str	r2, [r7, #36]	; 0x24
 80049a2:	6a3a      	ldr	r2, [r7, #32]
 80049a4:	b2d2      	uxtb	r2, r2
 80049a6:	701a      	strb	r2, [r3, #0]
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	61fb      	str	r3, [r7, #28]
 80049b0:	2300      	movs	r3, #0
 80049b2:	61bb      	str	r3, [r7, #24]
 80049b4:	e00b      	b.n	80049ce <_StoreChar+0xaa>
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	1c59      	adds	r1, r3, #1
 80049be:	61f9      	str	r1, [r7, #28]
 80049c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049c4:	b2d2      	uxtb	r2, r2
 80049c6:	701a      	strb	r2, [r3, #0]
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	09db      	lsrs	r3, r3, #7
 80049cc:	61bb      	str	r3, [r7, #24]
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	2b7f      	cmp	r3, #127	; 0x7f
 80049d2:	d8f0      	bhi.n	80049b6 <_StoreChar+0x92>
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	1c5a      	adds	r2, r3, #1
 80049d8:	61fa      	str	r2, [r7, #28]
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	b2d2      	uxtb	r2, r2
 80049de:	701a      	strb	r2, [r3, #0]
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	221a      	movs	r2, #26
 80049ea:	6939      	ldr	r1, [r7, #16]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff fe29 	bl	8004644 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff fd34 	bl	8004464 <_PreparePacket>
 80049fc:	4602      	mov	r2, r0
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	1c5a      	adds	r2, r3, #1
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	611a      	str	r2, [r3, #16]
  }
}
 8004a12:	bf00      	nop
 8004a14:	3728      	adds	r7, #40	; 0x28
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
	...

08004a1c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b08a      	sub	sp, #40	; 0x28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
 8004a28:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004a32:	2301      	movs	r3, #1
 8004a34:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004a36:	e007      	b.n	8004a48 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004a38:	6a3a      	ldr	r2, [r7, #32]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a40:	623b      	str	r3, [r7, #32]
    Width++;
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	3301      	adds	r3, #1
 8004a46:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004a48:	6a3a      	ldr	r2, [r7, #32]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d2f3      	bcs.n	8004a38 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d901      	bls.n	8004a5c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d11f      	bne.n	8004aa6 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8004a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d01c      	beq.n	8004aa6 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d005      	beq.n	8004a82 <_PrintUnsigned+0x66>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d102      	bne.n	8004a82 <_PrintUnsigned+0x66>
        c = '0';
 8004a7c:	2330      	movs	r3, #48	; 0x30
 8004a7e:	76fb      	strb	r3, [r7, #27]
 8004a80:	e001      	b.n	8004a86 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004a82:	2320      	movs	r3, #32
 8004a84:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004a86:	e007      	b.n	8004a98 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8004a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8004a8e:	7efb      	ldrb	r3, [r7, #27]
 8004a90:	4619      	mov	r1, r3
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f7ff ff46 	bl	8004924 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <_PrintUnsigned+0x8a>
 8004a9e:	69fa      	ldr	r2, [r7, #28]
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d3f0      	bcc.n	8004a88 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d903      	bls.n	8004ab4 <_PrintUnsigned+0x98>
      NumDigits--;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	603b      	str	r3, [r7, #0]
 8004ab2:	e009      	b.n	8004ac8 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004abc:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d200      	bcs.n	8004ac8 <_PrintUnsigned+0xac>
        break;
 8004ac6:	e005      	b.n	8004ad4 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	fb02 f303 	mul.w	r3, r2, r3
 8004ad0:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004ad2:	e7e8      	b.n	8004aa6 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004adc:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae2:	fb02 f303 	mul.w	r3, r2, r3
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004aec:	4a15      	ldr	r2, [pc, #84]	; (8004b44 <_PrintUnsigned+0x128>)
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	4413      	add	r3, r2
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	4619      	mov	r1, r3
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f7ff ff14 	bl	8004924 <_StoreChar>
    Digit /= Base;
 8004afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b04:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1e3      	bne.n	8004ad4 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d011      	beq.n	8004b3a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8004b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00e      	beq.n	8004b3a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004b1c:	e006      	b.n	8004b2c <_PrintUnsigned+0x110>
        FieldWidth--;
 8004b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b20:	3b01      	subs	r3, #1
 8004b22:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004b24:	2120      	movs	r1, #32
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f7ff fefc 	bl	8004924 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <_PrintUnsigned+0x11e>
 8004b32:	69fa      	ldr	r2, [r7, #28]
 8004b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d3f1      	bcc.n	8004b1e <_PrintUnsigned+0x102>
      }
    }
  }
}
 8004b3a:	bf00      	nop
 8004b3c:	3728      	adds	r7, #40	; 0x28
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	08006094 	.word	0x08006094

08004b48 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b088      	sub	sp, #32
 8004b4c:	af02      	add	r7, sp, #8
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	bfb8      	it	lt
 8004b5c:	425b      	neglt	r3, r3
 8004b5e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004b60:	2301      	movs	r3, #1
 8004b62:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004b64:	e007      	b.n	8004b76 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8004b6e:	613b      	str	r3, [r7, #16]
    Width++;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	3301      	adds	r3, #1
 8004b74:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	daf3      	bge.n	8004b66 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d901      	bls.n	8004b8a <_PrintInt+0x42>
    Width = NumDigits;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00a      	beq.n	8004ba6 <_PrintInt+0x5e>
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	db04      	blt.n	8004ba0 <_PrintInt+0x58>
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d002      	beq.n	8004ba6 <_PrintInt+0x5e>
    FieldWidth--;
 8004ba0:	6a3b      	ldr	r3, [r7, #32]
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <_PrintInt+0x6e>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d016      	beq.n	8004be4 <_PrintInt+0x9c>
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d111      	bne.n	8004be4 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00e      	beq.n	8004be4 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004bc6:	e006      	b.n	8004bd6 <_PrintInt+0x8e>
        FieldWidth--;
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004bce:	2120      	movs	r1, #32
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f7ff fea7 	bl	8004924 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <_PrintInt+0x9c>
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	6a3b      	ldr	r3, [r7, #32]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d3f1      	bcc.n	8004bc8 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	da07      	bge.n	8004bfa <_PrintInt+0xb2>
    v = -v;
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	425b      	negs	r3, r3
 8004bee:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004bf0:	212d      	movs	r1, #45	; 0x2d
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f7ff fe96 	bl	8004924 <_StoreChar>
 8004bf8:	e008      	b.n	8004c0c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d003      	beq.n	8004c0c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004c04:	212b      	movs	r1, #43	; 0x2b
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f7ff fe8c 	bl	8004924 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d019      	beq.n	8004c4a <_PrintInt+0x102>
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d114      	bne.n	8004c4a <_PrintInt+0x102>
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d111      	bne.n	8004c4a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00e      	beq.n	8004c4a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004c2c:	e006      	b.n	8004c3c <_PrintInt+0xf4>
        FieldWidth--;
 8004c2e:	6a3b      	ldr	r3, [r7, #32]
 8004c30:	3b01      	subs	r3, #1
 8004c32:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004c34:	2130      	movs	r1, #48	; 0x30
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f7ff fe74 	bl	8004924 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <_PrintInt+0x102>
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d3f1      	bcc.n	8004c2e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004c4a:	68b9      	ldr	r1, [r7, #8]
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	9301      	str	r3, [sp, #4]
 8004c50:	6a3b      	ldr	r3, [r7, #32]
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f7ff fedf 	bl	8004a1c <_PrintUnsigned>
}
 8004c5e:	bf00      	nop
 8004c60:	3718      	adds	r7, #24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
	...

08004c68 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b098      	sub	sp, #96	; 0x60
 8004c6c:	af02      	add	r7, sp, #8
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004c74:	f3ef 8311 	mrs	r3, BASEPRI
 8004c78:	f04f 0120 	mov.w	r1, #32
 8004c7c:	f381 8811 	msr	BASEPRI, r1
 8004c80:	633b      	str	r3, [r7, #48]	; 0x30
 8004c82:	48b7      	ldr	r0, [pc, #732]	; (8004f60 <_VPrintTarget+0x2f8>)
 8004c84:	f7ff fbee 	bl	8004464 <_PreparePacket>
 8004c88:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004c8a:	4bb5      	ldr	r3, [pc, #724]	; (8004f60 <_VPrintTarget+0x2f8>)
 8004c8c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c94:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	3301      	adds	r3, #1
 8004cac:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004cae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 8183 	beq.w	8004fbe <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8004cb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cbc:	2b25      	cmp	r3, #37	; 0x25
 8004cbe:	f040 8170 	bne.w	8004fa2 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8004cd2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cd6:	3b23      	subs	r3, #35	; 0x23
 8004cd8:	2b0d      	cmp	r3, #13
 8004cda:	d83f      	bhi.n	8004d5c <_VPrintTarget+0xf4>
 8004cdc:	a201      	add	r2, pc, #4	; (adr r2, 8004ce4 <_VPrintTarget+0x7c>)
 8004cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce2:	bf00      	nop
 8004ce4:	08004d4d 	.word	0x08004d4d
 8004ce8:	08004d5d 	.word	0x08004d5d
 8004cec:	08004d5d 	.word	0x08004d5d
 8004cf0:	08004d5d 	.word	0x08004d5d
 8004cf4:	08004d5d 	.word	0x08004d5d
 8004cf8:	08004d5d 	.word	0x08004d5d
 8004cfc:	08004d5d 	.word	0x08004d5d
 8004d00:	08004d5d 	.word	0x08004d5d
 8004d04:	08004d3d 	.word	0x08004d3d
 8004d08:	08004d5d 	.word	0x08004d5d
 8004d0c:	08004d1d 	.word	0x08004d1d
 8004d10:	08004d5d 	.word	0x08004d5d
 8004d14:	08004d5d 	.word	0x08004d5d
 8004d18:	08004d2d 	.word	0x08004d2d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d1e:	f043 0301 	orr.w	r3, r3, #1
 8004d22:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	3301      	adds	r3, #1
 8004d28:	60fb      	str	r3, [r7, #12]
 8004d2a:	e01a      	b.n	8004d62 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d2e:	f043 0302 	orr.w	r3, r3, #2
 8004d32:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	3301      	adds	r3, #1
 8004d38:	60fb      	str	r3, [r7, #12]
 8004d3a:	e012      	b.n	8004d62 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d3e:	f043 0304 	orr.w	r3, r3, #4
 8004d42:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	3301      	adds	r3, #1
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	e00a      	b.n	8004d62 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004d4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d4e:	f043 0308 	orr.w	r3, r3, #8
 8004d52:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	3301      	adds	r3, #1
 8004d58:	60fb      	str	r3, [r7, #12]
 8004d5a:	e002      	b.n	8004d62 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	653b      	str	r3, [r7, #80]	; 0x50
 8004d60:	bf00      	nop
        }
      } while (v);
 8004d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1b0      	bne.n	8004cca <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004d74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d78:	2b2f      	cmp	r3, #47	; 0x2f
 8004d7a:	d912      	bls.n	8004da2 <_VPrintTarget+0x13a>
 8004d7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d80:	2b39      	cmp	r3, #57	; 0x39
 8004d82:	d80e      	bhi.n	8004da2 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	3301      	adds	r3, #1
 8004d88:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004d8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	461a      	mov	r2, r3
 8004d96:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d9a:	4413      	add	r3, r2
 8004d9c:	3b30      	subs	r3, #48	; 0x30
 8004d9e:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004da0:	e7e4      	b.n	8004d6c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004da2:	2300      	movs	r3, #0
 8004da4:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004dae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004db2:	2b2e      	cmp	r3, #46	; 0x2e
 8004db4:	d11d      	bne.n	8004df2 <_VPrintTarget+0x18a>
        sFormat++;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	3301      	adds	r3, #1
 8004dba:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004dc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004dc8:	2b2f      	cmp	r3, #47	; 0x2f
 8004dca:	d912      	bls.n	8004df2 <_VPrintTarget+0x18a>
 8004dcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004dd0:	2b39      	cmp	r3, #57	; 0x39
 8004dd2:	d80e      	bhi.n	8004df2 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004dda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ddc:	4613      	mov	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	461a      	mov	r2, r3
 8004de6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004dea:	4413      	add	r3, r2
 8004dec:	3b30      	subs	r3, #48	; 0x30
 8004dee:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004df0:	e7e4      	b.n	8004dbc <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004dfa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004dfe:	2b6c      	cmp	r3, #108	; 0x6c
 8004e00:	d003      	beq.n	8004e0a <_VPrintTarget+0x1a2>
 8004e02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e06:	2b68      	cmp	r3, #104	; 0x68
 8004e08:	d107      	bne.n	8004e1a <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	3301      	adds	r3, #1
 8004e16:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004e18:	e7ef      	b.n	8004dfa <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004e1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e1e:	2b25      	cmp	r3, #37	; 0x25
 8004e20:	f000 80b3 	beq.w	8004f8a <_VPrintTarget+0x322>
 8004e24:	2b25      	cmp	r3, #37	; 0x25
 8004e26:	f2c0 80b7 	blt.w	8004f98 <_VPrintTarget+0x330>
 8004e2a:	2b78      	cmp	r3, #120	; 0x78
 8004e2c:	f300 80b4 	bgt.w	8004f98 <_VPrintTarget+0x330>
 8004e30:	2b58      	cmp	r3, #88	; 0x58
 8004e32:	f2c0 80b1 	blt.w	8004f98 <_VPrintTarget+0x330>
 8004e36:	3b58      	subs	r3, #88	; 0x58
 8004e38:	2b20      	cmp	r3, #32
 8004e3a:	f200 80ad 	bhi.w	8004f98 <_VPrintTarget+0x330>
 8004e3e:	a201      	add	r2, pc, #4	; (adr r2, 8004e44 <_VPrintTarget+0x1dc>)
 8004e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e44:	08004f3b 	.word	0x08004f3b
 8004e48:	08004f99 	.word	0x08004f99
 8004e4c:	08004f99 	.word	0x08004f99
 8004e50:	08004f99 	.word	0x08004f99
 8004e54:	08004f99 	.word	0x08004f99
 8004e58:	08004f99 	.word	0x08004f99
 8004e5c:	08004f99 	.word	0x08004f99
 8004e60:	08004f99 	.word	0x08004f99
 8004e64:	08004f99 	.word	0x08004f99
 8004e68:	08004f99 	.word	0x08004f99
 8004e6c:	08004f99 	.word	0x08004f99
 8004e70:	08004ec9 	.word	0x08004ec9
 8004e74:	08004eef 	.word	0x08004eef
 8004e78:	08004f99 	.word	0x08004f99
 8004e7c:	08004f99 	.word	0x08004f99
 8004e80:	08004f99 	.word	0x08004f99
 8004e84:	08004f99 	.word	0x08004f99
 8004e88:	08004f99 	.word	0x08004f99
 8004e8c:	08004f99 	.word	0x08004f99
 8004e90:	08004f99 	.word	0x08004f99
 8004e94:	08004f99 	.word	0x08004f99
 8004e98:	08004f99 	.word	0x08004f99
 8004e9c:	08004f99 	.word	0x08004f99
 8004ea0:	08004f99 	.word	0x08004f99
 8004ea4:	08004f65 	.word	0x08004f65
 8004ea8:	08004f99 	.word	0x08004f99
 8004eac:	08004f99 	.word	0x08004f99
 8004eb0:	08004f99 	.word	0x08004f99
 8004eb4:	08004f99 	.word	0x08004f99
 8004eb8:	08004f15 	.word	0x08004f15
 8004ebc:	08004f99 	.word	0x08004f99
 8004ec0:	08004f99 	.word	0x08004f99
 8004ec4:	08004f3b 	.word	0x08004f3b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	1d19      	adds	r1, r3, #4
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	6011      	str	r1, [r2, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ed8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8004edc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004ee0:	f107 0314 	add.w	r3, r7, #20
 8004ee4:	4611      	mov	r1, r2
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7ff fd1c 	bl	8004924 <_StoreChar>
        break;
 8004eec:	e055      	b.n	8004f9a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	1d19      	adds	r1, r3, #4
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6011      	str	r1, [r2, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004efc:	f107 0014 	add.w	r0, r7, #20
 8004f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f02:	9301      	str	r3, [sp, #4]
 8004f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f0a:	220a      	movs	r2, #10
 8004f0c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f0e:	f7ff fe1b 	bl	8004b48 <_PrintInt>
        break;
 8004f12:	e042      	b.n	8004f9a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	1d19      	adds	r1, r3, #4
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	6011      	str	r1, [r2, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004f22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f24:	f107 0014 	add.w	r0, r7, #20
 8004f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f2a:	9301      	str	r3, [sp, #4]
 8004f2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f32:	220a      	movs	r2, #10
 8004f34:	f7ff fd72 	bl	8004a1c <_PrintUnsigned>
        break;
 8004f38:	e02f      	b.n	8004f9a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	1d19      	adds	r1, r3, #4
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6011      	str	r1, [r2, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004f48:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f4a:	f107 0014 	add.w	r0, r7, #20
 8004f4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f50:	9301      	str	r3, [sp, #4]
 8004f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f58:	2210      	movs	r2, #16
 8004f5a:	f7ff fd5f 	bl	8004a1c <_PrintUnsigned>
        break;
 8004f5e:	e01c      	b.n	8004f9a <_VPrintTarget+0x332>
 8004f60:	2001434c 	.word	0x2001434c
      case 'p':
        v = va_arg(*pParamList, int);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	1d19      	adds	r1, r3, #4
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6011      	str	r1, [r2, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004f72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f74:	f107 0014 	add.w	r0, r7, #20
 8004f78:	2300      	movs	r3, #0
 8004f7a:	9301      	str	r3, [sp, #4]
 8004f7c:	2308      	movs	r3, #8
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	2308      	movs	r3, #8
 8004f82:	2210      	movs	r2, #16
 8004f84:	f7ff fd4a 	bl	8004a1c <_PrintUnsigned>
        break;
 8004f88:	e007      	b.n	8004f9a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004f8a:	f107 0314 	add.w	r3, r7, #20
 8004f8e:	2125      	movs	r1, #37	; 0x25
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff fcc7 	bl	8004924 <_StoreChar>
        break;
 8004f96:	e000      	b.n	8004f9a <_VPrintTarget+0x332>
      default:
        break;
 8004f98:	bf00      	nop
      }
      sFormat++;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	60fb      	str	r3, [r7, #12]
 8004fa0:	e007      	b.n	8004fb2 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8004fa2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004fa6:	f107 0314 	add.w	r3, r7, #20
 8004faa:	4611      	mov	r1, r2
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7ff fcb9 	bl	8004924 <_StoreChar>
    }
  } while (*sFormat);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f47f ae72 	bne.w	8004ca0 <_VPrintTarget+0x38>
 8004fbc:	e000      	b.n	8004fc0 <_VPrintTarget+0x358>
      break;
 8004fbe:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d041      	beq.n	800504a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8004fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	643b      	str	r3, [r7, #64]	; 0x40
 8004fd2:	6a3b      	ldr	r3, [r7, #32]
 8004fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fd6:	e00b      	b.n	8004ff0 <_VPrintTarget+0x388>
 8004fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fde:	1c59      	adds	r1, r3, #1
 8004fe0:	6439      	str	r1, [r7, #64]	; 0x40
 8004fe2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fe6:	b2d2      	uxtb	r2, r2
 8004fe8:	701a      	strb	r2, [r3, #0]
 8004fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fec:	09db      	lsrs	r3, r3, #7
 8004fee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ff2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ff4:	d8f0      	bhi.n	8004fd8 <_VPrintTarget+0x370>
 8004ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	643a      	str	r2, [r7, #64]	; 0x40
 8004ffc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ffe:	b2d2      	uxtb	r2, r2
 8005000:	701a      	strb	r2, [r3, #0]
 8005002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005004:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	63bb      	str	r3, [r7, #56]	; 0x38
 800500a:	2300      	movs	r3, #0
 800500c:	637b      	str	r3, [r7, #52]	; 0x34
 800500e:	e00b      	b.n	8005028 <_VPrintTarget+0x3c0>
 8005010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005012:	b2da      	uxtb	r2, r3
 8005014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005016:	1c59      	adds	r1, r3, #1
 8005018:	63b9      	str	r1, [r7, #56]	; 0x38
 800501a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	701a      	strb	r2, [r3, #0]
 8005022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005024:	09db      	lsrs	r3, r3, #7
 8005026:	637b      	str	r3, [r7, #52]	; 0x34
 8005028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800502a:	2b7f      	cmp	r3, #127	; 0x7f
 800502c:	d8f0      	bhi.n	8005010 <_VPrintTarget+0x3a8>
 800502e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	63ba      	str	r2, [r7, #56]	; 0x38
 8005034:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	701a      	strb	r2, [r3, #0]
 800503a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	69b9      	ldr	r1, [r7, #24]
 8005042:	221a      	movs	r2, #26
 8005044:	4618      	mov	r0, r3
 8005046:	f7ff fafd 	bl	8004644 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800504a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005050:	bf00      	nop
 8005052:	3758      	adds	r7, #88	; 0x58
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af02      	add	r7, sp, #8
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
 8005064:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005066:	2300      	movs	r3, #0
 8005068:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800506c:	4917      	ldr	r1, [pc, #92]	; (80050cc <SEGGER_SYSVIEW_Init+0x74>)
 800506e:	4818      	ldr	r0, [pc, #96]	; (80050d0 <SEGGER_SYSVIEW_Init+0x78>)
 8005070:	f7ff f8d8 	bl	8004224 <SEGGER_RTT_AllocUpBuffer>
 8005074:	4603      	mov	r3, r0
 8005076:	b2da      	uxtb	r2, r3
 8005078:	4b16      	ldr	r3, [pc, #88]	; (80050d4 <SEGGER_SYSVIEW_Init+0x7c>)
 800507a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800507c:	4b15      	ldr	r3, [pc, #84]	; (80050d4 <SEGGER_SYSVIEW_Init+0x7c>)
 800507e:	785a      	ldrb	r2, [r3, #1]
 8005080:	4b14      	ldr	r3, [pc, #80]	; (80050d4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005082:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005084:	4b13      	ldr	r3, [pc, #76]	; (80050d4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005086:	7e1b      	ldrb	r3, [r3, #24]
 8005088:	4618      	mov	r0, r3
 800508a:	2300      	movs	r3, #0
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	2308      	movs	r3, #8
 8005090:	4a11      	ldr	r2, [pc, #68]	; (80050d8 <SEGGER_SYSVIEW_Init+0x80>)
 8005092:	490f      	ldr	r1, [pc, #60]	; (80050d0 <SEGGER_SYSVIEW_Init+0x78>)
 8005094:	f7ff f94a 	bl	800432c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005098:	4b0e      	ldr	r3, [pc, #56]	; (80050d4 <SEGGER_SYSVIEW_Init+0x7c>)
 800509a:	2200      	movs	r2, #0
 800509c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800509e:	4b0f      	ldr	r3, [pc, #60]	; (80050dc <SEGGER_SYSVIEW_Init+0x84>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a0c      	ldr	r2, [pc, #48]	; (80050d4 <SEGGER_SYSVIEW_Init+0x7c>)
 80050a4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80050a6:	4a0b      	ldr	r2, [pc, #44]	; (80050d4 <SEGGER_SYSVIEW_Init+0x7c>)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80050ac:	4a09      	ldr	r2, [pc, #36]	; (80050d4 <SEGGER_SYSVIEW_Init+0x7c>)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80050b2:	4a08      	ldr	r2, [pc, #32]	; (80050d4 <SEGGER_SYSVIEW_Init+0x7c>)
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80050b8:	4a06      	ldr	r2, [pc, #24]	; (80050d4 <SEGGER_SYSVIEW_Init+0x7c>)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80050be:	4b05      	ldr	r3, [pc, #20]	; (80050d4 <SEGGER_SYSVIEW_Init+0x7c>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80050c4:	bf00      	nop
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	20013314 	.word	0x20013314
 80050d0:	08006048 	.word	0x08006048
 80050d4:	2001431c 	.word	0x2001431c
 80050d8:	20014314 	.word	0x20014314
 80050dc:	e0001004 	.word	0xe0001004

080050e0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80050e8:	4a04      	ldr	r2, [pc, #16]	; (80050fc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6113      	str	r3, [r2, #16]
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	2001431c 	.word	0x2001431c

08005100 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005108:	f3ef 8311 	mrs	r3, BASEPRI
 800510c:	f04f 0120 	mov.w	r1, #32
 8005110:	f381 8811 	msr	BASEPRI, r1
 8005114:	60fb      	str	r3, [r7, #12]
 8005116:	4808      	ldr	r0, [pc, #32]	; (8005138 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005118:	f7ff f9a4 	bl	8004464 <_PreparePacket>
 800511c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	68b9      	ldr	r1, [r7, #8]
 8005122:	68b8      	ldr	r0, [r7, #8]
 8005124:	f7ff fa8e 	bl	8004644 <_SendPacket>
  RECORD_END();
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f383 8811 	msr	BASEPRI, r3
}
 800512e:	bf00      	nop
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	2001434c 	.word	0x2001434c

0800513c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800513c:	b580      	push	{r7, lr}
 800513e:	b088      	sub	sp, #32
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005146:	f3ef 8311 	mrs	r3, BASEPRI
 800514a:	f04f 0120 	mov.w	r1, #32
 800514e:	f381 8811 	msr	BASEPRI, r1
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	4816      	ldr	r0, [pc, #88]	; (80051b0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005156:	f7ff f985 	bl	8004464 <_PreparePacket>
 800515a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	61fb      	str	r3, [r7, #28]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	61bb      	str	r3, [r7, #24]
 8005168:	e00b      	b.n	8005182 <SEGGER_SYSVIEW_RecordU32+0x46>
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	b2da      	uxtb	r2, r3
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	1c59      	adds	r1, r3, #1
 8005172:	61f9      	str	r1, [r7, #28]
 8005174:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005178:	b2d2      	uxtb	r2, r2
 800517a:	701a      	strb	r2, [r3, #0]
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	09db      	lsrs	r3, r3, #7
 8005180:	61bb      	str	r3, [r7, #24]
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	2b7f      	cmp	r3, #127	; 0x7f
 8005186:	d8f0      	bhi.n	800516a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	61fa      	str	r2, [r7, #28]
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	b2d2      	uxtb	r2, r2
 8005192:	701a      	strb	r2, [r3, #0]
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	68f9      	ldr	r1, [r7, #12]
 800519c:	6938      	ldr	r0, [r7, #16]
 800519e:	f7ff fa51 	bl	8004644 <_SendPacket>
  RECORD_END();
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f383 8811 	msr	BASEPRI, r3
}
 80051a8:	bf00      	nop
 80051aa:	3720      	adds	r7, #32
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	2001434c 	.word	0x2001434c

080051b4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b08c      	sub	sp, #48	; 0x30
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80051c0:	f3ef 8311 	mrs	r3, BASEPRI
 80051c4:	f04f 0120 	mov.w	r1, #32
 80051c8:	f381 8811 	msr	BASEPRI, r1
 80051cc:	61fb      	str	r3, [r7, #28]
 80051ce:	4825      	ldr	r0, [pc, #148]	; (8005264 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80051d0:	f7ff f948 	bl	8004464 <_PreparePacket>
 80051d4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80051e2:	e00b      	b.n	80051fc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80051e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ea:	1c59      	adds	r1, r3, #1
 80051ec:	62f9      	str	r1, [r7, #44]	; 0x2c
 80051ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051f2:	b2d2      	uxtb	r2, r2
 80051f4:	701a      	strb	r2, [r3, #0]
 80051f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f8:	09db      	lsrs	r3, r3, #7
 80051fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80051fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fe:	2b7f      	cmp	r3, #127	; 0x7f
 8005200:	d8f0      	bhi.n	80051e4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800520a:	b2d2      	uxtb	r2, r2
 800520c:	701a      	strb	r2, [r3, #0]
 800520e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005210:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	627b      	str	r3, [r7, #36]	; 0x24
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	623b      	str	r3, [r7, #32]
 800521a:	e00b      	b.n	8005234 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800521c:	6a3b      	ldr	r3, [r7, #32]
 800521e:	b2da      	uxtb	r2, r3
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	1c59      	adds	r1, r3, #1
 8005224:	6279      	str	r1, [r7, #36]	; 0x24
 8005226:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800522a:	b2d2      	uxtb	r2, r2
 800522c:	701a      	strb	r2, [r3, #0]
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	09db      	lsrs	r3, r3, #7
 8005232:	623b      	str	r3, [r7, #32]
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	2b7f      	cmp	r3, #127	; 0x7f
 8005238:	d8f0      	bhi.n	800521c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	1c5a      	adds	r2, r3, #1
 800523e:	627a      	str	r2, [r7, #36]	; 0x24
 8005240:	6a3a      	ldr	r2, [r7, #32]
 8005242:	b2d2      	uxtb	r2, r2
 8005244:	701a      	strb	r2, [r3, #0]
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	6979      	ldr	r1, [r7, #20]
 800524e:	69b8      	ldr	r0, [r7, #24]
 8005250:	f7ff f9f8 	bl	8004644 <_SendPacket>
  RECORD_END();
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	f383 8811 	msr	BASEPRI, r3
}
 800525a:	bf00      	nop
 800525c:	3730      	adds	r7, #48	; 0x30
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	2001434c 	.word	0x2001434c

08005268 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005268:	b580      	push	{r7, lr}
 800526a:	b08c      	sub	sp, #48	; 0x30
 800526c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800526e:	4b59      	ldr	r3, [pc, #356]	; (80053d4 <SEGGER_SYSVIEW_Start+0x16c>)
 8005270:	2201      	movs	r2, #1
 8005272:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005274:	f3ef 8311 	mrs	r3, BASEPRI
 8005278:	f04f 0120 	mov.w	r1, #32
 800527c:	f381 8811 	msr	BASEPRI, r1
 8005280:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005282:	4b54      	ldr	r3, [pc, #336]	; (80053d4 <SEGGER_SYSVIEW_Start+0x16c>)
 8005284:	785b      	ldrb	r3, [r3, #1]
 8005286:	220a      	movs	r2, #10
 8005288:	4953      	ldr	r1, [pc, #332]	; (80053d8 <SEGGER_SYSVIEW_Start+0x170>)
 800528a:	4618      	mov	r0, r3
 800528c:	f7fa ffa0 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005296:	f7fe fc97 	bl	8003bc8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800529a:	200a      	movs	r0, #10
 800529c:	f7ff ff30 	bl	8005100 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80052a0:	f3ef 8311 	mrs	r3, BASEPRI
 80052a4:	f04f 0120 	mov.w	r1, #32
 80052a8:	f381 8811 	msr	BASEPRI, r1
 80052ac:	60bb      	str	r3, [r7, #8]
 80052ae:	484b      	ldr	r0, [pc, #300]	; (80053dc <SEGGER_SYSVIEW_Start+0x174>)
 80052b0:	f7ff f8d8 	bl	8004464 <_PreparePacket>
 80052b4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052be:	4b45      	ldr	r3, [pc, #276]	; (80053d4 <SEGGER_SYSVIEW_Start+0x16c>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052c4:	e00b      	b.n	80052de <SEGGER_SYSVIEW_Start+0x76>
 80052c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052cc:	1c59      	adds	r1, r3, #1
 80052ce:	62f9      	str	r1, [r7, #44]	; 0x2c
 80052d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052d4:	b2d2      	uxtb	r2, r2
 80052d6:	701a      	strb	r2, [r3, #0]
 80052d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052da:	09db      	lsrs	r3, r3, #7
 80052dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80052de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e0:	2b7f      	cmp	r3, #127	; 0x7f
 80052e2:	d8f0      	bhi.n	80052c6 <SEGGER_SYSVIEW_Start+0x5e>
 80052e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e6:	1c5a      	adds	r2, r3, #1
 80052e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052ec:	b2d2      	uxtb	r2, r2
 80052ee:	701a      	strb	r2, [r3, #0]
 80052f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	627b      	str	r3, [r7, #36]	; 0x24
 80052f8:	4b36      	ldr	r3, [pc, #216]	; (80053d4 <SEGGER_SYSVIEW_Start+0x16c>)
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	623b      	str	r3, [r7, #32]
 80052fe:	e00b      	b.n	8005318 <SEGGER_SYSVIEW_Start+0xb0>
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	b2da      	uxtb	r2, r3
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	1c59      	adds	r1, r3, #1
 8005308:	6279      	str	r1, [r7, #36]	; 0x24
 800530a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800530e:	b2d2      	uxtb	r2, r2
 8005310:	701a      	strb	r2, [r3, #0]
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	09db      	lsrs	r3, r3, #7
 8005316:	623b      	str	r3, [r7, #32]
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	2b7f      	cmp	r3, #127	; 0x7f
 800531c:	d8f0      	bhi.n	8005300 <SEGGER_SYSVIEW_Start+0x98>
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	627a      	str	r2, [r7, #36]	; 0x24
 8005324:	6a3a      	ldr	r2, [r7, #32]
 8005326:	b2d2      	uxtb	r2, r2
 8005328:	701a      	strb	r2, [r3, #0]
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	61fb      	str	r3, [r7, #28]
 8005332:	4b28      	ldr	r3, [pc, #160]	; (80053d4 <SEGGER_SYSVIEW_Start+0x16c>)
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	61bb      	str	r3, [r7, #24]
 8005338:	e00b      	b.n	8005352 <SEGGER_SYSVIEW_Start+0xea>
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	b2da      	uxtb	r2, r3
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	1c59      	adds	r1, r3, #1
 8005342:	61f9      	str	r1, [r7, #28]
 8005344:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005348:	b2d2      	uxtb	r2, r2
 800534a:	701a      	strb	r2, [r3, #0]
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	09db      	lsrs	r3, r3, #7
 8005350:	61bb      	str	r3, [r7, #24]
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	2b7f      	cmp	r3, #127	; 0x7f
 8005356:	d8f0      	bhi.n	800533a <SEGGER_SYSVIEW_Start+0xd2>
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	1c5a      	adds	r2, r3, #1
 800535c:	61fa      	str	r2, [r7, #28]
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	b2d2      	uxtb	r2, r2
 8005362:	701a      	strb	r2, [r3, #0]
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	617b      	str	r3, [r7, #20]
 800536c:	2300      	movs	r3, #0
 800536e:	613b      	str	r3, [r7, #16]
 8005370:	e00b      	b.n	800538a <SEGGER_SYSVIEW_Start+0x122>
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	b2da      	uxtb	r2, r3
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	1c59      	adds	r1, r3, #1
 800537a:	6179      	str	r1, [r7, #20]
 800537c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	701a      	strb	r2, [r3, #0]
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	09db      	lsrs	r3, r3, #7
 8005388:	613b      	str	r3, [r7, #16]
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	2b7f      	cmp	r3, #127	; 0x7f
 800538e:	d8f0      	bhi.n	8005372 <SEGGER_SYSVIEW_Start+0x10a>
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	617a      	str	r2, [r7, #20]
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	b2d2      	uxtb	r2, r2
 800539a:	701a      	strb	r2, [r3, #0]
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80053a0:	2218      	movs	r2, #24
 80053a2:	6839      	ldr	r1, [r7, #0]
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f7ff f94d 	bl	8004644 <_SendPacket>
      RECORD_END();
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80053b0:	4b08      	ldr	r3, [pc, #32]	; (80053d4 <SEGGER_SYSVIEW_Start+0x16c>)
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80053b8:	4b06      	ldr	r3, [pc, #24]	; (80053d4 <SEGGER_SYSVIEW_Start+0x16c>)
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80053be:	f000 f9eb 	bl	8005798 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80053c2:	f000 f9b1 	bl	8005728 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80053c6:	f000 fc73 	bl	8005cb0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80053ca:	bf00      	nop
 80053cc:	3730      	adds	r7, #48	; 0x30
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	2001431c 	.word	0x2001431c
 80053d8:	08006088 	.word	0x08006088
 80053dc:	2001434c 	.word	0x2001434c

080053e0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80053e6:	f3ef 8311 	mrs	r3, BASEPRI
 80053ea:	f04f 0120 	mov.w	r1, #32
 80053ee:	f381 8811 	msr	BASEPRI, r1
 80053f2:	607b      	str	r3, [r7, #4]
 80053f4:	480b      	ldr	r0, [pc, #44]	; (8005424 <SEGGER_SYSVIEW_Stop+0x44>)
 80053f6:	f7ff f835 	bl	8004464 <_PreparePacket>
 80053fa:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80053fc:	4b0a      	ldr	r3, [pc, #40]	; (8005428 <SEGGER_SYSVIEW_Stop+0x48>)
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d007      	beq.n	8005414 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005404:	220b      	movs	r2, #11
 8005406:	6839      	ldr	r1, [r7, #0]
 8005408:	6838      	ldr	r0, [r7, #0]
 800540a:	f7ff f91b 	bl	8004644 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800540e:	4b06      	ldr	r3, [pc, #24]	; (8005428 <SEGGER_SYSVIEW_Stop+0x48>)
 8005410:	2200      	movs	r2, #0
 8005412:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f383 8811 	msr	BASEPRI, r3
}
 800541a:	bf00      	nop
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	2001434c 	.word	0x2001434c
 8005428:	2001431c 	.word	0x2001431c

0800542c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800542c:	b580      	push	{r7, lr}
 800542e:	b08c      	sub	sp, #48	; 0x30
 8005430:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005432:	f3ef 8311 	mrs	r3, BASEPRI
 8005436:	f04f 0120 	mov.w	r1, #32
 800543a:	f381 8811 	msr	BASEPRI, r1
 800543e:	60fb      	str	r3, [r7, #12]
 8005440:	4845      	ldr	r0, [pc, #276]	; (8005558 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005442:	f7ff f80f 	bl	8004464 <_PreparePacket>
 8005446:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005450:	4b42      	ldr	r3, [pc, #264]	; (800555c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	62bb      	str	r3, [r7, #40]	; 0x28
 8005456:	e00b      	b.n	8005470 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545a:	b2da      	uxtb	r2, r3
 800545c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545e:	1c59      	adds	r1, r3, #1
 8005460:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005462:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005466:	b2d2      	uxtb	r2, r2
 8005468:	701a      	strb	r2, [r3, #0]
 800546a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546c:	09db      	lsrs	r3, r3, #7
 800546e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005472:	2b7f      	cmp	r3, #127	; 0x7f
 8005474:	d8f0      	bhi.n	8005458 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005478:	1c5a      	adds	r2, r3, #1
 800547a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800547c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800547e:	b2d2      	uxtb	r2, r2
 8005480:	701a      	strb	r2, [r3, #0]
 8005482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005484:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	627b      	str	r3, [r7, #36]	; 0x24
 800548a:	4b34      	ldr	r3, [pc, #208]	; (800555c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	623b      	str	r3, [r7, #32]
 8005490:	e00b      	b.n	80054aa <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005492:	6a3b      	ldr	r3, [r7, #32]
 8005494:	b2da      	uxtb	r2, r3
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	1c59      	adds	r1, r3, #1
 800549a:	6279      	str	r1, [r7, #36]	; 0x24
 800549c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054a0:	b2d2      	uxtb	r2, r2
 80054a2:	701a      	strb	r2, [r3, #0]
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	09db      	lsrs	r3, r3, #7
 80054a8:	623b      	str	r3, [r7, #32]
 80054aa:	6a3b      	ldr	r3, [r7, #32]
 80054ac:	2b7f      	cmp	r3, #127	; 0x7f
 80054ae:	d8f0      	bhi.n	8005492 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	1c5a      	adds	r2, r3, #1
 80054b4:	627a      	str	r2, [r7, #36]	; 0x24
 80054b6:	6a3a      	ldr	r2, [r7, #32]
 80054b8:	b2d2      	uxtb	r2, r2
 80054ba:	701a      	strb	r2, [r3, #0]
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	61fb      	str	r3, [r7, #28]
 80054c4:	4b25      	ldr	r3, [pc, #148]	; (800555c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	61bb      	str	r3, [r7, #24]
 80054ca:	e00b      	b.n	80054e4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	b2da      	uxtb	r2, r3
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	1c59      	adds	r1, r3, #1
 80054d4:	61f9      	str	r1, [r7, #28]
 80054d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054da:	b2d2      	uxtb	r2, r2
 80054dc:	701a      	strb	r2, [r3, #0]
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	09db      	lsrs	r3, r3, #7
 80054e2:	61bb      	str	r3, [r7, #24]
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	2b7f      	cmp	r3, #127	; 0x7f
 80054e8:	d8f0      	bhi.n	80054cc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	1c5a      	adds	r2, r3, #1
 80054ee:	61fa      	str	r2, [r7, #28]
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	b2d2      	uxtb	r2, r2
 80054f4:	701a      	strb	r2, [r3, #0]
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	617b      	str	r3, [r7, #20]
 80054fe:	2300      	movs	r3, #0
 8005500:	613b      	str	r3, [r7, #16]
 8005502:	e00b      	b.n	800551c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	b2da      	uxtb	r2, r3
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	1c59      	adds	r1, r3, #1
 800550c:	6179      	str	r1, [r7, #20]
 800550e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005512:	b2d2      	uxtb	r2, r2
 8005514:	701a      	strb	r2, [r3, #0]
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	09db      	lsrs	r3, r3, #7
 800551a:	613b      	str	r3, [r7, #16]
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	2b7f      	cmp	r3, #127	; 0x7f
 8005520:	d8f0      	bhi.n	8005504 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	1c5a      	adds	r2, r3, #1
 8005526:	617a      	str	r2, [r7, #20]
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	b2d2      	uxtb	r2, r2
 800552c:	701a      	strb	r2, [r3, #0]
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005532:	2218      	movs	r2, #24
 8005534:	6879      	ldr	r1, [r7, #4]
 8005536:	68b8      	ldr	r0, [r7, #8]
 8005538:	f7ff f884 	bl	8004644 <_SendPacket>
  RECORD_END();
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005542:	4b06      	ldr	r3, [pc, #24]	; (800555c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800554a:	4b04      	ldr	r3, [pc, #16]	; (800555c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	4798      	blx	r3
  }
}
 8005550:	bf00      	nop
 8005552:	3730      	adds	r7, #48	; 0x30
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	2001434c 	.word	0x2001434c
 800555c:	2001431c 	.word	0x2001431c

08005560 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005560:	b580      	push	{r7, lr}
 8005562:	b092      	sub	sp, #72	; 0x48
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005568:	f3ef 8311 	mrs	r3, BASEPRI
 800556c:	f04f 0120 	mov.w	r1, #32
 8005570:	f381 8811 	msr	BASEPRI, r1
 8005574:	617b      	str	r3, [r7, #20]
 8005576:	486a      	ldr	r0, [pc, #424]	; (8005720 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005578:	f7fe ff74 	bl	8004464 <_PreparePacket>
 800557c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	647b      	str	r3, [r7, #68]	; 0x44
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	4b66      	ldr	r3, [pc, #408]	; (8005724 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	643b      	str	r3, [r7, #64]	; 0x40
 8005592:	e00b      	b.n	80055ac <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005596:	b2da      	uxtb	r2, r3
 8005598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800559a:	1c59      	adds	r1, r3, #1
 800559c:	6479      	str	r1, [r7, #68]	; 0x44
 800559e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055a2:	b2d2      	uxtb	r2, r2
 80055a4:	701a      	strb	r2, [r3, #0]
 80055a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055a8:	09db      	lsrs	r3, r3, #7
 80055aa:	643b      	str	r3, [r7, #64]	; 0x40
 80055ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055ae:	2b7f      	cmp	r3, #127	; 0x7f
 80055b0:	d8f0      	bhi.n	8005594 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80055b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	647a      	str	r2, [r7, #68]	; 0x44
 80055b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055ba:	b2d2      	uxtb	r2, r2
 80055bc:	701a      	strb	r2, [r3, #0]
 80055be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80055cc:	e00b      	b.n	80055e6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80055ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d0:	b2da      	uxtb	r2, r3
 80055d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d4:	1c59      	adds	r1, r3, #1
 80055d6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80055d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055dc:	b2d2      	uxtb	r2, r2
 80055de:	701a      	strb	r2, [r3, #0]
 80055e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e2:	09db      	lsrs	r3, r3, #7
 80055e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80055e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e8:	2b7f      	cmp	r3, #127	; 0x7f
 80055ea:	d8f0      	bhi.n	80055ce <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80055ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80055f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055f4:	b2d2      	uxtb	r2, r2
 80055f6:	701a      	strb	r2, [r3, #0]
 80055f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055fa:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	2220      	movs	r2, #32
 8005602:	4619      	mov	r1, r3
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f7fe fedd 	bl	80043c4 <_EncodeStr>
 800560a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800560c:	2209      	movs	r2, #9
 800560e:	68f9      	ldr	r1, [r7, #12]
 8005610:	6938      	ldr	r0, [r7, #16]
 8005612:	f7ff f817 	bl	8004644 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	637b      	str	r3, [r7, #52]	; 0x34
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	4b40      	ldr	r3, [pc, #256]	; (8005724 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	633b      	str	r3, [r7, #48]	; 0x30
 800562a:	e00b      	b.n	8005644 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800562c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562e:	b2da      	uxtb	r2, r3
 8005630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005632:	1c59      	adds	r1, r3, #1
 8005634:	6379      	str	r1, [r7, #52]	; 0x34
 8005636:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800563a:	b2d2      	uxtb	r2, r2
 800563c:	701a      	strb	r2, [r3, #0]
 800563e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005640:	09db      	lsrs	r3, r3, #7
 8005642:	633b      	str	r3, [r7, #48]	; 0x30
 8005644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005646:	2b7f      	cmp	r3, #127	; 0x7f
 8005648:	d8f0      	bhi.n	800562c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800564a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	637a      	str	r2, [r7, #52]	; 0x34
 8005650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005652:	b2d2      	uxtb	r2, r2
 8005654:	701a      	strb	r2, [r3, #0]
 8005656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005658:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	62bb      	str	r3, [r7, #40]	; 0x28
 8005664:	e00b      	b.n	800567e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005668:	b2da      	uxtb	r2, r3
 800566a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566c:	1c59      	adds	r1, r3, #1
 800566e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005670:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005674:	b2d2      	uxtb	r2, r2
 8005676:	701a      	strb	r2, [r3, #0]
 8005678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567a:	09db      	lsrs	r3, r3, #7
 800567c:	62bb      	str	r3, [r7, #40]	; 0x28
 800567e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005680:	2b7f      	cmp	r3, #127	; 0x7f
 8005682:	d8f0      	bhi.n	8005666 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005686:	1c5a      	adds	r2, r3, #1
 8005688:	62fa      	str	r2, [r7, #44]	; 0x2c
 800568a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800568c:	b2d2      	uxtb	r2, r2
 800568e:	701a      	strb	r2, [r3, #0]
 8005690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005692:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	627b      	str	r3, [r7, #36]	; 0x24
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	623b      	str	r3, [r7, #32]
 800569e:	e00b      	b.n	80056b8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	1c59      	adds	r1, r3, #1
 80056a8:	6279      	str	r1, [r7, #36]	; 0x24
 80056aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056ae:	b2d2      	uxtb	r2, r2
 80056b0:	701a      	strb	r2, [r3, #0]
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	09db      	lsrs	r3, r3, #7
 80056b6:	623b      	str	r3, [r7, #32]
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	2b7f      	cmp	r3, #127	; 0x7f
 80056bc:	d8f0      	bhi.n	80056a0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	627a      	str	r2, [r7, #36]	; 0x24
 80056c4:	6a3a      	ldr	r2, [r7, #32]
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	701a      	strb	r2, [r3, #0]
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	61fb      	str	r3, [r7, #28]
 80056d2:	2300      	movs	r3, #0
 80056d4:	61bb      	str	r3, [r7, #24]
 80056d6:	e00b      	b.n	80056f0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	1c59      	adds	r1, r3, #1
 80056e0:	61f9      	str	r1, [r7, #28]
 80056e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	701a      	strb	r2, [r3, #0]
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	09db      	lsrs	r3, r3, #7
 80056ee:	61bb      	str	r3, [r7, #24]
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	2b7f      	cmp	r3, #127	; 0x7f
 80056f4:	d8f0      	bhi.n	80056d8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	1c5a      	adds	r2, r3, #1
 80056fa:	61fa      	str	r2, [r7, #28]
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	b2d2      	uxtb	r2, r2
 8005700:	701a      	strb	r2, [r3, #0]
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005706:	2215      	movs	r2, #21
 8005708:	68f9      	ldr	r1, [r7, #12]
 800570a:	6938      	ldr	r0, [r7, #16]
 800570c:	f7fe ff9a 	bl	8004644 <_SendPacket>
  RECORD_END();
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f383 8811 	msr	BASEPRI, r3
}
 8005716:	bf00      	nop
 8005718:	3748      	adds	r7, #72	; 0x48
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	2001434c 	.word	0x2001434c
 8005724:	2001431c 	.word	0x2001431c

08005728 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005728:	b580      	push	{r7, lr}
 800572a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800572c:	4b07      	ldr	r3, [pc, #28]	; (800574c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d008      	beq.n	8005746 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005734:	4b05      	ldr	r3, [pc, #20]	; (800574c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800573e:	4b03      	ldr	r3, [pc, #12]	; (800574c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	4798      	blx	r3
  }
}
 8005746:	bf00      	nop
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	2001431c 	.word	0x2001431c

08005750 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005758:	f3ef 8311 	mrs	r3, BASEPRI
 800575c:	f04f 0120 	mov.w	r1, #32
 8005760:	f381 8811 	msr	BASEPRI, r1
 8005764:	617b      	str	r3, [r7, #20]
 8005766:	480b      	ldr	r0, [pc, #44]	; (8005794 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005768:	f7fe fe7c 	bl	8004464 <_PreparePacket>
 800576c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800576e:	2280      	movs	r2, #128	; 0x80
 8005770:	6879      	ldr	r1, [r7, #4]
 8005772:	6938      	ldr	r0, [r7, #16]
 8005774:	f7fe fe26 	bl	80043c4 <_EncodeStr>
 8005778:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800577a:	220e      	movs	r2, #14
 800577c:	68f9      	ldr	r1, [r7, #12]
 800577e:	6938      	ldr	r0, [r7, #16]
 8005780:	f7fe ff60 	bl	8004644 <_SendPacket>
  RECORD_END();
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f383 8811 	msr	BASEPRI, r3
}
 800578a:	bf00      	nop
 800578c:	3718      	adds	r7, #24
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	2001434c 	.word	0x2001434c

08005798 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005798:	b590      	push	{r4, r7, lr}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800579e:	4b15      	ldr	r3, [pc, #84]	; (80057f4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d01a      	beq.n	80057dc <SEGGER_SYSVIEW_RecordSystime+0x44>
 80057a6:	4b13      	ldr	r3, [pc, #76]	; (80057f4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d015      	beq.n	80057dc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80057b0:	4b10      	ldr	r3, [pc, #64]	; (80057f4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4798      	blx	r3
 80057b8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80057bc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80057be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057c2:	f04f 0200 	mov.w	r2, #0
 80057c6:	f04f 0300 	mov.w	r3, #0
 80057ca:	000a      	movs	r2, r1
 80057cc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80057ce:	4613      	mov	r3, r2
 80057d0:	461a      	mov	r2, r3
 80057d2:	4621      	mov	r1, r4
 80057d4:	200d      	movs	r0, #13
 80057d6:	f7ff fced 	bl	80051b4 <SEGGER_SYSVIEW_RecordU32x2>
 80057da:	e006      	b.n	80057ea <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80057dc:	4b06      	ldr	r3, [pc, #24]	; (80057f8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4619      	mov	r1, r3
 80057e2:	200c      	movs	r0, #12
 80057e4:	f7ff fcaa 	bl	800513c <SEGGER_SYSVIEW_RecordU32>
  }
}
 80057e8:	bf00      	nop
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd90      	pop	{r4, r7, pc}
 80057f2:	bf00      	nop
 80057f4:	2001431c 	.word	0x2001431c
 80057f8:	e0001004 	.word	0xe0001004

080057fc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005802:	f3ef 8311 	mrs	r3, BASEPRI
 8005806:	f04f 0120 	mov.w	r1, #32
 800580a:	f381 8811 	msr	BASEPRI, r1
 800580e:	60fb      	str	r3, [r7, #12]
 8005810:	4819      	ldr	r0, [pc, #100]	; (8005878 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005812:	f7fe fe27 	bl	8004464 <_PreparePacket>
 8005816:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800581c:	4b17      	ldr	r3, [pc, #92]	; (800587c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005824:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	613b      	str	r3, [r7, #16]
 800582e:	e00b      	b.n	8005848 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	b2da      	uxtb	r2, r3
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	1c59      	adds	r1, r3, #1
 8005838:	6179      	str	r1, [r7, #20]
 800583a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800583e:	b2d2      	uxtb	r2, r2
 8005840:	701a      	strb	r2, [r3, #0]
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	09db      	lsrs	r3, r3, #7
 8005846:	613b      	str	r3, [r7, #16]
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	2b7f      	cmp	r3, #127	; 0x7f
 800584c:	d8f0      	bhi.n	8005830 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	1c5a      	adds	r2, r3, #1
 8005852:	617a      	str	r2, [r7, #20]
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	b2d2      	uxtb	r2, r2
 8005858:	701a      	strb	r2, [r3, #0]
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800585e:	2202      	movs	r2, #2
 8005860:	6879      	ldr	r1, [r7, #4]
 8005862:	68b8      	ldr	r0, [r7, #8]
 8005864:	f7fe feee 	bl	8004644 <_SendPacket>
  RECORD_END();
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f383 8811 	msr	BASEPRI, r3
}
 800586e:	bf00      	nop
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	2001434c 	.word	0x2001434c
 800587c:	e000ed04 	.word	0xe000ed04

08005880 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005886:	f3ef 8311 	mrs	r3, BASEPRI
 800588a:	f04f 0120 	mov.w	r1, #32
 800588e:	f381 8811 	msr	BASEPRI, r1
 8005892:	607b      	str	r3, [r7, #4]
 8005894:	4807      	ldr	r0, [pc, #28]	; (80058b4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005896:	f7fe fde5 	bl	8004464 <_PreparePacket>
 800589a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800589c:	2203      	movs	r2, #3
 800589e:	6839      	ldr	r1, [r7, #0]
 80058a0:	6838      	ldr	r0, [r7, #0]
 80058a2:	f7fe fecf 	bl	8004644 <_SendPacket>
  RECORD_END();
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f383 8811 	msr	BASEPRI, r3
}
 80058ac:	bf00      	nop
 80058ae:	3708      	adds	r7, #8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	2001434c 	.word	0x2001434c

080058b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80058be:	f3ef 8311 	mrs	r3, BASEPRI
 80058c2:	f04f 0120 	mov.w	r1, #32
 80058c6:	f381 8811 	msr	BASEPRI, r1
 80058ca:	607b      	str	r3, [r7, #4]
 80058cc:	4807      	ldr	r0, [pc, #28]	; (80058ec <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80058ce:	f7fe fdc9 	bl	8004464 <_PreparePacket>
 80058d2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80058d4:	2212      	movs	r2, #18
 80058d6:	6839      	ldr	r1, [r7, #0]
 80058d8:	6838      	ldr	r0, [r7, #0]
 80058da:	f7fe feb3 	bl	8004644 <_SendPacket>
  RECORD_END();
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f383 8811 	msr	BASEPRI, r3
}
 80058e4:	bf00      	nop
 80058e6:	3708      	adds	r7, #8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	2001434c 	.word	0x2001434c

080058f0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80058f6:	f3ef 8311 	mrs	r3, BASEPRI
 80058fa:	f04f 0120 	mov.w	r1, #32
 80058fe:	f381 8811 	msr	BASEPRI, r1
 8005902:	607b      	str	r3, [r7, #4]
 8005904:	4807      	ldr	r0, [pc, #28]	; (8005924 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005906:	f7fe fdad 	bl	8004464 <_PreparePacket>
 800590a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800590c:	2211      	movs	r2, #17
 800590e:	6839      	ldr	r1, [r7, #0]
 8005910:	6838      	ldr	r0, [r7, #0]
 8005912:	f7fe fe97 	bl	8004644 <_SendPacket>
  RECORD_END();
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f383 8811 	msr	BASEPRI, r3
}
 800591c:	bf00      	nop
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	2001434c 	.word	0x2001434c

08005928 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005928:	b580      	push	{r7, lr}
 800592a:	b088      	sub	sp, #32
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005930:	f3ef 8311 	mrs	r3, BASEPRI
 8005934:	f04f 0120 	mov.w	r1, #32
 8005938:	f381 8811 	msr	BASEPRI, r1
 800593c:	617b      	str	r3, [r7, #20]
 800593e:	4819      	ldr	r0, [pc, #100]	; (80059a4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005940:	f7fe fd90 	bl	8004464 <_PreparePacket>
 8005944:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800594a:	4b17      	ldr	r3, [pc, #92]	; (80059a8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	61fb      	str	r3, [r7, #28]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	61bb      	str	r3, [r7, #24]
 800595c:	e00b      	b.n	8005976 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	b2da      	uxtb	r2, r3
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	1c59      	adds	r1, r3, #1
 8005966:	61f9      	str	r1, [r7, #28]
 8005968:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800596c:	b2d2      	uxtb	r2, r2
 800596e:	701a      	strb	r2, [r3, #0]
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	09db      	lsrs	r3, r3, #7
 8005974:	61bb      	str	r3, [r7, #24]
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	2b7f      	cmp	r3, #127	; 0x7f
 800597a:	d8f0      	bhi.n	800595e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	1c5a      	adds	r2, r3, #1
 8005980:	61fa      	str	r2, [r7, #28]
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	b2d2      	uxtb	r2, r2
 8005986:	701a      	strb	r2, [r3, #0]
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800598c:	2208      	movs	r2, #8
 800598e:	68f9      	ldr	r1, [r7, #12]
 8005990:	6938      	ldr	r0, [r7, #16]
 8005992:	f7fe fe57 	bl	8004644 <_SendPacket>
  RECORD_END();
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f383 8811 	msr	BASEPRI, r3
}
 800599c:	bf00      	nop
 800599e:	3720      	adds	r7, #32
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	2001434c 	.word	0x2001434c
 80059a8:	2001431c 	.word	0x2001431c

080059ac <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b088      	sub	sp, #32
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80059b4:	f3ef 8311 	mrs	r3, BASEPRI
 80059b8:	f04f 0120 	mov.w	r1, #32
 80059bc:	f381 8811 	msr	BASEPRI, r1
 80059c0:	617b      	str	r3, [r7, #20]
 80059c2:	4819      	ldr	r0, [pc, #100]	; (8005a28 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80059c4:	f7fe fd4e 	bl	8004464 <_PreparePacket>
 80059c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80059ce:	4b17      	ldr	r3, [pc, #92]	; (8005a2c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	61fb      	str	r3, [r7, #28]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	61bb      	str	r3, [r7, #24]
 80059e0:	e00b      	b.n	80059fa <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	1c59      	adds	r1, r3, #1
 80059ea:	61f9      	str	r1, [r7, #28]
 80059ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059f0:	b2d2      	uxtb	r2, r2
 80059f2:	701a      	strb	r2, [r3, #0]
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	09db      	lsrs	r3, r3, #7
 80059f8:	61bb      	str	r3, [r7, #24]
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	2b7f      	cmp	r3, #127	; 0x7f
 80059fe:	d8f0      	bhi.n	80059e2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	61fa      	str	r2, [r7, #28]
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	b2d2      	uxtb	r2, r2
 8005a0a:	701a      	strb	r2, [r3, #0]
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005a10:	2204      	movs	r2, #4
 8005a12:	68f9      	ldr	r1, [r7, #12]
 8005a14:	6938      	ldr	r0, [r7, #16]
 8005a16:	f7fe fe15 	bl	8004644 <_SendPacket>
  RECORD_END();
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f383 8811 	msr	BASEPRI, r3
}
 8005a20:	bf00      	nop
 8005a22:	3720      	adds	r7, #32
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	2001434c 	.word	0x2001434c
 8005a2c:	2001431c 	.word	0x2001431c

08005a30 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b088      	sub	sp, #32
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005a38:	f3ef 8311 	mrs	r3, BASEPRI
 8005a3c:	f04f 0120 	mov.w	r1, #32
 8005a40:	f381 8811 	msr	BASEPRI, r1
 8005a44:	617b      	str	r3, [r7, #20]
 8005a46:	4819      	ldr	r0, [pc, #100]	; (8005aac <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005a48:	f7fe fd0c 	bl	8004464 <_PreparePacket>
 8005a4c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005a52:	4b17      	ldr	r3, [pc, #92]	; (8005ab0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	61fb      	str	r3, [r7, #28]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	61bb      	str	r3, [r7, #24]
 8005a64:	e00b      	b.n	8005a7e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	1c59      	adds	r1, r3, #1
 8005a6e:	61f9      	str	r1, [r7, #28]
 8005a70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a74:	b2d2      	uxtb	r2, r2
 8005a76:	701a      	strb	r2, [r3, #0]
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	09db      	lsrs	r3, r3, #7
 8005a7c:	61bb      	str	r3, [r7, #24]
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	2b7f      	cmp	r3, #127	; 0x7f
 8005a82:	d8f0      	bhi.n	8005a66 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	1c5a      	adds	r2, r3, #1
 8005a88:	61fa      	str	r2, [r7, #28]
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	b2d2      	uxtb	r2, r2
 8005a8e:	701a      	strb	r2, [r3, #0]
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005a94:	2206      	movs	r2, #6
 8005a96:	68f9      	ldr	r1, [r7, #12]
 8005a98:	6938      	ldr	r0, [r7, #16]
 8005a9a:	f7fe fdd3 	bl	8004644 <_SendPacket>
  RECORD_END();
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f383 8811 	msr	BASEPRI, r3
}
 8005aa4:	bf00      	nop
 8005aa6:	3720      	adds	r7, #32
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	2001434c 	.word	0x2001434c
 8005ab0:	2001431c 	.word	0x2001431c

08005ab4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b08a      	sub	sp, #40	; 0x28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005abe:	f3ef 8311 	mrs	r3, BASEPRI
 8005ac2:	f04f 0120 	mov.w	r1, #32
 8005ac6:	f381 8811 	msr	BASEPRI, r1
 8005aca:	617b      	str	r3, [r7, #20]
 8005acc:	4827      	ldr	r0, [pc, #156]	; (8005b6c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005ace:	f7fe fcc9 	bl	8004464 <_PreparePacket>
 8005ad2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005ad8:	4b25      	ldr	r3, [pc, #148]	; (8005b70 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	623b      	str	r3, [r7, #32]
 8005aea:	e00b      	b.n	8005b04 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	b2da      	uxtb	r2, r3
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	1c59      	adds	r1, r3, #1
 8005af4:	6279      	str	r1, [r7, #36]	; 0x24
 8005af6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005afa:	b2d2      	uxtb	r2, r2
 8005afc:	701a      	strb	r2, [r3, #0]
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	09db      	lsrs	r3, r3, #7
 8005b02:	623b      	str	r3, [r7, #32]
 8005b04:	6a3b      	ldr	r3, [r7, #32]
 8005b06:	2b7f      	cmp	r3, #127	; 0x7f
 8005b08:	d8f0      	bhi.n	8005aec <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0c:	1c5a      	adds	r2, r3, #1
 8005b0e:	627a      	str	r2, [r7, #36]	; 0x24
 8005b10:	6a3a      	ldr	r2, [r7, #32]
 8005b12:	b2d2      	uxtb	r2, r2
 8005b14:	701a      	strb	r2, [r3, #0]
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	61fb      	str	r3, [r7, #28]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	61bb      	str	r3, [r7, #24]
 8005b22:	e00b      	b.n	8005b3c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	1c59      	adds	r1, r3, #1
 8005b2c:	61f9      	str	r1, [r7, #28]
 8005b2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b32:	b2d2      	uxtb	r2, r2
 8005b34:	701a      	strb	r2, [r3, #0]
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	09db      	lsrs	r3, r3, #7
 8005b3a:	61bb      	str	r3, [r7, #24]
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	2b7f      	cmp	r3, #127	; 0x7f
 8005b40:	d8f0      	bhi.n	8005b24 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	1c5a      	adds	r2, r3, #1
 8005b46:	61fa      	str	r2, [r7, #28]
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	b2d2      	uxtb	r2, r2
 8005b4c:	701a      	strb	r2, [r3, #0]
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005b52:	2207      	movs	r2, #7
 8005b54:	68f9      	ldr	r1, [r7, #12]
 8005b56:	6938      	ldr	r0, [r7, #16]
 8005b58:	f7fe fd74 	bl	8004644 <_SendPacket>
  RECORD_END();
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f383 8811 	msr	BASEPRI, r3
}
 8005b62:	bf00      	nop
 8005b64:	3728      	adds	r7, #40	; 0x28
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	2001434c 	.word	0x2001434c
 8005b70:	2001431c 	.word	0x2001431c

08005b74 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b08c      	sub	sp, #48	; 0x30
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005b7e:	4b3b      	ldr	r3, [pc, #236]	; (8005c6c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d06d      	beq.n	8005c62 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005b86:	4b39      	ldr	r3, [pc, #228]	; (8005c6c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b90:	e008      	b.n	8005ba4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d007      	beq.n	8005bae <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ba4:	79fb      	ldrb	r3, [r7, #7]
 8005ba6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d3f2      	bcc.n	8005b92 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005bac:	e000      	b.n	8005bb0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005bae:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d055      	beq.n	8005c62 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005bb6:	f3ef 8311 	mrs	r3, BASEPRI
 8005bba:	f04f 0120 	mov.w	r1, #32
 8005bbe:	f381 8811 	msr	BASEPRI, r1
 8005bc2:	617b      	str	r3, [r7, #20]
 8005bc4:	482a      	ldr	r0, [pc, #168]	; (8005c70 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005bc6:	f7fe fc4d 	bl	8004464 <_PreparePacket>
 8005bca:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8005bd4:	79fb      	ldrb	r3, [r7, #7]
 8005bd6:	623b      	str	r3, [r7, #32]
 8005bd8:	e00b      	b.n	8005bf2 <SEGGER_SYSVIEW_SendModule+0x7e>
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	1c59      	adds	r1, r3, #1
 8005be2:	6279      	str	r1, [r7, #36]	; 0x24
 8005be4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005be8:	b2d2      	uxtb	r2, r2
 8005bea:	701a      	strb	r2, [r3, #0]
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	09db      	lsrs	r3, r3, #7
 8005bf0:	623b      	str	r3, [r7, #32]
 8005bf2:	6a3b      	ldr	r3, [r7, #32]
 8005bf4:	2b7f      	cmp	r3, #127	; 0x7f
 8005bf6:	d8f0      	bhi.n	8005bda <SEGGER_SYSVIEW_SendModule+0x66>
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	1c5a      	adds	r2, r3, #1
 8005bfc:	627a      	str	r2, [r7, #36]	; 0x24
 8005bfe:	6a3a      	ldr	r2, [r7, #32]
 8005c00:	b2d2      	uxtb	r2, r2
 8005c02:	701a      	strb	r2, [r3, #0]
 8005c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c06:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	61fb      	str	r3, [r7, #28]
 8005c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	61bb      	str	r3, [r7, #24]
 8005c12:	e00b      	b.n	8005c2c <SEGGER_SYSVIEW_SendModule+0xb8>
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	1c59      	adds	r1, r3, #1
 8005c1c:	61f9      	str	r1, [r7, #28]
 8005c1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	701a      	strb	r2, [r3, #0]
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	09db      	lsrs	r3, r3, #7
 8005c2a:	61bb      	str	r3, [r7, #24]
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	2b7f      	cmp	r3, #127	; 0x7f
 8005c30:	d8f0      	bhi.n	8005c14 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	61fa      	str	r2, [r7, #28]
 8005c38:	69ba      	ldr	r2, [r7, #24]
 8005c3a:	b2d2      	uxtb	r2, r2
 8005c3c:	701a      	strb	r2, [r3, #0]
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2280      	movs	r2, #128	; 0x80
 8005c48:	4619      	mov	r1, r3
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f7fe fbba 	bl	80043c4 <_EncodeStr>
 8005c50:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005c52:	2216      	movs	r2, #22
 8005c54:	68f9      	ldr	r1, [r7, #12]
 8005c56:	6938      	ldr	r0, [r7, #16]
 8005c58:	f7fe fcf4 	bl	8004644 <_SendPacket>
      RECORD_END();
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005c62:	bf00      	nop
 8005c64:	3730      	adds	r7, #48	; 0x30
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	20014344 	.word	0x20014344
 8005c70:	2001434c 	.word	0x2001434c

08005c74 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005c7a:	4b0c      	ldr	r3, [pc, #48]	; (8005cac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00f      	beq.n	8005ca2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005c82:	4b0a      	ldr	r3, [pc, #40]	; (8005cac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d002      	beq.n	8005c96 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1f2      	bne.n	8005c88 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005ca2:	bf00      	nop
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	20014344 	.word	0x20014344

08005cb0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005cb6:	f3ef 8311 	mrs	r3, BASEPRI
 8005cba:	f04f 0120 	mov.w	r1, #32
 8005cbe:	f381 8811 	msr	BASEPRI, r1
 8005cc2:	60fb      	str	r3, [r7, #12]
 8005cc4:	4817      	ldr	r0, [pc, #92]	; (8005d24 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005cc6:	f7fe fbcd 	bl	8004464 <_PreparePacket>
 8005cca:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	617b      	str	r3, [r7, #20]
 8005cd4:	4b14      	ldr	r3, [pc, #80]	; (8005d28 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	613b      	str	r3, [r7, #16]
 8005cda:	e00b      	b.n	8005cf4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	1c59      	adds	r1, r3, #1
 8005ce4:	6179      	str	r1, [r7, #20]
 8005ce6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cea:	b2d2      	uxtb	r2, r2
 8005cec:	701a      	strb	r2, [r3, #0]
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	09db      	lsrs	r3, r3, #7
 8005cf2:	613b      	str	r3, [r7, #16]
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	2b7f      	cmp	r3, #127	; 0x7f
 8005cf8:	d8f0      	bhi.n	8005cdc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	1c5a      	adds	r2, r3, #1
 8005cfe:	617a      	str	r2, [r7, #20]
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	b2d2      	uxtb	r2, r2
 8005d04:	701a      	strb	r2, [r3, #0]
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005d0a:	221b      	movs	r2, #27
 8005d0c:	6879      	ldr	r1, [r7, #4]
 8005d0e:	68b8      	ldr	r0, [r7, #8]
 8005d10:	f7fe fc98 	bl	8004644 <_SendPacket>
  RECORD_END();
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f383 8811 	msr	BASEPRI, r3
}
 8005d1a:	bf00      	nop
 8005d1c:	3718      	adds	r7, #24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	2001434c 	.word	0x2001434c
 8005d28:	20014348 	.word	0x20014348

08005d2c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005d2c:	b40f      	push	{r0, r1, r2, r3}
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b082      	sub	sp, #8
 8005d32:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005d34:	f107 0314 	add.w	r3, r7, #20
 8005d38:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005d3a:	1d3b      	adds	r3, r7, #4
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	2100      	movs	r1, #0
 8005d40:	6938      	ldr	r0, [r7, #16]
 8005d42:	f7fe ff91 	bl	8004c68 <_VPrintTarget>
  va_end(ParamList);
}
 8005d46:	bf00      	nop
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d50:	b004      	add	sp, #16
 8005d52:	4770      	bx	lr

08005d54 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b08a      	sub	sp, #40	; 0x28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d5c:	f3ef 8311 	mrs	r3, BASEPRI
 8005d60:	f04f 0120 	mov.w	r1, #32
 8005d64:	f381 8811 	msr	BASEPRI, r1
 8005d68:	617b      	str	r3, [r7, #20]
 8005d6a:	4827      	ldr	r0, [pc, #156]	; (8005e08 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005d6c:	f7fe fb7a 	bl	8004464 <_PreparePacket>
 8005d70:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d72:	2280      	movs	r2, #128	; 0x80
 8005d74:	6879      	ldr	r1, [r7, #4]
 8005d76:	6938      	ldr	r0, [r7, #16]
 8005d78:	f7fe fb24 	bl	80043c4 <_EncodeStr>
 8005d7c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	627b      	str	r3, [r7, #36]	; 0x24
 8005d82:	2301      	movs	r3, #1
 8005d84:	623b      	str	r3, [r7, #32]
 8005d86:	e00b      	b.n	8005da0 <SEGGER_SYSVIEW_Warn+0x4c>
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	b2da      	uxtb	r2, r3
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	1c59      	adds	r1, r3, #1
 8005d90:	6279      	str	r1, [r7, #36]	; 0x24
 8005d92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d96:	b2d2      	uxtb	r2, r2
 8005d98:	701a      	strb	r2, [r3, #0]
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	09db      	lsrs	r3, r3, #7
 8005d9e:	623b      	str	r3, [r7, #32]
 8005da0:	6a3b      	ldr	r3, [r7, #32]
 8005da2:	2b7f      	cmp	r3, #127	; 0x7f
 8005da4:	d8f0      	bhi.n	8005d88 <SEGGER_SYSVIEW_Warn+0x34>
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	1c5a      	adds	r2, r3, #1
 8005daa:	627a      	str	r2, [r7, #36]	; 0x24
 8005dac:	6a3a      	ldr	r2, [r7, #32]
 8005dae:	b2d2      	uxtb	r2, r2
 8005db0:	701a      	strb	r2, [r3, #0]
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	61fb      	str	r3, [r7, #28]
 8005dba:	2300      	movs	r3, #0
 8005dbc:	61bb      	str	r3, [r7, #24]
 8005dbe:	e00b      	b.n	8005dd8 <SEGGER_SYSVIEW_Warn+0x84>
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	1c59      	adds	r1, r3, #1
 8005dc8:	61f9      	str	r1, [r7, #28]
 8005dca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dce:	b2d2      	uxtb	r2, r2
 8005dd0:	701a      	strb	r2, [r3, #0]
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	09db      	lsrs	r3, r3, #7
 8005dd6:	61bb      	str	r3, [r7, #24]
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	2b7f      	cmp	r3, #127	; 0x7f
 8005ddc:	d8f0      	bhi.n	8005dc0 <SEGGER_SYSVIEW_Warn+0x6c>
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	1c5a      	adds	r2, r3, #1
 8005de2:	61fa      	str	r2, [r7, #28]
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	b2d2      	uxtb	r2, r2
 8005de8:	701a      	strb	r2, [r3, #0]
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005dee:	221a      	movs	r2, #26
 8005df0:	68f9      	ldr	r1, [r7, #12]
 8005df2:	6938      	ldr	r0, [r7, #16]
 8005df4:	f7fe fc26 	bl	8004644 <_SendPacket>
  RECORD_END();
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f383 8811 	msr	BASEPRI, r3
}
 8005dfe:	bf00      	nop
 8005e00:	3728      	adds	r7, #40	; 0x28
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	2001434c 	.word	0x2001434c

08005e0c <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005e10:	4b13      	ldr	r3, [pc, #76]	; (8005e60 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005e12:	7e1b      	ldrb	r3, [r3, #24]
 8005e14:	4619      	mov	r1, r3
 8005e16:	4a13      	ldr	r2, [pc, #76]	; (8005e64 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005e18:	460b      	mov	r3, r1
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	440b      	add	r3, r1
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	4413      	add	r3, r2
 8005e22:	336c      	adds	r3, #108	; 0x6c
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	4b0e      	ldr	r3, [pc, #56]	; (8005e60 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005e28:	7e1b      	ldrb	r3, [r3, #24]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	490d      	ldr	r1, [pc, #52]	; (8005e64 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005e2e:	4603      	mov	r3, r0
 8005e30:	005b      	lsls	r3, r3, #1
 8005e32:	4403      	add	r3, r0
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	440b      	add	r3, r1
 8005e38:	3370      	adds	r3, #112	; 0x70
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d00b      	beq.n	8005e58 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005e40:	4b07      	ldr	r3, [pc, #28]	; (8005e60 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005e42:	789b      	ldrb	r3, [r3, #2]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d107      	bne.n	8005e58 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005e48:	4b05      	ldr	r3, [pc, #20]	; (8005e60 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005e4e:	f7fe fb15 	bl	800447c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005e52:	4b03      	ldr	r3, [pc, #12]	; (8005e60 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8005e58:	4b01      	ldr	r3, [pc, #4]	; (8005e60 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005e5a:	781b      	ldrb	r3, [r3, #0]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	2001431c 	.word	0x2001431c
 8005e64:	20012e5c 	.word	0x20012e5c

08005e68 <__libc_init_array>:
 8005e68:	b570      	push	{r4, r5, r6, lr}
 8005e6a:	4d0d      	ldr	r5, [pc, #52]	; (8005ea0 <__libc_init_array+0x38>)
 8005e6c:	4c0d      	ldr	r4, [pc, #52]	; (8005ea4 <__libc_init_array+0x3c>)
 8005e6e:	1b64      	subs	r4, r4, r5
 8005e70:	10a4      	asrs	r4, r4, #2
 8005e72:	2600      	movs	r6, #0
 8005e74:	42a6      	cmp	r6, r4
 8005e76:	d109      	bne.n	8005e8c <__libc_init_array+0x24>
 8005e78:	4d0b      	ldr	r5, [pc, #44]	; (8005ea8 <__libc_init_array+0x40>)
 8005e7a:	4c0c      	ldr	r4, [pc, #48]	; (8005eac <__libc_init_array+0x44>)
 8005e7c:	f000 f83e 	bl	8005efc <_init>
 8005e80:	1b64      	subs	r4, r4, r5
 8005e82:	10a4      	asrs	r4, r4, #2
 8005e84:	2600      	movs	r6, #0
 8005e86:	42a6      	cmp	r6, r4
 8005e88:	d105      	bne.n	8005e96 <__libc_init_array+0x2e>
 8005e8a:	bd70      	pop	{r4, r5, r6, pc}
 8005e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e90:	4798      	blx	r3
 8005e92:	3601      	adds	r6, #1
 8005e94:	e7ee      	b.n	8005e74 <__libc_init_array+0xc>
 8005e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e9a:	4798      	blx	r3
 8005e9c:	3601      	adds	r6, #1
 8005e9e:	e7f2      	b.n	8005e86 <__libc_init_array+0x1e>
 8005ea0:	080060ac 	.word	0x080060ac
 8005ea4:	080060ac 	.word	0x080060ac
 8005ea8:	080060ac 	.word	0x080060ac
 8005eac:	080060b0 	.word	0x080060b0

08005eb0 <memcmp>:
 8005eb0:	b510      	push	{r4, lr}
 8005eb2:	3901      	subs	r1, #1
 8005eb4:	4402      	add	r2, r0
 8005eb6:	4290      	cmp	r0, r2
 8005eb8:	d101      	bne.n	8005ebe <memcmp+0xe>
 8005eba:	2000      	movs	r0, #0
 8005ebc:	e005      	b.n	8005eca <memcmp+0x1a>
 8005ebe:	7803      	ldrb	r3, [r0, #0]
 8005ec0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005ec4:	42a3      	cmp	r3, r4
 8005ec6:	d001      	beq.n	8005ecc <memcmp+0x1c>
 8005ec8:	1b18      	subs	r0, r3, r4
 8005eca:	bd10      	pop	{r4, pc}
 8005ecc:	3001      	adds	r0, #1
 8005ece:	e7f2      	b.n	8005eb6 <memcmp+0x6>

08005ed0 <memcpy>:
 8005ed0:	440a      	add	r2, r1
 8005ed2:	4291      	cmp	r1, r2
 8005ed4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ed8:	d100      	bne.n	8005edc <memcpy+0xc>
 8005eda:	4770      	bx	lr
 8005edc:	b510      	push	{r4, lr}
 8005ede:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ee2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ee6:	4291      	cmp	r1, r2
 8005ee8:	d1f9      	bne.n	8005ede <memcpy+0xe>
 8005eea:	bd10      	pop	{r4, pc}

08005eec <memset>:
 8005eec:	4402      	add	r2, r0
 8005eee:	4603      	mov	r3, r0
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d100      	bne.n	8005ef6 <memset+0xa>
 8005ef4:	4770      	bx	lr
 8005ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8005efa:	e7f9      	b.n	8005ef0 <memset+0x4>

08005efc <_init>:
 8005efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005efe:	bf00      	nop
 8005f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f02:	bc08      	pop	{r3}
 8005f04:	469e      	mov	lr, r3
 8005f06:	4770      	bx	lr

08005f08 <_fini>:
 8005f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f0a:	bf00      	nop
 8005f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f0e:	bc08      	pop	{r3}
 8005f10:	469e      	mov	lr, r3
 8005f12:	4770      	bx	lr
