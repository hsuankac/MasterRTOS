
009Bin_Sema_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000966c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  080097fc  080097fc  000197fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b30  08009b30  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08009b30  08009b30  00019b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b38  08009b38  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b38  08009b38  00019b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b3c  08009b3c  00019b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08009b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          0001460c  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001468c  2001468c  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b8c6  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b83  00000000  00000000  0003b976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017b8  00000000  00000000  0003f500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001600  00000000  00000000  00040cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263db  00000000  00000000  000422b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bc43  00000000  00000000  00068693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2870  00000000  00000000  000842d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00166b46  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e30  00000000  00000000  00166b98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080097e4 	.word	0x080097e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080097e4 	.word	0x080097e4

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200130a8 	.word	0x200130a8

08000264 <strlen>:
 8000264:	4603      	mov	r3, r0
 8000266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026a:	2a00      	cmp	r2, #0
 800026c:	d1fb      	bne.n	8000266 <strlen+0x2>
 800026e:	1a18      	subs	r0, r3, r0
 8000270:	3801      	subs	r0, #1
 8000272:	4770      	bx	lr
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b5b0      	push	{r4, r5, r7, lr}
 8000626:	b08a      	sub	sp, #40	; 0x28
 8000628:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062a:	f000 fd91 	bl	8001150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062e:	f000 f889 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f000 f943 	bl	80008bc <MX_GPIO_Init>
  MX_RTC_Init();
 8000636:	f000 f8f1 	bl	800081c <MX_RTC_Init>
  MX_USART2_UART_Init();
 800063a:	f000 f915 	bl	8000868 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	SEGGER_UART_init(250000);
 800063e:	4835      	ldr	r0, [pc, #212]	; (8000714 <main+0xf0>)
 8000640:	f005 feee 	bl	8006420 <SEGGER_UART_init>

	//this is here to collect segger event time stamp
	DWT->CTRL |= (1 << 0); //Enable CYCCNT in DWT_CTRL.
 8000644:	4b34      	ldr	r3, [pc, #208]	; (8000718 <main+0xf4>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a33      	ldr	r2, [pc, #204]	; (8000718 <main+0xf4>)
 800064a:	f043 0301 	orr.w	r3, r3, #1
 800064e:	6013      	str	r3, [r2, #0]

	SEGGER_SYSVIEW_Conf();
 8000650:	f005 fd10 	bl	8006074 <SEGGER_SYSVIEW_Conf>

	SEGGER_SYSVIEW_Start();
 8000654:	f007 f874 	bl	8007740 <SEGGER_SYSVIEW_Start>

	uint8_t data[] = "Testing for application \r\n";
 8000658:	4b30      	ldr	r3, [pc, #192]	; (800071c <main+0xf8>)
 800065a:	1d3c      	adds	r4, r7, #4
 800065c:	461d      	mov	r5, r3
 800065e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000662:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000666:	c403      	stmia	r4!, {r0, r1}
 8000668:	8022      	strh	r2, [r4, #0]
 800066a:	3402      	adds	r4, #2
 800066c:	0c13      	lsrs	r3, r2, #16
 800066e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit (&huart2, data, sizeof (data), HAL_MAX_DELAY);
 8000670:	1d39      	adds	r1, r7, #4
 8000672:	f04f 33ff 	mov.w	r3, #4294967295
 8000676:	221b      	movs	r2, #27
 8000678:	4829      	ldr	r0, [pc, #164]	; (8000720 <main+0xfc>)
 800067a:	f002 fa08 	bl	8002a8e <HAL_UART_Transmit>

    /* Before a semaphore is used it must be explicitly created.
     * In this example a binary semaphore is created . */
    vSemaphoreCreateBinary( xWork );
 800067e:	2203      	movs	r2, #3
 8000680:	2100      	movs	r1, #0
 8000682:	2001      	movs	r0, #1
 8000684:	f002 fe94 	bl	80033b0 <xQueueGenericCreate>
 8000688:	4603      	mov	r3, r0
 800068a:	4a26      	ldr	r2, [pc, #152]	; (8000724 <main+0x100>)
 800068c:	6013      	str	r3, [r2, #0]
 800068e:	4b25      	ldr	r3, [pc, #148]	; (8000724 <main+0x100>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d006      	beq.n	80006a4 <main+0x80>
 8000696:	4b23      	ldr	r3, [pc, #140]	; (8000724 <main+0x100>)
 8000698:	6818      	ldr	r0, [r3, #0]
 800069a:	2300      	movs	r3, #0
 800069c:	2200      	movs	r2, #0
 800069e:	2100      	movs	r1, #0
 80006a0:	f002 ff0e 	bl	80034c0 <xQueueGenericSend>

	/* The queue is created to hold a maximum of 1 Element. */
    xWorkQueue = xQueueCreate( 1, sizeof( unsigned int ) );
 80006a4:	2200      	movs	r2, #0
 80006a6:	2104      	movs	r1, #4
 80006a8:	2001      	movs	r0, #1
 80006aa:	f002 fe81 	bl	80033b0 <xQueueGenericCreate>
 80006ae:	4603      	mov	r3, r0
 80006b0:	4a1d      	ldr	r2, [pc, #116]	; (8000728 <main+0x104>)
 80006b2:	6013      	str	r3, [r2, #0]

    /* Check the semaphore and queue was created successfully. */
    if( (xWork != NULL) && (xWorkQueue != NULL) )
 80006b4:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <main+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d01b      	beq.n	80006f4 <main+0xd0>
 80006bc:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <main+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d017      	beq.n	80006f4 <main+0xd0>
    {

		/* Create the 'Manager' task.  This is the task that will be synchronized with the Employee task.  The Manager task is created with a high priority  */
        xTaskCreate( vManagerTask, "Manager", 500, NULL, 3, NULL );
 80006c4:	2300      	movs	r3, #0
 80006c6:	9301      	str	r3, [sp, #4]
 80006c8:	2303      	movs	r3, #3
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	2300      	movs	r3, #0
 80006ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006d2:	4916      	ldr	r1, [pc, #88]	; (800072c <main+0x108>)
 80006d4:	4816      	ldr	r0, [pc, #88]	; (8000730 <main+0x10c>)
 80006d6:	f003 fcb1 	bl	800403c <xTaskCreate>

        /* Create a employee task with less priority than manager */
        xTaskCreate( vEmployeeTask, "Employee", 500, NULL, 1, NULL );
 80006da:	2300      	movs	r3, #0
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	2301      	movs	r3, #1
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	2300      	movs	r3, #0
 80006e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006e8:	4912      	ldr	r1, [pc, #72]	; (8000734 <main+0x110>)
 80006ea:	4813      	ldr	r0, [pc, #76]	; (8000738 <main+0x114>)
 80006ec:	f003 fca6 	bl	800403c <xTaskCreate>

        /* Start the scheduler so the created tasks start executing. */
        vTaskStartScheduler();
 80006f0:	f003 fe40 	bl	8004374 <vTaskStartScheduler>
    }

    sprintf(usr_msg,"Queue/Sema create failed.. \r\n");
 80006f4:	4911      	ldr	r1, [pc, #68]	; (800073c <main+0x118>)
 80006f6:	4812      	ldr	r0, [pc, #72]	; (8000740 <main+0x11c>)
 80006f8:	f007 febe 	bl	8008478 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)usr_msg, strlen((const char*)usr_msg), HAL_MAX_DELAY);
 80006fc:	4810      	ldr	r0, [pc, #64]	; (8000740 <main+0x11c>)
 80006fe:	f7ff fdb1 	bl	8000264 <strlen>
 8000702:	4603      	mov	r3, r0
 8000704:	b29a      	uxth	r2, r3
 8000706:	f04f 33ff 	mov.w	r3, #4294967295
 800070a:	490d      	ldr	r1, [pc, #52]	; (8000740 <main+0x11c>)
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <main+0xfc>)
 800070e:	f002 f9be 	bl	8002a8e <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000712:	e7fe      	b.n	8000712 <main+0xee>
 8000714:	0003d090 	.word	0x0003d090
 8000718:	e0001000 	.word	0xe0001000
 800071c:	08009830 	.word	0x08009830
 8000720:	200000bc 	.word	0x200000bc
 8000724:	200001fc 	.word	0x200001fc
 8000728:	20000200 	.word	0x20000200
 800072c:	080097fc 	.word	0x080097fc
 8000730:	08000b89 	.word	0x08000b89
 8000734:	08009804 	.word	0x08009804
 8000738:	08000c65 	.word	0x08000c65
 800073c:	08009810 	.word	0x08009810
 8000740:	20000100 	.word	0x20000100

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b094      	sub	sp, #80	; 0x50
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	2230      	movs	r2, #48	; 0x30
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f007 fe4a 	bl	80083ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000768:	2300      	movs	r3, #0
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	4b29      	ldr	r3, [pc, #164]	; (8000814 <SystemClock_Config+0xd0>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	4a28      	ldr	r2, [pc, #160]	; (8000814 <SystemClock_Config+0xd0>)
 8000772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000776:	6413      	str	r3, [r2, #64]	; 0x40
 8000778:	4b26      	ldr	r3, [pc, #152]	; (8000814 <SystemClock_Config+0xd0>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	4b23      	ldr	r3, [pc, #140]	; (8000818 <SystemClock_Config+0xd4>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a22      	ldr	r2, [pc, #136]	; (8000818 <SystemClock_Config+0xd4>)
 800078e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	4b20      	ldr	r3, [pc, #128]	; (8000818 <SystemClock_Config+0xd4>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80007a0:	230a      	movs	r3, #10
 80007a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a4:	2301      	movs	r3, #1
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a8:	2310      	movs	r3, #16
 80007aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007ac:	2301      	movs	r3, #1
 80007ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b0:	2302      	movs	r3, #2
 80007b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b4:	2300      	movs	r3, #0
 80007b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007b8:	2308      	movs	r3, #8
 80007ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80007bc:	2332      	movs	r3, #50	; 0x32
 80007be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007c4:	2307      	movs	r3, #7
 80007c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c8:	f107 0320 	add.w	r3, r7, #32
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 ffbd 	bl	800174c <HAL_RCC_OscConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007d8:	f000 fa8c 	bl	8000cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007dc:	230f      	movs	r3, #15
 80007de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e0:	2302      	movs	r3, #2
 80007e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f001 fa1e 	bl	8001c3c <HAL_RCC_ClockConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000806:	f000 fa75 	bl	8000cf4 <Error_Handler>
  }
}
 800080a:	bf00      	nop
 800080c:	3750      	adds	r7, #80	; 0x50
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800
 8000818:	40007000 	.word	0x40007000

0800081c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_RTC_Init+0x44>)
 8000822:	4a10      	ldr	r2, [pc, #64]	; (8000864 <MX_RTC_Init+0x48>)
 8000824:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_RTC_Init+0x44>)
 8000828:	2240      	movs	r2, #64	; 0x40
 800082a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_RTC_Init+0x44>)
 800082e:	227f      	movs	r2, #127	; 0x7f
 8000830:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_RTC_Init+0x44>)
 8000834:	22ff      	movs	r2, #255	; 0xff
 8000836:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_RTC_Init+0x44>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_RTC_Init+0x44>)
 8000840:	2200      	movs	r2, #0
 8000842:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_RTC_Init+0x44>)
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_RTC_Init+0x44>)
 800084c:	f001 fd2a 	bl	80022a4 <HAL_RTC_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000856:	f000 fa4d 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	2000009c 	.word	0x2000009c
 8000864:	40002800 	.word	0x40002800

08000868 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 800086e:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <MX_USART2_UART_Init+0x50>)
 8000870:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000878:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 80008a0:	f002 f8a8 	bl	80029f4 <HAL_UART_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008aa:	f000 fa23 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200000bc 	.word	0x200000bc
 80008b8:	40004400 	.word	0x40004400

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08c      	sub	sp, #48	; 0x30
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
 80008d6:	4ba6      	ldr	r3, [pc, #664]	; (8000b70 <MX_GPIO_Init+0x2b4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4aa5      	ldr	r2, [pc, #660]	; (8000b70 <MX_GPIO_Init+0x2b4>)
 80008dc:	f043 0310 	orr.w	r3, r3, #16
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4ba3      	ldr	r3, [pc, #652]	; (8000b70 <MX_GPIO_Init+0x2b4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0310 	and.w	r3, r3, #16
 80008ea:	61bb      	str	r3, [r7, #24]
 80008ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	4b9f      	ldr	r3, [pc, #636]	; (8000b70 <MX_GPIO_Init+0x2b4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a9e      	ldr	r2, [pc, #632]	; (8000b70 <MX_GPIO_Init+0x2b4>)
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b9c      	ldr	r3, [pc, #624]	; (8000b70 <MX_GPIO_Init+0x2b4>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0304 	and.w	r3, r3, #4
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	4b98      	ldr	r3, [pc, #608]	; (8000b70 <MX_GPIO_Init+0x2b4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a97      	ldr	r2, [pc, #604]	; (8000b70 <MX_GPIO_Init+0x2b4>)
 8000914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b95      	ldr	r3, [pc, #596]	; (8000b70 <MX_GPIO_Init+0x2b4>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	4b91      	ldr	r3, [pc, #580]	; (8000b70 <MX_GPIO_Init+0x2b4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a90      	ldr	r2, [pc, #576]	; (8000b70 <MX_GPIO_Init+0x2b4>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b8e      	ldr	r3, [pc, #568]	; (8000b70 <MX_GPIO_Init+0x2b4>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	4b8a      	ldr	r3, [pc, #552]	; (8000b70 <MX_GPIO_Init+0x2b4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a89      	ldr	r2, [pc, #548]	; (8000b70 <MX_GPIO_Init+0x2b4>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b87      	ldr	r3, [pc, #540]	; (8000b70 <MX_GPIO_Init+0x2b4>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b83      	ldr	r3, [pc, #524]	; (8000b70 <MX_GPIO_Init+0x2b4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a82      	ldr	r2, [pc, #520]	; (8000b70 <MX_GPIO_Init+0x2b4>)
 8000968:	f043 0308 	orr.w	r3, r3, #8
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b80      	ldr	r3, [pc, #512]	; (8000b70 <MX_GPIO_Init+0x2b4>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0308 	and.w	r3, r3, #8
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2108      	movs	r1, #8
 800097e:	487d      	ldr	r0, [pc, #500]	; (8000b74 <MX_GPIO_Init+0x2b8>)
 8000980:	f000 fea6 	bl	80016d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000984:	2201      	movs	r2, #1
 8000986:	2101      	movs	r1, #1
 8000988:	487b      	ldr	r0, [pc, #492]	; (8000b78 <MX_GPIO_Init+0x2bc>)
 800098a:	f000 fea1 	bl	80016d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800098e:	2200      	movs	r2, #0
 8000990:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000994:	4879      	ldr	r0, [pc, #484]	; (8000b7c <MX_GPIO_Init+0x2c0>)
 8000996:	f000 fe9b 	bl	80016d0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800099a:	2308      	movs	r3, #8
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4870      	ldr	r0, [pc, #448]	; (8000b74 <MX_GPIO_Init+0x2b8>)
 80009b2:	f000 fcf1 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009b6:	2301      	movs	r3, #1
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	486a      	ldr	r0, [pc, #424]	; (8000b78 <MX_GPIO_Init+0x2bc>)
 80009ce:	f000 fce3 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009d2:	2308      	movs	r3, #8
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009e2:	2305      	movs	r3, #5
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	4862      	ldr	r0, [pc, #392]	; (8000b78 <MX_GPIO_Init+0x2bc>)
 80009ee:	f000 fcd3 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009f2:	2301      	movs	r3, #1
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009f6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	485e      	ldr	r0, [pc, #376]	; (8000b80 <MX_GPIO_Init+0x2c4>)
 8000a08:	f000 fcc6 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a0c:	2310      	movs	r3, #16
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a1c:	2306      	movs	r3, #6
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4619      	mov	r1, r3
 8000a26:	4856      	ldr	r0, [pc, #344]	; (8000b80 <MX_GPIO_Init+0x2c4>)
 8000a28:	f000 fcb6 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000a2c:	23e0      	movs	r3, #224	; 0xe0
 8000a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a3c:	2305      	movs	r3, #5
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	484e      	ldr	r0, [pc, #312]	; (8000b80 <MX_GPIO_Init+0x2c4>)
 8000a48:	f000 fca6 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4849      	ldr	r0, [pc, #292]	; (8000b84 <MX_GPIO_Init+0x2c8>)
 8000a60:	f000 fc9a 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a76:	2305      	movs	r3, #5
 8000a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4840      	ldr	r0, [pc, #256]	; (8000b84 <MX_GPIO_Init+0x2c8>)
 8000a82:	f000 fc89 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a86:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a8a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4837      	ldr	r0, [pc, #220]	; (8000b7c <MX_GPIO_Init+0x2c0>)
 8000aa0:	f000 fc7a 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000aa4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ab6:	2306      	movs	r3, #6
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	482d      	ldr	r0, [pc, #180]	; (8000b78 <MX_GPIO_Init+0x2bc>)
 8000ac2:	f000 fc69 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000ac6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000acc:	2300      	movs	r3, #0
 8000ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4829      	ldr	r0, [pc, #164]	; (8000b80 <MX_GPIO_Init+0x2c4>)
 8000adc:	f000 fc5c 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000ae0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000af2:	230a      	movs	r3, #10
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	4619      	mov	r1, r3
 8000afc:	4820      	ldr	r0, [pc, #128]	; (8000b80 <MX_GPIO_Init+0x2c4>)
 8000afe:	f000 fc4b 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b02:	2320      	movs	r3, #32
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b06:	2300      	movs	r3, #0
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	4819      	ldr	r0, [pc, #100]	; (8000b7c <MX_GPIO_Init+0x2c0>)
 8000b16:	f000 fc3f 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b1a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b20:	2312      	movs	r3, #18
 8000b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	4619      	mov	r1, r3
 8000b36:	4813      	ldr	r0, [pc, #76]	; (8000b84 <MX_GPIO_Init+0x2c8>)
 8000b38:	f000 fc2e 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b40:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4808      	ldr	r0, [pc, #32]	; (8000b74 <MX_GPIO_Init+0x2b8>)
 8000b52:	f000 fc21 	bl	8001398 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2100      	movs	r1, #0
 8000b5a:	2006      	movs	r0, #6
 8000b5c:	f000 fbf2 	bl	8001344 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b60:	2006      	movs	r0, #6
 8000b62:	f000 fc0b 	bl	800137c <HAL_NVIC_EnableIRQ>

}
 8000b66:	bf00      	nop
 8000b68:	3730      	adds	r7, #48	; 0x30
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40021000 	.word	0x40021000
 8000b78:	40020800 	.word	0x40020800
 8000b7c:	40020c00 	.word	0x40020c00
 8000b80:	40020000 	.word	0x40020000
 8000b84:	40020400 	.word	0x40020400

08000b88 <vManagerTask>:

/* USER CODE BEGIN 4 */
void vManagerTask( void *pvParameters )
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	 portBASE_TYPE xStatus;

   /* The semaphore is created in the 'empty' state, meaning the semaphore must
	 first be given using the xSemaphoreGive() API function before it
	 can subsequently be taken (obtained) */
   xSemaphoreGive( xWork);
 8000b90:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <vManagerTask+0x7c>)
 8000b92:	6818      	ldr	r0, [r3, #0]
 8000b94:	2300      	movs	r3, #0
 8000b96:	2200      	movs	r2, #0
 8000b98:	2100      	movs	r1, #0
 8000b9a:	f002 fc91 	bl	80034c0 <xQueueGenericSend>

   for( ;; )
   {
       /* get a work ticket id(some random number) */
       xWorkTicketId = ( rand() & 0x1FF );
 8000b9e:	f007 fc2d 	bl	80083fc <rand>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ba8:	60bb      	str	r3, [r7, #8]

		/* Sends work ticket id to the work queue */
		xStatus = xQueueSend( xWorkQueue, &xWorkTicketId , portMAX_DELAY ); //Post an item on back of the queue
 8000baa:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <vManagerTask+0x80>)
 8000bac:	6818      	ldr	r0, [r3, #0]
 8000bae:	f107 0108 	add.w	r1, r7, #8
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb8:	f002 fc82 	bl	80034c0 <xQueueGenericSend>
 8000bbc:	60f8      	str	r0, [r7, #12]

		if( xStatus != pdPASS )
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d00f      	beq.n	8000be4 <vManagerTask+0x5c>
		{
			sprintf(usr_msg,"Could not send to the queue.\r\n");
 8000bc4:	4911      	ldr	r1, [pc, #68]	; (8000c0c <vManagerTask+0x84>)
 8000bc6:	4812      	ldr	r0, [pc, #72]	; (8000c10 <vManagerTask+0x88>)
 8000bc8:	f007 fc56 	bl	8008478 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)usr_msg, strlen((const char*)usr_msg), HAL_MAX_DELAY);
 8000bcc:	4810      	ldr	r0, [pc, #64]	; (8000c10 <vManagerTask+0x88>)
 8000bce:	f7ff fb49 	bl	8000264 <strlen>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bda:	490d      	ldr	r1, [pc, #52]	; (8000c10 <vManagerTask+0x88>)
 8000bdc:	480d      	ldr	r0, [pc, #52]	; (8000c14 <vManagerTask+0x8c>)
 8000bde:	f001 ff56 	bl	8002a8e <HAL_UART_Transmit>
 8000be2:	e7dc      	b.n	8000b9e <vManagerTask+0x16>

		}else
		{
			/* Manager notifying the employee by "Giving" semaphore */
			xSemaphoreGive( xWork);
 8000be4:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <vManagerTask+0x7c>)
 8000be6:	6818      	ldr	r0, [r3, #0]
 8000be8:	2300      	movs	r3, #0
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	f002 fc67 	bl	80034c0 <xQueueGenericSend>
			/* after assigning the work , just yield the processor because nothing to do */
			taskYIELD();
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <vManagerTask+0x90>)
 8000bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	f3bf 8f4f 	dsb	sy
 8000bfe:	f3bf 8f6f 	isb	sy
       xWorkTicketId = ( rand() & 0x1FF );
 8000c02:	e7cc      	b.n	8000b9e <vManagerTask+0x16>
 8000c04:	200001fc 	.word	0x200001fc
 8000c08:	20000200 	.word	0x20000200
 8000c0c:	0800984c 	.word	0x0800984c
 8000c10:	20000100 	.word	0x20000100
 8000c14:	200000bc 	.word	0x200000bc
 8000c18:	e000ed04 	.word	0xe000ed04

08000c1c <EmployeeDoWork>:
   }
}
/*-----------------------------------------------------------*/

void EmployeeDoWork(unsigned char TicketId)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
	/* implement the work according to TickedID */
	sprintf(usr_msg,"Employee task : Working on Ticked id : %d\r\n", TicketId);
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	490b      	ldr	r1, [pc, #44]	; (8000c58 <EmployeeDoWork+0x3c>)
 8000c2c:	480b      	ldr	r0, [pc, #44]	; (8000c5c <EmployeeDoWork+0x40>)
 8000c2e:	f007 fc23 	bl	8008478 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)usr_msg, strlen((const char*)usr_msg), HAL_MAX_DELAY);
 8000c32:	480a      	ldr	r0, [pc, #40]	; (8000c5c <EmployeeDoWork+0x40>)
 8000c34:	f7ff fb16 	bl	8000264 <strlen>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c40:	4906      	ldr	r1, [pc, #24]	; (8000c5c <EmployeeDoWork+0x40>)
 8000c42:	4807      	ldr	r0, [pc, #28]	; (8000c60 <EmployeeDoWork+0x44>)
 8000c44:	f001 ff23 	bl	8002a8e <HAL_UART_Transmit>
	vTaskDelay(TicketId);
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f003 fb5a 	bl	8004304 <vTaskDelay>
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	0800986c 	.word	0x0800986c
 8000c5c:	20000100 	.word	0x20000100
 8000c60:	200000bc 	.word	0x200000bc

08000c64 <vEmployeeTask>:

static void vEmployeeTask( void *pvParameters )
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xStatus;
   /* As per most tasks, this task is implemented within an infinite loop. */
   for( ;; )
   {
		/* First Employee tries to take the semaphore, if it is available that means there is a task assigned by manager, otherwise employee task will be blocked */
		xSemaphoreTake( xWork, 0 );
 8000c6c:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <vEmployeeTask+0x58>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f002 ff18 	bl	8003aa8 <xQueueSemaphoreTake>

		/* get the ticket id from the work queue */
		xStatus = xQueueReceive( xWorkQueue, &xWorkTicketId, 0 );
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <vEmployeeTask+0x5c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f107 010b 	add.w	r1, r7, #11
 8000c80:	2200      	movs	r2, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f002 fe00 	bl	8003888 <xQueueReceive>
 8000c88:	60f8      	str	r0, [r7, #12]

		if( xStatus == pdPASS )
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d104      	bne.n	8000c9a <vEmployeeTask+0x36>
		{
		  /* employee may decode the xWorkTicketId in this function to do the work*/
			EmployeeDoWork(xWorkTicketId);
 8000c90:	7afb      	ldrb	r3, [r7, #11]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff ffc2 	bl	8000c1c <EmployeeDoWork>
 8000c98:	e7e8      	b.n	8000c6c <vEmployeeTask+0x8>
		}
		else
		{
			/* We did not receive anything from the queue.  This must be an error as this task should only run when the manager assigns at least one work. */
			sprintf(usr_msg,"Employee task : Queue is empty , nothing to do.\r\n");
 8000c9a:	490a      	ldr	r1, [pc, #40]	; (8000cc4 <vEmployeeTask+0x60>)
 8000c9c:	480a      	ldr	r0, [pc, #40]	; (8000cc8 <vEmployeeTask+0x64>)
 8000c9e:	f007 fbeb 	bl	8008478 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)usr_msg, strlen((const char*)usr_msg), HAL_MAX_DELAY);
 8000ca2:	4809      	ldr	r0, [pc, #36]	; (8000cc8 <vEmployeeTask+0x64>)
 8000ca4:	f7ff fade 	bl	8000264 <strlen>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb0:	4905      	ldr	r1, [pc, #20]	; (8000cc8 <vEmployeeTask+0x64>)
 8000cb2:	4806      	ldr	r0, [pc, #24]	; (8000ccc <vEmployeeTask+0x68>)
 8000cb4:	f001 feeb 	bl	8002a8e <HAL_UART_Transmit>
		xSemaphoreTake( xWork, 0 );
 8000cb8:	e7d8      	b.n	8000c6c <vEmployeeTask+0x8>
 8000cba:	bf00      	nop
 8000cbc:	200001fc 	.word	0x200001fc
 8000cc0:	20000200 	.word	0x20000200
 8000cc4:	08009898 	.word	0x08009898
 8000cc8:	20000100 	.word	0x20000100
 8000ccc:	200000bc 	.word	0x200000bc

08000cd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d101      	bne.n	8000ce6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ce2:	f000 fa57 	bl	8001194 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40001000 	.word	0x40001000

08000cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf8:	b672      	cpsid	i
}
 8000cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <Error_Handler+0x8>
	...

08000d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	4a0f      	ldr	r2, [pc, #60]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d14:	6453      	str	r3, [r2, #68]	; 0x44
 8000d16:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	603b      	str	r3, [r7, #0]
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	4a08      	ldr	r2, [pc, #32]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d30:	6413      	str	r3, [r2, #64]	; 0x40
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000d3e:	f004 fde3 	bl	8005908 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40023800 	.word	0x40023800

08000d50 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d58:	f107 0308 	add.w	r3, r7, #8
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a0c      	ldr	r2, [pc, #48]	; (8000d9c <HAL_RTC_MspInit+0x4c>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d111      	bne.n	8000d94 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d70:	2302      	movs	r3, #2
 8000d72:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d78:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d7a:	f107 0308 	add.w	r3, r7, #8
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f001 f9ae 	bl	80020e0 <HAL_RCCEx_PeriphCLKConfig>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000d8a:	f7ff ffb3 	bl	8000cf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d8e:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <HAL_RTC_MspInit+0x50>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d94:	bf00      	nop
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40002800 	.word	0x40002800
 8000da0:	42470e3c 	.word	0x42470e3c

08000da4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a19      	ldr	r2, [pc, #100]	; (8000e28 <HAL_UART_MspInit+0x84>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d12b      	bne.n	8000e1e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <HAL_UART_MspInit+0x88>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	4a17      	ldr	r2, [pc, #92]	; (8000e2c <HAL_UART_MspInit+0x88>)
 8000dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_UART_MspInit+0x88>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <HAL_UART_MspInit+0x88>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a10      	ldr	r2, [pc, #64]	; (8000e2c <HAL_UART_MspInit+0x88>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <HAL_UART_MspInit+0x88>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dfe:	230c      	movs	r3, #12
 8000e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e0e:	2307      	movs	r3, #7
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	4805      	ldr	r0, [pc, #20]	; (8000e30 <HAL_UART_MspInit+0x8c>)
 8000e1a:	f000 fabd 	bl	8001398 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e1e:	bf00      	nop
 8000e20:	3728      	adds	r7, #40	; 0x28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40004400 	.word	0x40004400
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40020000 	.word	0x40020000

08000e34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08e      	sub	sp, #56	; 0x38
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	4b33      	ldr	r3, [pc, #204]	; (8000f18 <HAL_InitTick+0xe4>)
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4c:	4a32      	ldr	r2, [pc, #200]	; (8000f18 <HAL_InitTick+0xe4>)
 8000e4e:	f043 0310 	orr.w	r3, r3, #16
 8000e52:	6413      	str	r3, [r2, #64]	; 0x40
 8000e54:	4b30      	ldr	r3, [pc, #192]	; (8000f18 <HAL_InitTick+0xe4>)
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	f003 0310 	and.w	r3, r3, #16
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e60:	f107 0210 	add.w	r2, r7, #16
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f001 f906 	bl	800207c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e70:	6a3b      	ldr	r3, [r7, #32]
 8000e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d103      	bne.n	8000e82 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e7a:	f001 f8d7 	bl	800202c <HAL_RCC_GetPCLK1Freq>
 8000e7e:	6378      	str	r0, [r7, #52]	; 0x34
 8000e80:	e004      	b.n	8000e8c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e82:	f001 f8d3 	bl	800202c <HAL_RCC_GetPCLK1Freq>
 8000e86:	4603      	mov	r3, r0
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e8e:	4a23      	ldr	r2, [pc, #140]	; (8000f1c <HAL_InitTick+0xe8>)
 8000e90:	fba2 2303 	umull	r2, r3, r2, r3
 8000e94:	0c9b      	lsrs	r3, r3, #18
 8000e96:	3b01      	subs	r3, #1
 8000e98:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e9a:	4b21      	ldr	r3, [pc, #132]	; (8000f20 <HAL_InitTick+0xec>)
 8000e9c:	4a21      	ldr	r2, [pc, #132]	; (8000f24 <HAL_InitTick+0xf0>)
 8000e9e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ea0:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <HAL_InitTick+0xec>)
 8000ea2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ea6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ea8:	4a1d      	ldr	r2, [pc, #116]	; (8000f20 <HAL_InitTick+0xec>)
 8000eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eac:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000eae:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <HAL_InitTick+0xec>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <HAL_InitTick+0xec>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eba:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <HAL_InitTick+0xec>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ec0:	4817      	ldr	r0, [pc, #92]	; (8000f20 <HAL_InitTick+0xec>)
 8000ec2:	f001 fae9 	bl	8002498 <HAL_TIM_Base_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ecc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d11b      	bne.n	8000f0c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ed4:	4812      	ldr	r0, [pc, #72]	; (8000f20 <HAL_InitTick+0xec>)
 8000ed6:	f001 fb39 	bl	800254c <HAL_TIM_Base_Start_IT>
 8000eda:	4603      	mov	r3, r0
 8000edc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ee0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d111      	bne.n	8000f0c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ee8:	2036      	movs	r0, #54	; 0x36
 8000eea:	f000 fa47 	bl	800137c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b0f      	cmp	r3, #15
 8000ef2:	d808      	bhi.n	8000f06 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	2036      	movs	r0, #54	; 0x36
 8000efa:	f000 fa23 	bl	8001344 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <HAL_InitTick+0xf4>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	e002      	b.n	8000f0c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3738      	adds	r7, #56	; 0x38
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	431bde83 	.word	0x431bde83
 8000f20:	20000204 	.word	0x20000204
 8000f24:	40001000 	.word	0x40001000
 8000f28:	20000004 	.word	0x20000004

08000f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <HardFault_Handler+0x4>

08000f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <MemManage_Handler+0x4>

08000f46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <BusFault_Handler+0x4>

08000f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <UsageFault_Handler+0x4>

08000f52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f64:	2001      	movs	r0, #1
 8000f66:	f000 fbcd 	bl	8001704 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <TIM6_DAC_IRQHandler+0x10>)
 8000f76:	f001 fb59 	bl	800262c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000204 	.word	0x20000204

08000f84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
	return 1;
 8000f88:	2301      	movs	r3, #1
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <_kill>:

int _kill(int pid, int sig)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f9e:	f007 f9dd 	bl	800835c <__errno>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2216      	movs	r2, #22
 8000fa6:	601a      	str	r2, [r3, #0]
	return -1;
 8000fa8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <_exit>:

void _exit (int status)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ffe7 	bl	8000f94 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000fc6:	e7fe      	b.n	8000fc6 <_exit+0x12>

08000fc8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	e00a      	b.n	8000ff0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fda:	f3af 8000 	nop.w
 8000fde:	4601      	mov	r1, r0
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	1c5a      	adds	r2, r3, #1
 8000fe4:	60ba      	str	r2, [r7, #8]
 8000fe6:	b2ca      	uxtb	r2, r1
 8000fe8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	3301      	adds	r3, #1
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	697a      	ldr	r2, [r7, #20]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	dbf0      	blt.n	8000fda <_read+0x12>
	}

return len;
 8000ff8:	687b      	ldr	r3, [r7, #4]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
	return -1;
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
 8001022:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800102a:	605a      	str	r2, [r3, #4]
	return 0;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <_isatty>:

int _isatty(int file)
{
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
	return 1;
 8001042:	2301      	movs	r3, #1
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
	return 0;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001074:	4a14      	ldr	r2, [pc, #80]	; (80010c8 <_sbrk+0x5c>)
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <_sbrk+0x60>)
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001080:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d102      	bne.n	800108e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <_sbrk+0x64>)
 800108a:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <_sbrk+0x68>)
 800108c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <_sbrk+0x64>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	429a      	cmp	r2, r3
 800109a:	d207      	bcs.n	80010ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800109c:	f007 f95e 	bl	800835c <__errno>
 80010a0:	4603      	mov	r3, r0
 80010a2:	220c      	movs	r2, #12
 80010a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	e009      	b.n	80010c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <_sbrk+0x64>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <_sbrk+0x64>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	4a05      	ldr	r2, [pc, #20]	; (80010d0 <_sbrk+0x64>)
 80010bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010be:	68fb      	ldr	r3, [r7, #12]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20020000 	.word	0x20020000
 80010cc:	00000400 	.word	0x00000400
 80010d0:	2000024c 	.word	0x2000024c
 80010d4:	20014690 	.word	0x20014690

080010d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <SystemInit+0x20>)
 80010de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010e2:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <SystemInit+0x20>)
 80010e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001134 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001100:	480d      	ldr	r0, [pc, #52]	; (8001138 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001102:	490e      	ldr	r1, [pc, #56]	; (800113c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001104:	4a0e      	ldr	r2, [pc, #56]	; (8001140 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001108:	e002      	b.n	8001110 <LoopCopyDataInit>

0800110a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800110a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800110c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110e:	3304      	adds	r3, #4

08001110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001114:	d3f9      	bcc.n	800110a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001116:	4a0b      	ldr	r2, [pc, #44]	; (8001144 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001118:	4c0b      	ldr	r4, [pc, #44]	; (8001148 <LoopFillZerobss+0x26>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800111c:	e001      	b.n	8001122 <LoopFillZerobss>

0800111e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001120:	3204      	adds	r2, #4

08001122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001124:	d3fb      	bcc.n	800111e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001126:	f7ff ffd7 	bl	80010d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800112a:	f007 f91d 	bl	8008368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800112e:	f7ff fa79 	bl	8000624 <main>
  bx  lr    
 8001132:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001134:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800113c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001140:	08009b40 	.word	0x08009b40
  ldr r2, =_sbss
 8001144:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001148:	2001468c 	.word	0x2001468c

0800114c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800114c:	e7fe      	b.n	800114c <ADC_IRQHandler>
	...

08001150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001154:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <HAL_Init+0x40>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a0d      	ldr	r2, [pc, #52]	; (8001190 <HAL_Init+0x40>)
 800115a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800115e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <HAL_Init+0x40>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <HAL_Init+0x40>)
 8001166:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800116a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <HAL_Init+0x40>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a07      	ldr	r2, [pc, #28]	; (8001190 <HAL_Init+0x40>)
 8001172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001176:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001178:	2003      	movs	r0, #3
 800117a:	f000 f8d8 	bl	800132e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800117e:	2000      	movs	r0, #0
 8001180:	f7ff fe58 	bl	8000e34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001184:	f7ff fdbc 	bl	8000d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023c00 	.word	0x40023c00

08001194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_IncTick+0x20>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_IncTick+0x24>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4413      	add	r3, r2
 80011a4:	4a04      	ldr	r2, [pc, #16]	; (80011b8 <HAL_IncTick+0x24>)
 80011a6:	6013      	str	r3, [r2, #0]
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000008 	.word	0x20000008
 80011b8:	20000250 	.word	0x20000250

080011bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return uwTick;
 80011c0:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <HAL_GetTick+0x14>)
 80011c2:	681b      	ldr	r3, [r3, #0]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	20000250 	.word	0x20000250

080011d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011f0:	4013      	ands	r3, r2
 80011f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001206:	4a04      	ldr	r2, [pc, #16]	; (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	60d3      	str	r3, [r2, #12]
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <__NVIC_GetPriorityGrouping+0x18>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	0a1b      	lsrs	r3, r3, #8
 8001226:	f003 0307 	and.w	r3, r3, #7
}
 800122a:	4618      	mov	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	2b00      	cmp	r3, #0
 8001248:	db0b      	blt.n	8001262 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	f003 021f 	and.w	r2, r3, #31
 8001250:	4907      	ldr	r1, [pc, #28]	; (8001270 <__NVIC_EnableIRQ+0x38>)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	095b      	lsrs	r3, r3, #5
 8001258:	2001      	movs	r0, #1
 800125a:	fa00 f202 	lsl.w	r2, r0, r2
 800125e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000e100 	.word	0xe000e100

08001274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	2b00      	cmp	r3, #0
 8001286:	db0a      	blt.n	800129e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	b2da      	uxtb	r2, r3
 800128c:	490c      	ldr	r1, [pc, #48]	; (80012c0 <__NVIC_SetPriority+0x4c>)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	0112      	lsls	r2, r2, #4
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	440b      	add	r3, r1
 8001298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800129c:	e00a      	b.n	80012b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4908      	ldr	r1, [pc, #32]	; (80012c4 <__NVIC_SetPriority+0x50>)
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	3b04      	subs	r3, #4
 80012ac:	0112      	lsls	r2, r2, #4
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	440b      	add	r3, r1
 80012b2:	761a      	strb	r2, [r3, #24]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000e100 	.word	0xe000e100
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b089      	sub	sp, #36	; 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f1c3 0307 	rsb	r3, r3, #7
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	bf28      	it	cs
 80012e6:	2304      	movcs	r3, #4
 80012e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3304      	adds	r3, #4
 80012ee:	2b06      	cmp	r3, #6
 80012f0:	d902      	bls.n	80012f8 <NVIC_EncodePriority+0x30>
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3b03      	subs	r3, #3
 80012f6:	e000      	b.n	80012fa <NVIC_EncodePriority+0x32>
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43da      	mvns	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	401a      	ands	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001310:	f04f 31ff 	mov.w	r1, #4294967295
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	43d9      	mvns	r1, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	4313      	orrs	r3, r2
         );
}
 8001322:	4618      	mov	r0, r3
 8001324:	3724      	adds	r7, #36	; 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ff4c 	bl	80011d4 <__NVIC_SetPriorityGrouping>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
 8001350:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001356:	f7ff ff61 	bl	800121c <__NVIC_GetPriorityGrouping>
 800135a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	68b9      	ldr	r1, [r7, #8]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ffb1 	bl	80012c8 <NVIC_EncodePriority>
 8001366:	4602      	mov	r2, r0
 8001368:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136c:	4611      	mov	r1, r2
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ff80 	bl	8001274 <__NVIC_SetPriority>
}
 8001374:	bf00      	nop
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff ff54 	bl	8001238 <__NVIC_EnableIRQ>
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
 80013b2:	e16b      	b.n	800168c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013b4:	2201      	movs	r2, #1
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	f040 815a 	bne.w	8001686 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d005      	beq.n	80013ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d130      	bne.n	800144c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	2203      	movs	r2, #3
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	68da      	ldr	r2, [r3, #12]
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001420:	2201      	movs	r2, #1
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	091b      	lsrs	r3, r3, #4
 8001436:	f003 0201 	and.w	r2, r3, #1
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	2b03      	cmp	r3, #3
 8001456:	d017      	beq.n	8001488 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	2203      	movs	r2, #3
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d123      	bne.n	80014dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	08da      	lsrs	r2, r3, #3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3208      	adds	r2, #8
 800149c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	220f      	movs	r2, #15
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	691a      	ldr	r2, [r3, #16]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	08da      	lsrs	r2, r3, #3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3208      	adds	r2, #8
 80014d6:	69b9      	ldr	r1, [r7, #24]
 80014d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	2203      	movs	r2, #3
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0203 	and.w	r2, r3, #3
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 80b4 	beq.w	8001686 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b60      	ldr	r3, [pc, #384]	; (80016a4 <HAL_GPIO_Init+0x30c>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	4a5f      	ldr	r2, [pc, #380]	; (80016a4 <HAL_GPIO_Init+0x30c>)
 8001528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800152c:	6453      	str	r3, [r2, #68]	; 0x44
 800152e:	4b5d      	ldr	r3, [pc, #372]	; (80016a4 <HAL_GPIO_Init+0x30c>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800153a:	4a5b      	ldr	r2, [pc, #364]	; (80016a8 <HAL_GPIO_Init+0x310>)
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	089b      	lsrs	r3, r3, #2
 8001540:	3302      	adds	r3, #2
 8001542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	220f      	movs	r2, #15
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a52      	ldr	r2, [pc, #328]	; (80016ac <HAL_GPIO_Init+0x314>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d02b      	beq.n	80015be <HAL_GPIO_Init+0x226>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a51      	ldr	r2, [pc, #324]	; (80016b0 <HAL_GPIO_Init+0x318>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d025      	beq.n	80015ba <HAL_GPIO_Init+0x222>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a50      	ldr	r2, [pc, #320]	; (80016b4 <HAL_GPIO_Init+0x31c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d01f      	beq.n	80015b6 <HAL_GPIO_Init+0x21e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4f      	ldr	r2, [pc, #316]	; (80016b8 <HAL_GPIO_Init+0x320>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d019      	beq.n	80015b2 <HAL_GPIO_Init+0x21a>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4e      	ldr	r2, [pc, #312]	; (80016bc <HAL_GPIO_Init+0x324>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d013      	beq.n	80015ae <HAL_GPIO_Init+0x216>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4d      	ldr	r2, [pc, #308]	; (80016c0 <HAL_GPIO_Init+0x328>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d00d      	beq.n	80015aa <HAL_GPIO_Init+0x212>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a4c      	ldr	r2, [pc, #304]	; (80016c4 <HAL_GPIO_Init+0x32c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d007      	beq.n	80015a6 <HAL_GPIO_Init+0x20e>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4b      	ldr	r2, [pc, #300]	; (80016c8 <HAL_GPIO_Init+0x330>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d101      	bne.n	80015a2 <HAL_GPIO_Init+0x20a>
 800159e:	2307      	movs	r3, #7
 80015a0:	e00e      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015a2:	2308      	movs	r3, #8
 80015a4:	e00c      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015a6:	2306      	movs	r3, #6
 80015a8:	e00a      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015aa:	2305      	movs	r3, #5
 80015ac:	e008      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015ae:	2304      	movs	r3, #4
 80015b0:	e006      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015b2:	2303      	movs	r3, #3
 80015b4:	e004      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e002      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015be:	2300      	movs	r3, #0
 80015c0:	69fa      	ldr	r2, [r7, #28]
 80015c2:	f002 0203 	and.w	r2, r2, #3
 80015c6:	0092      	lsls	r2, r2, #2
 80015c8:	4093      	lsls	r3, r2
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015d0:	4935      	ldr	r1, [pc, #212]	; (80016a8 <HAL_GPIO_Init+0x310>)
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	089b      	lsrs	r3, r3, #2
 80015d6:	3302      	adds	r3, #2
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015de:	4b3b      	ldr	r3, [pc, #236]	; (80016cc <HAL_GPIO_Init+0x334>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001602:	4a32      	ldr	r2, [pc, #200]	; (80016cc <HAL_GPIO_Init+0x334>)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001608:	4b30      	ldr	r3, [pc, #192]	; (80016cc <HAL_GPIO_Init+0x334>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800162c:	4a27      	ldr	r2, [pc, #156]	; (80016cc <HAL_GPIO_Init+0x334>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001632:	4b26      	ldr	r3, [pc, #152]	; (80016cc <HAL_GPIO_Init+0x334>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001656:	4a1d      	ldr	r2, [pc, #116]	; (80016cc <HAL_GPIO_Init+0x334>)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800165c:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <HAL_GPIO_Init+0x334>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001680:	4a12      	ldr	r2, [pc, #72]	; (80016cc <HAL_GPIO_Init+0x334>)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3301      	adds	r3, #1
 800168a:	61fb      	str	r3, [r7, #28]
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	2b0f      	cmp	r3, #15
 8001690:	f67f ae90 	bls.w	80013b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001694:	bf00      	nop
 8001696:	bf00      	nop
 8001698:	3724      	adds	r7, #36	; 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40013800 	.word	0x40013800
 80016ac:	40020000 	.word	0x40020000
 80016b0:	40020400 	.word	0x40020400
 80016b4:	40020800 	.word	0x40020800
 80016b8:	40020c00 	.word	0x40020c00
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40021400 	.word	0x40021400
 80016c4:	40021800 	.word	0x40021800
 80016c8:	40021c00 	.word	0x40021c00
 80016cc:	40013c00 	.word	0x40013c00

080016d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	807b      	strh	r3, [r7, #2]
 80016dc:	4613      	mov	r3, r2
 80016de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016e0:	787b      	ldrb	r3, [r7, #1]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016e6:	887a      	ldrh	r2, [r7, #2]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016ec:	e003      	b.n	80016f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ee:	887b      	ldrh	r3, [r7, #2]
 80016f0:	041a      	lsls	r2, r3, #16
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	619a      	str	r2, [r3, #24]
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800170e:	4b08      	ldr	r3, [pc, #32]	; (8001730 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001710:	695a      	ldr	r2, [r3, #20]
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	4013      	ands	r3, r2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d006      	beq.n	8001728 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800171a:	4a05      	ldr	r2, [pc, #20]	; (8001730 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001720:	88fb      	ldrh	r3, [r7, #6]
 8001722:	4618      	mov	r0, r3
 8001724:	f000 f806 	bl	8001734 <HAL_GPIO_EXTI_Callback>
  }
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40013c00 	.word	0x40013c00

08001734 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e267      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d075      	beq.n	8001856 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800176a:	4b88      	ldr	r3, [pc, #544]	; (800198c <HAL_RCC_OscConfig+0x240>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	2b04      	cmp	r3, #4
 8001774:	d00c      	beq.n	8001790 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001776:	4b85      	ldr	r3, [pc, #532]	; (800198c <HAL_RCC_OscConfig+0x240>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800177e:	2b08      	cmp	r3, #8
 8001780:	d112      	bne.n	80017a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001782:	4b82      	ldr	r3, [pc, #520]	; (800198c <HAL_RCC_OscConfig+0x240>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800178a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800178e:	d10b      	bne.n	80017a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001790:	4b7e      	ldr	r3, [pc, #504]	; (800198c <HAL_RCC_OscConfig+0x240>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d05b      	beq.n	8001854 <HAL_RCC_OscConfig+0x108>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d157      	bne.n	8001854 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e242      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b0:	d106      	bne.n	80017c0 <HAL_RCC_OscConfig+0x74>
 80017b2:	4b76      	ldr	r3, [pc, #472]	; (800198c <HAL_RCC_OscConfig+0x240>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a75      	ldr	r2, [pc, #468]	; (800198c <HAL_RCC_OscConfig+0x240>)
 80017b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e01d      	b.n	80017fc <HAL_RCC_OscConfig+0xb0>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017c8:	d10c      	bne.n	80017e4 <HAL_RCC_OscConfig+0x98>
 80017ca:	4b70      	ldr	r3, [pc, #448]	; (800198c <HAL_RCC_OscConfig+0x240>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a6f      	ldr	r2, [pc, #444]	; (800198c <HAL_RCC_OscConfig+0x240>)
 80017d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	4b6d      	ldr	r3, [pc, #436]	; (800198c <HAL_RCC_OscConfig+0x240>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a6c      	ldr	r2, [pc, #432]	; (800198c <HAL_RCC_OscConfig+0x240>)
 80017dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	e00b      	b.n	80017fc <HAL_RCC_OscConfig+0xb0>
 80017e4:	4b69      	ldr	r3, [pc, #420]	; (800198c <HAL_RCC_OscConfig+0x240>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a68      	ldr	r2, [pc, #416]	; (800198c <HAL_RCC_OscConfig+0x240>)
 80017ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	4b66      	ldr	r3, [pc, #408]	; (800198c <HAL_RCC_OscConfig+0x240>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a65      	ldr	r2, [pc, #404]	; (800198c <HAL_RCC_OscConfig+0x240>)
 80017f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d013      	beq.n	800182c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001804:	f7ff fcda 	bl	80011bc <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800180c:	f7ff fcd6 	bl	80011bc <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b64      	cmp	r3, #100	; 0x64
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e207      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181e:	4b5b      	ldr	r3, [pc, #364]	; (800198c <HAL_RCC_OscConfig+0x240>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0f0      	beq.n	800180c <HAL_RCC_OscConfig+0xc0>
 800182a:	e014      	b.n	8001856 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182c:	f7ff fcc6 	bl	80011bc <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001834:	f7ff fcc2 	bl	80011bc <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b64      	cmp	r3, #100	; 0x64
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e1f3      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001846:	4b51      	ldr	r3, [pc, #324]	; (800198c <HAL_RCC_OscConfig+0x240>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0xe8>
 8001852:	e000      	b.n	8001856 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d063      	beq.n	800192a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001862:	4b4a      	ldr	r3, [pc, #296]	; (800198c <HAL_RCC_OscConfig+0x240>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 030c 	and.w	r3, r3, #12
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00b      	beq.n	8001886 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800186e:	4b47      	ldr	r3, [pc, #284]	; (800198c <HAL_RCC_OscConfig+0x240>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001876:	2b08      	cmp	r3, #8
 8001878:	d11c      	bne.n	80018b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800187a:	4b44      	ldr	r3, [pc, #272]	; (800198c <HAL_RCC_OscConfig+0x240>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d116      	bne.n	80018b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001886:	4b41      	ldr	r3, [pc, #260]	; (800198c <HAL_RCC_OscConfig+0x240>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d005      	beq.n	800189e <HAL_RCC_OscConfig+0x152>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d001      	beq.n	800189e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e1c7      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189e:	4b3b      	ldr	r3, [pc, #236]	; (800198c <HAL_RCC_OscConfig+0x240>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	4937      	ldr	r1, [pc, #220]	; (800198c <HAL_RCC_OscConfig+0x240>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b2:	e03a      	b.n	800192a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d020      	beq.n	80018fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018bc:	4b34      	ldr	r3, [pc, #208]	; (8001990 <HAL_RCC_OscConfig+0x244>)
 80018be:	2201      	movs	r2, #1
 80018c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c2:	f7ff fc7b 	bl	80011bc <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ca:	f7ff fc77 	bl	80011bc <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e1a8      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018dc:	4b2b      	ldr	r3, [pc, #172]	; (800198c <HAL_RCC_OscConfig+0x240>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e8:	4b28      	ldr	r3, [pc, #160]	; (800198c <HAL_RCC_OscConfig+0x240>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	4925      	ldr	r1, [pc, #148]	; (800198c <HAL_RCC_OscConfig+0x240>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	600b      	str	r3, [r1, #0]
 80018fc:	e015      	b.n	800192a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018fe:	4b24      	ldr	r3, [pc, #144]	; (8001990 <HAL_RCC_OscConfig+0x244>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7ff fc5a 	bl	80011bc <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800190c:	f7ff fc56 	bl	80011bc <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e187      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800191e:	4b1b      	ldr	r3, [pc, #108]	; (800198c <HAL_RCC_OscConfig+0x240>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	2b00      	cmp	r3, #0
 8001934:	d036      	beq.n	80019a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d016      	beq.n	800196c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <HAL_RCC_OscConfig+0x248>)
 8001940:	2201      	movs	r2, #1
 8001942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001944:	f7ff fc3a 	bl	80011bc <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800194c:	f7ff fc36 	bl	80011bc <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e167      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800195e:	4b0b      	ldr	r3, [pc, #44]	; (800198c <HAL_RCC_OscConfig+0x240>)
 8001960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0x200>
 800196a:	e01b      	b.n	80019a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800196c:	4b09      	ldr	r3, [pc, #36]	; (8001994 <HAL_RCC_OscConfig+0x248>)
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001972:	f7ff fc23 	bl	80011bc <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001978:	e00e      	b.n	8001998 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800197a:	f7ff fc1f 	bl	80011bc <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d907      	bls.n	8001998 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e150      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
 800198c:	40023800 	.word	0x40023800
 8001990:	42470000 	.word	0x42470000
 8001994:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001998:	4b88      	ldr	r3, [pc, #544]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 800199a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1ea      	bne.n	800197a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 8097 	beq.w	8001ae0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019b2:	2300      	movs	r3, #0
 80019b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019b6:	4b81      	ldr	r3, [pc, #516]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10f      	bne.n	80019e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	4b7d      	ldr	r3, [pc, #500]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	4a7c      	ldr	r2, [pc, #496]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 80019cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d0:	6413      	str	r3, [r2, #64]	; 0x40
 80019d2:	4b7a      	ldr	r3, [pc, #488]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019de:	2301      	movs	r3, #1
 80019e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e2:	4b77      	ldr	r3, [pc, #476]	; (8001bc0 <HAL_RCC_OscConfig+0x474>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d118      	bne.n	8001a20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ee:	4b74      	ldr	r3, [pc, #464]	; (8001bc0 <HAL_RCC_OscConfig+0x474>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a73      	ldr	r2, [pc, #460]	; (8001bc0 <HAL_RCC_OscConfig+0x474>)
 80019f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019fa:	f7ff fbdf 	bl	80011bc <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a02:	f7ff fbdb 	bl	80011bc <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e10c      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a14:	4b6a      	ldr	r3, [pc, #424]	; (8001bc0 <HAL_RCC_OscConfig+0x474>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d106      	bne.n	8001a36 <HAL_RCC_OscConfig+0x2ea>
 8001a28:	4b64      	ldr	r3, [pc, #400]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2c:	4a63      	ldr	r2, [pc, #396]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	6713      	str	r3, [r2, #112]	; 0x70
 8001a34:	e01c      	b.n	8001a70 <HAL_RCC_OscConfig+0x324>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2b05      	cmp	r3, #5
 8001a3c:	d10c      	bne.n	8001a58 <HAL_RCC_OscConfig+0x30c>
 8001a3e:	4b5f      	ldr	r3, [pc, #380]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a42:	4a5e      	ldr	r2, [pc, #376]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	6713      	str	r3, [r2, #112]	; 0x70
 8001a4a:	4b5c      	ldr	r3, [pc, #368]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4e:	4a5b      	ldr	r2, [pc, #364]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6713      	str	r3, [r2, #112]	; 0x70
 8001a56:	e00b      	b.n	8001a70 <HAL_RCC_OscConfig+0x324>
 8001a58:	4b58      	ldr	r3, [pc, #352]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5c:	4a57      	ldr	r2, [pc, #348]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a5e:	f023 0301 	bic.w	r3, r3, #1
 8001a62:	6713      	str	r3, [r2, #112]	; 0x70
 8001a64:	4b55      	ldr	r3, [pc, #340]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a68:	4a54      	ldr	r2, [pc, #336]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a6a:	f023 0304 	bic.w	r3, r3, #4
 8001a6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d015      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a78:	f7ff fba0 	bl	80011bc <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7e:	e00a      	b.n	8001a96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a80:	f7ff fb9c 	bl	80011bc <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e0cb      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a96:	4b49      	ldr	r3, [pc, #292]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0ee      	beq.n	8001a80 <HAL_RCC_OscConfig+0x334>
 8001aa2:	e014      	b.n	8001ace <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa4:	f7ff fb8a 	bl	80011bc <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aaa:	e00a      	b.n	8001ac2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aac:	f7ff fb86 	bl	80011bc <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e0b5      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac2:	4b3e      	ldr	r3, [pc, #248]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1ee      	bne.n	8001aac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ace:	7dfb      	ldrb	r3, [r7, #23]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d105      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad4:	4b39      	ldr	r3, [pc, #228]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	4a38      	ldr	r2, [pc, #224]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ade:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80a1 	beq.w	8001c2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aea:	4b34      	ldr	r3, [pc, #208]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d05c      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d141      	bne.n	8001b82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afe:	4b31      	ldr	r3, [pc, #196]	; (8001bc4 <HAL_RCC_OscConfig+0x478>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7ff fb5a 	bl	80011bc <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b0c:	f7ff fb56 	bl	80011bc <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e087      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1e:	4b27      	ldr	r3, [pc, #156]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69da      	ldr	r2, [r3, #28]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	019b      	lsls	r3, r3, #6
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b40:	085b      	lsrs	r3, r3, #1
 8001b42:	3b01      	subs	r3, #1
 8001b44:	041b      	lsls	r3, r3, #16
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4c:	061b      	lsls	r3, r3, #24
 8001b4e:	491b      	ldr	r1, [pc, #108]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b54:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <HAL_RCC_OscConfig+0x478>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5a:	f7ff fb2f 	bl	80011bc <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b62:	f7ff fb2b 	bl	80011bc <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e05c      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0f0      	beq.n	8001b62 <HAL_RCC_OscConfig+0x416>
 8001b80:	e054      	b.n	8001c2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <HAL_RCC_OscConfig+0x478>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7ff fb18 	bl	80011bc <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b90:	f7ff fb14 	bl	80011bc <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e045      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0x444>
 8001bae:	e03d      	b.n	8001c2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d107      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e038      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40007000 	.word	0x40007000
 8001bc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <HAL_RCC_OscConfig+0x4ec>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d028      	beq.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d121      	bne.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d11a      	bne.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d111      	bne.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0e:	085b      	lsrs	r3, r3, #1
 8001c10:	3b01      	subs	r3, #1
 8001c12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d107      	bne.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d001      	beq.n	8001c2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40023800 	.word	0x40023800

08001c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0cc      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c50:	4b68      	ldr	r3, [pc, #416]	; (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d90c      	bls.n	8001c78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5e:	4b65      	ldr	r3, [pc, #404]	; (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c66:	4b63      	ldr	r3, [pc, #396]	; (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d001      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e0b8      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d020      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d005      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c90:	4b59      	ldr	r3, [pc, #356]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	4a58      	ldr	r2, [pc, #352]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ca8:	4b53      	ldr	r3, [pc, #332]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	4a52      	ldr	r2, [pc, #328]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb4:	4b50      	ldr	r3, [pc, #320]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	494d      	ldr	r1, [pc, #308]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d044      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d107      	bne.n	8001cea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cda:	4b47      	ldr	r3, [pc, #284]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d119      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e07f      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d003      	beq.n	8001cfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	d107      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cfa:	4b3f      	ldr	r3, [pc, #252]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d109      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e06f      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0a:	4b3b      	ldr	r3, [pc, #236]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e067      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d1a:	4b37      	ldr	r3, [pc, #220]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f023 0203 	bic.w	r2, r3, #3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	4934      	ldr	r1, [pc, #208]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d2c:	f7ff fa46 	bl	80011bc <HAL_GetTick>
 8001d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d32:	e00a      	b.n	8001d4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d34:	f7ff fa42 	bl	80011bc <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e04f      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4a:	4b2b      	ldr	r3, [pc, #172]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 020c 	and.w	r2, r3, #12
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d1eb      	bne.n	8001d34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d5c:	4b25      	ldr	r3, [pc, #148]	; (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d20c      	bcs.n	8001d84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6a:	4b22      	ldr	r3, [pc, #136]	; (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d72:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d001      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e032      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d008      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d90:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	4916      	ldr	r1, [pc, #88]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d009      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dae:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	490e      	ldr	r1, [pc, #56]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dc2:	f000 f821 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	490a      	ldr	r1, [pc, #40]	; (8001dfc <HAL_RCC_ClockConfig+0x1c0>)
 8001dd4:	5ccb      	ldrb	r3, [r1, r3]
 8001dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dda:	4a09      	ldr	r2, [pc, #36]	; (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <HAL_RCC_ClockConfig+0x1c8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff f826 	bl	8000e34 <HAL_InitTick>

  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40023c00 	.word	0x40023c00
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	080099a4 	.word	0x080099a4
 8001e00:	20000000 	.word	0x20000000
 8001e04:	20000004 	.word	0x20000004

08001e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e0c:	b094      	sub	sp, #80	; 0x50
 8001e0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	647b      	str	r3, [r7, #68]	; 0x44
 8001e14:	2300      	movs	r3, #0
 8001e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e18:	2300      	movs	r3, #0
 8001e1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e20:	4b79      	ldr	r3, [pc, #484]	; (8002008 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 030c 	and.w	r3, r3, #12
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d00d      	beq.n	8001e48 <HAL_RCC_GetSysClockFreq+0x40>
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	f200 80e1 	bhi.w	8001ff4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d002      	beq.n	8001e3c <HAL_RCC_GetSysClockFreq+0x34>
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d003      	beq.n	8001e42 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e3a:	e0db      	b.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e3c:	4b73      	ldr	r3, [pc, #460]	; (800200c <HAL_RCC_GetSysClockFreq+0x204>)
 8001e3e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001e40:	e0db      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e42:	4b73      	ldr	r3, [pc, #460]	; (8002010 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e46:	e0d8      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e48:	4b6f      	ldr	r3, [pc, #444]	; (8002008 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e50:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e52:	4b6d      	ldr	r3, [pc, #436]	; (8002008 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d063      	beq.n	8001f26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e5e:	4b6a      	ldr	r3, [pc, #424]	; (8002008 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	099b      	lsrs	r3, r3, #6
 8001e64:	2200      	movs	r2, #0
 8001e66:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e70:	633b      	str	r3, [r7, #48]	; 0x30
 8001e72:	2300      	movs	r3, #0
 8001e74:	637b      	str	r3, [r7, #52]	; 0x34
 8001e76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e7a:	4622      	mov	r2, r4
 8001e7c:	462b      	mov	r3, r5
 8001e7e:	f04f 0000 	mov.w	r0, #0
 8001e82:	f04f 0100 	mov.w	r1, #0
 8001e86:	0159      	lsls	r1, r3, #5
 8001e88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e8c:	0150      	lsls	r0, r2, #5
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4621      	mov	r1, r4
 8001e94:	1a51      	subs	r1, r2, r1
 8001e96:	6139      	str	r1, [r7, #16]
 8001e98:	4629      	mov	r1, r5
 8001e9a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	f04f 0300 	mov.w	r3, #0
 8001ea8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001eac:	4659      	mov	r1, fp
 8001eae:	018b      	lsls	r3, r1, #6
 8001eb0:	4651      	mov	r1, sl
 8001eb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001eb6:	4651      	mov	r1, sl
 8001eb8:	018a      	lsls	r2, r1, #6
 8001eba:	4651      	mov	r1, sl
 8001ebc:	ebb2 0801 	subs.w	r8, r2, r1
 8001ec0:	4659      	mov	r1, fp
 8001ec2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ed2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ed6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001eda:	4690      	mov	r8, r2
 8001edc:	4699      	mov	r9, r3
 8001ede:	4623      	mov	r3, r4
 8001ee0:	eb18 0303 	adds.w	r3, r8, r3
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	462b      	mov	r3, r5
 8001ee8:	eb49 0303 	adc.w	r3, r9, r3
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	f04f 0200 	mov.w	r2, #0
 8001ef2:	f04f 0300 	mov.w	r3, #0
 8001ef6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001efa:	4629      	mov	r1, r5
 8001efc:	024b      	lsls	r3, r1, #9
 8001efe:	4621      	mov	r1, r4
 8001f00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f04:	4621      	mov	r1, r4
 8001f06:	024a      	lsls	r2, r1, #9
 8001f08:	4610      	mov	r0, r2
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f0e:	2200      	movs	r2, #0
 8001f10:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f18:	f7fe fa02 	bl	8000320 <__aeabi_uldivmod>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4613      	mov	r3, r2
 8001f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f24:	e058      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f26:	4b38      	ldr	r3, [pc, #224]	; (8002008 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	099b      	lsrs	r3, r3, #6
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	4611      	mov	r1, r2
 8001f32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f36:	623b      	str	r3, [r7, #32]
 8001f38:	2300      	movs	r3, #0
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f40:	4642      	mov	r2, r8
 8001f42:	464b      	mov	r3, r9
 8001f44:	f04f 0000 	mov.w	r0, #0
 8001f48:	f04f 0100 	mov.w	r1, #0
 8001f4c:	0159      	lsls	r1, r3, #5
 8001f4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f52:	0150      	lsls	r0, r2, #5
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4641      	mov	r1, r8
 8001f5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f5e:	4649      	mov	r1, r9
 8001f60:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f78:	ebb2 040a 	subs.w	r4, r2, sl
 8001f7c:	eb63 050b 	sbc.w	r5, r3, fp
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	00eb      	lsls	r3, r5, #3
 8001f8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f8e:	00e2      	lsls	r2, r4, #3
 8001f90:	4614      	mov	r4, r2
 8001f92:	461d      	mov	r5, r3
 8001f94:	4643      	mov	r3, r8
 8001f96:	18e3      	adds	r3, r4, r3
 8001f98:	603b      	str	r3, [r7, #0]
 8001f9a:	464b      	mov	r3, r9
 8001f9c:	eb45 0303 	adc.w	r3, r5, r3
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	f04f 0200 	mov.w	r2, #0
 8001fa6:	f04f 0300 	mov.w	r3, #0
 8001faa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fae:	4629      	mov	r1, r5
 8001fb0:	028b      	lsls	r3, r1, #10
 8001fb2:	4621      	mov	r1, r4
 8001fb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fb8:	4621      	mov	r1, r4
 8001fba:	028a      	lsls	r2, r1, #10
 8001fbc:	4610      	mov	r0, r2
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	61bb      	str	r3, [r7, #24]
 8001fc6:	61fa      	str	r2, [r7, #28]
 8001fc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fcc:	f7fe f9a8 	bl	8000320 <__aeabi_uldivmod>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	0c1b      	lsrs	r3, r3, #16
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001fe8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ff2:	e002      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <HAL_RCC_GetSysClockFreq+0x204>)
 8001ff6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ff8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3750      	adds	r7, #80	; 0x50
 8002000:	46bd      	mov	sp, r7
 8002002:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800
 800200c:	00f42400 	.word	0x00f42400
 8002010:	007a1200 	.word	0x007a1200

08002014 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002018:	4b03      	ldr	r3, [pc, #12]	; (8002028 <HAL_RCC_GetHCLKFreq+0x14>)
 800201a:	681b      	ldr	r3, [r3, #0]
}
 800201c:	4618      	mov	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	20000000 	.word	0x20000000

0800202c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002030:	f7ff fff0 	bl	8002014 <HAL_RCC_GetHCLKFreq>
 8002034:	4602      	mov	r2, r0
 8002036:	4b05      	ldr	r3, [pc, #20]	; (800204c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	0a9b      	lsrs	r3, r3, #10
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	4903      	ldr	r1, [pc, #12]	; (8002050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002042:	5ccb      	ldrb	r3, [r1, r3]
 8002044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002048:	4618      	mov	r0, r3
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40023800 	.word	0x40023800
 8002050:	080099b4 	.word	0x080099b4

08002054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002058:	f7ff ffdc 	bl	8002014 <HAL_RCC_GetHCLKFreq>
 800205c:	4602      	mov	r2, r0
 800205e:	4b05      	ldr	r3, [pc, #20]	; (8002074 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	0b5b      	lsrs	r3, r3, #13
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	4903      	ldr	r1, [pc, #12]	; (8002078 <HAL_RCC_GetPCLK2Freq+0x24>)
 800206a:	5ccb      	ldrb	r3, [r1, r3]
 800206c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002070:	4618      	mov	r0, r3
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40023800 	.word	0x40023800
 8002078:	080099b4 	.word	0x080099b4

0800207c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	220f      	movs	r2, #15
 800208a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800208c:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <HAL_RCC_GetClockConfig+0x5c>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 0203 	and.w	r2, r3, #3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002098:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <HAL_RCC_GetClockConfig+0x5c>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <HAL_RCC_GetClockConfig+0x5c>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80020b0:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <HAL_RCC_GetClockConfig+0x5c>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	08db      	lsrs	r3, r3, #3
 80020b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80020be:	4b07      	ldr	r3, [pc, #28]	; (80020dc <HAL_RCC_GetClockConfig+0x60>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0207 	and.w	r2, r3, #7
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	601a      	str	r2, [r3, #0]
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40023c00 	.word	0x40023c00

080020e0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d105      	bne.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002104:	2b00      	cmp	r3, #0
 8002106:	d035      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002108:	4b62      	ldr	r3, [pc, #392]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800210e:	f7ff f855 	bl	80011bc <HAL_GetTick>
 8002112:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002114:	e008      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002116:	f7ff f851 	bl	80011bc <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e0b0      	b.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002128:	4b5b      	ldr	r3, [pc, #364]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f0      	bne.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	019a      	lsls	r2, r3, #6
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	071b      	lsls	r3, r3, #28
 8002140:	4955      	ldr	r1, [pc, #340]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002148:	4b52      	ldr	r3, [pc, #328]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800214a:	2201      	movs	r2, #1
 800214c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800214e:	f7ff f835 	bl	80011bc <HAL_GetTick>
 8002152:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002154:	e008      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002156:	f7ff f831 	bl	80011bc <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e090      	b.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002168:	4b4b      	ldr	r3, [pc, #300]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0f0      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 8083 	beq.w	8002288 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	4b44      	ldr	r3, [pc, #272]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	4a43      	ldr	r2, [pc, #268]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800218c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002190:	6413      	str	r3, [r2, #64]	; 0x40
 8002192:	4b41      	ldr	r3, [pc, #260]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800219e:	4b3f      	ldr	r3, [pc, #252]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a3e      	ldr	r2, [pc, #248]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021aa:	f7ff f807 	bl	80011bc <HAL_GetTick>
 80021ae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80021b0:	e008      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80021b2:	f7ff f803 	bl	80011bc <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e062      	b.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80021c4:	4b35      	ldr	r3, [pc, #212]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021d0:	4b31      	ldr	r3, [pc, #196]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021d8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d02f      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d028      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021ee:	4b2a      	ldr	r3, [pc, #168]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021f8:	4b29      	ldr	r3, [pc, #164]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021fe:	4b28      	ldr	r3, [pc, #160]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002204:	4a24      	ldr	r2, [pc, #144]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800220a:	4b23      	ldr	r3, [pc, #140]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800220c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b01      	cmp	r3, #1
 8002214:	d114      	bne.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002216:	f7fe ffd1 	bl	80011bc <HAL_GetTick>
 800221a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221c:	e00a      	b.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800221e:	f7fe ffcd 	bl	80011bc <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	f241 3288 	movw	r2, #5000	; 0x1388
 800222c:	4293      	cmp	r3, r2
 800222e:	d901      	bls.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e02a      	b.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002234:	4b18      	ldr	r3, [pc, #96]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0ee      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002248:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800224c:	d10d      	bne.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800224e:	4b12      	ldr	r3, [pc, #72]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800225e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002262:	490d      	ldr	r1, [pc, #52]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002264:	4313      	orrs	r3, r2
 8002266:	608b      	str	r3, [r1, #8]
 8002268:	e005      	b.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800226a:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002270:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002274:	6093      	str	r3, [r2, #8]
 8002276:	4b08      	ldr	r3, [pc, #32]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002278:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002282:	4905      	ldr	r1, [pc, #20]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002284:	4313      	orrs	r3, r2
 8002286:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	42470068 	.word	0x42470068
 8002298:	40023800 	.word	0x40023800
 800229c:	40007000 	.word	0x40007000
 80022a0:	42470e40 	.word	0x42470e40

080022a4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e066      	b.n	8002388 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	7f5b      	ldrb	r3, [r3, #29]
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d105      	bne.n	80022d0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7fe fd40 	bl	8000d50 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2202      	movs	r2, #2
 80022d4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	22ca      	movs	r2, #202	; 0xca
 80022dc:	625a      	str	r2, [r3, #36]	; 0x24
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2253      	movs	r2, #83	; 0x53
 80022e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f87a 	bl	80023e0 <RTC_EnterInitMode>
 80022ec:	4603      	mov	r3, r0
 80022ee:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d12c      	bne.n	8002350 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002308:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6899      	ldr	r1, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	431a      	orrs	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	68d2      	ldr	r2, [r2, #12]
 8002330:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6919      	ldr	r1, [r3, #16]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	041a      	lsls	r2, r3, #16
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f881 	bl	800244e <RTC_ExitInitMode>
 800234c:	4603      	mov	r3, r0
 800234e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002350:	7bfb      	ldrb	r3, [r7, #15]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d113      	bne.n	800237e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002364:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699a      	ldr	r2, [r3, #24]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	22ff      	movs	r2, #255	; 0xff
 8002384:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002386:	7bfb      	ldrb	r3, [r7, #15]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80023aa:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023ac:	f7fe ff06 	bl	80011bc <HAL_GetTick>
 80023b0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80023b2:	e009      	b.n	80023c8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80023b4:	f7fe ff02 	bl	80011bc <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023c2:	d901      	bls.n	80023c8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e007      	b.n	80023d8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f003 0320 	and.w	r3, r3, #32
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0ee      	beq.n	80023b4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d122      	bne.n	8002444 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800240c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800240e:	f7fe fed5 	bl	80011bc <HAL_GetTick>
 8002412:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002414:	e00c      	b.n	8002430 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002416:	f7fe fed1 	bl	80011bc <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002424:	d904      	bls.n	8002430 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2204      	movs	r2, #4
 800242a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243a:	2b00      	cmp	r3, #0
 800243c:	d102      	bne.n	8002444 <RTC_EnterInitMode+0x64>
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d1e8      	bne.n	8002416 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002444:	7bfb      	ldrb	r3, [r7, #15]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b084      	sub	sp, #16
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002456:	2300      	movs	r3, #0
 8002458:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68da      	ldr	r2, [r3, #12]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002468:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 0320 	and.w	r3, r3, #32
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10a      	bne.n	800248e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7ff ff89 	bl	8002390 <HAL_RTC_WaitForSynchro>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d004      	beq.n	800248e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2204      	movs	r2, #4
 8002488:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800248e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e041      	b.n	800252e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d106      	bne.n	80024c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f839 	bl	8002536 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3304      	adds	r3, #4
 80024d4:	4619      	mov	r1, r3
 80024d6:	4610      	mov	r0, r2
 80024d8:	f000 f9d8 	bl	800288c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
	...

0800254c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b01      	cmp	r3, #1
 800255e:	d001      	beq.n	8002564 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e04e      	b.n	8002602 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0201 	orr.w	r2, r2, #1
 800257a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a23      	ldr	r2, [pc, #140]	; (8002610 <HAL_TIM_Base_Start_IT+0xc4>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d022      	beq.n	80025cc <HAL_TIM_Base_Start_IT+0x80>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800258e:	d01d      	beq.n	80025cc <HAL_TIM_Base_Start_IT+0x80>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a1f      	ldr	r2, [pc, #124]	; (8002614 <HAL_TIM_Base_Start_IT+0xc8>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d018      	beq.n	80025cc <HAL_TIM_Base_Start_IT+0x80>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a1e      	ldr	r2, [pc, #120]	; (8002618 <HAL_TIM_Base_Start_IT+0xcc>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d013      	beq.n	80025cc <HAL_TIM_Base_Start_IT+0x80>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a1c      	ldr	r2, [pc, #112]	; (800261c <HAL_TIM_Base_Start_IT+0xd0>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d00e      	beq.n	80025cc <HAL_TIM_Base_Start_IT+0x80>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a1b      	ldr	r2, [pc, #108]	; (8002620 <HAL_TIM_Base_Start_IT+0xd4>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d009      	beq.n	80025cc <HAL_TIM_Base_Start_IT+0x80>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a19      	ldr	r2, [pc, #100]	; (8002624 <HAL_TIM_Base_Start_IT+0xd8>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d004      	beq.n	80025cc <HAL_TIM_Base_Start_IT+0x80>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a18      	ldr	r2, [pc, #96]	; (8002628 <HAL_TIM_Base_Start_IT+0xdc>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d111      	bne.n	80025f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2b06      	cmp	r3, #6
 80025dc:	d010      	beq.n	8002600 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f042 0201 	orr.w	r2, r2, #1
 80025ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ee:	e007      	b.n	8002600 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0201 	orr.w	r2, r2, #1
 80025fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40010000 	.word	0x40010000
 8002614:	40000400 	.word	0x40000400
 8002618:	40000800 	.word	0x40000800
 800261c:	40000c00 	.word	0x40000c00
 8002620:	40010400 	.word	0x40010400
 8002624:	40014000 	.word	0x40014000
 8002628:	40001800 	.word	0x40001800

0800262c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b02      	cmp	r3, #2
 8002640:	d122      	bne.n	8002688 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b02      	cmp	r3, #2
 800264e:	d11b      	bne.n	8002688 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f06f 0202 	mvn.w	r2, #2
 8002658:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f8ee 	bl	8002850 <HAL_TIM_IC_CaptureCallback>
 8002674:	e005      	b.n	8002682 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f8e0 	bl	800283c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f8f1 	bl	8002864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	2b04      	cmp	r3, #4
 8002694:	d122      	bne.n	80026dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d11b      	bne.n	80026dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f06f 0204 	mvn.w	r2, #4
 80026ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2202      	movs	r2, #2
 80026b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f8c4 	bl	8002850 <HAL_TIM_IC_CaptureCallback>
 80026c8:	e005      	b.n	80026d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f8b6 	bl	800283c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f8c7 	bl	8002864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d122      	bne.n	8002730 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d11b      	bne.n	8002730 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f06f 0208 	mvn.w	r2, #8
 8002700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2204      	movs	r2, #4
 8002706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f89a 	bl	8002850 <HAL_TIM_IC_CaptureCallback>
 800271c:	e005      	b.n	800272a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f88c 	bl	800283c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f89d 	bl	8002864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	f003 0310 	and.w	r3, r3, #16
 800273a:	2b10      	cmp	r3, #16
 800273c:	d122      	bne.n	8002784 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f003 0310 	and.w	r3, r3, #16
 8002748:	2b10      	cmp	r3, #16
 800274a:	d11b      	bne.n	8002784 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f06f 0210 	mvn.w	r2, #16
 8002754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2208      	movs	r2, #8
 800275a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f870 	bl	8002850 <HAL_TIM_IC_CaptureCallback>
 8002770:	e005      	b.n	800277e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f862 	bl	800283c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f873 	bl	8002864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b01      	cmp	r3, #1
 8002790:	d10e      	bne.n	80027b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b01      	cmp	r3, #1
 800279e:	d107      	bne.n	80027b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f06f 0201 	mvn.w	r2, #1
 80027a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7fe fa90 	bl	8000cd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ba:	2b80      	cmp	r3, #128	; 0x80
 80027bc:	d10e      	bne.n	80027dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c8:	2b80      	cmp	r3, #128	; 0x80
 80027ca:	d107      	bne.n	80027dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f902 	bl	80029e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e6:	2b40      	cmp	r3, #64	; 0x40
 80027e8:	d10e      	bne.n	8002808 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f4:	2b40      	cmp	r3, #64	; 0x40
 80027f6:	d107      	bne.n	8002808 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f838 	bl	8002878 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	f003 0320 	and.w	r3, r3, #32
 8002812:	2b20      	cmp	r3, #32
 8002814:	d10e      	bne.n	8002834 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 0320 	and.w	r3, r3, #32
 8002820:	2b20      	cmp	r3, #32
 8002822:	d107      	bne.n	8002834 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f06f 0220 	mvn.w	r2, #32
 800282c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f8cc 	bl	80029cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002834:	bf00      	nop
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a40      	ldr	r2, [pc, #256]	; (80029a0 <TIM_Base_SetConfig+0x114>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d013      	beq.n	80028cc <TIM_Base_SetConfig+0x40>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028aa:	d00f      	beq.n	80028cc <TIM_Base_SetConfig+0x40>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a3d      	ldr	r2, [pc, #244]	; (80029a4 <TIM_Base_SetConfig+0x118>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d00b      	beq.n	80028cc <TIM_Base_SetConfig+0x40>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a3c      	ldr	r2, [pc, #240]	; (80029a8 <TIM_Base_SetConfig+0x11c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d007      	beq.n	80028cc <TIM_Base_SetConfig+0x40>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a3b      	ldr	r2, [pc, #236]	; (80029ac <TIM_Base_SetConfig+0x120>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d003      	beq.n	80028cc <TIM_Base_SetConfig+0x40>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a3a      	ldr	r2, [pc, #232]	; (80029b0 <TIM_Base_SetConfig+0x124>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d108      	bne.n	80028de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a2f      	ldr	r2, [pc, #188]	; (80029a0 <TIM_Base_SetConfig+0x114>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d02b      	beq.n	800293e <TIM_Base_SetConfig+0xb2>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ec:	d027      	beq.n	800293e <TIM_Base_SetConfig+0xb2>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a2c      	ldr	r2, [pc, #176]	; (80029a4 <TIM_Base_SetConfig+0x118>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d023      	beq.n	800293e <TIM_Base_SetConfig+0xb2>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a2b      	ldr	r2, [pc, #172]	; (80029a8 <TIM_Base_SetConfig+0x11c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d01f      	beq.n	800293e <TIM_Base_SetConfig+0xb2>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a2a      	ldr	r2, [pc, #168]	; (80029ac <TIM_Base_SetConfig+0x120>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d01b      	beq.n	800293e <TIM_Base_SetConfig+0xb2>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a29      	ldr	r2, [pc, #164]	; (80029b0 <TIM_Base_SetConfig+0x124>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d017      	beq.n	800293e <TIM_Base_SetConfig+0xb2>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a28      	ldr	r2, [pc, #160]	; (80029b4 <TIM_Base_SetConfig+0x128>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d013      	beq.n	800293e <TIM_Base_SetConfig+0xb2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a27      	ldr	r2, [pc, #156]	; (80029b8 <TIM_Base_SetConfig+0x12c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d00f      	beq.n	800293e <TIM_Base_SetConfig+0xb2>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a26      	ldr	r2, [pc, #152]	; (80029bc <TIM_Base_SetConfig+0x130>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d00b      	beq.n	800293e <TIM_Base_SetConfig+0xb2>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a25      	ldr	r2, [pc, #148]	; (80029c0 <TIM_Base_SetConfig+0x134>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d007      	beq.n	800293e <TIM_Base_SetConfig+0xb2>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a24      	ldr	r2, [pc, #144]	; (80029c4 <TIM_Base_SetConfig+0x138>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d003      	beq.n	800293e <TIM_Base_SetConfig+0xb2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a23      	ldr	r2, [pc, #140]	; (80029c8 <TIM_Base_SetConfig+0x13c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d108      	bne.n	8002950 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	4313      	orrs	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	4313      	orrs	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a0a      	ldr	r2, [pc, #40]	; (80029a0 <TIM_Base_SetConfig+0x114>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d003      	beq.n	8002984 <TIM_Base_SetConfig+0xf8>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a0c      	ldr	r2, [pc, #48]	; (80029b0 <TIM_Base_SetConfig+0x124>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d103      	bne.n	800298c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	615a      	str	r2, [r3, #20]
}
 8002992:	bf00      	nop
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40010000 	.word	0x40010000
 80029a4:	40000400 	.word	0x40000400
 80029a8:	40000800 	.word	0x40000800
 80029ac:	40000c00 	.word	0x40000c00
 80029b0:	40010400 	.word	0x40010400
 80029b4:	40014000 	.word	0x40014000
 80029b8:	40014400 	.word	0x40014400
 80029bc:	40014800 	.word	0x40014800
 80029c0:	40001800 	.word	0x40001800
 80029c4:	40001c00 	.word	0x40001c00
 80029c8:	40002000 	.word	0x40002000

080029cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e03f      	b.n	8002a86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d106      	bne.n	8002a20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7fe f9c2 	bl	8000da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2224      	movs	r2, #36	; 0x24
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f929 	bl	8002c90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	691a      	ldr	r2, [r3, #16]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695a      	ldr	r2, [r3, #20]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b08a      	sub	sp, #40	; 0x28
 8002a92:	af02      	add	r7, sp, #8
 8002a94:	60f8      	str	r0, [r7, #12]
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	603b      	str	r3, [r7, #0]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b20      	cmp	r3, #32
 8002aac:	d17c      	bne.n	8002ba8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <HAL_UART_Transmit+0x2c>
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e075      	b.n	8002baa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d101      	bne.n	8002acc <HAL_UART_Transmit+0x3e>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	e06e      	b.n	8002baa <HAL_UART_Transmit+0x11c>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2221      	movs	r2, #33	; 0x21
 8002ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ae2:	f7fe fb6b 	bl	80011bc <HAL_GetTick>
 8002ae6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	88fa      	ldrh	r2, [r7, #6]
 8002aec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	88fa      	ldrh	r2, [r7, #6]
 8002af2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002afc:	d108      	bne.n	8002b10 <HAL_UART_Transmit+0x82>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d104      	bne.n	8002b10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	61bb      	str	r3, [r7, #24]
 8002b0e:	e003      	b.n	8002b18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002b20:	e02a      	b.n	8002b78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2180      	movs	r1, #128	; 0x80
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 f840 	bl	8002bb2 <UART_WaitOnFlagUntilTimeout>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e036      	b.n	8002baa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10b      	bne.n	8002b5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	881b      	ldrh	r3, [r3, #0]
 8002b46:	461a      	mov	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	3302      	adds	r3, #2
 8002b56:	61bb      	str	r3, [r7, #24]
 8002b58:	e007      	b.n	8002b6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	781a      	ldrb	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	3301      	adds	r3, #1
 8002b68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1cf      	bne.n	8002b22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2140      	movs	r1, #64	; 0x40
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 f810 	bl	8002bb2 <UART_WaitOnFlagUntilTimeout>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e006      	b.n	8002baa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	e000      	b.n	8002baa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ba8:	2302      	movs	r3, #2
  }
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3720      	adds	r7, #32
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b090      	sub	sp, #64	; 0x40
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	60f8      	str	r0, [r7, #12]
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	603b      	str	r3, [r7, #0]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bc2:	e050      	b.n	8002c66 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bca:	d04c      	beq.n	8002c66 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d007      	beq.n	8002be2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002bd2:	f7fe faf3 	bl	80011bc <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d241      	bcs.n	8002c66 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	330c      	adds	r3, #12
 8002be8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bec:	e853 3f00 	ldrex	r3, [r3]
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	330c      	adds	r3, #12
 8002c00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c02:	637a      	str	r2, [r7, #52]	; 0x34
 8002c04:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c0a:	e841 2300 	strex	r3, r2, [r1]
 8002c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1e5      	bne.n	8002be2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	3314      	adds	r3, #20
 8002c1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	e853 3f00 	ldrex	r3, [r3]
 8002c24:	613b      	str	r3, [r7, #16]
   return(result);
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f023 0301 	bic.w	r3, r3, #1
 8002c2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	3314      	adds	r3, #20
 8002c34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c36:	623a      	str	r2, [r7, #32]
 8002c38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3a:	69f9      	ldr	r1, [r7, #28]
 8002c3c:	6a3a      	ldr	r2, [r7, #32]
 8002c3e:	e841 2300 	strex	r3, r2, [r1]
 8002c42:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1e5      	bne.n	8002c16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2220      	movs	r2, #32
 8002c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e00f      	b.n	8002c86 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	bf0c      	ite	eq
 8002c76:	2301      	moveq	r3, #1
 8002c78:	2300      	movne	r3, #0
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	79fb      	ldrb	r3, [r7, #7]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d09f      	beq.n	8002bc4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3740      	adds	r7, #64	; 0x40
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c94:	b0c0      	sub	sp, #256	; 0x100
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cac:	68d9      	ldr	r1, [r3, #12]
 8002cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	ea40 0301 	orr.w	r3, r0, r1
 8002cb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ce8:	f021 010c 	bic.w	r1, r1, #12
 8002cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002cf6:	430b      	orrs	r3, r1
 8002cf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d0a:	6999      	ldr	r1, [r3, #24]
 8002d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	ea40 0301 	orr.w	r3, r0, r1
 8002d16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	4b8f      	ldr	r3, [pc, #572]	; (8002f5c <UART_SetConfig+0x2cc>)
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d005      	beq.n	8002d30 <UART_SetConfig+0xa0>
 8002d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	4b8d      	ldr	r3, [pc, #564]	; (8002f60 <UART_SetConfig+0x2d0>)
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d104      	bne.n	8002d3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d30:	f7ff f990 	bl	8002054 <HAL_RCC_GetPCLK2Freq>
 8002d34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002d38:	e003      	b.n	8002d42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d3a:	f7ff f977 	bl	800202c <HAL_RCC_GetPCLK1Freq>
 8002d3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d4c:	f040 810c 	bne.w	8002f68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d54:	2200      	movs	r2, #0
 8002d56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002d5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002d62:	4622      	mov	r2, r4
 8002d64:	462b      	mov	r3, r5
 8002d66:	1891      	adds	r1, r2, r2
 8002d68:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d6a:	415b      	adcs	r3, r3
 8002d6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d72:	4621      	mov	r1, r4
 8002d74:	eb12 0801 	adds.w	r8, r2, r1
 8002d78:	4629      	mov	r1, r5
 8002d7a:	eb43 0901 	adc.w	r9, r3, r1
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d92:	4690      	mov	r8, r2
 8002d94:	4699      	mov	r9, r3
 8002d96:	4623      	mov	r3, r4
 8002d98:	eb18 0303 	adds.w	r3, r8, r3
 8002d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002da0:	462b      	mov	r3, r5
 8002da2:	eb49 0303 	adc.w	r3, r9, r3
 8002da6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002db6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002dba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	18db      	adds	r3, r3, r3
 8002dc2:	653b      	str	r3, [r7, #80]	; 0x50
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	eb42 0303 	adc.w	r3, r2, r3
 8002dca:	657b      	str	r3, [r7, #84]	; 0x54
 8002dcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002dd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002dd4:	f7fd faa4 	bl	8000320 <__aeabi_uldivmod>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4b61      	ldr	r3, [pc, #388]	; (8002f64 <UART_SetConfig+0x2d4>)
 8002dde:	fba3 2302 	umull	r2, r3, r3, r2
 8002de2:	095b      	lsrs	r3, r3, #5
 8002de4:	011c      	lsls	r4, r3, #4
 8002de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dea:	2200      	movs	r2, #0
 8002dec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002df0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002df4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002df8:	4642      	mov	r2, r8
 8002dfa:	464b      	mov	r3, r9
 8002dfc:	1891      	adds	r1, r2, r2
 8002dfe:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e00:	415b      	adcs	r3, r3
 8002e02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e08:	4641      	mov	r1, r8
 8002e0a:	eb12 0a01 	adds.w	sl, r2, r1
 8002e0e:	4649      	mov	r1, r9
 8002e10:	eb43 0b01 	adc.w	fp, r3, r1
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e28:	4692      	mov	sl, r2
 8002e2a:	469b      	mov	fp, r3
 8002e2c:	4643      	mov	r3, r8
 8002e2e:	eb1a 0303 	adds.w	r3, sl, r3
 8002e32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e36:	464b      	mov	r3, r9
 8002e38:	eb4b 0303 	adc.w	r3, fp, r3
 8002e3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e4c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002e50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002e54:	460b      	mov	r3, r1
 8002e56:	18db      	adds	r3, r3, r3
 8002e58:	643b      	str	r3, [r7, #64]	; 0x40
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	eb42 0303 	adc.w	r3, r2, r3
 8002e60:	647b      	str	r3, [r7, #68]	; 0x44
 8002e62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e6a:	f7fd fa59 	bl	8000320 <__aeabi_uldivmod>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4611      	mov	r1, r2
 8002e74:	4b3b      	ldr	r3, [pc, #236]	; (8002f64 <UART_SetConfig+0x2d4>)
 8002e76:	fba3 2301 	umull	r2, r3, r3, r1
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	2264      	movs	r2, #100	; 0x64
 8002e7e:	fb02 f303 	mul.w	r3, r2, r3
 8002e82:	1acb      	subs	r3, r1, r3
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002e8a:	4b36      	ldr	r3, [pc, #216]	; (8002f64 <UART_SetConfig+0x2d4>)
 8002e8c:	fba3 2302 	umull	r2, r3, r3, r2
 8002e90:	095b      	lsrs	r3, r3, #5
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e98:	441c      	add	r4, r3
 8002e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ea4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002ea8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002eac:	4642      	mov	r2, r8
 8002eae:	464b      	mov	r3, r9
 8002eb0:	1891      	adds	r1, r2, r2
 8002eb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002eb4:	415b      	adcs	r3, r3
 8002eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ebc:	4641      	mov	r1, r8
 8002ebe:	1851      	adds	r1, r2, r1
 8002ec0:	6339      	str	r1, [r7, #48]	; 0x30
 8002ec2:	4649      	mov	r1, r9
 8002ec4:	414b      	adcs	r3, r1
 8002ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002ed4:	4659      	mov	r1, fp
 8002ed6:	00cb      	lsls	r3, r1, #3
 8002ed8:	4651      	mov	r1, sl
 8002eda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ede:	4651      	mov	r1, sl
 8002ee0:	00ca      	lsls	r2, r1, #3
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	4642      	mov	r2, r8
 8002eea:	189b      	adds	r3, r3, r2
 8002eec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ef0:	464b      	mov	r3, r9
 8002ef2:	460a      	mov	r2, r1
 8002ef4:	eb42 0303 	adc.w	r3, r2, r3
 8002ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f08:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002f0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f10:	460b      	mov	r3, r1
 8002f12:	18db      	adds	r3, r3, r3
 8002f14:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f16:	4613      	mov	r3, r2
 8002f18:	eb42 0303 	adc.w	r3, r2, r3
 8002f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002f26:	f7fd f9fb 	bl	8000320 <__aeabi_uldivmod>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	4b0d      	ldr	r3, [pc, #52]	; (8002f64 <UART_SetConfig+0x2d4>)
 8002f30:	fba3 1302 	umull	r1, r3, r3, r2
 8002f34:	095b      	lsrs	r3, r3, #5
 8002f36:	2164      	movs	r1, #100	; 0x64
 8002f38:	fb01 f303 	mul.w	r3, r1, r3
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	3332      	adds	r3, #50	; 0x32
 8002f42:	4a08      	ldr	r2, [pc, #32]	; (8002f64 <UART_SetConfig+0x2d4>)
 8002f44:	fba2 2303 	umull	r2, r3, r2, r3
 8002f48:	095b      	lsrs	r3, r3, #5
 8002f4a:	f003 0207 	and.w	r2, r3, #7
 8002f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4422      	add	r2, r4
 8002f56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f58:	e105      	b.n	8003166 <UART_SetConfig+0x4d6>
 8002f5a:	bf00      	nop
 8002f5c:	40011000 	.word	0x40011000
 8002f60:	40011400 	.word	0x40011400
 8002f64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002f7a:	4642      	mov	r2, r8
 8002f7c:	464b      	mov	r3, r9
 8002f7e:	1891      	adds	r1, r2, r2
 8002f80:	6239      	str	r1, [r7, #32]
 8002f82:	415b      	adcs	r3, r3
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
 8002f86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f8a:	4641      	mov	r1, r8
 8002f8c:	1854      	adds	r4, r2, r1
 8002f8e:	4649      	mov	r1, r9
 8002f90:	eb43 0501 	adc.w	r5, r3, r1
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	00eb      	lsls	r3, r5, #3
 8002f9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fa2:	00e2      	lsls	r2, r4, #3
 8002fa4:	4614      	mov	r4, r2
 8002fa6:	461d      	mov	r5, r3
 8002fa8:	4643      	mov	r3, r8
 8002faa:	18e3      	adds	r3, r4, r3
 8002fac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002fb0:	464b      	mov	r3, r9
 8002fb2:	eb45 0303 	adc.w	r3, r5, r3
 8002fb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002fc6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002fd6:	4629      	mov	r1, r5
 8002fd8:	008b      	lsls	r3, r1, #2
 8002fda:	4621      	mov	r1, r4
 8002fdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fe0:	4621      	mov	r1, r4
 8002fe2:	008a      	lsls	r2, r1, #2
 8002fe4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002fe8:	f7fd f99a 	bl	8000320 <__aeabi_uldivmod>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4b60      	ldr	r3, [pc, #384]	; (8003174 <UART_SetConfig+0x4e4>)
 8002ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	011c      	lsls	r4, r3, #4
 8002ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ffe:	2200      	movs	r2, #0
 8003000:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003004:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003008:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800300c:	4642      	mov	r2, r8
 800300e:	464b      	mov	r3, r9
 8003010:	1891      	adds	r1, r2, r2
 8003012:	61b9      	str	r1, [r7, #24]
 8003014:	415b      	adcs	r3, r3
 8003016:	61fb      	str	r3, [r7, #28]
 8003018:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800301c:	4641      	mov	r1, r8
 800301e:	1851      	adds	r1, r2, r1
 8003020:	6139      	str	r1, [r7, #16]
 8003022:	4649      	mov	r1, r9
 8003024:	414b      	adcs	r3, r1
 8003026:	617b      	str	r3, [r7, #20]
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003034:	4659      	mov	r1, fp
 8003036:	00cb      	lsls	r3, r1, #3
 8003038:	4651      	mov	r1, sl
 800303a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800303e:	4651      	mov	r1, sl
 8003040:	00ca      	lsls	r2, r1, #3
 8003042:	4610      	mov	r0, r2
 8003044:	4619      	mov	r1, r3
 8003046:	4603      	mov	r3, r0
 8003048:	4642      	mov	r2, r8
 800304a:	189b      	adds	r3, r3, r2
 800304c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003050:	464b      	mov	r3, r9
 8003052:	460a      	mov	r2, r1
 8003054:	eb42 0303 	adc.w	r3, r2, r3
 8003058:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800305c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	67bb      	str	r3, [r7, #120]	; 0x78
 8003066:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003074:	4649      	mov	r1, r9
 8003076:	008b      	lsls	r3, r1, #2
 8003078:	4641      	mov	r1, r8
 800307a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800307e:	4641      	mov	r1, r8
 8003080:	008a      	lsls	r2, r1, #2
 8003082:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003086:	f7fd f94b 	bl	8000320 <__aeabi_uldivmod>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4b39      	ldr	r3, [pc, #228]	; (8003174 <UART_SetConfig+0x4e4>)
 8003090:	fba3 1302 	umull	r1, r3, r3, r2
 8003094:	095b      	lsrs	r3, r3, #5
 8003096:	2164      	movs	r1, #100	; 0x64
 8003098:	fb01 f303 	mul.w	r3, r1, r3
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	3332      	adds	r3, #50	; 0x32
 80030a2:	4a34      	ldr	r2, [pc, #208]	; (8003174 <UART_SetConfig+0x4e4>)
 80030a4:	fba2 2303 	umull	r2, r3, r2, r3
 80030a8:	095b      	lsrs	r3, r3, #5
 80030aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030ae:	441c      	add	r4, r3
 80030b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030b4:	2200      	movs	r2, #0
 80030b6:	673b      	str	r3, [r7, #112]	; 0x70
 80030b8:	677a      	str	r2, [r7, #116]	; 0x74
 80030ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80030be:	4642      	mov	r2, r8
 80030c0:	464b      	mov	r3, r9
 80030c2:	1891      	adds	r1, r2, r2
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	415b      	adcs	r3, r3
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030ce:	4641      	mov	r1, r8
 80030d0:	1851      	adds	r1, r2, r1
 80030d2:	6039      	str	r1, [r7, #0]
 80030d4:	4649      	mov	r1, r9
 80030d6:	414b      	adcs	r3, r1
 80030d8:	607b      	str	r3, [r7, #4]
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	f04f 0300 	mov.w	r3, #0
 80030e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80030e6:	4659      	mov	r1, fp
 80030e8:	00cb      	lsls	r3, r1, #3
 80030ea:	4651      	mov	r1, sl
 80030ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030f0:	4651      	mov	r1, sl
 80030f2:	00ca      	lsls	r2, r1, #3
 80030f4:	4610      	mov	r0, r2
 80030f6:	4619      	mov	r1, r3
 80030f8:	4603      	mov	r3, r0
 80030fa:	4642      	mov	r2, r8
 80030fc:	189b      	adds	r3, r3, r2
 80030fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8003100:	464b      	mov	r3, r9
 8003102:	460a      	mov	r2, r1
 8003104:	eb42 0303 	adc.w	r3, r2, r3
 8003108:	66fb      	str	r3, [r7, #108]	; 0x6c
 800310a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	663b      	str	r3, [r7, #96]	; 0x60
 8003114:	667a      	str	r2, [r7, #100]	; 0x64
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003122:	4649      	mov	r1, r9
 8003124:	008b      	lsls	r3, r1, #2
 8003126:	4641      	mov	r1, r8
 8003128:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800312c:	4641      	mov	r1, r8
 800312e:	008a      	lsls	r2, r1, #2
 8003130:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003134:	f7fd f8f4 	bl	8000320 <__aeabi_uldivmod>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4b0d      	ldr	r3, [pc, #52]	; (8003174 <UART_SetConfig+0x4e4>)
 800313e:	fba3 1302 	umull	r1, r3, r3, r2
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	2164      	movs	r1, #100	; 0x64
 8003146:	fb01 f303 	mul.w	r3, r1, r3
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	3332      	adds	r3, #50	; 0x32
 8003150:	4a08      	ldr	r2, [pc, #32]	; (8003174 <UART_SetConfig+0x4e4>)
 8003152:	fba2 2303 	umull	r2, r3, r2, r3
 8003156:	095b      	lsrs	r3, r3, #5
 8003158:	f003 020f 	and.w	r2, r3, #15
 800315c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4422      	add	r2, r4
 8003164:	609a      	str	r2, [r3, #8]
}
 8003166:	bf00      	nop
 8003168:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800316c:	46bd      	mov	sp, r7
 800316e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003172:	bf00      	nop
 8003174:	51eb851f 	.word	0x51eb851f

08003178 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f103 0208 	add.w	r2, r3, #8
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f04f 32ff 	mov.w	r2, #4294967295
 8003190:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f103 0208 	add.w	r2, r3, #8
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f103 0208 	add.w	r2, r3, #8
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80031d2:	b480      	push	{r7}
 80031d4:	b085      	sub	sp, #20
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
 80031da:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	601a      	str	r2, [r3, #0]
}
 800320e:	bf00      	nop
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800321a:	b480      	push	{r7}
 800321c:	b085      	sub	sp, #20
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
 8003222:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003230:	d103      	bne.n	800323a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	e00c      	b.n	8003254 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3308      	adds	r3, #8
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	e002      	b.n	8003248 <vListInsert+0x2e>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	429a      	cmp	r2, r3
 8003252:	d2f6      	bcs.n	8003242 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	601a      	str	r2, [r3, #0]
}
 8003280:	bf00      	nop
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6892      	ldr	r2, [r2, #8]
 80032a2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6852      	ldr	r2, [r2, #4]
 80032ac:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d103      	bne.n	80032c0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	1e5a      	subs	r2, r3, #1
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10a      	bne.n	800330a <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80032f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f8:	f383 8811 	msr	BASEPRI, r3
 80032fc:	f3bf 8f6f 	isb	sy
 8003300:	f3bf 8f4f 	dsb	sy
 8003304:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8003306:	bf00      	nop
 8003308:	e7fe      	b.n	8003308 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800330a:	f002 fb7b 	bl	8005a04 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003316:	68f9      	ldr	r1, [r7, #12]
 8003318:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800331a:	fb01 f303 	mul.w	r3, r1, r3
 800331e:	441a      	add	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333a:	3b01      	subs	r3, #1
 800333c:	68f9      	ldr	r1, [r7, #12]
 800333e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003340:	fb01 f303 	mul.w	r3, r1, r3
 8003344:	441a      	add	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	22ff      	movs	r2, #255	; 0xff
 800334e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	22ff      	movs	r2, #255	; 0xff
 8003356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d114      	bne.n	800338a <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d01a      	beq.n	800339e <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	3310      	adds	r3, #16
 800336c:	4618      	mov	r0, r3
 800336e:	f001 faab 	bl	80048c8 <xTaskRemoveFromEventList>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d012      	beq.n	800339e <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8003378:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <xQueueGenericReset+0xcc>)
 800337a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	f3bf 8f4f 	dsb	sy
 8003384:	f3bf 8f6f 	isb	sy
 8003388:	e009      	b.n	800339e <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	3310      	adds	r3, #16
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff fef2 	bl	8003178 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	3324      	adds	r3, #36	; 0x24
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff feed 	bl	8003178 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800339e:	f002 fb61 	bl	8005a64 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80033a2:	2301      	movs	r3, #1
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	e000ed04 	.word	0xe000ed04

080033b0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b08c      	sub	sp, #48	; 0x30
 80033b4:	af02      	add	r7, sp, #8
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	4613      	mov	r3, r2
 80033bc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10a      	bne.n	80033da <xQueueGenericCreate+0x2a>
        __asm volatile
 80033c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c8:	f383 8811 	msr	BASEPRI, r3
 80033cc:	f3bf 8f6f 	isb	sy
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	61bb      	str	r3, [r7, #24]
    }
 80033d6:	bf00      	nop
 80033d8:	e7fe      	b.n	80033d8 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	fb02 f303 	mul.w	r3, r2, r3
 80033e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d006      	beq.n	80033f8 <xQueueGenericCreate+0x48>
 80033ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d101      	bne.n	80033fc <xQueueGenericCreate+0x4c>
 80033f8:	2301      	movs	r3, #1
 80033fa:	e000      	b.n	80033fe <xQueueGenericCreate+0x4e>
 80033fc:	2300      	movs	r3, #0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10a      	bne.n	8003418 <xQueueGenericCreate+0x68>
        __asm volatile
 8003402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003406:	f383 8811 	msr	BASEPRI, r3
 800340a:	f3bf 8f6f 	isb	sy
 800340e:	f3bf 8f4f 	dsb	sy
 8003412:	617b      	str	r3, [r7, #20]
    }
 8003414:	bf00      	nop
 8003416:	e7fe      	b.n	8003416 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800341e:	d90a      	bls.n	8003436 <xQueueGenericCreate+0x86>
        __asm volatile
 8003420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003424:	f383 8811 	msr	BASEPRI, r3
 8003428:	f3bf 8f6f 	isb	sy
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	613b      	str	r3, [r7, #16]
    }
 8003432:	bf00      	nop
 8003434:	e7fe      	b.n	8003434 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	3350      	adds	r3, #80	; 0x50
 800343a:	4618      	mov	r0, r3
 800343c:	f002 fc0e 	bl	8005c5c <pvPortMalloc>
 8003440:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00d      	beq.n	8003464 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	3350      	adds	r3, #80	; 0x50
 8003450:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003452:	79fa      	ldrb	r2, [r7, #7]
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	4613      	mov	r3, r2
 800345a:	69fa      	ldr	r2, [r7, #28]
 800345c:	68b9      	ldr	r1, [r7, #8]
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f805 	bl	800346e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003464:	6a3b      	ldr	r3, [r7, #32]
    }
 8003466:	4618      	mov	r0, r3
 8003468:	3728      	adds	r7, #40	; 0x28
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b084      	sub	sp, #16
 8003472:	af00      	add	r7, sp, #0
 8003474:	60f8      	str	r0, [r7, #12]
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	607a      	str	r2, [r7, #4]
 800347a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d103      	bne.n	800348a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	e002      	b.n	8003490 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800349c:	2101      	movs	r1, #1
 800349e:	69b8      	ldr	r0, [r7, #24]
 80034a0:	f7ff ff1e 	bl	80032e0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	78fa      	ldrb	r2, [r7, #3]
 80034a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	68f9      	ldr	r1, [r7, #12]
 80034b2:	2073      	movs	r0, #115	; 0x73
 80034b4:	f004 f83c 	bl	8007530 <SEGGER_SYSVIEW_RecordU32x3>
}
 80034b8:	bf00      	nop
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b090      	sub	sp, #64	; 0x40
 80034c4:	af02      	add	r7, sp, #8
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
 80034cc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80034ce:	2300      	movs	r3, #0
 80034d0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10a      	bne.n	80034f2 <xQueueGenericSend+0x32>
        __asm volatile
 80034dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e0:	f383 8811 	msr	BASEPRI, r3
 80034e4:	f3bf 8f6f 	isb	sy
 80034e8:	f3bf 8f4f 	dsb	sy
 80034ec:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80034ee:	bf00      	nop
 80034f0:	e7fe      	b.n	80034f0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d103      	bne.n	8003500 <xQueueGenericSend+0x40>
 80034f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <xQueueGenericSend+0x44>
 8003500:	2301      	movs	r3, #1
 8003502:	e000      	b.n	8003506 <xQueueGenericSend+0x46>
 8003504:	2300      	movs	r3, #0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10a      	bne.n	8003520 <xQueueGenericSend+0x60>
        __asm volatile
 800350a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350e:	f383 8811 	msr	BASEPRI, r3
 8003512:	f3bf 8f6f 	isb	sy
 8003516:	f3bf 8f4f 	dsb	sy
 800351a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800351c:	bf00      	nop
 800351e:	e7fe      	b.n	800351e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d103      	bne.n	800352e <xQueueGenericSend+0x6e>
 8003526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352a:	2b01      	cmp	r3, #1
 800352c:	d101      	bne.n	8003532 <xQueueGenericSend+0x72>
 800352e:	2301      	movs	r3, #1
 8003530:	e000      	b.n	8003534 <xQueueGenericSend+0x74>
 8003532:	2300      	movs	r3, #0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10a      	bne.n	800354e <xQueueGenericSend+0x8e>
        __asm volatile
 8003538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353c:	f383 8811 	msr	BASEPRI, r3
 8003540:	f3bf 8f6f 	isb	sy
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	623b      	str	r3, [r7, #32]
    }
 800354a:	bf00      	nop
 800354c:	e7fe      	b.n	800354c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800354e:	f001 fb5b 	bl	8004c08 <xTaskGetSchedulerState>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d102      	bne.n	800355e <xQueueGenericSend+0x9e>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <xQueueGenericSend+0xa2>
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <xQueueGenericSend+0xa4>
 8003562:	2300      	movs	r3, #0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10a      	bne.n	800357e <xQueueGenericSend+0xbe>
        __asm volatile
 8003568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356c:	f383 8811 	msr	BASEPRI, r3
 8003570:	f3bf 8f6f 	isb	sy
 8003574:	f3bf 8f4f 	dsb	sy
 8003578:	61fb      	str	r3, [r7, #28]
    }
 800357a:	bf00      	nop
 800357c:	e7fe      	b.n	800357c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800357e:	f002 fa41 	bl	8005a04 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358a:	429a      	cmp	r2, r3
 800358c:	d302      	bcc.n	8003594 <xQueueGenericSend+0xd4>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2b02      	cmp	r3, #2
 8003592:	d136      	bne.n	8003602 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8003594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003596:	4618      	mov	r0, r3
 8003598:	f004 fd58 	bl	800804c <SEGGER_SYSVIEW_ShrinkId>
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	460b      	mov	r3, r1
 80035a6:	4601      	mov	r1, r0
 80035a8:	205a      	movs	r0, #90	; 0x5a
 80035aa:	f004 f837 	bl	800761c <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035b4:	f000 fbcc 	bl	8003d50 <prvCopyDataToQueue>
 80035b8:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d010      	beq.n	80035e4 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c4:	3324      	adds	r3, #36	; 0x24
 80035c6:	4618      	mov	r0, r3
 80035c8:	f001 f97e 	bl	80048c8 <xTaskRemoveFromEventList>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d013      	beq.n	80035fa <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80035d2:	4b4d      	ldr	r3, [pc, #308]	; (8003708 <xQueueGenericSend+0x248>)
 80035d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	f3bf 8f4f 	dsb	sy
 80035de:	f3bf 8f6f 	isb	sy
 80035e2:	e00a      	b.n	80035fa <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80035e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d007      	beq.n	80035fa <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80035ea:	4b47      	ldr	r3, [pc, #284]	; (8003708 <xQueueGenericSend+0x248>)
 80035ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	f3bf 8f4f 	dsb	sy
 80035f6:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80035fa:	f002 fa33 	bl	8005a64 <vPortExitCritical>
                return pdPASS;
 80035fe:	2301      	movs	r3, #1
 8003600:	e07d      	b.n	80036fe <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d110      	bne.n	800362a <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003608:	f002 fa2c 	bl	8005a64 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800360c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360e:	4618      	mov	r0, r3
 8003610:	f004 fd1c 	bl	800804c <SEGGER_SYSVIEW_ShrinkId>
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	460b      	mov	r3, r1
 800361e:	4601      	mov	r1, r0
 8003620:	205a      	movs	r0, #90	; 0x5a
 8003622:	f003 fffb 	bl	800761c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8003626:	2300      	movs	r3, #0
 8003628:	e069      	b.n	80036fe <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800362a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800362c:	2b00      	cmp	r3, #0
 800362e:	d106      	bne.n	800363e <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003630:	f107 0314 	add.w	r3, r7, #20
 8003634:	4618      	mov	r0, r3
 8003636:	f001 f9ad 	bl	8004994 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800363a:	2301      	movs	r3, #1
 800363c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800363e:	f002 fa11 	bl	8005a64 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003642:	f000 fef9 	bl	8004438 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003646:	f002 f9dd 	bl	8005a04 <vPortEnterCritical>
 800364a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003650:	b25b      	sxtb	r3, r3
 8003652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003656:	d103      	bne.n	8003660 <xQueueGenericSend+0x1a0>
 8003658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003662:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003666:	b25b      	sxtb	r3, r3
 8003668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366c:	d103      	bne.n	8003676 <xQueueGenericSend+0x1b6>
 800366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003676:	f002 f9f5 	bl	8005a64 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800367a:	1d3a      	adds	r2, r7, #4
 800367c:	f107 0314 	add.w	r3, r7, #20
 8003680:	4611      	mov	r1, r2
 8003682:	4618      	mov	r0, r3
 8003684:	f001 f99c 	bl	80049c0 <xTaskCheckForTimeOut>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d124      	bne.n	80036d8 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800368e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003690:	f000 fc56 	bl	8003f40 <prvIsQueueFull>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d018      	beq.n	80036cc <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369c:	3310      	adds	r3, #16
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	4611      	mov	r1, r2
 80036a2:	4618      	mov	r0, r3
 80036a4:	f001 f8be 	bl	8004824 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80036a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036aa:	f000 fbe1 	bl	8003e70 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80036ae:	f000 fed1 	bl	8004454 <xTaskResumeAll>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f47f af62 	bne.w	800357e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80036ba:	4b13      	ldr	r3, [pc, #76]	; (8003708 <xQueueGenericSend+0x248>)
 80036bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	f3bf 8f4f 	dsb	sy
 80036c6:	f3bf 8f6f 	isb	sy
 80036ca:	e758      	b.n	800357e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80036cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036ce:	f000 fbcf 	bl	8003e70 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80036d2:	f000 febf 	bl	8004454 <xTaskResumeAll>
 80036d6:	e752      	b.n	800357e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80036d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036da:	f000 fbc9 	bl	8003e70 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80036de:	f000 feb9 	bl	8004454 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80036e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e4:	4618      	mov	r0, r3
 80036e6:	f004 fcb1 	bl	800804c <SEGGER_SYSVIEW_ShrinkId>
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	460b      	mov	r3, r1
 80036f4:	4601      	mov	r1, r0
 80036f6:	205a      	movs	r0, #90	; 0x5a
 80036f8:	f003 ff90 	bl	800761c <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80036fc:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3738      	adds	r7, #56	; 0x38
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	e000ed04 	.word	0xe000ed04

0800370c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b090      	sub	sp, #64	; 0x40
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800371e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10a      	bne.n	800373a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8003724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003728:	f383 8811 	msr	BASEPRI, r3
 800372c:	f3bf 8f6f 	isb	sy
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003736:	bf00      	nop
 8003738:	e7fe      	b.n	8003738 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d103      	bne.n	8003748 <xQueueGenericSendFromISR+0x3c>
 8003740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <xQueueGenericSendFromISR+0x40>
 8003748:	2301      	movs	r3, #1
 800374a:	e000      	b.n	800374e <xQueueGenericSendFromISR+0x42>
 800374c:	2300      	movs	r3, #0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10a      	bne.n	8003768 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8003752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003756:	f383 8811 	msr	BASEPRI, r3
 800375a:	f3bf 8f6f 	isb	sy
 800375e:	f3bf 8f4f 	dsb	sy
 8003762:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003764:	bf00      	nop
 8003766:	e7fe      	b.n	8003766 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	2b02      	cmp	r3, #2
 800376c:	d103      	bne.n	8003776 <xQueueGenericSendFromISR+0x6a>
 800376e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <xQueueGenericSendFromISR+0x6e>
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <xQueueGenericSendFromISR+0x70>
 800377a:	2300      	movs	r3, #0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10a      	bne.n	8003796 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8003780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	623b      	str	r3, [r7, #32]
    }
 8003792:	bf00      	nop
 8003794:	e7fe      	b.n	8003794 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003796:	f002 fa21 	bl	8005bdc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800379a:	f3ef 8211 	mrs	r2, BASEPRI
 800379e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a2:	f383 8811 	msr	BASEPRI, r3
 80037a6:	f3bf 8f6f 	isb	sy
 80037aa:	f3bf 8f4f 	dsb	sy
 80037ae:	61fa      	str	r2, [r7, #28]
 80037b0:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80037b2:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80037b4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80037b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037be:	429a      	cmp	r2, r3
 80037c0:	d302      	bcc.n	80037c8 <xQueueGenericSendFromISR+0xbc>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d148      	bne.n	800385a <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80037c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d6:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80037d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037da:	4618      	mov	r0, r3
 80037dc:	f004 fc36 	bl	800804c <SEGGER_SYSVIEW_ShrinkId>
 80037e0:	4601      	mov	r1, r0
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	461a      	mov	r2, r3
 80037e6:	2060      	movs	r0, #96	; 0x60
 80037e8:	f003 fe48 	bl	800747c <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	68b9      	ldr	r1, [r7, #8]
 80037f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80037f2:	f000 faad 	bl	8003d50 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80037f6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80037fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fe:	d112      	bne.n	8003826 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	2b00      	cmp	r3, #0
 8003806:	d025      	beq.n	8003854 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380a:	3324      	adds	r3, #36	; 0x24
 800380c:	4618      	mov	r0, r3
 800380e:	f001 f85b 	bl	80048c8 <xTaskRemoveFromEventList>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d01d      	beq.n	8003854 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d01a      	beq.n	8003854 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	e016      	b.n	8003854 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003826:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800382a:	2b7f      	cmp	r3, #127	; 0x7f
 800382c:	d10a      	bne.n	8003844 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 800382e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003832:	f383 8811 	msr	BASEPRI, r3
 8003836:	f3bf 8f6f 	isb	sy
 800383a:	f3bf 8f4f 	dsb	sy
 800383e:	617b      	str	r3, [r7, #20]
    }
 8003840:	bf00      	nop
 8003842:	e7fe      	b.n	8003842 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003844:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003848:	3301      	adds	r3, #1
 800384a:	b2db      	uxtb	r3, r3
 800384c:	b25a      	sxtb	r2, r3
 800384e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003850:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003854:	2301      	movs	r3, #1
 8003856:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8003858:	e00b      	b.n	8003872 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800385a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385c:	4618      	mov	r0, r3
 800385e:	f004 fbf5 	bl	800804c <SEGGER_SYSVIEW_ShrinkId>
 8003862:	4601      	mov	r1, r0
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	461a      	mov	r2, r3
 8003868:	2060      	movs	r0, #96	; 0x60
 800386a:	f003 fe07 	bl	800747c <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800386e:	2300      	movs	r3, #0
 8003870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003874:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800387c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800387e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003880:	4618      	mov	r0, r3
 8003882:	3740      	adds	r7, #64	; 0x40
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003888:	b590      	push	{r4, r7, lr}
 800388a:	b08f      	sub	sp, #60	; 0x3c
 800388c:	af02      	add	r7, sp, #8
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003894:	2300      	movs	r3, #0
 8003896:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800389c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10a      	bne.n	80038b8 <xQueueReceive+0x30>
        __asm volatile
 80038a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a6:	f383 8811 	msr	BASEPRI, r3
 80038aa:	f3bf 8f6f 	isb	sy
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	623b      	str	r3, [r7, #32]
    }
 80038b4:	bf00      	nop
 80038b6:	e7fe      	b.n	80038b6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d103      	bne.n	80038c6 <xQueueReceive+0x3e>
 80038be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <xQueueReceive+0x42>
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <xQueueReceive+0x44>
 80038ca:	2300      	movs	r3, #0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10a      	bne.n	80038e6 <xQueueReceive+0x5e>
        __asm volatile
 80038d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d4:	f383 8811 	msr	BASEPRI, r3
 80038d8:	f3bf 8f6f 	isb	sy
 80038dc:	f3bf 8f4f 	dsb	sy
 80038e0:	61fb      	str	r3, [r7, #28]
    }
 80038e2:	bf00      	nop
 80038e4:	e7fe      	b.n	80038e4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038e6:	f001 f98f 	bl	8004c08 <xTaskGetSchedulerState>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d102      	bne.n	80038f6 <xQueueReceive+0x6e>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <xQueueReceive+0x72>
 80038f6:	2301      	movs	r3, #1
 80038f8:	e000      	b.n	80038fc <xQueueReceive+0x74>
 80038fa:	2300      	movs	r3, #0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10a      	bne.n	8003916 <xQueueReceive+0x8e>
        __asm volatile
 8003900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003904:	f383 8811 	msr	BASEPRI, r3
 8003908:	f3bf 8f6f 	isb	sy
 800390c:	f3bf 8f4f 	dsb	sy
 8003910:	61bb      	str	r3, [r7, #24]
    }
 8003912:	bf00      	nop
 8003914:	e7fe      	b.n	8003914 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003916:	f002 f875 	bl	8005a04 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800391a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	2b00      	cmp	r3, #0
 8003924:	d02f      	beq.n	8003986 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003926:	68b9      	ldr	r1, [r7, #8]
 8003928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800392a:	f000 fa7b 	bl	8003e24 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800392e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003930:	4618      	mov	r0, r3
 8003932:	f004 fb8b 	bl	800804c <SEGGER_SYSVIEW_ShrinkId>
 8003936:	4604      	mov	r4, r0
 8003938:	2000      	movs	r0, #0
 800393a:	f004 fb87 	bl	800804c <SEGGER_SYSVIEW_ShrinkId>
 800393e:	4602      	mov	r2, r0
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2101      	movs	r1, #1
 8003944:	9100      	str	r1, [sp, #0]
 8003946:	4621      	mov	r1, r4
 8003948:	205c      	movs	r0, #92	; 0x5c
 800394a:	f003 fe67 	bl	800761c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	1e5a      	subs	r2, r3, #1
 8003952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003954:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00f      	beq.n	800397e <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800395e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003960:	3310      	adds	r3, #16
 8003962:	4618      	mov	r0, r3
 8003964:	f000 ffb0 	bl	80048c8 <xTaskRemoveFromEventList>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d007      	beq.n	800397e <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800396e:	4b4d      	ldr	r3, [pc, #308]	; (8003aa4 <xQueueReceive+0x21c>)
 8003970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800397e:	f002 f871 	bl	8005a64 <vPortExitCritical>
                return pdPASS;
 8003982:	2301      	movs	r3, #1
 8003984:	e08a      	b.n	8003a9c <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d113      	bne.n	80039b4 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800398c:	f002 f86a 	bl	8005a64 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003992:	4618      	mov	r0, r3
 8003994:	f004 fb5a 	bl	800804c <SEGGER_SYSVIEW_ShrinkId>
 8003998:	4604      	mov	r4, r0
 800399a:	2000      	movs	r0, #0
 800399c:	f004 fb56 	bl	800804c <SEGGER_SYSVIEW_ShrinkId>
 80039a0:	4602      	mov	r2, r0
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2101      	movs	r1, #1
 80039a6:	9100      	str	r1, [sp, #0]
 80039a8:	4621      	mov	r1, r4
 80039aa:	205c      	movs	r0, #92	; 0x5c
 80039ac:	f003 fe36 	bl	800761c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80039b0:	2300      	movs	r3, #0
 80039b2:	e073      	b.n	8003a9c <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80039b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d106      	bne.n	80039c8 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80039ba:	f107 0310 	add.w	r3, r7, #16
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 ffe8 	bl	8004994 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80039c4:	2301      	movs	r3, #1
 80039c6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80039c8:	f002 f84c 	bl	8005a64 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80039cc:	f000 fd34 	bl	8004438 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80039d0:	f002 f818 	bl	8005a04 <vPortEnterCritical>
 80039d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039da:	b25b      	sxtb	r3, r3
 80039dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e0:	d103      	bne.n	80039ea <xQueueReceive+0x162>
 80039e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039f0:	b25b      	sxtb	r3, r3
 80039f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f6:	d103      	bne.n	8003a00 <xQueueReceive+0x178>
 80039f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a00:	f002 f830 	bl	8005a64 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a04:	1d3a      	adds	r2, r7, #4
 8003a06:	f107 0310 	add.w	r3, r7, #16
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 ffd7 	bl	80049c0 <xTaskCheckForTimeOut>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d124      	bne.n	8003a62 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a1a:	f000 fa7b 	bl	8003f14 <prvIsQueueEmpty>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d018      	beq.n	8003a56 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a26:	3324      	adds	r3, #36	; 0x24
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 fef9 	bl	8004824 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003a32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a34:	f000 fa1c 	bl	8003e70 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003a38:	f000 fd0c 	bl	8004454 <xTaskResumeAll>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f47f af69 	bne.w	8003916 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003a44:	4b17      	ldr	r3, [pc, #92]	; (8003aa4 <xQueueReceive+0x21c>)
 8003a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	f3bf 8f6f 	isb	sy
 8003a54:	e75f      	b.n	8003916 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003a56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a58:	f000 fa0a 	bl	8003e70 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003a5c:	f000 fcfa 	bl	8004454 <xTaskResumeAll>
 8003a60:	e759      	b.n	8003916 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003a62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a64:	f000 fa04 	bl	8003e70 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003a68:	f000 fcf4 	bl	8004454 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a6e:	f000 fa51 	bl	8003f14 <prvIsQueueEmpty>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f43f af4e 	beq.w	8003916 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f004 fae5 	bl	800804c <SEGGER_SYSVIEW_ShrinkId>
 8003a82:	4604      	mov	r4, r0
 8003a84:	2000      	movs	r0, #0
 8003a86:	f004 fae1 	bl	800804c <SEGGER_SYSVIEW_ShrinkId>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2101      	movs	r1, #1
 8003a90:	9100      	str	r1, [sp, #0]
 8003a92:	4621      	mov	r1, r4
 8003a94:	205c      	movs	r0, #92	; 0x5c
 8003a96:	f003 fdc1 	bl	800761c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8003a9a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3734      	adds	r7, #52	; 0x34
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd90      	pop	{r4, r7, pc}
 8003aa4:	e000ed04 	.word	0xe000ed04

08003aa8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003aa8:	b590      	push	{r4, r7, lr}
 8003aaa:	b091      	sub	sp, #68	; 0x44
 8003aac:	af02      	add	r7, sp, #8
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003aba:	2300      	movs	r3, #0
 8003abc:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10a      	bne.n	8003ada <xQueueSemaphoreTake+0x32>
        __asm volatile
 8003ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac8:	f383 8811 	msr	BASEPRI, r3
 8003acc:	f3bf 8f6f 	isb	sy
 8003ad0:	f3bf 8f4f 	dsb	sy
 8003ad4:	623b      	str	r3, [r7, #32]
    }
 8003ad6:	bf00      	nop
 8003ad8:	e7fe      	b.n	8003ad8 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <xQueueSemaphoreTake+0x50>
        __asm volatile
 8003ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae6:	f383 8811 	msr	BASEPRI, r3
 8003aea:	f3bf 8f6f 	isb	sy
 8003aee:	f3bf 8f4f 	dsb	sy
 8003af2:	61fb      	str	r3, [r7, #28]
    }
 8003af4:	bf00      	nop
 8003af6:	e7fe      	b.n	8003af6 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003af8:	f001 f886 	bl	8004c08 <xTaskGetSchedulerState>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d102      	bne.n	8003b08 <xQueueSemaphoreTake+0x60>
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <xQueueSemaphoreTake+0x64>
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <xQueueSemaphoreTake+0x66>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10a      	bne.n	8003b28 <xQueueSemaphoreTake+0x80>
        __asm volatile
 8003b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	61bb      	str	r3, [r7, #24]
    }
 8003b24:	bf00      	nop
 8003b26:	e7fe      	b.n	8003b26 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003b28:	f001 ff6c 	bl	8005a04 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b30:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d034      	beq.n	8003ba2 <xQueueSemaphoreTake+0xfa>
            {
                traceQUEUE_RECEIVE( pxQueue );
 8003b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f004 fa86 	bl	800804c <SEGGER_SYSVIEW_ShrinkId>
 8003b40:	4604      	mov	r4, r0
 8003b42:	2000      	movs	r0, #0
 8003b44:	f004 fa82 	bl	800804c <SEGGER_SYSVIEW_ShrinkId>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	9100      	str	r1, [sp, #0]
 8003b50:	4621      	mov	r1, r4
 8003b52:	205c      	movs	r0, #92	; 0x5c
 8003b54:	f003 fd62 	bl	800761c <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5a:	1e5a      	subs	r2, r3, #1
 8003b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5e:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d104      	bne.n	8003b72 <xQueueSemaphoreTake+0xca>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003b68:	f001 f9fe 	bl	8004f68 <pvTaskIncrementMutexHeldCount>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b70:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00f      	beq.n	8003b9a <xQueueSemaphoreTake+0xf2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7c:	3310      	adds	r3, #16
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 fea2 	bl	80048c8 <xTaskRemoveFromEventList>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d007      	beq.n	8003b9a <xQueueSemaphoreTake+0xf2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003b8a:	4b64      	ldr	r3, [pc, #400]	; (8003d1c <xQueueSemaphoreTake+0x274>)
 8003b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	f3bf 8f4f 	dsb	sy
 8003b96:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003b9a:	f001 ff63 	bl	8005a64 <vPortExitCritical>
                return pdPASS;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e0b7      	b.n	8003d12 <xQueueSemaphoreTake+0x26a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d121      	bne.n	8003bec <xQueueSemaphoreTake+0x144>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8003ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <xQueueSemaphoreTake+0x11c>
        __asm volatile
 8003bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb2:	f383 8811 	msr	BASEPRI, r3
 8003bb6:	f3bf 8f6f 	isb	sy
 8003bba:	f3bf 8f4f 	dsb	sy
 8003bbe:	617b      	str	r3, [r7, #20]
    }
 8003bc0:	bf00      	nop
 8003bc2:	e7fe      	b.n	8003bc2 <xQueueSemaphoreTake+0x11a>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003bc4:	f001 ff4e 	bl	8005a64 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f004 fa3e 	bl	800804c <SEGGER_SYSVIEW_ShrinkId>
 8003bd0:	4604      	mov	r4, r0
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	f004 fa3a 	bl	800804c <SEGGER_SYSVIEW_ShrinkId>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2101      	movs	r1, #1
 8003bde:	9100      	str	r1, [sp, #0]
 8003be0:	4621      	mov	r1, r4
 8003be2:	205c      	movs	r0, #92	; 0x5c
 8003be4:	f003 fd1a 	bl	800761c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8003be8:	2300      	movs	r3, #0
 8003bea:	e092      	b.n	8003d12 <xQueueSemaphoreTake+0x26a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d106      	bne.n	8003c00 <xQueueSemaphoreTake+0x158>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003bf2:	f107 030c 	add.w	r3, r7, #12
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fecc 	bl	8004994 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003c00:	f001 ff30 	bl	8005a64 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003c04:	f000 fc18 	bl	8004438 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003c08:	f001 fefc 	bl	8005a04 <vPortEnterCritical>
 8003c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c12:	b25b      	sxtb	r3, r3
 8003c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c18:	d103      	bne.n	8003c22 <xQueueSemaphoreTake+0x17a>
 8003c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c28:	b25b      	sxtb	r3, r3
 8003c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2e:	d103      	bne.n	8003c38 <xQueueSemaphoreTake+0x190>
 8003c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c38:	f001 ff14 	bl	8005a64 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c3c:	463a      	mov	r2, r7
 8003c3e:	f107 030c 	add.w	r3, r7, #12
 8003c42:	4611      	mov	r1, r2
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 febb 	bl	80049c0 <xTaskCheckForTimeOut>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d132      	bne.n	8003cb6 <xQueueSemaphoreTake+0x20e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c52:	f000 f95f 	bl	8003f14 <prvIsQueueEmpty>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d026      	beq.n	8003caa <xQueueSemaphoreTake+0x202>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d109      	bne.n	8003c78 <xQueueSemaphoreTake+0x1d0>
                        {
                            taskENTER_CRITICAL();
 8003c64:	f001 fece 	bl	8005a04 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 ffe9 	bl	8004c44 <xTaskPriorityInherit>
 8003c72:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8003c74:	f001 fef6 	bl	8005a64 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7a:	3324      	adds	r3, #36	; 0x24
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	4611      	mov	r1, r2
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 fdcf 	bl	8004824 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003c86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c88:	f000 f8f2 	bl	8003e70 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003c8c:	f000 fbe2 	bl	8004454 <xTaskResumeAll>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f47f af48 	bne.w	8003b28 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8003c98:	4b20      	ldr	r3, [pc, #128]	; (8003d1c <xQueueSemaphoreTake+0x274>)
 8003c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	e73e      	b.n	8003b28 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8003caa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003cac:	f000 f8e0 	bl	8003e70 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003cb0:	f000 fbd0 	bl	8004454 <xTaskResumeAll>
 8003cb4:	e738      	b.n	8003b28 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8003cb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003cb8:	f000 f8da 	bl	8003e70 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003cbc:	f000 fbca 	bl	8004454 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003cc2:	f000 f927 	bl	8003f14 <prvIsQueueEmpty>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f43f af2d 	beq.w	8003b28 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8003cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00d      	beq.n	8003cf0 <xQueueSemaphoreTake+0x248>
                        {
                            taskENTER_CRITICAL();
 8003cd4:	f001 fe96 	bl	8005a04 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003cd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003cda:	f000 f821 	bl	8003d20 <prvGetDisinheritPriorityAfterTimeout>
 8003cde:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f001 f8a6 	bl	8004e38 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8003cec:	f001 feba 	bl	8005a64 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f004 f9aa 	bl	800804c <SEGGER_SYSVIEW_ShrinkId>
 8003cf8:	4604      	mov	r4, r0
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	f004 f9a6 	bl	800804c <SEGGER_SYSVIEW_ShrinkId>
 8003d00:	4602      	mov	r2, r0
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	2101      	movs	r1, #1
 8003d06:	9100      	str	r1, [sp, #0]
 8003d08:	4621      	mov	r1, r4
 8003d0a:	205c      	movs	r0, #92	; 0x5c
 8003d0c:	f003 fc86 	bl	800761c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8003d10:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	373c      	adds	r7, #60	; 0x3c
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd90      	pop	{r4, r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	e000ed04 	.word	0xe000ed04

08003d20 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d006      	beq.n	8003d3e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f1c3 0305 	rsb	r3, r3, #5
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	e001      	b.n	8003d42 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8003d42:	68fb      	ldr	r3, [r7, #12]
    }
 8003d44:	4618      	mov	r0, r3
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d64:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10d      	bne.n	8003d8a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d14d      	bne.n	8003e12 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 ffdc 	bl	8004d38 <xTaskPriorityDisinherit>
 8003d80:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	609a      	str	r2, [r3, #8]
 8003d88:	e043      	b.n	8003e12 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d119      	bne.n	8003dc4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6858      	ldr	r0, [r3, #4]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	461a      	mov	r2, r3
 8003d9a:	68b9      	ldr	r1, [r7, #8]
 8003d9c:	f004 fb18 	bl	80083d0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da8:	441a      	add	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d32b      	bcc.n	8003e12 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	605a      	str	r2, [r3, #4]
 8003dc2:	e026      	b.n	8003e12 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	68d8      	ldr	r0, [r3, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dcc:	461a      	mov	r2, r3
 8003dce:	68b9      	ldr	r1, [r7, #8]
 8003dd0:	f004 fafe 	bl	80083d0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	425b      	negs	r3, r3
 8003dde:	441a      	add	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d207      	bcs.n	8003e00 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df8:	425b      	negs	r3, r3
 8003dfa:	441a      	add	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d105      	bne.n	8003e12 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d002      	beq.n	8003e12 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003e1a:	697b      	ldr	r3, [r7, #20]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d018      	beq.n	8003e68 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	441a      	add	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d303      	bcc.n	8003e58 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68d9      	ldr	r1, [r3, #12]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e60:	461a      	mov	r2, r3
 8003e62:	6838      	ldr	r0, [r7, #0]
 8003e64:	f004 fab4 	bl	80083d0 <memcpy>
    }
}
 8003e68:	bf00      	nop
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003e78:	f001 fdc4 	bl	8005a04 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e82:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e84:	e011      	b.n	8003eaa <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d012      	beq.n	8003eb4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	3324      	adds	r3, #36	; 0x24
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fd18 	bl	80048c8 <xTaskRemoveFromEventList>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003e9e:	f000 fdf5 	bl	8004a8c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	dce9      	bgt.n	8003e86 <prvUnlockQueue+0x16>
 8003eb2:	e000      	b.n	8003eb6 <prvUnlockQueue+0x46>
                        break;
 8003eb4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	22ff      	movs	r2, #255	; 0xff
 8003eba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003ebe:	f001 fdd1 	bl	8005a64 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003ec2:	f001 fd9f 	bl	8005a04 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ecc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ece:	e011      	b.n	8003ef4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d012      	beq.n	8003efe <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3310      	adds	r3, #16
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 fcf3 	bl	80048c8 <xTaskRemoveFromEventList>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003ee8:	f000 fdd0 	bl	8004a8c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003eec:	7bbb      	ldrb	r3, [r7, #14]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ef4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	dce9      	bgt.n	8003ed0 <prvUnlockQueue+0x60>
 8003efc:	e000      	b.n	8003f00 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003efe:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	22ff      	movs	r2, #255	; 0xff
 8003f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003f08:	f001 fdac 	bl	8005a64 <vPortExitCritical>
}
 8003f0c:	bf00      	nop
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003f1c:	f001 fd72 	bl	8005a04 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d102      	bne.n	8003f2e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	e001      	b.n	8003f32 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003f32:	f001 fd97 	bl	8005a64 <vPortExitCritical>

    return xReturn;
 8003f36:	68fb      	ldr	r3, [r7, #12]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003f48:	f001 fd5c 	bl	8005a04 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d102      	bne.n	8003f5e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	e001      	b.n	8003f62 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003f62:	f001 fd7f 	bl	8005a64 <vPortExitCritical>

    return xReturn;
 8003f66:	68fb      	ldr	r3, [r7, #12]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	e01e      	b.n	8003fbe <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003f80:	4a13      	ldr	r2, [pc, #76]	; (8003fd0 <vQueueAddToRegistry+0x60>)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d115      	bne.n	8003fb8 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003f8c:	4910      	ldr	r1, [pc, #64]	; (8003fd0 <vQueueAddToRegistry+0x60>)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8003f96:	4a0e      	ldr	r2, [pc, #56]	; (8003fd0 <vQueueAddToRegistry+0x60>)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	4413      	add	r3, r2
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f004 f851 	bl	800804c <SEGGER_SYSVIEW_ShrinkId>
 8003faa:	4601      	mov	r1, r0
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	2071      	movs	r0, #113	; 0x71
 8003fb2:	f003 fa63 	bl	800747c <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8003fb6:	e006      	b.n	8003fc6 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2b07      	cmp	r3, #7
 8003fc2:	d9dd      	bls.n	8003f80 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003fc4:	bf00      	nop
 8003fc6:	bf00      	nop
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20000254 	.word	0x20000254

08003fd4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003fe4:	f001 fd0e 	bl	8005a04 <vPortEnterCritical>
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fee:	b25b      	sxtb	r3, r3
 8003ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff4:	d103      	bne.n	8003ffe <vQueueWaitForMessageRestricted+0x2a>
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004004:	b25b      	sxtb	r3, r3
 8004006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400a:	d103      	bne.n	8004014 <vQueueWaitForMessageRestricted+0x40>
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004014:	f001 fd26 	bl	8005a64 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401c:	2b00      	cmp	r3, #0
 800401e:	d106      	bne.n	800402e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	3324      	adds	r3, #36	; 0x24
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	68b9      	ldr	r1, [r7, #8]
 8004028:	4618      	mov	r0, r3
 800402a:	f000 fc1f 	bl	800486c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800402e:	6978      	ldr	r0, [r7, #20]
 8004030:	f7ff ff1e 	bl	8003e70 <prvUnlockQueue>
    }
 8004034:	bf00      	nop
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800403c:	b580      	push	{r7, lr}
 800403e:	b08c      	sub	sp, #48	; 0x30
 8004040:	af04      	add	r7, sp, #16
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	603b      	str	r3, [r7, #0]
 8004048:	4613      	mov	r3, r2
 800404a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800404c:	88fb      	ldrh	r3, [r7, #6]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4618      	mov	r0, r3
 8004052:	f001 fe03 	bl	8005c5c <pvPortMalloc>
 8004056:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00e      	beq.n	800407c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800405e:	2058      	movs	r0, #88	; 0x58
 8004060:	f001 fdfc 	bl	8005c5c <pvPortMalloc>
 8004064:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	631a      	str	r2, [r3, #48]	; 0x30
 8004072:	e005      	b.n	8004080 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8004074:	6978      	ldr	r0, [r7, #20]
 8004076:	f001 fed1 	bl	8005e1c <vPortFree>
 800407a:	e001      	b.n	8004080 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800407c:	2300      	movs	r3, #0
 800407e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d013      	beq.n	80040ae <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004086:	88fa      	ldrh	r2, [r7, #6]
 8004088:	2300      	movs	r3, #0
 800408a:	9303      	str	r3, [sp, #12]
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	9302      	str	r3, [sp, #8]
 8004090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004092:	9301      	str	r3, [sp, #4]
 8004094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	68b9      	ldr	r1, [r7, #8]
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 f80e 	bl	80040be <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80040a2:	69f8      	ldr	r0, [r7, #28]
 80040a4:	f000 f8a2 	bl	80041ec <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80040a8:	2301      	movs	r3, #1
 80040aa:	61bb      	str	r3, [r7, #24]
 80040ac:	e002      	b.n	80040b4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80040ae:	f04f 33ff 	mov.w	r3, #4294967295
 80040b2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80040b4:	69bb      	ldr	r3, [r7, #24]
    }
 80040b6:	4618      	mov	r0, r3
 80040b8:	3720      	adds	r7, #32
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b088      	sub	sp, #32
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	607a      	str	r2, [r7, #4]
 80040ca:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80040cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	461a      	mov	r2, r3
 80040d6:	21a5      	movs	r1, #165	; 0xa5
 80040d8:	f004 f988 	bl	80083ec <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80040dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80040e6:	3b01      	subs	r3, #1
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4413      	add	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	f023 0307 	bic.w	r3, r3, #7
 80040f4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00a      	beq.n	8004116 <prvInitialiseNewTask+0x58>
        __asm volatile
 8004100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004104:	f383 8811 	msr	BASEPRI, r3
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	617b      	str	r3, [r7, #20]
    }
 8004112:	bf00      	nop
 8004114:	e7fe      	b.n	8004114 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d01f      	beq.n	800415c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800411c:	2300      	movs	r3, #0
 800411e:	61fb      	str	r3, [r7, #28]
 8004120:	e012      	b.n	8004148 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	4413      	add	r3, r2
 8004128:	7819      	ldrb	r1, [r3, #0]
 800412a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	4413      	add	r3, r2
 8004130:	3334      	adds	r3, #52	; 0x34
 8004132:	460a      	mov	r2, r1
 8004134:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	4413      	add	r3, r2
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d006      	beq.n	8004150 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	3301      	adds	r3, #1
 8004146:	61fb      	str	r3, [r7, #28]
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	2b09      	cmp	r3, #9
 800414c:	d9e9      	bls.n	8004122 <prvInitialiseNewTask+0x64>
 800414e:	e000      	b.n	8004152 <prvInitialiseNewTask+0x94>
            {
                break;
 8004150:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800415a:	e003      	b.n	8004164 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800415c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004166:	2b04      	cmp	r3, #4
 8004168:	d901      	bls.n	800416e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800416a:	2304      	movs	r3, #4
 800416c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800416e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004170:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004172:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8004174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004176:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004178:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800417a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417c:	2200      	movs	r2, #0
 800417e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004182:	3304      	adds	r3, #4
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff f817 	bl	80031b8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800418a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418c:	3318      	adds	r3, #24
 800418e:	4618      	mov	r0, r3
 8004190:	f7ff f812 	bl	80031b8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004196:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004198:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800419a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419c:	f1c3 0205 	rsb	r2, r3, #5
 80041a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80041a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041a8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80041aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ac:	3350      	adds	r3, #80	; 0x50
 80041ae:	2204      	movs	r2, #4
 80041b0:	2100      	movs	r1, #0
 80041b2:	4618      	mov	r0, r3
 80041b4:	f004 f91a 	bl	80083ec <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80041b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ba:	3354      	adds	r3, #84	; 0x54
 80041bc:	2201      	movs	r2, #1
 80041be:	2100      	movs	r1, #0
 80041c0:	4618      	mov	r0, r3
 80041c2:	f004 f913 	bl	80083ec <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	68f9      	ldr	r1, [r7, #12]
 80041ca:	69b8      	ldr	r0, [r7, #24]
 80041cc:	f001 fa6a 	bl	80056a4 <pxPortInitialiseStack>
 80041d0:	4602      	mov	r2, r0
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80041d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d002      	beq.n	80041e2 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80041dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041e0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80041e2:	bf00      	nop
 80041e4:	3720      	adds	r7, #32
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
	...

080041ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80041ec:	b5b0      	push	{r4, r5, r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af02      	add	r7, sp, #8
 80041f2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80041f4:	f001 fc06 	bl	8005a04 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80041f8:	4b3b      	ldr	r3, [pc, #236]	; (80042e8 <prvAddNewTaskToReadyList+0xfc>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	3301      	adds	r3, #1
 80041fe:	4a3a      	ldr	r2, [pc, #232]	; (80042e8 <prvAddNewTaskToReadyList+0xfc>)
 8004200:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004202:	4b3a      	ldr	r3, [pc, #232]	; (80042ec <prvAddNewTaskToReadyList+0x100>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d109      	bne.n	800421e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800420a:	4a38      	ldr	r2, [pc, #224]	; (80042ec <prvAddNewTaskToReadyList+0x100>)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004210:	4b35      	ldr	r3, [pc, #212]	; (80042e8 <prvAddNewTaskToReadyList+0xfc>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d110      	bne.n	800423a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004218:	f000 fc5c 	bl	8004ad4 <prvInitialiseTaskLists>
 800421c:	e00d      	b.n	800423a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800421e:	4b34      	ldr	r3, [pc, #208]	; (80042f0 <prvAddNewTaskToReadyList+0x104>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d109      	bne.n	800423a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004226:	4b31      	ldr	r3, [pc, #196]	; (80042ec <prvAddNewTaskToReadyList+0x100>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	429a      	cmp	r2, r3
 8004232:	d802      	bhi.n	800423a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004234:	4a2d      	ldr	r2, [pc, #180]	; (80042ec <prvAddNewTaskToReadyList+0x100>)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800423a:	4b2e      	ldr	r3, [pc, #184]	; (80042f4 <prvAddNewTaskToReadyList+0x108>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3301      	adds	r3, #1
 8004240:	4a2c      	ldr	r2, [pc, #176]	; (80042f4 <prvAddNewTaskToReadyList+0x108>)
 8004242:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004244:	4b2b      	ldr	r3, [pc, #172]	; (80042f4 <prvAddNewTaskToReadyList+0x108>)
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d016      	beq.n	8004280 <prvAddNewTaskToReadyList+0x94>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4618      	mov	r0, r3
 8004256:	f003 fdd3 	bl	8007e00 <SEGGER_SYSVIEW_OnTaskCreate>
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	461d      	mov	r5, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	461c      	mov	r4, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	1ae3      	subs	r3, r4, r3
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	462b      	mov	r3, r5
 800427c:	f001 ff9c 	bl	80061b8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4618      	mov	r0, r3
 8004284:	f003 fe40 	bl	8007f08 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428c:	2201      	movs	r2, #1
 800428e:	409a      	lsls	r2, r3
 8004290:	4b19      	ldr	r3, [pc, #100]	; (80042f8 <prvAddNewTaskToReadyList+0x10c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4313      	orrs	r3, r2
 8004296:	4a18      	ldr	r2, [pc, #96]	; (80042f8 <prvAddNewTaskToReadyList+0x10c>)
 8004298:	6013      	str	r3, [r2, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800429e:	4613      	mov	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4a15      	ldr	r2, [pc, #84]	; (80042fc <prvAddNewTaskToReadyList+0x110>)
 80042a8:	441a      	add	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	3304      	adds	r3, #4
 80042ae:	4619      	mov	r1, r3
 80042b0:	4610      	mov	r0, r2
 80042b2:	f7fe ff8e 	bl	80031d2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80042b6:	f001 fbd5 	bl	8005a64 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80042ba:	4b0d      	ldr	r3, [pc, #52]	; (80042f0 <prvAddNewTaskToReadyList+0x104>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00e      	beq.n	80042e0 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80042c2:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <prvAddNewTaskToReadyList+0x100>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d207      	bcs.n	80042e0 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80042d0:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <prvAddNewTaskToReadyList+0x114>)
 80042d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80042e0:	bf00      	nop
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bdb0      	pop	{r4, r5, r7, pc}
 80042e8:	2000036c 	.word	0x2000036c
 80042ec:	20000294 	.word	0x20000294
 80042f0:	20000378 	.word	0x20000378
 80042f4:	20000388 	.word	0x20000388
 80042f8:	20000374 	.word	0x20000374
 80042fc:	20000298 	.word	0x20000298
 8004300:	e000ed04 	.word	0xe000ed04

08004304 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800430c:	2300      	movs	r3, #0
 800430e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d01b      	beq.n	800434e <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8004316:	4b15      	ldr	r3, [pc, #84]	; (800436c <vTaskDelay+0x68>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <vTaskDelay+0x30>
        __asm volatile
 800431e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004322:	f383 8811 	msr	BASEPRI, r3
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	60bb      	str	r3, [r7, #8]
    }
 8004330:	bf00      	nop
 8004332:	e7fe      	b.n	8004332 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8004334:	f000 f880 	bl	8004438 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8004338:	6879      	ldr	r1, [r7, #4]
 800433a:	2023      	movs	r0, #35	; 0x23
 800433c:	f003 f862 	bl	8007404 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004340:	2100      	movs	r1, #0
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 fe24 	bl	8004f90 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004348:	f000 f884 	bl	8004454 <xTaskResumeAll>
 800434c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d107      	bne.n	8004364 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8004354:	4b06      	ldr	r3, [pc, #24]	; (8004370 <vTaskDelay+0x6c>)
 8004356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004364:	bf00      	nop
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	20000394 	.word	0x20000394
 8004370:	e000ed04 	.word	0xe000ed04

08004374 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800437a:	4b27      	ldr	r3, [pc, #156]	; (8004418 <vTaskStartScheduler+0xa4>)
 800437c:	9301      	str	r3, [sp, #4]
 800437e:	2300      	movs	r3, #0
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	2300      	movs	r3, #0
 8004384:	2282      	movs	r2, #130	; 0x82
 8004386:	4925      	ldr	r1, [pc, #148]	; (800441c <vTaskStartScheduler+0xa8>)
 8004388:	4825      	ldr	r0, [pc, #148]	; (8004420 <vTaskStartScheduler+0xac>)
 800438a:	f7ff fe57 	bl	800403c <xTaskCreate>
 800438e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d102      	bne.n	800439c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8004396:	f000 fe73 	bl	8005080 <xTimerCreateTimerTask>
 800439a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d124      	bne.n	80043ec <vTaskStartScheduler+0x78>
        __asm volatile
 80043a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	60bb      	str	r3, [r7, #8]
    }
 80043b4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80043b6:	4b1b      	ldr	r3, [pc, #108]	; (8004424 <vTaskStartScheduler+0xb0>)
 80043b8:	f04f 32ff 	mov.w	r2, #4294967295
 80043bc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80043be:	4b1a      	ldr	r3, [pc, #104]	; (8004428 <vTaskStartScheduler+0xb4>)
 80043c0:	2201      	movs	r2, #1
 80043c2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80043c4:	4b19      	ldr	r3, [pc, #100]	; (800442c <vTaskStartScheduler+0xb8>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80043ca:	4b19      	ldr	r3, [pc, #100]	; (8004430 <vTaskStartScheduler+0xbc>)
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	4b12      	ldr	r3, [pc, #72]	; (8004418 <vTaskStartScheduler+0xa4>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d102      	bne.n	80043dc <vTaskStartScheduler+0x68>
 80043d6:	f003 fcf7 	bl	8007dc8 <SEGGER_SYSVIEW_OnIdle>
 80043da:	e004      	b.n	80043e6 <vTaskStartScheduler+0x72>
 80043dc:	4b14      	ldr	r3, [pc, #80]	; (8004430 <vTaskStartScheduler+0xbc>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f003 fd4f 	bl	8007e84 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80043e6:	f001 f9ed 	bl	80057c4 <xPortStartScheduler>
 80043ea:	e00e      	b.n	800440a <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f2:	d10a      	bne.n	800440a <vTaskStartScheduler+0x96>
        __asm volatile
 80043f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	607b      	str	r3, [r7, #4]
    }
 8004406:	bf00      	nop
 8004408:	e7fe      	b.n	8004408 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800440a:	4b0a      	ldr	r3, [pc, #40]	; (8004434 <vTaskStartScheduler+0xc0>)
 800440c:	681b      	ldr	r3, [r3, #0]
}
 800440e:	bf00      	nop
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	20000390 	.word	0x20000390
 800441c:	080098cc 	.word	0x080098cc
 8004420:	08004aa5 	.word	0x08004aa5
 8004424:	2000038c 	.word	0x2000038c
 8004428:	20000378 	.word	0x20000378
 800442c:	20000370 	.word	0x20000370
 8004430:	20000294 	.word	0x20000294
 8004434:	2000000c 	.word	0x2000000c

08004438 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800443c:	4b04      	ldr	r3, [pc, #16]	; (8004450 <vTaskSuspendAll+0x18>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3301      	adds	r3, #1
 8004442:	4a03      	ldr	r2, [pc, #12]	; (8004450 <vTaskSuspendAll+0x18>)
 8004444:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004446:	bf00      	nop
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	20000394 	.word	0x20000394

08004454 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800445a:	2300      	movs	r3, #0
 800445c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800445e:	2300      	movs	r3, #0
 8004460:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004462:	4b43      	ldr	r3, [pc, #268]	; (8004570 <xTaskResumeAll+0x11c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10a      	bne.n	8004480 <xTaskResumeAll+0x2c>
        __asm volatile
 800446a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446e:	f383 8811 	msr	BASEPRI, r3
 8004472:	f3bf 8f6f 	isb	sy
 8004476:	f3bf 8f4f 	dsb	sy
 800447a:	603b      	str	r3, [r7, #0]
    }
 800447c:	bf00      	nop
 800447e:	e7fe      	b.n	800447e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004480:	f001 fac0 	bl	8005a04 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004484:	4b3a      	ldr	r3, [pc, #232]	; (8004570 <xTaskResumeAll+0x11c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	3b01      	subs	r3, #1
 800448a:	4a39      	ldr	r2, [pc, #228]	; (8004570 <xTaskResumeAll+0x11c>)
 800448c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800448e:	4b38      	ldr	r3, [pc, #224]	; (8004570 <xTaskResumeAll+0x11c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d165      	bne.n	8004562 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004496:	4b37      	ldr	r3, [pc, #220]	; (8004574 <xTaskResumeAll+0x120>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d061      	beq.n	8004562 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800449e:	e032      	b.n	8004506 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044a0:	4b35      	ldr	r3, [pc, #212]	; (8004578 <xTaskResumeAll+0x124>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	3318      	adds	r3, #24
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fe feed 	bl	800328c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	3304      	adds	r3, #4
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fe fee8 	bl	800328c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4618      	mov	r0, r3
 80044c0:	f003 fd22 	bl	8007f08 <SEGGER_SYSVIEW_OnTaskStartReady>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	2201      	movs	r2, #1
 80044ca:	409a      	lsls	r2, r3
 80044cc:	4b2b      	ldr	r3, [pc, #172]	; (800457c <xTaskResumeAll+0x128>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	4a2a      	ldr	r2, [pc, #168]	; (800457c <xTaskResumeAll+0x128>)
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044da:	4613      	mov	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4a27      	ldr	r2, [pc, #156]	; (8004580 <xTaskResumeAll+0x12c>)
 80044e4:	441a      	add	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	3304      	adds	r3, #4
 80044ea:	4619      	mov	r1, r3
 80044ec:	4610      	mov	r0, r2
 80044ee:	f7fe fe70 	bl	80031d2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f6:	4b23      	ldr	r3, [pc, #140]	; (8004584 <xTaskResumeAll+0x130>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d302      	bcc.n	8004506 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8004500:	4b21      	ldr	r3, [pc, #132]	; (8004588 <xTaskResumeAll+0x134>)
 8004502:	2201      	movs	r2, #1
 8004504:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004506:	4b1c      	ldr	r3, [pc, #112]	; (8004578 <xTaskResumeAll+0x124>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1c8      	bne.n	80044a0 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004514:	f000 fb5c 	bl	8004bd0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004518:	4b1c      	ldr	r3, [pc, #112]	; (800458c <xTaskResumeAll+0x138>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d010      	beq.n	8004546 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004524:	f000 f858 	bl	80045d8 <xTaskIncrementTick>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800452e:	4b16      	ldr	r3, [pc, #88]	; (8004588 <xTaskResumeAll+0x134>)
 8004530:	2201      	movs	r2, #1
 8004532:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3b01      	subs	r3, #1
 8004538:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1f1      	bne.n	8004524 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8004540:	4b12      	ldr	r3, [pc, #72]	; (800458c <xTaskResumeAll+0x138>)
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004546:	4b10      	ldr	r3, [pc, #64]	; (8004588 <xTaskResumeAll+0x134>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d009      	beq.n	8004562 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800454e:	2301      	movs	r3, #1
 8004550:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004552:	4b0f      	ldr	r3, [pc, #60]	; (8004590 <xTaskResumeAll+0x13c>)
 8004554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004562:	f001 fa7f 	bl	8005a64 <vPortExitCritical>

    return xAlreadyYielded;
 8004566:	68bb      	ldr	r3, [r7, #8]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	20000394 	.word	0x20000394
 8004574:	2000036c 	.word	0x2000036c
 8004578:	2000032c 	.word	0x2000032c
 800457c:	20000374 	.word	0x20000374
 8004580:	20000298 	.word	0x20000298
 8004584:	20000294 	.word	0x20000294
 8004588:	20000380 	.word	0x20000380
 800458c:	2000037c 	.word	0x2000037c
 8004590:	e000ed04 	.word	0xe000ed04

08004594 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800459a:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <xTaskGetTickCount+0x1c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80045a0:	687b      	ldr	r3, [r7, #4]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	20000370 	.word	0x20000370

080045b4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80045ba:	f001 fb0f 	bl	8005bdc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80045be:	2300      	movs	r3, #0
 80045c0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80045c2:	4b04      	ldr	r3, [pc, #16]	; (80045d4 <xTaskGetTickCountFromISR+0x20>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80045c8:	683b      	ldr	r3, [r7, #0]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20000370 	.word	0x20000370

080045d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80045de:	2300      	movs	r3, #0
 80045e0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045e2:	4b50      	ldr	r3, [pc, #320]	; (8004724 <xTaskIncrementTick+0x14c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f040 8092 	bne.w	8004710 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80045ec:	4b4e      	ldr	r3, [pc, #312]	; (8004728 <xTaskIncrementTick+0x150>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3301      	adds	r3, #1
 80045f2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80045f4:	4a4c      	ldr	r2, [pc, #304]	; (8004728 <xTaskIncrementTick+0x150>)
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d120      	bne.n	8004642 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004600:	4b4a      	ldr	r3, [pc, #296]	; (800472c <xTaskIncrementTick+0x154>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <xTaskIncrementTick+0x48>
        __asm volatile
 800460a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	603b      	str	r3, [r7, #0]
    }
 800461c:	bf00      	nop
 800461e:	e7fe      	b.n	800461e <xTaskIncrementTick+0x46>
 8004620:	4b42      	ldr	r3, [pc, #264]	; (800472c <xTaskIncrementTick+0x154>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	4b42      	ldr	r3, [pc, #264]	; (8004730 <xTaskIncrementTick+0x158>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a40      	ldr	r2, [pc, #256]	; (800472c <xTaskIncrementTick+0x154>)
 800462c:	6013      	str	r3, [r2, #0]
 800462e:	4a40      	ldr	r2, [pc, #256]	; (8004730 <xTaskIncrementTick+0x158>)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6013      	str	r3, [r2, #0]
 8004634:	4b3f      	ldr	r3, [pc, #252]	; (8004734 <xTaskIncrementTick+0x15c>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3301      	adds	r3, #1
 800463a:	4a3e      	ldr	r2, [pc, #248]	; (8004734 <xTaskIncrementTick+0x15c>)
 800463c:	6013      	str	r3, [r2, #0]
 800463e:	f000 fac7 	bl	8004bd0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004642:	4b3d      	ldr	r3, [pc, #244]	; (8004738 <xTaskIncrementTick+0x160>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	429a      	cmp	r2, r3
 800464a:	d34c      	bcc.n	80046e6 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800464c:	4b37      	ldr	r3, [pc, #220]	; (800472c <xTaskIncrementTick+0x154>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d104      	bne.n	8004660 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004656:	4b38      	ldr	r3, [pc, #224]	; (8004738 <xTaskIncrementTick+0x160>)
 8004658:	f04f 32ff 	mov.w	r2, #4294967295
 800465c:	601a      	str	r2, [r3, #0]
                    break;
 800465e:	e042      	b.n	80046e6 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004660:	4b32      	ldr	r3, [pc, #200]	; (800472c <xTaskIncrementTick+0x154>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	429a      	cmp	r2, r3
 8004676:	d203      	bcs.n	8004680 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004678:	4a2f      	ldr	r2, [pc, #188]	; (8004738 <xTaskIncrementTick+0x160>)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800467e:	e032      	b.n	80046e6 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	3304      	adds	r3, #4
 8004684:	4618      	mov	r0, r3
 8004686:	f7fe fe01 	bl	800328c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468e:	2b00      	cmp	r3, #0
 8004690:	d004      	beq.n	800469c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	3318      	adds	r3, #24
 8004696:	4618      	mov	r0, r3
 8004698:	f7fe fdf8 	bl	800328c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	4618      	mov	r0, r3
 80046a0:	f003 fc32 	bl	8007f08 <SEGGER_SYSVIEW_OnTaskStartReady>
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a8:	2201      	movs	r2, #1
 80046aa:	409a      	lsls	r2, r3
 80046ac:	4b23      	ldr	r3, [pc, #140]	; (800473c <xTaskIncrementTick+0x164>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	4a22      	ldr	r2, [pc, #136]	; (800473c <xTaskIncrementTick+0x164>)
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ba:	4613      	mov	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4a1f      	ldr	r2, [pc, #124]	; (8004740 <xTaskIncrementTick+0x168>)
 80046c4:	441a      	add	r2, r3
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	3304      	adds	r3, #4
 80046ca:	4619      	mov	r1, r3
 80046cc:	4610      	mov	r0, r2
 80046ce:	f7fe fd80 	bl	80031d2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d6:	4b1b      	ldr	r3, [pc, #108]	; (8004744 <xTaskIncrementTick+0x16c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046dc:	429a      	cmp	r2, r3
 80046de:	d3b5      	bcc.n	800464c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80046e0:	2301      	movs	r3, #1
 80046e2:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046e4:	e7b2      	b.n	800464c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80046e6:	4b17      	ldr	r3, [pc, #92]	; (8004744 <xTaskIncrementTick+0x16c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ec:	4914      	ldr	r1, [pc, #80]	; (8004740 <xTaskIncrementTick+0x168>)
 80046ee:	4613      	mov	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4413      	add	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	440b      	add	r3, r1
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d901      	bls.n	8004702 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80046fe:	2301      	movs	r3, #1
 8004700:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8004702:	4b11      	ldr	r3, [pc, #68]	; (8004748 <xTaskIncrementTick+0x170>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d007      	beq.n	800471a <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 800470a:	2301      	movs	r3, #1
 800470c:	617b      	str	r3, [r7, #20]
 800470e:	e004      	b.n	800471a <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004710:	4b0e      	ldr	r3, [pc, #56]	; (800474c <xTaskIncrementTick+0x174>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3301      	adds	r3, #1
 8004716:	4a0d      	ldr	r2, [pc, #52]	; (800474c <xTaskIncrementTick+0x174>)
 8004718:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800471a:	697b      	ldr	r3, [r7, #20]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3718      	adds	r7, #24
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	20000394 	.word	0x20000394
 8004728:	20000370 	.word	0x20000370
 800472c:	20000324 	.word	0x20000324
 8004730:	20000328 	.word	0x20000328
 8004734:	20000384 	.word	0x20000384
 8004738:	2000038c 	.word	0x2000038c
 800473c:	20000374 	.word	0x20000374
 8004740:	20000298 	.word	0x20000298
 8004744:	20000294 	.word	0x20000294
 8004748:	20000380 	.word	0x20000380
 800474c:	2000037c 	.word	0x2000037c

08004750 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004756:	4b2d      	ldr	r3, [pc, #180]	; (800480c <vTaskSwitchContext+0xbc>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800475e:	4b2c      	ldr	r3, [pc, #176]	; (8004810 <vTaskSwitchContext+0xc0>)
 8004760:	2201      	movs	r2, #1
 8004762:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004764:	e04d      	b.n	8004802 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8004766:	4b2a      	ldr	r3, [pc, #168]	; (8004810 <vTaskSwitchContext+0xc0>)
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800476c:	4b29      	ldr	r3, [pc, #164]	; (8004814 <vTaskSwitchContext+0xc4>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	fab3 f383 	clz	r3, r3
 8004778:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800477a:	7afb      	ldrb	r3, [r7, #11]
 800477c:	f1c3 031f 	rsb	r3, r3, #31
 8004780:	617b      	str	r3, [r7, #20]
 8004782:	4925      	ldr	r1, [pc, #148]	; (8004818 <vTaskSwitchContext+0xc8>)
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	4613      	mov	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	440b      	add	r3, r1
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10a      	bne.n	80047ac <vTaskSwitchContext+0x5c>
        __asm volatile
 8004796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	607b      	str	r3, [r7, #4]
    }
 80047a8:	bf00      	nop
 80047aa:	e7fe      	b.n	80047aa <vTaskSwitchContext+0x5a>
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	4613      	mov	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4a18      	ldr	r2, [pc, #96]	; (8004818 <vTaskSwitchContext+0xc8>)
 80047b8:	4413      	add	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	605a      	str	r2, [r3, #4]
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	3308      	adds	r3, #8
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d104      	bne.n	80047dc <vTaskSwitchContext+0x8c>
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	605a      	str	r2, [r3, #4]
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	4a0e      	ldr	r2, [pc, #56]	; (800481c <vTaskSwitchContext+0xcc>)
 80047e4:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80047e6:	4b0d      	ldr	r3, [pc, #52]	; (800481c <vTaskSwitchContext+0xcc>)
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	4b0d      	ldr	r3, [pc, #52]	; (8004820 <vTaskSwitchContext+0xd0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d102      	bne.n	80047f8 <vTaskSwitchContext+0xa8>
 80047f2:	f003 fae9 	bl	8007dc8 <SEGGER_SYSVIEW_OnIdle>
}
 80047f6:	e004      	b.n	8004802 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80047f8:	4b08      	ldr	r3, [pc, #32]	; (800481c <vTaskSwitchContext+0xcc>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f003 fb41 	bl	8007e84 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8004802:	bf00      	nop
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	20000394 	.word	0x20000394
 8004810:	20000380 	.word	0x20000380
 8004814:	20000374 	.word	0x20000374
 8004818:	20000298 	.word	0x20000298
 800481c:	20000294 	.word	0x20000294
 8004820:	20000390 	.word	0x20000390

08004824 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10a      	bne.n	800484a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	60fb      	str	r3, [r7, #12]
    }
 8004846:	bf00      	nop
 8004848:	e7fe      	b.n	8004848 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800484a:	4b07      	ldr	r3, [pc, #28]	; (8004868 <vTaskPlaceOnEventList+0x44>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3318      	adds	r3, #24
 8004850:	4619      	mov	r1, r3
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7fe fce1 	bl	800321a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004858:	2101      	movs	r1, #1
 800485a:	6838      	ldr	r0, [r7, #0]
 800485c:	f000 fb98 	bl	8004f90 <prvAddCurrentTaskToDelayedList>
}
 8004860:	bf00      	nop
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	20000294 	.word	0x20000294

0800486c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10a      	bne.n	8004894 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800487e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	617b      	str	r3, [r7, #20]
    }
 8004890:	bf00      	nop
 8004892:	e7fe      	b.n	8004892 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004894:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <vTaskPlaceOnEventListRestricted+0x58>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	3318      	adds	r3, #24
 800489a:	4619      	mov	r1, r3
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f7fe fc98 	bl	80031d2 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d002      	beq.n	80048ae <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80048a8:	f04f 33ff 	mov.w	r3, #4294967295
 80048ac:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80048ae:	2024      	movs	r0, #36	; 0x24
 80048b0:	f002 fd8a 	bl	80073c8 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80048b4:	6879      	ldr	r1, [r7, #4]
 80048b6:	68b8      	ldr	r0, [r7, #8]
 80048b8:	f000 fb6a 	bl	8004f90 <prvAddCurrentTaskToDelayedList>
    }
 80048bc:	bf00      	nop
 80048be:	3718      	adds	r7, #24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	20000294 	.word	0x20000294

080048c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10a      	bne.n	80048f4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80048de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e2:	f383 8811 	msr	BASEPRI, r3
 80048e6:	f3bf 8f6f 	isb	sy
 80048ea:	f3bf 8f4f 	dsb	sy
 80048ee:	60fb      	str	r3, [r7, #12]
    }
 80048f0:	bf00      	nop
 80048f2:	e7fe      	b.n	80048f2 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	3318      	adds	r3, #24
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7fe fcc7 	bl	800328c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048fe:	4b1f      	ldr	r3, [pc, #124]	; (800497c <xTaskRemoveFromEventList+0xb4>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d120      	bne.n	8004948 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	3304      	adds	r3, #4
 800490a:	4618      	mov	r0, r3
 800490c:	f7fe fcbe 	bl	800328c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	4618      	mov	r0, r3
 8004914:	f003 faf8 	bl	8007f08 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491c:	2201      	movs	r2, #1
 800491e:	409a      	lsls	r2, r3
 8004920:	4b17      	ldr	r3, [pc, #92]	; (8004980 <xTaskRemoveFromEventList+0xb8>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4313      	orrs	r3, r2
 8004926:	4a16      	ldr	r2, [pc, #88]	; (8004980 <xTaskRemoveFromEventList+0xb8>)
 8004928:	6013      	str	r3, [r2, #0]
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800492e:	4613      	mov	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4a13      	ldr	r2, [pc, #76]	; (8004984 <xTaskRemoveFromEventList+0xbc>)
 8004938:	441a      	add	r2, r3
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	3304      	adds	r3, #4
 800493e:	4619      	mov	r1, r3
 8004940:	4610      	mov	r0, r2
 8004942:	f7fe fc46 	bl	80031d2 <vListInsertEnd>
 8004946:	e005      	b.n	8004954 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	3318      	adds	r3, #24
 800494c:	4619      	mov	r1, r3
 800494e:	480e      	ldr	r0, [pc, #56]	; (8004988 <xTaskRemoveFromEventList+0xc0>)
 8004950:	f7fe fc3f 	bl	80031d2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004958:	4b0c      	ldr	r3, [pc, #48]	; (800498c <xTaskRemoveFromEventList+0xc4>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495e:	429a      	cmp	r2, r3
 8004960:	d905      	bls.n	800496e <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004962:	2301      	movs	r3, #1
 8004964:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004966:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <xTaskRemoveFromEventList+0xc8>)
 8004968:	2201      	movs	r2, #1
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	e001      	b.n	8004972 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800496e:	2300      	movs	r3, #0
 8004970:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004972:	697b      	ldr	r3, [r7, #20]
}
 8004974:	4618      	mov	r0, r3
 8004976:	3718      	adds	r7, #24
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	20000394 	.word	0x20000394
 8004980:	20000374 	.word	0x20000374
 8004984:	20000298 	.word	0x20000298
 8004988:	2000032c 	.word	0x2000032c
 800498c:	20000294 	.word	0x20000294
 8004990:	20000380 	.word	0x20000380

08004994 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800499c:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <vTaskInternalSetTimeOutState+0x24>)
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80049a4:	4b05      	ldr	r3, [pc, #20]	; (80049bc <vTaskInternalSetTimeOutState+0x28>)
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	605a      	str	r2, [r3, #4]
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	20000384 	.word	0x20000384
 80049bc:	20000370 	.word	0x20000370

080049c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b088      	sub	sp, #32
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10a      	bne.n	80049e6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80049d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d4:	f383 8811 	msr	BASEPRI, r3
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	613b      	str	r3, [r7, #16]
    }
 80049e2:	bf00      	nop
 80049e4:	e7fe      	b.n	80049e4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10a      	bne.n	8004a02 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80049ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f0:	f383 8811 	msr	BASEPRI, r3
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	60fb      	str	r3, [r7, #12]
    }
 80049fe:	bf00      	nop
 8004a00:	e7fe      	b.n	8004a00 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004a02:	f000 ffff 	bl	8005a04 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004a06:	4b1f      	ldr	r3, [pc, #124]	; (8004a84 <xTaskCheckForTimeOut+0xc4>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1e:	d102      	bne.n	8004a26 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004a20:	2300      	movs	r3, #0
 8004a22:	61fb      	str	r3, [r7, #28]
 8004a24:	e026      	b.n	8004a74 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	4b17      	ldr	r3, [pc, #92]	; (8004a88 <xTaskCheckForTimeOut+0xc8>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d00a      	beq.n	8004a48 <xTaskCheckForTimeOut+0x88>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d305      	bcc.n	8004a48 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	e015      	b.n	8004a74 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d20b      	bcs.n	8004a6a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	1ad2      	subs	r2, r2, r3
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7ff ff98 	bl	8004994 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004a64:	2300      	movs	r3, #0
 8004a66:	61fb      	str	r3, [r7, #28]
 8004a68:	e004      	b.n	8004a74 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004a70:	2301      	movs	r3, #1
 8004a72:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004a74:	f000 fff6 	bl	8005a64 <vPortExitCritical>

    return xReturn;
 8004a78:	69fb      	ldr	r3, [r7, #28]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3720      	adds	r7, #32
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	20000370 	.word	0x20000370
 8004a88:	20000384 	.word	0x20000384

08004a8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004a90:	4b03      	ldr	r3, [pc, #12]	; (8004aa0 <vTaskMissedYield+0x14>)
 8004a92:	2201      	movs	r2, #1
 8004a94:	601a      	str	r2, [r3, #0]
}
 8004a96:	bf00      	nop
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	20000380 	.word	0x20000380

08004aa4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004aac:	f000 f852 	bl	8004b54 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ab0:	4b06      	ldr	r3, [pc, #24]	; (8004acc <prvIdleTask+0x28>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d9f9      	bls.n	8004aac <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004ab8:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <prvIdleTask+0x2c>)
 8004aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004ac8:	e7f0      	b.n	8004aac <prvIdleTask+0x8>
 8004aca:	bf00      	nop
 8004acc:	20000298 	.word	0x20000298
 8004ad0:	e000ed04 	.word	0xe000ed04

08004ad4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ada:	2300      	movs	r3, #0
 8004adc:	607b      	str	r3, [r7, #4]
 8004ade:	e00c      	b.n	8004afa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4a12      	ldr	r2, [pc, #72]	; (8004b34 <prvInitialiseTaskLists+0x60>)
 8004aec:	4413      	add	r3, r2
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fe fb42 	bl	8003178 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3301      	adds	r3, #1
 8004af8:	607b      	str	r3, [r7, #4]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b04      	cmp	r3, #4
 8004afe:	d9ef      	bls.n	8004ae0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004b00:	480d      	ldr	r0, [pc, #52]	; (8004b38 <prvInitialiseTaskLists+0x64>)
 8004b02:	f7fe fb39 	bl	8003178 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004b06:	480d      	ldr	r0, [pc, #52]	; (8004b3c <prvInitialiseTaskLists+0x68>)
 8004b08:	f7fe fb36 	bl	8003178 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004b0c:	480c      	ldr	r0, [pc, #48]	; (8004b40 <prvInitialiseTaskLists+0x6c>)
 8004b0e:	f7fe fb33 	bl	8003178 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004b12:	480c      	ldr	r0, [pc, #48]	; (8004b44 <prvInitialiseTaskLists+0x70>)
 8004b14:	f7fe fb30 	bl	8003178 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004b18:	480b      	ldr	r0, [pc, #44]	; (8004b48 <prvInitialiseTaskLists+0x74>)
 8004b1a:	f7fe fb2d 	bl	8003178 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004b1e:	4b0b      	ldr	r3, [pc, #44]	; (8004b4c <prvInitialiseTaskLists+0x78>)
 8004b20:	4a05      	ldr	r2, [pc, #20]	; (8004b38 <prvInitialiseTaskLists+0x64>)
 8004b22:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b24:	4b0a      	ldr	r3, [pc, #40]	; (8004b50 <prvInitialiseTaskLists+0x7c>)
 8004b26:	4a05      	ldr	r2, [pc, #20]	; (8004b3c <prvInitialiseTaskLists+0x68>)
 8004b28:	601a      	str	r2, [r3, #0]
}
 8004b2a:	bf00      	nop
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	20000298 	.word	0x20000298
 8004b38:	200002fc 	.word	0x200002fc
 8004b3c:	20000310 	.word	0x20000310
 8004b40:	2000032c 	.word	0x2000032c
 8004b44:	20000340 	.word	0x20000340
 8004b48:	20000358 	.word	0x20000358
 8004b4c:	20000324 	.word	0x20000324
 8004b50:	20000328 	.word	0x20000328

08004b54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b5a:	e019      	b.n	8004b90 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004b5c:	f000 ff52 	bl	8005a04 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b60:	4b10      	ldr	r3, [pc, #64]	; (8004ba4 <prvCheckTasksWaitingTermination+0x50>)
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	3304      	adds	r3, #4
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7fe fb8d 	bl	800328c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004b72:	4b0d      	ldr	r3, [pc, #52]	; (8004ba8 <prvCheckTasksWaitingTermination+0x54>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	3b01      	subs	r3, #1
 8004b78:	4a0b      	ldr	r2, [pc, #44]	; (8004ba8 <prvCheckTasksWaitingTermination+0x54>)
 8004b7a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004b7c:	4b0b      	ldr	r3, [pc, #44]	; (8004bac <prvCheckTasksWaitingTermination+0x58>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3b01      	subs	r3, #1
 8004b82:	4a0a      	ldr	r2, [pc, #40]	; (8004bac <prvCheckTasksWaitingTermination+0x58>)
 8004b84:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004b86:	f000 ff6d 	bl	8005a64 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f810 	bl	8004bb0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b90:	4b06      	ldr	r3, [pc, #24]	; (8004bac <prvCheckTasksWaitingTermination+0x58>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1e1      	bne.n	8004b5c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004b98:	bf00      	nop
 8004b9a:	bf00      	nop
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20000340 	.word	0x20000340
 8004ba8:	2000036c 	.word	0x2000036c
 8004bac:	20000354 	.word	0x20000354

08004bb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f001 f92d 	bl	8005e1c <vPortFree>
                vPortFree( pxTCB );
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f001 f92a 	bl	8005e1c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004bc8:	bf00      	nop
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bd4:	4b0a      	ldr	r3, [pc, #40]	; (8004c00 <prvResetNextTaskUnblockTime+0x30>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d104      	bne.n	8004be8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004bde:	4b09      	ldr	r3, [pc, #36]	; (8004c04 <prvResetNextTaskUnblockTime+0x34>)
 8004be0:	f04f 32ff 	mov.w	r2, #4294967295
 8004be4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004be6:	e005      	b.n	8004bf4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004be8:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <prvResetNextTaskUnblockTime+0x30>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a04      	ldr	r2, [pc, #16]	; (8004c04 <prvResetNextTaskUnblockTime+0x34>)
 8004bf2:	6013      	str	r3, [r2, #0]
}
 8004bf4:	bf00      	nop
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	20000324 	.word	0x20000324
 8004c04:	2000038c 	.word	0x2000038c

08004c08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004c0e:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <xTaskGetSchedulerState+0x34>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d102      	bne.n	8004c1c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004c16:	2301      	movs	r3, #1
 8004c18:	607b      	str	r3, [r7, #4]
 8004c1a:	e008      	b.n	8004c2e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c1c:	4b08      	ldr	r3, [pc, #32]	; (8004c40 <xTaskGetSchedulerState+0x38>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d102      	bne.n	8004c2a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004c24:	2302      	movs	r3, #2
 8004c26:	607b      	str	r3, [r7, #4]
 8004c28:	e001      	b.n	8004c2e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004c2e:	687b      	ldr	r3, [r7, #4]
    }
 8004c30:	4618      	mov	r0, r3
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	20000378 	.word	0x20000378
 8004c40:	20000394 	.word	0x20000394

08004c44 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8004c50:	2300      	movs	r3, #0
 8004c52:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d063      	beq.n	8004d22 <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c5e:	4b33      	ldr	r3, [pc, #204]	; (8004d2c <xTaskPriorityInherit+0xe8>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d253      	bcs.n	8004d10 <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	db06      	blt.n	8004c7e <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c70:	4b2e      	ldr	r3, [pc, #184]	; (8004d2c <xTaskPriorityInherit+0xe8>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c76:	f1c3 0205 	rsb	r2, r3, #5
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	6959      	ldr	r1, [r3, #20]
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c86:	4613      	mov	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4a28      	ldr	r2, [pc, #160]	; (8004d30 <xTaskPriorityInherit+0xec>)
 8004c90:	4413      	add	r3, r2
 8004c92:	4299      	cmp	r1, r3
 8004c94:	d12f      	bne.n	8004cf6 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	3304      	adds	r3, #4
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7fe faf6 	bl	800328c <uxListRemove>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10a      	bne.n	8004cbc <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004caa:	2201      	movs	r2, #1
 8004cac:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb0:	43da      	mvns	r2, r3
 8004cb2:	4b20      	ldr	r3, [pc, #128]	; (8004d34 <xTaskPriorityInherit+0xf0>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	4a1e      	ldr	r2, [pc, #120]	; (8004d34 <xTaskPriorityInherit+0xf0>)
 8004cba:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004cbc:	4b1b      	ldr	r3, [pc, #108]	; (8004d2c <xTaskPriorityInherit+0xe8>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cca:	2201      	movs	r2, #1
 8004ccc:	409a      	lsls	r2, r3
 8004cce:	4b19      	ldr	r3, [pc, #100]	; (8004d34 <xTaskPriorityInherit+0xf0>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	4a17      	ldr	r2, [pc, #92]	; (8004d34 <xTaskPriorityInherit+0xf0>)
 8004cd6:	6013      	str	r3, [r2, #0]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cdc:	4613      	mov	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4a12      	ldr	r2, [pc, #72]	; (8004d30 <xTaskPriorityInherit+0xec>)
 8004ce6:	441a      	add	r2, r3
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	3304      	adds	r3, #4
 8004cec:	4619      	mov	r1, r3
 8004cee:	4610      	mov	r0, r2
 8004cf0:	f7fe fa6f 	bl	80031d2 <vListInsertEnd>
 8004cf4:	e004      	b.n	8004d00 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004cf6:	4b0d      	ldr	r3, [pc, #52]	; (8004d2c <xTaskPriorityInherit+0xe8>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4619      	mov	r1, r3
 8004d04:	2049      	movs	r0, #73	; 0x49
 8004d06:	f002 fb7d 	bl	8007404 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	60fb      	str	r3, [r7, #12]
 8004d0e:	e008      	b.n	8004d22 <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d14:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <xTaskPriorityInherit+0xe8>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d201      	bcs.n	8004d22 <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004d22:	68fb      	ldr	r3, [r7, #12]
    }
 8004d24:	4618      	mov	r0, r3
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	20000294 	.word	0x20000294
 8004d30:	20000298 	.word	0x20000298
 8004d34:	20000374 	.word	0x20000374

08004d38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004d44:	2300      	movs	r3, #0
 8004d46:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d068      	beq.n	8004e20 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004d4e:	4b37      	ldr	r3, [pc, #220]	; (8004e2c <xTaskPriorityDisinherit+0xf4>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d00a      	beq.n	8004d6e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8004d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5c:	f383 8811 	msr	BASEPRI, r3
 8004d60:	f3bf 8f6f 	isb	sy
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	60fb      	str	r3, [r7, #12]
    }
 8004d6a:	bf00      	nop
 8004d6c:	e7fe      	b.n	8004d6c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10a      	bne.n	8004d8c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8004d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7a:	f383 8811 	msr	BASEPRI, r3
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f3bf 8f4f 	dsb	sy
 8004d86:	60bb      	str	r3, [r7, #8]
    }
 8004d88:	bf00      	nop
 8004d8a:	e7fe      	b.n	8004d8a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d90:	1e5a      	subs	r2, r3, #1
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d03e      	beq.n	8004e20 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d13a      	bne.n	8004e20 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	3304      	adds	r3, #4
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fe fa6c 	bl	800328c <uxListRemove>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10a      	bne.n	8004dd0 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	43da      	mvns	r2, r3
 8004dc6:	4b1a      	ldr	r3, [pc, #104]	; (8004e30 <xTaskPriorityDisinherit+0xf8>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	4a18      	ldr	r2, [pc, #96]	; (8004e30 <xTaskPriorityDisinherit+0xf8>)
 8004dce:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	204a      	movs	r0, #74	; 0x4a
 8004dd6:	f002 fb15 	bl	8007404 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de6:	f1c3 0205 	rsb	r2, r3, #5
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df2:	2201      	movs	r2, #1
 8004df4:	409a      	lsls	r2, r3
 8004df6:	4b0e      	ldr	r3, [pc, #56]	; (8004e30 <xTaskPriorityDisinherit+0xf8>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	4a0c      	ldr	r2, [pc, #48]	; (8004e30 <xTaskPriorityDisinherit+0xf8>)
 8004dfe:	6013      	str	r3, [r2, #0]
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e04:	4613      	mov	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4a09      	ldr	r2, [pc, #36]	; (8004e34 <xTaskPriorityDisinherit+0xfc>)
 8004e0e:	441a      	add	r2, r3
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	3304      	adds	r3, #4
 8004e14:	4619      	mov	r1, r3
 8004e16:	4610      	mov	r0, r2
 8004e18:	f7fe f9db 	bl	80031d2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004e20:	697b      	ldr	r3, [r7, #20]
    }
 8004e22:	4618      	mov	r0, r3
 8004e24:	3718      	adds	r7, #24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	20000294 	.word	0x20000294
 8004e30:	20000374 	.word	0x20000374
 8004e34:	20000298 	.word	0x20000298

08004e38 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b088      	sub	sp, #32
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004e46:	2301      	movs	r3, #1
 8004e48:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 8081 	beq.w	8004f54 <vTaskPriorityDisinheritAfterTimeout+0x11c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10a      	bne.n	8004e70 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 8004e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5e:	f383 8811 	msr	BASEPRI, r3
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	60fb      	str	r3, [r7, #12]
    }
 8004e6c:	bf00      	nop
 8004e6e:	e7fe      	b.n	8004e6e <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d902      	bls.n	8004e80 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	61fb      	str	r3, [r7, #28]
 8004e7e:	e002      	b.n	8004e86 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e84:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8a:	69fa      	ldr	r2, [r7, #28]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d061      	beq.n	8004f54 <vTaskPriorityDisinheritAfterTimeout+0x11c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d15c      	bne.n	8004f54 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004e9a:	4b30      	ldr	r3, [pc, #192]	; (8004f5c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d10a      	bne.n	8004eba <vTaskPriorityDisinheritAfterTimeout+0x82>
        __asm volatile
 8004ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea8:	f383 8811 	msr	BASEPRI, r3
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	60bb      	str	r3, [r7, #8]
    }
 8004eb6:	bf00      	nop
 8004eb8:	e7fe      	b.n	8004eb8 <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	204a      	movs	r0, #74	; 0x4a
 8004ec0:	f002 faa0 	bl	8007404 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec8:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	69fa      	ldr	r2, [r7, #28]
 8004ece:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	db04      	blt.n	8004ee2 <vTaskPriorityDisinheritAfterTimeout+0xaa>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	f1c3 0205 	rsb	r2, r3, #5
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	6959      	ldr	r1, [r3, #20]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4a1b      	ldr	r2, [pc, #108]	; (8004f60 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8004ef2:	4413      	add	r3, r2
 8004ef4:	4299      	cmp	r1, r3
 8004ef6:	d12d      	bne.n	8004f54 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	3304      	adds	r3, #4
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7fe f9c5 	bl	800328c <uxListRemove>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10a      	bne.n	8004f1e <vTaskPriorityDisinheritAfterTimeout+0xe6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f12:	43da      	mvns	r2, r3
 8004f14:	4b13      	ldr	r3, [pc, #76]	; (8004f64 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	4a12      	ldr	r2, [pc, #72]	; (8004f64 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004f1c:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f002 fff1 	bl	8007f08 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	409a      	lsls	r2, r3
 8004f2e:	4b0d      	ldr	r3, [pc, #52]	; (8004f64 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	4a0b      	ldr	r2, [pc, #44]	; (8004f64 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004f36:	6013      	str	r3, [r2, #0]
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4a06      	ldr	r2, [pc, #24]	; (8004f60 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8004f46:	441a      	add	r2, r3
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	4610      	mov	r0, r2
 8004f50:	f7fe f93f 	bl	80031d2 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004f54:	bf00      	nop
 8004f56:	3720      	adds	r7, #32
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	20000294 	.word	0x20000294
 8004f60:	20000298 	.word	0x20000298
 8004f64:	20000374 	.word	0x20000374

08004f68 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8004f6c:	4b07      	ldr	r3, [pc, #28]	; (8004f8c <pvTaskIncrementMutexHeldCount+0x24>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d004      	beq.n	8004f7e <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8004f74:	4b05      	ldr	r3, [pc, #20]	; (8004f8c <pvTaskIncrementMutexHeldCount+0x24>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f7a:	3201      	adds	r2, #1
 8004f7c:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8004f7e:	4b03      	ldr	r3, [pc, #12]	; (8004f8c <pvTaskIncrementMutexHeldCount+0x24>)
 8004f80:	681b      	ldr	r3, [r3, #0]
    }
 8004f82:	4618      	mov	r0, r3
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	20000294 	.word	0x20000294

08004f90 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004f9a:	4b32      	ldr	r3, [pc, #200]	; (8005064 <prvAddCurrentTaskToDelayedList+0xd4>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fa0:	4b31      	ldr	r3, [pc, #196]	; (8005068 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	3304      	adds	r3, #4
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7fe f970 	bl	800328c <uxListRemove>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10b      	bne.n	8004fca <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004fb2:	4b2d      	ldr	r3, [pc, #180]	; (8005068 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb8:	2201      	movs	r2, #1
 8004fba:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbe:	43da      	mvns	r2, r3
 8004fc0:	4b2a      	ldr	r3, [pc, #168]	; (800506c <prvAddCurrentTaskToDelayedList+0xdc>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	4a29      	ldr	r2, [pc, #164]	; (800506c <prvAddCurrentTaskToDelayedList+0xdc>)
 8004fc8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd0:	d110      	bne.n	8004ff4 <prvAddCurrentTaskToDelayedList+0x64>
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00d      	beq.n	8004ff4 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8004fd8:	4b23      	ldr	r3, [pc, #140]	; (8005068 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	211b      	movs	r1, #27
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f002 ffd4 	bl	8007f8c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fe4:	4b20      	ldr	r3, [pc, #128]	; (8005068 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	3304      	adds	r3, #4
 8004fea:	4619      	mov	r1, r3
 8004fec:	4820      	ldr	r0, [pc, #128]	; (8005070 <prvAddCurrentTaskToDelayedList+0xe0>)
 8004fee:	f7fe f8f0 	bl	80031d2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004ff2:	e032      	b.n	800505a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ffc:	4b1a      	ldr	r3, [pc, #104]	; (8005068 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	429a      	cmp	r2, r3
 800500a:	d20f      	bcs.n	800502c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800500c:	4b16      	ldr	r3, [pc, #88]	; (8005068 <prvAddCurrentTaskToDelayedList+0xd8>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2104      	movs	r1, #4
 8005012:	4618      	mov	r0, r3
 8005014:	f002 ffba 	bl	8007f8c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005018:	4b16      	ldr	r3, [pc, #88]	; (8005074 <prvAddCurrentTaskToDelayedList+0xe4>)
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	4b12      	ldr	r3, [pc, #72]	; (8005068 <prvAddCurrentTaskToDelayedList+0xd8>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3304      	adds	r3, #4
 8005022:	4619      	mov	r1, r3
 8005024:	4610      	mov	r0, r2
 8005026:	f7fe f8f8 	bl	800321a <vListInsert>
}
 800502a:	e016      	b.n	800505a <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800502c:	4b0e      	ldr	r3, [pc, #56]	; (8005068 <prvAddCurrentTaskToDelayedList+0xd8>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2104      	movs	r1, #4
 8005032:	4618      	mov	r0, r3
 8005034:	f002 ffaa 	bl	8007f8c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005038:	4b0f      	ldr	r3, [pc, #60]	; (8005078 <prvAddCurrentTaskToDelayedList+0xe8>)
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	4b0a      	ldr	r3, [pc, #40]	; (8005068 <prvAddCurrentTaskToDelayedList+0xd8>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	3304      	adds	r3, #4
 8005042:	4619      	mov	r1, r3
 8005044:	4610      	mov	r0, r2
 8005046:	f7fe f8e8 	bl	800321a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800504a:	4b0c      	ldr	r3, [pc, #48]	; (800507c <prvAddCurrentTaskToDelayedList+0xec>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	429a      	cmp	r2, r3
 8005052:	d202      	bcs.n	800505a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8005054:	4a09      	ldr	r2, [pc, #36]	; (800507c <prvAddCurrentTaskToDelayedList+0xec>)
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	6013      	str	r3, [r2, #0]
}
 800505a:	bf00      	nop
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	20000370 	.word	0x20000370
 8005068:	20000294 	.word	0x20000294
 800506c:	20000374 	.word	0x20000374
 8005070:	20000358 	.word	0x20000358
 8005074:	20000328 	.word	0x20000328
 8005078:	20000324 	.word	0x20000324
 800507c:	2000038c 	.word	0x2000038c

08005080 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005086:	2300      	movs	r3, #0
 8005088:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800508a:	f000 fad5 	bl	8005638 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800508e:	4b11      	ldr	r3, [pc, #68]	; (80050d4 <xTimerCreateTimerTask+0x54>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00b      	beq.n	80050ae <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8005096:	4b10      	ldr	r3, [pc, #64]	; (80050d8 <xTimerCreateTimerTask+0x58>)
 8005098:	9301      	str	r3, [sp, #4]
 800509a:	2302      	movs	r3, #2
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	2300      	movs	r3, #0
 80050a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80050a4:	490d      	ldr	r1, [pc, #52]	; (80050dc <xTimerCreateTimerTask+0x5c>)
 80050a6:	480e      	ldr	r0, [pc, #56]	; (80050e0 <xTimerCreateTimerTask+0x60>)
 80050a8:	f7fe ffc8 	bl	800403c <xTaskCreate>
 80050ac:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10a      	bne.n	80050ca <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80050b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b8:	f383 8811 	msr	BASEPRI, r3
 80050bc:	f3bf 8f6f 	isb	sy
 80050c0:	f3bf 8f4f 	dsb	sy
 80050c4:	603b      	str	r3, [r7, #0]
    }
 80050c6:	bf00      	nop
 80050c8:	e7fe      	b.n	80050c8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80050ca:	687b      	ldr	r3, [r7, #4]
    }
 80050cc:	4618      	mov	r0, r3
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	200003c8 	.word	0x200003c8
 80050d8:	200003cc 	.word	0x200003cc
 80050dc:	080098d4 	.word	0x080098d4
 80050e0:	08005219 	.word	0x08005219

080050e4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b08a      	sub	sp, #40	; 0x28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
 80050f0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80050f2:	2300      	movs	r3, #0
 80050f4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10a      	bne.n	8005112 <xTimerGenericCommand+0x2e>
        __asm volatile
 80050fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	623b      	str	r3, [r7, #32]
    }
 800510e:	bf00      	nop
 8005110:	e7fe      	b.n	8005110 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8005112:	4b1a      	ldr	r3, [pc, #104]	; (800517c <xTimerGenericCommand+0x98>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d02a      	beq.n	8005170 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	2b05      	cmp	r3, #5
 800512a:	dc18      	bgt.n	800515e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800512c:	f7ff fd6c 	bl	8004c08 <xTaskGetSchedulerState>
 8005130:	4603      	mov	r3, r0
 8005132:	2b02      	cmp	r3, #2
 8005134:	d109      	bne.n	800514a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005136:	4b11      	ldr	r3, [pc, #68]	; (800517c <xTimerGenericCommand+0x98>)
 8005138:	6818      	ldr	r0, [r3, #0]
 800513a:	f107 0114 	add.w	r1, r7, #20
 800513e:	2300      	movs	r3, #0
 8005140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005142:	f7fe f9bd 	bl	80034c0 <xQueueGenericSend>
 8005146:	6278      	str	r0, [r7, #36]	; 0x24
 8005148:	e012      	b.n	8005170 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800514a:	4b0c      	ldr	r3, [pc, #48]	; (800517c <xTimerGenericCommand+0x98>)
 800514c:	6818      	ldr	r0, [r3, #0]
 800514e:	f107 0114 	add.w	r1, r7, #20
 8005152:	2300      	movs	r3, #0
 8005154:	2200      	movs	r2, #0
 8005156:	f7fe f9b3 	bl	80034c0 <xQueueGenericSend>
 800515a:	6278      	str	r0, [r7, #36]	; 0x24
 800515c:	e008      	b.n	8005170 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800515e:	4b07      	ldr	r3, [pc, #28]	; (800517c <xTimerGenericCommand+0x98>)
 8005160:	6818      	ldr	r0, [r3, #0]
 8005162:	f107 0114 	add.w	r1, r7, #20
 8005166:	2300      	movs	r3, #0
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	f7fe facf 	bl	800370c <xQueueGenericSendFromISR>
 800516e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8005172:	4618      	mov	r0, r3
 8005174:	3728      	adds	r7, #40	; 0x28
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	200003c8 	.word	0x200003c8

08005180 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005180:	b580      	push	{r7, lr}
 8005182:	b088      	sub	sp, #32
 8005184:	af02      	add	r7, sp, #8
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800518a:	4b22      	ldr	r3, [pc, #136]	; (8005214 <prvProcessExpiredTimer+0x94>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	3304      	adds	r3, #4
 8005198:	4618      	mov	r0, r3
 800519a:	f7fe f877 	bl	800328c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051a4:	f003 0304 	and.w	r3, r3, #4
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d022      	beq.n	80051f2 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	699a      	ldr	r2, [r3, #24]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	18d1      	adds	r1, r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	6978      	ldr	r0, [r7, #20]
 80051ba:	f000 f8d1 	bl	8005360 <prvInsertTimerInActiveList>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d01f      	beq.n	8005204 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051c4:	2300      	movs	r3, #0
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	2300      	movs	r3, #0
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	2100      	movs	r1, #0
 80051ce:	6978      	ldr	r0, [r7, #20]
 80051d0:	f7ff ff88 	bl	80050e4 <xTimerGenericCommand>
 80051d4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d113      	bne.n	8005204 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	60fb      	str	r3, [r7, #12]
    }
 80051ee:	bf00      	nop
 80051f0:	e7fe      	b.n	80051f0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051f8:	f023 0301 	bic.w	r3, r3, #1
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	6978      	ldr	r0, [r7, #20]
 800520a:	4798      	blx	r3
    }
 800520c:	bf00      	nop
 800520e:	3718      	adds	r7, #24
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	200003c0 	.word	0x200003c0

08005218 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005220:	f107 0308 	add.w	r3, r7, #8
 8005224:	4618      	mov	r0, r3
 8005226:	f000 f857 	bl	80052d8 <prvGetNextExpireTime>
 800522a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	4619      	mov	r1, r3
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 f803 	bl	800523c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005236:	f000 f8d5 	bl	80053e4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800523a:	e7f1      	b.n	8005220 <prvTimerTask+0x8>

0800523c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005246:	f7ff f8f7 	bl	8004438 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800524a:	f107 0308 	add.w	r3, r7, #8
 800524e:	4618      	mov	r0, r3
 8005250:	f000 f866 	bl	8005320 <prvSampleTimeNow>
 8005254:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d130      	bne.n	80052be <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10a      	bne.n	8005278 <prvProcessTimerOrBlockTask+0x3c>
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	429a      	cmp	r2, r3
 8005268:	d806      	bhi.n	8005278 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800526a:	f7ff f8f3 	bl	8004454 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800526e:	68f9      	ldr	r1, [r7, #12]
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7ff ff85 	bl	8005180 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005276:	e024      	b.n	80052c2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d008      	beq.n	8005290 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800527e:	4b13      	ldr	r3, [pc, #76]	; (80052cc <prvProcessTimerOrBlockTask+0x90>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <prvProcessTimerOrBlockTask+0x50>
 8005288:	2301      	movs	r3, #1
 800528a:	e000      	b.n	800528e <prvProcessTimerOrBlockTask+0x52>
 800528c:	2300      	movs	r3, #0
 800528e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005290:	4b0f      	ldr	r3, [pc, #60]	; (80052d0 <prvProcessTimerOrBlockTask+0x94>)
 8005292:	6818      	ldr	r0, [r3, #0]
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	4619      	mov	r1, r3
 800529e:	f7fe fe99 	bl	8003fd4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80052a2:	f7ff f8d7 	bl	8004454 <xTaskResumeAll>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10a      	bne.n	80052c2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80052ac:	4b09      	ldr	r3, [pc, #36]	; (80052d4 <prvProcessTimerOrBlockTask+0x98>)
 80052ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	f3bf 8f6f 	isb	sy
    }
 80052bc:	e001      	b.n	80052c2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80052be:	f7ff f8c9 	bl	8004454 <xTaskResumeAll>
    }
 80052c2:	bf00      	nop
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	200003c4 	.word	0x200003c4
 80052d0:	200003c8 	.word	0x200003c8
 80052d4:	e000ed04 	.word	0xe000ed04

080052d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80052e0:	4b0e      	ldr	r3, [pc, #56]	; (800531c <prvGetNextExpireTime+0x44>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <prvGetNextExpireTime+0x16>
 80052ea:	2201      	movs	r2, #1
 80052ec:	e000      	b.n	80052f0 <prvGetNextExpireTime+0x18>
 80052ee:	2200      	movs	r2, #0
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d105      	bne.n	8005308 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052fc:	4b07      	ldr	r3, [pc, #28]	; (800531c <prvGetNextExpireTime+0x44>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	e001      	b.n	800530c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005308:	2300      	movs	r3, #0
 800530a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800530c:	68fb      	ldr	r3, [r7, #12]
    }
 800530e:	4618      	mov	r0, r3
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	200003c0 	.word	0x200003c0

08005320 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005328:	f7ff f934 	bl	8004594 <xTaskGetTickCount>
 800532c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800532e:	4b0b      	ldr	r3, [pc, #44]	; (800535c <prvSampleTimeNow+0x3c>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	429a      	cmp	r2, r3
 8005336:	d205      	bcs.n	8005344 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005338:	f000 f91a 	bl	8005570 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	601a      	str	r2, [r3, #0]
 8005342:	e002      	b.n	800534a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800534a:	4a04      	ldr	r2, [pc, #16]	; (800535c <prvSampleTimeNow+0x3c>)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005350:	68fb      	ldr	r3, [r7, #12]
    }
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	200003d0 	.word	0x200003d0

08005360 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
 800536c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800536e:	2300      	movs	r3, #0
 8005370:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	429a      	cmp	r2, r3
 8005384:	d812      	bhi.n	80053ac <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	1ad2      	subs	r2, r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	429a      	cmp	r2, r3
 8005392:	d302      	bcc.n	800539a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005394:	2301      	movs	r3, #1
 8005396:	617b      	str	r3, [r7, #20]
 8005398:	e01b      	b.n	80053d2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800539a:	4b10      	ldr	r3, [pc, #64]	; (80053dc <prvInsertTimerInActiveList+0x7c>)
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	3304      	adds	r3, #4
 80053a2:	4619      	mov	r1, r3
 80053a4:	4610      	mov	r0, r2
 80053a6:	f7fd ff38 	bl	800321a <vListInsert>
 80053aa:	e012      	b.n	80053d2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d206      	bcs.n	80053c2 <prvInsertTimerInActiveList+0x62>
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d302      	bcc.n	80053c2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80053bc:	2301      	movs	r3, #1
 80053be:	617b      	str	r3, [r7, #20]
 80053c0:	e007      	b.n	80053d2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80053c2:	4b07      	ldr	r3, [pc, #28]	; (80053e0 <prvInsertTimerInActiveList+0x80>)
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	3304      	adds	r3, #4
 80053ca:	4619      	mov	r1, r3
 80053cc:	4610      	mov	r0, r2
 80053ce:	f7fd ff24 	bl	800321a <vListInsert>
            }
        }

        return xProcessTimerNow;
 80053d2:	697b      	ldr	r3, [r7, #20]
    }
 80053d4:	4618      	mov	r0, r3
 80053d6:	3718      	adds	r7, #24
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	200003c4 	.word	0x200003c4
 80053e0:	200003c0 	.word	0x200003c0

080053e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08c      	sub	sp, #48	; 0x30
 80053e8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80053ea:	e0ae      	b.n	800554a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f2c0 80aa 	blt.w	8005548 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d004      	beq.n	800540a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005402:	3304      	adds	r3, #4
 8005404:	4618      	mov	r0, r3
 8005406:	f7fd ff41 	bl	800328c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800540a:	1d3b      	adds	r3, r7, #4
 800540c:	4618      	mov	r0, r3
 800540e:	f7ff ff87 	bl	8005320 <prvSampleTimeNow>
 8005412:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2b09      	cmp	r3, #9
 8005418:	f200 8097 	bhi.w	800554a <prvProcessReceivedCommands+0x166>
 800541c:	a201      	add	r2, pc, #4	; (adr r2, 8005424 <prvProcessReceivedCommands+0x40>)
 800541e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005422:	bf00      	nop
 8005424:	0800544d 	.word	0x0800544d
 8005428:	0800544d 	.word	0x0800544d
 800542c:	0800544d 	.word	0x0800544d
 8005430:	080054c1 	.word	0x080054c1
 8005434:	080054d5 	.word	0x080054d5
 8005438:	0800551f 	.word	0x0800551f
 800543c:	0800544d 	.word	0x0800544d
 8005440:	0800544d 	.word	0x0800544d
 8005444:	080054c1 	.word	0x080054c1
 8005448:	080054d5 	.word	0x080054d5
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005452:	f043 0301 	orr.w	r3, r3, #1
 8005456:	b2da      	uxtb	r2, r3
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	18d1      	adds	r1, r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6a3a      	ldr	r2, [r7, #32]
 800546a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800546c:	f7ff ff78 	bl	8005360 <prvInsertTimerInActiveList>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d069      	beq.n	800554a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800547c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005484:	f003 0304 	and.w	r3, r3, #4
 8005488:	2b00      	cmp	r3, #0
 800548a:	d05e      	beq.n	800554a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	441a      	add	r2, r3
 8005494:	2300      	movs	r3, #0
 8005496:	9300      	str	r3, [sp, #0]
 8005498:	2300      	movs	r3, #0
 800549a:	2100      	movs	r1, #0
 800549c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800549e:	f7ff fe21 	bl	80050e4 <xTimerGenericCommand>
 80054a2:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d14f      	bne.n	800554a <prvProcessReceivedCommands+0x166>
        __asm volatile
 80054aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ae:	f383 8811 	msr	BASEPRI, r3
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	61bb      	str	r3, [r7, #24]
    }
 80054bc:	bf00      	nop
 80054be:	e7fe      	b.n	80054be <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054c6:	f023 0301 	bic.w	r3, r3, #1
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80054d2:	e03a      	b.n	800554a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054da:	f043 0301 	orr.w	r3, r3, #1
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10a      	bne.n	800550a <prvProcessReceivedCommands+0x126>
        __asm volatile
 80054f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f8:	f383 8811 	msr	BASEPRI, r3
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	617b      	str	r3, [r7, #20]
    }
 8005506:	bf00      	nop
 8005508:	e7fe      	b.n	8005508 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	699a      	ldr	r2, [r3, #24]
 800550e:	6a3b      	ldr	r3, [r7, #32]
 8005510:	18d1      	adds	r1, r2, r3
 8005512:	6a3b      	ldr	r3, [r7, #32]
 8005514:	6a3a      	ldr	r2, [r7, #32]
 8005516:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005518:	f7ff ff22 	bl	8005360 <prvInsertTimerInActiveList>
                        break;
 800551c:	e015      	b.n	800554a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d103      	bne.n	8005534 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800552c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800552e:	f000 fc75 	bl	8005e1c <vPortFree>
 8005532:	e00a      	b.n	800554a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800553a:	f023 0301 	bic.w	r3, r3, #1
 800553e:	b2da      	uxtb	r2, r3
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005546:	e000      	b.n	800554a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8005548:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800554a:	4b08      	ldr	r3, [pc, #32]	; (800556c <prvProcessReceivedCommands+0x188>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f107 0108 	add.w	r1, r7, #8
 8005552:	2200      	movs	r2, #0
 8005554:	4618      	mov	r0, r3
 8005556:	f7fe f997 	bl	8003888 <xQueueReceive>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	f47f af45 	bne.w	80053ec <prvProcessReceivedCommands+0x8>
        }
    }
 8005562:	bf00      	nop
 8005564:	bf00      	nop
 8005566:	3728      	adds	r7, #40	; 0x28
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	200003c8 	.word	0x200003c8

08005570 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005570:	b580      	push	{r7, lr}
 8005572:	b088      	sub	sp, #32
 8005574:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005576:	e048      	b.n	800560a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005578:	4b2d      	ldr	r3, [pc, #180]	; (8005630 <prvSwitchTimerLists+0xc0>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005582:	4b2b      	ldr	r3, [pc, #172]	; (8005630 <prvSwitchTimerLists+0xc0>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	3304      	adds	r3, #4
 8005590:	4618      	mov	r0, r3
 8005592:	f7fd fe7b 	bl	800328c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d02e      	beq.n	800560a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	4413      	add	r3, r2
 80055b4:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d90e      	bls.n	80055dc <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055ca:	4b19      	ldr	r3, [pc, #100]	; (8005630 <prvSwitchTimerLists+0xc0>)
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3304      	adds	r3, #4
 80055d2:	4619      	mov	r1, r3
 80055d4:	4610      	mov	r0, r2
 80055d6:	f7fd fe20 	bl	800321a <vListInsert>
 80055da:	e016      	b.n	800560a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055dc:	2300      	movs	r3, #0
 80055de:	9300      	str	r3, [sp, #0]
 80055e0:	2300      	movs	r3, #0
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	2100      	movs	r1, #0
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f7ff fd7c 	bl	80050e4 <xTimerGenericCommand>
 80055ec:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10a      	bne.n	800560a <prvSwitchTimerLists+0x9a>
        __asm volatile
 80055f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f8:	f383 8811 	msr	BASEPRI, r3
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	603b      	str	r3, [r7, #0]
    }
 8005606:	bf00      	nop
 8005608:	e7fe      	b.n	8005608 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800560a:	4b09      	ldr	r3, [pc, #36]	; (8005630 <prvSwitchTimerLists+0xc0>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1b1      	bne.n	8005578 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8005614:	4b06      	ldr	r3, [pc, #24]	; (8005630 <prvSwitchTimerLists+0xc0>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800561a:	4b06      	ldr	r3, [pc, #24]	; (8005634 <prvSwitchTimerLists+0xc4>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a04      	ldr	r2, [pc, #16]	; (8005630 <prvSwitchTimerLists+0xc0>)
 8005620:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005622:	4a04      	ldr	r2, [pc, #16]	; (8005634 <prvSwitchTimerLists+0xc4>)
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	6013      	str	r3, [r2, #0]
    }
 8005628:	bf00      	nop
 800562a:	3718      	adds	r7, #24
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	200003c0 	.word	0x200003c0
 8005634:	200003c4 	.word	0x200003c4

08005638 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005638:	b580      	push	{r7, lr}
 800563a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800563c:	f000 f9e2 	bl	8005a04 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005640:	4b12      	ldr	r3, [pc, #72]	; (800568c <prvCheckForValidListAndQueue+0x54>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d11d      	bne.n	8005684 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005648:	4811      	ldr	r0, [pc, #68]	; (8005690 <prvCheckForValidListAndQueue+0x58>)
 800564a:	f7fd fd95 	bl	8003178 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800564e:	4811      	ldr	r0, [pc, #68]	; (8005694 <prvCheckForValidListAndQueue+0x5c>)
 8005650:	f7fd fd92 	bl	8003178 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005654:	4b10      	ldr	r3, [pc, #64]	; (8005698 <prvCheckForValidListAndQueue+0x60>)
 8005656:	4a0e      	ldr	r2, [pc, #56]	; (8005690 <prvCheckForValidListAndQueue+0x58>)
 8005658:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800565a:	4b10      	ldr	r3, [pc, #64]	; (800569c <prvCheckForValidListAndQueue+0x64>)
 800565c:	4a0d      	ldr	r2, [pc, #52]	; (8005694 <prvCheckForValidListAndQueue+0x5c>)
 800565e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005660:	2200      	movs	r2, #0
 8005662:	210c      	movs	r1, #12
 8005664:	200a      	movs	r0, #10
 8005666:	f7fd fea3 	bl	80033b0 <xQueueGenericCreate>
 800566a:	4603      	mov	r3, r0
 800566c:	4a07      	ldr	r2, [pc, #28]	; (800568c <prvCheckForValidListAndQueue+0x54>)
 800566e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8005670:	4b06      	ldr	r3, [pc, #24]	; (800568c <prvCheckForValidListAndQueue+0x54>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d005      	beq.n	8005684 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005678:	4b04      	ldr	r3, [pc, #16]	; (800568c <prvCheckForValidListAndQueue+0x54>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4908      	ldr	r1, [pc, #32]	; (80056a0 <prvCheckForValidListAndQueue+0x68>)
 800567e:	4618      	mov	r0, r3
 8005680:	f7fe fc76 	bl	8003f70 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005684:	f000 f9ee 	bl	8005a64 <vPortExitCritical>
    }
 8005688:	bf00      	nop
 800568a:	bd80      	pop	{r7, pc}
 800568c:	200003c8 	.word	0x200003c8
 8005690:	20000398 	.word	0x20000398
 8005694:	200003ac 	.word	0x200003ac
 8005698:	200003c0 	.word	0x200003c0
 800569c:	200003c4 	.word	0x200003c4
 80056a0:	080098dc 	.word	0x080098dc

080056a4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	3b04      	subs	r3, #4
 80056b4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80056bc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	3b04      	subs	r3, #4
 80056c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	f023 0201 	bic.w	r2, r3, #1
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	3b04      	subs	r3, #4
 80056d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80056d4:	4a0c      	ldr	r2, [pc, #48]	; (8005708 <pxPortInitialiseStack+0x64>)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	3b14      	subs	r3, #20
 80056de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	3b04      	subs	r3, #4
 80056ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f06f 0202 	mvn.w	r2, #2
 80056f2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	3b20      	subs	r3, #32
 80056f8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80056fa:	68fb      	ldr	r3, [r7, #12]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3714      	adds	r7, #20
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	0800570d 	.word	0x0800570d

0800570c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005712:	2300      	movs	r3, #0
 8005714:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005716:	4b12      	ldr	r3, [pc, #72]	; (8005760 <prvTaskExitError+0x54>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571e:	d00a      	beq.n	8005736 <prvTaskExitError+0x2a>
        __asm volatile
 8005720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005724:	f383 8811 	msr	BASEPRI, r3
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	60fb      	str	r3, [r7, #12]
    }
 8005732:	bf00      	nop
 8005734:	e7fe      	b.n	8005734 <prvTaskExitError+0x28>
        __asm volatile
 8005736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573a:	f383 8811 	msr	BASEPRI, r3
 800573e:	f3bf 8f6f 	isb	sy
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	60bb      	str	r3, [r7, #8]
    }
 8005748:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800574a:	bf00      	nop
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d0fc      	beq.n	800574c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005752:	bf00      	nop
 8005754:	bf00      	nop
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	20000010 	.word	0x20000010
	...

08005770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005770:	4b07      	ldr	r3, [pc, #28]	; (8005790 <pxCurrentTCBConst2>)
 8005772:	6819      	ldr	r1, [r3, #0]
 8005774:	6808      	ldr	r0, [r1, #0]
 8005776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800577a:	f380 8809 	msr	PSP, r0
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	f04f 0000 	mov.w	r0, #0
 8005786:	f380 8811 	msr	BASEPRI, r0
 800578a:	4770      	bx	lr
 800578c:	f3af 8000 	nop.w

08005790 <pxCurrentTCBConst2>:
 8005790:	20000294 	.word	0x20000294
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005794:	bf00      	nop
 8005796:	bf00      	nop

08005798 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005798:	4808      	ldr	r0, [pc, #32]	; (80057bc <prvPortStartFirstTask+0x24>)
 800579a:	6800      	ldr	r0, [r0, #0]
 800579c:	6800      	ldr	r0, [r0, #0]
 800579e:	f380 8808 	msr	MSP, r0
 80057a2:	f04f 0000 	mov.w	r0, #0
 80057a6:	f380 8814 	msr	CONTROL, r0
 80057aa:	b662      	cpsie	i
 80057ac:	b661      	cpsie	f
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	df00      	svc	0
 80057b8:	bf00      	nop
 80057ba:	0000      	.short	0x0000
 80057bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80057c0:	bf00      	nop
 80057c2:	bf00      	nop

080057c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80057ca:	4b46      	ldr	r3, [pc, #280]	; (80058e4 <xPortStartScheduler+0x120>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a46      	ldr	r2, [pc, #280]	; (80058e8 <xPortStartScheduler+0x124>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d10a      	bne.n	80057ea <xPortStartScheduler+0x26>
        __asm volatile
 80057d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d8:	f383 8811 	msr	BASEPRI, r3
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	f3bf 8f4f 	dsb	sy
 80057e4:	613b      	str	r3, [r7, #16]
    }
 80057e6:	bf00      	nop
 80057e8:	e7fe      	b.n	80057e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80057ea:	4b3e      	ldr	r3, [pc, #248]	; (80058e4 <xPortStartScheduler+0x120>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a3f      	ldr	r2, [pc, #252]	; (80058ec <xPortStartScheduler+0x128>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d10a      	bne.n	800580a <xPortStartScheduler+0x46>
        __asm volatile
 80057f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	60fb      	str	r3, [r7, #12]
    }
 8005806:	bf00      	nop
 8005808:	e7fe      	b.n	8005808 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800580a:	4b39      	ldr	r3, [pc, #228]	; (80058f0 <xPortStartScheduler+0x12c>)
 800580c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	b2db      	uxtb	r3, r3
 8005814:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	22ff      	movs	r2, #255	; 0xff
 800581a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	b2db      	uxtb	r3, r3
 8005822:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005824:	78fb      	ldrb	r3, [r7, #3]
 8005826:	b2db      	uxtb	r3, r3
 8005828:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800582c:	b2da      	uxtb	r2, r3
 800582e:	4b31      	ldr	r3, [pc, #196]	; (80058f4 <xPortStartScheduler+0x130>)
 8005830:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005832:	4b31      	ldr	r3, [pc, #196]	; (80058f8 <xPortStartScheduler+0x134>)
 8005834:	2207      	movs	r2, #7
 8005836:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005838:	e009      	b.n	800584e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800583a:	4b2f      	ldr	r3, [pc, #188]	; (80058f8 <xPortStartScheduler+0x134>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	3b01      	subs	r3, #1
 8005840:	4a2d      	ldr	r2, [pc, #180]	; (80058f8 <xPortStartScheduler+0x134>)
 8005842:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005844:	78fb      	ldrb	r3, [r7, #3]
 8005846:	b2db      	uxtb	r3, r3
 8005848:	005b      	lsls	r3, r3, #1
 800584a:	b2db      	uxtb	r3, r3
 800584c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800584e:	78fb      	ldrb	r3, [r7, #3]
 8005850:	b2db      	uxtb	r3, r3
 8005852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005856:	2b80      	cmp	r3, #128	; 0x80
 8005858:	d0ef      	beq.n	800583a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800585a:	4b27      	ldr	r3, [pc, #156]	; (80058f8 <xPortStartScheduler+0x134>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f1c3 0307 	rsb	r3, r3, #7
 8005862:	2b04      	cmp	r3, #4
 8005864:	d00a      	beq.n	800587c <xPortStartScheduler+0xb8>
        __asm volatile
 8005866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586a:	f383 8811 	msr	BASEPRI, r3
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	60bb      	str	r3, [r7, #8]
    }
 8005878:	bf00      	nop
 800587a:	e7fe      	b.n	800587a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800587c:	4b1e      	ldr	r3, [pc, #120]	; (80058f8 <xPortStartScheduler+0x134>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	021b      	lsls	r3, r3, #8
 8005882:	4a1d      	ldr	r2, [pc, #116]	; (80058f8 <xPortStartScheduler+0x134>)
 8005884:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005886:	4b1c      	ldr	r3, [pc, #112]	; (80058f8 <xPortStartScheduler+0x134>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800588e:	4a1a      	ldr	r2, [pc, #104]	; (80058f8 <xPortStartScheduler+0x134>)
 8005890:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	b2da      	uxtb	r2, r3
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800589a:	4b18      	ldr	r3, [pc, #96]	; (80058fc <xPortStartScheduler+0x138>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a17      	ldr	r2, [pc, #92]	; (80058fc <xPortStartScheduler+0x138>)
 80058a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058a4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80058a6:	4b15      	ldr	r3, [pc, #84]	; (80058fc <xPortStartScheduler+0x138>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a14      	ldr	r2, [pc, #80]	; (80058fc <xPortStartScheduler+0x138>)
 80058ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80058b0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80058b2:	f000 f963 	bl	8005b7c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80058b6:	4b12      	ldr	r3, [pc, #72]	; (8005900 <xPortStartScheduler+0x13c>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80058bc:	f000 f982 	bl	8005bc4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80058c0:	4b10      	ldr	r3, [pc, #64]	; (8005904 <xPortStartScheduler+0x140>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a0f      	ldr	r2, [pc, #60]	; (8005904 <xPortStartScheduler+0x140>)
 80058c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80058ca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80058cc:	f7ff ff64 	bl	8005798 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80058d0:	f7fe ff3e 	bl	8004750 <vTaskSwitchContext>
    prvTaskExitError();
 80058d4:	f7ff ff1a 	bl	800570c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3718      	adds	r7, #24
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	e000ed00 	.word	0xe000ed00
 80058e8:	410fc271 	.word	0x410fc271
 80058ec:	410fc270 	.word	0x410fc270
 80058f0:	e000e400 	.word	0xe000e400
 80058f4:	200003d4 	.word	0x200003d4
 80058f8:	200003d8 	.word	0x200003d8
 80058fc:	e000ed20 	.word	0xe000ed20
 8005900:	20000010 	.word	0x20000010
 8005904:	e000ef34 	.word	0xe000ef34

08005908 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800590e:	4b37      	ldr	r3, [pc, #220]	; (80059ec <vInitPrioGroupValue+0xe4>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a37      	ldr	r2, [pc, #220]	; (80059f0 <vInitPrioGroupValue+0xe8>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d10a      	bne.n	800592e <vInitPrioGroupValue+0x26>
        __asm volatile
 8005918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591c:	f383 8811 	msr	BASEPRI, r3
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	613b      	str	r3, [r7, #16]
    }
 800592a:	bf00      	nop
 800592c:	e7fe      	b.n	800592c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800592e:	4b2f      	ldr	r3, [pc, #188]	; (80059ec <vInitPrioGroupValue+0xe4>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a30      	ldr	r2, [pc, #192]	; (80059f4 <vInitPrioGroupValue+0xec>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d10a      	bne.n	800594e <vInitPrioGroupValue+0x46>
        __asm volatile
 8005938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	60fb      	str	r3, [r7, #12]
    }
 800594a:	bf00      	nop
 800594c:	e7fe      	b.n	800594c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800594e:	4b2a      	ldr	r3, [pc, #168]	; (80059f8 <vInitPrioGroupValue+0xf0>)
 8005950:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	b2db      	uxtb	r3, r3
 8005958:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	22ff      	movs	r2, #255	; 0xff
 800595e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	b2db      	uxtb	r3, r3
 8005966:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005968:	78fb      	ldrb	r3, [r7, #3]
 800596a:	b2db      	uxtb	r3, r3
 800596c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005970:	b2da      	uxtb	r2, r3
 8005972:	4b22      	ldr	r3, [pc, #136]	; (80059fc <vInitPrioGroupValue+0xf4>)
 8005974:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005976:	4b22      	ldr	r3, [pc, #136]	; (8005a00 <vInitPrioGroupValue+0xf8>)
 8005978:	2207      	movs	r2, #7
 800597a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800597c:	e009      	b.n	8005992 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800597e:	4b20      	ldr	r3, [pc, #128]	; (8005a00 <vInitPrioGroupValue+0xf8>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3b01      	subs	r3, #1
 8005984:	4a1e      	ldr	r2, [pc, #120]	; (8005a00 <vInitPrioGroupValue+0xf8>)
 8005986:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005988:	78fb      	ldrb	r3, [r7, #3]
 800598a:	b2db      	uxtb	r3, r3
 800598c:	005b      	lsls	r3, r3, #1
 800598e:	b2db      	uxtb	r3, r3
 8005990:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005992:	78fb      	ldrb	r3, [r7, #3]
 8005994:	b2db      	uxtb	r3, r3
 8005996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800599a:	2b80      	cmp	r3, #128	; 0x80
 800599c:	d0ef      	beq.n	800597e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800599e:	4b18      	ldr	r3, [pc, #96]	; (8005a00 <vInitPrioGroupValue+0xf8>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f1c3 0307 	rsb	r3, r3, #7
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	d00a      	beq.n	80059c0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80059aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ae:	f383 8811 	msr	BASEPRI, r3
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	60bb      	str	r3, [r7, #8]
    }
 80059bc:	bf00      	nop
 80059be:	e7fe      	b.n	80059be <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80059c0:	4b0f      	ldr	r3, [pc, #60]	; (8005a00 <vInitPrioGroupValue+0xf8>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	021b      	lsls	r3, r3, #8
 80059c6:	4a0e      	ldr	r2, [pc, #56]	; (8005a00 <vInitPrioGroupValue+0xf8>)
 80059c8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059ca:	4b0d      	ldr	r3, [pc, #52]	; (8005a00 <vInitPrioGroupValue+0xf8>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059d2:	4a0b      	ldr	r2, [pc, #44]	; (8005a00 <vInitPrioGroupValue+0xf8>)
 80059d4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80059de:	bf00      	nop
 80059e0:	371c      	adds	r7, #28
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	e000ed00 	.word	0xe000ed00
 80059f0:	410fc271 	.word	0x410fc271
 80059f4:	410fc270 	.word	0x410fc270
 80059f8:	e000e400 	.word	0xe000e400
 80059fc:	200003d4 	.word	0x200003d4
 8005a00:	200003d8 	.word	0x200003d8

08005a04 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
        __asm volatile
 8005a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0e:	f383 8811 	msr	BASEPRI, r3
 8005a12:	f3bf 8f6f 	isb	sy
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	607b      	str	r3, [r7, #4]
    }
 8005a1c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005a1e:	4b0f      	ldr	r3, [pc, #60]	; (8005a5c <vPortEnterCritical+0x58>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	3301      	adds	r3, #1
 8005a24:	4a0d      	ldr	r2, [pc, #52]	; (8005a5c <vPortEnterCritical+0x58>)
 8005a26:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005a28:	4b0c      	ldr	r3, [pc, #48]	; (8005a5c <vPortEnterCritical+0x58>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d10f      	bne.n	8005a50 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a30:	4b0b      	ldr	r3, [pc, #44]	; (8005a60 <vPortEnterCritical+0x5c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00a      	beq.n	8005a50 <vPortEnterCritical+0x4c>
        __asm volatile
 8005a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3e:	f383 8811 	msr	BASEPRI, r3
 8005a42:	f3bf 8f6f 	isb	sy
 8005a46:	f3bf 8f4f 	dsb	sy
 8005a4a:	603b      	str	r3, [r7, #0]
    }
 8005a4c:	bf00      	nop
 8005a4e:	e7fe      	b.n	8005a4e <vPortEnterCritical+0x4a>
    }
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	20000010 	.word	0x20000010
 8005a60:	e000ed04 	.word	0xe000ed04

08005a64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005a6a:	4b12      	ldr	r3, [pc, #72]	; (8005ab4 <vPortExitCritical+0x50>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10a      	bne.n	8005a88 <vPortExitCritical+0x24>
        __asm volatile
 8005a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a76:	f383 8811 	msr	BASEPRI, r3
 8005a7a:	f3bf 8f6f 	isb	sy
 8005a7e:	f3bf 8f4f 	dsb	sy
 8005a82:	607b      	str	r3, [r7, #4]
    }
 8005a84:	bf00      	nop
 8005a86:	e7fe      	b.n	8005a86 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005a88:	4b0a      	ldr	r3, [pc, #40]	; (8005ab4 <vPortExitCritical+0x50>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	4a09      	ldr	r2, [pc, #36]	; (8005ab4 <vPortExitCritical+0x50>)
 8005a90:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005a92:	4b08      	ldr	r3, [pc, #32]	; (8005ab4 <vPortExitCritical+0x50>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d105      	bne.n	8005aa6 <vPortExitCritical+0x42>
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	f383 8811 	msr	BASEPRI, r3
    }
 8005aa4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005aa6:	bf00      	nop
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	20000010 	.word	0x20000010
	...

08005ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005ac0:	f3ef 8009 	mrs	r0, PSP
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	4b15      	ldr	r3, [pc, #84]	; (8005b20 <pxCurrentTCBConst>)
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	f01e 0f10 	tst.w	lr, #16
 8005ad0:	bf08      	it	eq
 8005ad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ada:	6010      	str	r0, [r2, #0]
 8005adc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ae0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ae4:	f380 8811 	msr	BASEPRI, r0
 8005ae8:	f3bf 8f4f 	dsb	sy
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f7fe fe2e 	bl	8004750 <vTaskSwitchContext>
 8005af4:	f04f 0000 	mov.w	r0, #0
 8005af8:	f380 8811 	msr	BASEPRI, r0
 8005afc:	bc09      	pop	{r0, r3}
 8005afe:	6819      	ldr	r1, [r3, #0]
 8005b00:	6808      	ldr	r0, [r1, #0]
 8005b02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b06:	f01e 0f10 	tst.w	lr, #16
 8005b0a:	bf08      	it	eq
 8005b0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b10:	f380 8809 	msr	PSP, r0
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	f3af 8000 	nop.w

08005b20 <pxCurrentTCBConst>:
 8005b20:	20000294 	.word	0x20000294
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005b24:	bf00      	nop
 8005b26:	bf00      	nop

08005b28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
        __asm volatile
 8005b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	607b      	str	r3, [r7, #4]
    }
 8005b40:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8005b42:	f002 f8c7 	bl	8007cd4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005b46:	f7fe fd47 	bl	80045d8 <xTaskIncrementTick>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d006      	beq.n	8005b5e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8005b50:	f002 f91e 	bl	8007d90 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b54:	4b08      	ldr	r3, [pc, #32]	; (8005b78 <SysTick_Handler+0x50>)
 8005b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	e001      	b.n	8005b62 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8005b5e:	f002 f8fb 	bl	8007d58 <SEGGER_SYSVIEW_RecordExitISR>
 8005b62:	2300      	movs	r3, #0
 8005b64:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	f383 8811 	msr	BASEPRI, r3
    }
 8005b6c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8005b6e:	bf00      	nop
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	e000ed04 	.word	0xe000ed04

08005b7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b80:	4b0b      	ldr	r3, [pc, #44]	; (8005bb0 <vPortSetupTimerInterrupt+0x34>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b86:	4b0b      	ldr	r3, [pc, #44]	; (8005bb4 <vPortSetupTimerInterrupt+0x38>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b8c:	4b0a      	ldr	r3, [pc, #40]	; (8005bb8 <vPortSetupTimerInterrupt+0x3c>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a0a      	ldr	r2, [pc, #40]	; (8005bbc <vPortSetupTimerInterrupt+0x40>)
 8005b92:	fba2 2303 	umull	r2, r3, r2, r3
 8005b96:	099b      	lsrs	r3, r3, #6
 8005b98:	4a09      	ldr	r2, [pc, #36]	; (8005bc0 <vPortSetupTimerInterrupt+0x44>)
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b9e:	4b04      	ldr	r3, [pc, #16]	; (8005bb0 <vPortSetupTimerInterrupt+0x34>)
 8005ba0:	2207      	movs	r2, #7
 8005ba2:	601a      	str	r2, [r3, #0]
}
 8005ba4:	bf00      	nop
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	e000e010 	.word	0xe000e010
 8005bb4:	e000e018 	.word	0xe000e018
 8005bb8:	20000000 	.word	0x20000000
 8005bbc:	10624dd3 	.word	0x10624dd3
 8005bc0:	e000e014 	.word	0xe000e014

08005bc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005bc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005bd4 <vPortEnableVFP+0x10>
 8005bc8:	6801      	ldr	r1, [r0, #0]
 8005bca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005bce:	6001      	str	r1, [r0, #0]
 8005bd0:	4770      	bx	lr
 8005bd2:	0000      	.short	0x0000
 8005bd4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005bd8:	bf00      	nop
 8005bda:	bf00      	nop

08005bdc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005be2:	f3ef 8305 	mrs	r3, IPSR
 8005be6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2b0f      	cmp	r3, #15
 8005bec:	d914      	bls.n	8005c18 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bee:	4a17      	ldr	r2, [pc, #92]	; (8005c4c <vPortValidateInterruptPriority+0x70>)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005bf8:	4b15      	ldr	r3, [pc, #84]	; (8005c50 <vPortValidateInterruptPriority+0x74>)
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	7afa      	ldrb	r2, [r7, #11]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d20a      	bcs.n	8005c18 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c06:	f383 8811 	msr	BASEPRI, r3
 8005c0a:	f3bf 8f6f 	isb	sy
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	607b      	str	r3, [r7, #4]
    }
 8005c14:	bf00      	nop
 8005c16:	e7fe      	b.n	8005c16 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c18:	4b0e      	ldr	r3, [pc, #56]	; (8005c54 <vPortValidateInterruptPriority+0x78>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c20:	4b0d      	ldr	r3, [pc, #52]	; (8005c58 <vPortValidateInterruptPriority+0x7c>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d90a      	bls.n	8005c3e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2c:	f383 8811 	msr	BASEPRI, r3
 8005c30:	f3bf 8f6f 	isb	sy
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	603b      	str	r3, [r7, #0]
    }
 8005c3a:	bf00      	nop
 8005c3c:	e7fe      	b.n	8005c3c <vPortValidateInterruptPriority+0x60>
    }
 8005c3e:	bf00      	nop
 8005c40:	3714      	adds	r7, #20
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	e000e3f0 	.word	0xe000e3f0
 8005c50:	200003d4 	.word	0x200003d4
 8005c54:	e000ed0c 	.word	0xe000ed0c
 8005c58:	200003d8 	.word	0x200003d8

08005c5c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b08a      	sub	sp, #40	; 0x28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005c64:	2300      	movs	r3, #0
 8005c66:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005c68:	f7fe fbe6 	bl	8004438 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005c6c:	4b65      	ldr	r3, [pc, #404]	; (8005e04 <pvPortMalloc+0x1a8>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d101      	bne.n	8005c78 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005c74:	f000 f934 	bl	8005ee0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c78:	4b63      	ldr	r3, [pc, #396]	; (8005e08 <pvPortMalloc+0x1ac>)
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4013      	ands	r3, r2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f040 80a7 	bne.w	8005dd4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d02d      	beq.n	8005ce8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8005c8c:	2208      	movs	r2, #8
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d227      	bcs.n	8005ce8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8005c98:	2208      	movs	r2, #8
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f003 0307 	and.w	r3, r3, #7
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d021      	beq.n	8005cee <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f023 0307 	bic.w	r3, r3, #7
 8005cb0:	3308      	adds	r3, #8
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d214      	bcs.n	8005ce2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f023 0307 	bic.w	r3, r3, #7
 8005cbe:	3308      	adds	r3, #8
 8005cc0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f003 0307 	and.w	r3, r3, #7
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d010      	beq.n	8005cee <pvPortMalloc+0x92>
        __asm volatile
 8005ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd0:	f383 8811 	msr	BASEPRI, r3
 8005cd4:	f3bf 8f6f 	isb	sy
 8005cd8:	f3bf 8f4f 	dsb	sy
 8005cdc:	617b      	str	r3, [r7, #20]
    }
 8005cde:	bf00      	nop
 8005ce0:	e7fe      	b.n	8005ce0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ce6:	e002      	b.n	8005cee <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	607b      	str	r3, [r7, #4]
 8005cec:	e000      	b.n	8005cf0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005cee:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d06e      	beq.n	8005dd4 <pvPortMalloc+0x178>
 8005cf6:	4b45      	ldr	r3, [pc, #276]	; (8005e0c <pvPortMalloc+0x1b0>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d869      	bhi.n	8005dd4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005d00:	4b43      	ldr	r3, [pc, #268]	; (8005e10 <pvPortMalloc+0x1b4>)
 8005d02:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005d04:	4b42      	ldr	r3, [pc, #264]	; (8005e10 <pvPortMalloc+0x1b4>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d0a:	e004      	b.n	8005d16 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d903      	bls.n	8005d28 <pvPortMalloc+0xcc>
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1f1      	bne.n	8005d0c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005d28:	4b36      	ldr	r3, [pc, #216]	; (8005e04 <pvPortMalloc+0x1a8>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d050      	beq.n	8005dd4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2208      	movs	r2, #8
 8005d38:	4413      	add	r3, r2
 8005d3a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	1ad2      	subs	r2, r2, r3
 8005d4c:	2308      	movs	r3, #8
 8005d4e:	005b      	lsls	r3, r3, #1
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d91f      	bls.n	8005d94 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4413      	add	r3, r2
 8005d5a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	f003 0307 	and.w	r3, r3, #7
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00a      	beq.n	8005d7c <pvPortMalloc+0x120>
        __asm volatile
 8005d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6a:	f383 8811 	msr	BASEPRI, r3
 8005d6e:	f3bf 8f6f 	isb	sy
 8005d72:	f3bf 8f4f 	dsb	sy
 8005d76:	613b      	str	r3, [r7, #16]
    }
 8005d78:	bf00      	nop
 8005d7a:	e7fe      	b.n	8005d7a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	1ad2      	subs	r2, r2, r3
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d8e:	69b8      	ldr	r0, [r7, #24]
 8005d90:	f000 f908 	bl	8005fa4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d94:	4b1d      	ldr	r3, [pc, #116]	; (8005e0c <pvPortMalloc+0x1b0>)
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	4a1b      	ldr	r2, [pc, #108]	; (8005e0c <pvPortMalloc+0x1b0>)
 8005da0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005da2:	4b1a      	ldr	r3, [pc, #104]	; (8005e0c <pvPortMalloc+0x1b0>)
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	4b1b      	ldr	r3, [pc, #108]	; (8005e14 <pvPortMalloc+0x1b8>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d203      	bcs.n	8005db6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005dae:	4b17      	ldr	r3, [pc, #92]	; (8005e0c <pvPortMalloc+0x1b0>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a18      	ldr	r2, [pc, #96]	; (8005e14 <pvPortMalloc+0x1b8>)
 8005db4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	4b13      	ldr	r3, [pc, #76]	; (8005e08 <pvPortMalloc+0x1ac>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005dca:	4b13      	ldr	r3, [pc, #76]	; (8005e18 <pvPortMalloc+0x1bc>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	4a11      	ldr	r2, [pc, #68]	; (8005e18 <pvPortMalloc+0x1bc>)
 8005dd2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005dd4:	f7fe fb3e 	bl	8004454 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	f003 0307 	and.w	r3, r3, #7
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00a      	beq.n	8005df8 <pvPortMalloc+0x19c>
        __asm volatile
 8005de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de6:	f383 8811 	msr	BASEPRI, r3
 8005dea:	f3bf 8f6f 	isb	sy
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	60fb      	str	r3, [r7, #12]
    }
 8005df4:	bf00      	nop
 8005df6:	e7fe      	b.n	8005df6 <pvPortMalloc+0x19a>
    return pvReturn;
 8005df8:	69fb      	ldr	r3, [r7, #28]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3728      	adds	r7, #40	; 0x28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	20012fe4 	.word	0x20012fe4
 8005e08:	20012ff8 	.word	0x20012ff8
 8005e0c:	20012fe8 	.word	0x20012fe8
 8005e10:	20012fdc 	.word	0x20012fdc
 8005e14:	20012fec 	.word	0x20012fec
 8005e18:	20012ff0 	.word	0x20012ff0

08005e1c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d04d      	beq.n	8005eca <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005e2e:	2308      	movs	r3, #8
 8005e30:	425b      	negs	r3, r3
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	4413      	add	r3, r2
 8005e36:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	4b24      	ldr	r3, [pc, #144]	; (8005ed4 <vPortFree+0xb8>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4013      	ands	r3, r2
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10a      	bne.n	8005e60 <vPortFree+0x44>
        __asm volatile
 8005e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4e:	f383 8811 	msr	BASEPRI, r3
 8005e52:	f3bf 8f6f 	isb	sy
 8005e56:	f3bf 8f4f 	dsb	sy
 8005e5a:	60fb      	str	r3, [r7, #12]
    }
 8005e5c:	bf00      	nop
 8005e5e:	e7fe      	b.n	8005e5e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00a      	beq.n	8005e7e <vPortFree+0x62>
        __asm volatile
 8005e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6c:	f383 8811 	msr	BASEPRI, r3
 8005e70:	f3bf 8f6f 	isb	sy
 8005e74:	f3bf 8f4f 	dsb	sy
 8005e78:	60bb      	str	r3, [r7, #8]
    }
 8005e7a:	bf00      	nop
 8005e7c:	e7fe      	b.n	8005e7c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	685a      	ldr	r2, [r3, #4]
 8005e82:	4b14      	ldr	r3, [pc, #80]	; (8005ed4 <vPortFree+0xb8>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4013      	ands	r3, r2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d01e      	beq.n	8005eca <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d11a      	bne.n	8005eca <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	4b0e      	ldr	r3, [pc, #56]	; (8005ed4 <vPortFree+0xb8>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	43db      	mvns	r3, r3
 8005e9e:	401a      	ands	r2, r3
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005ea4:	f7fe fac8 	bl	8004438 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	4b0a      	ldr	r3, [pc, #40]	; (8005ed8 <vPortFree+0xbc>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	4a09      	ldr	r2, [pc, #36]	; (8005ed8 <vPortFree+0xbc>)
 8005eb4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005eb6:	6938      	ldr	r0, [r7, #16]
 8005eb8:	f000 f874 	bl	8005fa4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005ebc:	4b07      	ldr	r3, [pc, #28]	; (8005edc <vPortFree+0xc0>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	4a06      	ldr	r2, [pc, #24]	; (8005edc <vPortFree+0xc0>)
 8005ec4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005ec6:	f7fe fac5 	bl	8004454 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005eca:	bf00      	nop
 8005ecc:	3718      	adds	r7, #24
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	20012ff8 	.word	0x20012ff8
 8005ed8:	20012fe8 	.word	0x20012fe8
 8005edc:	20012ff4 	.word	0x20012ff4

08005ee0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005ee6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8005eea:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005eec:	4b27      	ldr	r3, [pc, #156]	; (8005f8c <prvHeapInit+0xac>)
 8005eee:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f003 0307 	and.w	r3, r3, #7
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00c      	beq.n	8005f14 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	3307      	adds	r3, #7
 8005efe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f023 0307 	bic.w	r3, r3, #7
 8005f06:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	4a1f      	ldr	r2, [pc, #124]	; (8005f8c <prvHeapInit+0xac>)
 8005f10:	4413      	add	r3, r2
 8005f12:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f18:	4a1d      	ldr	r2, [pc, #116]	; (8005f90 <prvHeapInit+0xb0>)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005f1e:	4b1c      	ldr	r3, [pc, #112]	; (8005f90 <prvHeapInit+0xb0>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	4413      	add	r3, r2
 8005f2a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005f2c:	2208      	movs	r2, #8
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	1a9b      	subs	r3, r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f023 0307 	bic.w	r3, r3, #7
 8005f3a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	4a15      	ldr	r2, [pc, #84]	; (8005f94 <prvHeapInit+0xb4>)
 8005f40:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005f42:	4b14      	ldr	r3, [pc, #80]	; (8005f94 <prvHeapInit+0xb4>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2200      	movs	r2, #0
 8005f48:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005f4a:	4b12      	ldr	r3, [pc, #72]	; (8005f94 <prvHeapInit+0xb4>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	1ad2      	subs	r2, r2, r3
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f60:	4b0c      	ldr	r3, [pc, #48]	; (8005f94 <prvHeapInit+0xb4>)
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	4a0a      	ldr	r2, [pc, #40]	; (8005f98 <prvHeapInit+0xb8>)
 8005f6e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	4a09      	ldr	r2, [pc, #36]	; (8005f9c <prvHeapInit+0xbc>)
 8005f76:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f78:	4b09      	ldr	r3, [pc, #36]	; (8005fa0 <prvHeapInit+0xc0>)
 8005f7a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f7e:	601a      	str	r2, [r3, #0]
}
 8005f80:	bf00      	nop
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	200003dc 	.word	0x200003dc
 8005f90:	20012fdc 	.word	0x20012fdc
 8005f94:	20012fe4 	.word	0x20012fe4
 8005f98:	20012fec 	.word	0x20012fec
 8005f9c:	20012fe8 	.word	0x20012fe8
 8005fa0:	20012ff8 	.word	0x20012ff8

08005fa4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005fac:	4b28      	ldr	r3, [pc, #160]	; (8006050 <prvInsertBlockIntoFreeList+0xac>)
 8005fae:	60fb      	str	r3, [r7, #12]
 8005fb0:	e002      	b.n	8005fb8 <prvInsertBlockIntoFreeList+0x14>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	60fb      	str	r3, [r7, #12]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d8f7      	bhi.n	8005fb2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	4413      	add	r3, r2
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d108      	bne.n	8005fe6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	441a      	add	r2, r3
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	441a      	add	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d118      	bne.n	800602c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	4b15      	ldr	r3, [pc, #84]	; (8006054 <prvInsertBlockIntoFreeList+0xb0>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	429a      	cmp	r2, r3
 8006004:	d00d      	beq.n	8006022 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	441a      	add	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	601a      	str	r2, [r3, #0]
 8006020:	e008      	b.n	8006034 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006022:	4b0c      	ldr	r3, [pc, #48]	; (8006054 <prvInsertBlockIntoFreeList+0xb0>)
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	601a      	str	r2, [r3, #0]
 800602a:	e003      	b.n	8006034 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	429a      	cmp	r2, r3
 800603a:	d002      	beq.n	8006042 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006042:	bf00      	nop
 8006044:	3714      	adds	r7, #20
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	20012fdc 	.word	0x20012fdc
 8006054:	20012fe4 	.word	0x20012fe4

08006058 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8006058:	b580      	push	{r7, lr}
 800605a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800605c:	4803      	ldr	r0, [pc, #12]	; (800606c <_cbSendSystemDesc+0x14>)
 800605e:	f001 fde3 	bl	8007c28 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8006062:	4803      	ldr	r0, [pc, #12]	; (8006070 <_cbSendSystemDesc+0x18>)
 8006064:	f001 fde0 	bl	8007c28 <SEGGER_SYSVIEW_SendSysDesc>
}
 8006068:	bf00      	nop
 800606a:	bd80      	pop	{r7, pc}
 800606c:	080098e4 	.word	0x080098e4
 8006070:	08009928 	.word	0x08009928

08006074 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8006074:	b580      	push	{r7, lr}
 8006076:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8006078:	4b06      	ldr	r3, [pc, #24]	; (8006094 <SEGGER_SYSVIEW_Conf+0x20>)
 800607a:	6818      	ldr	r0, [r3, #0]
 800607c:	4b05      	ldr	r3, [pc, #20]	; (8006094 <SEGGER_SYSVIEW_Conf+0x20>)
 800607e:	6819      	ldr	r1, [r3, #0]
 8006080:	4b05      	ldr	r3, [pc, #20]	; (8006098 <SEGGER_SYSVIEW_Conf+0x24>)
 8006082:	4a06      	ldr	r2, [pc, #24]	; (800609c <SEGGER_SYSVIEW_Conf+0x28>)
 8006084:	f001 f94c 	bl	8007320 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8006088:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800608c:	f001 f98c 	bl	80073a8 <SEGGER_SYSVIEW_SetRAMBase>
}
 8006090:	bf00      	nop
 8006092:	bd80      	pop	{r7, pc}
 8006094:	20000000 	.word	0x20000000
 8006098:	08006059 	.word	0x08006059
 800609c:	080099bc 	.word	0x080099bc

080060a0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80060a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80060a6:	2300      	movs	r3, #0
 80060a8:	607b      	str	r3, [r7, #4]
 80060aa:	e033      	b.n	8006114 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80060ac:	491e      	ldr	r1, [pc, #120]	; (8006128 <_cbSendTaskList+0x88>)
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	4613      	mov	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4413      	add	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	440b      	add	r3, r1
 80060ba:	6818      	ldr	r0, [r3, #0]
 80060bc:	491a      	ldr	r1, [pc, #104]	; (8006128 <_cbSendTaskList+0x88>)
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	4613      	mov	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	440b      	add	r3, r1
 80060ca:	3304      	adds	r3, #4
 80060cc:	6819      	ldr	r1, [r3, #0]
 80060ce:	4c16      	ldr	r4, [pc, #88]	; (8006128 <_cbSendTaskList+0x88>)
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	4613      	mov	r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4413      	add	r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4423      	add	r3, r4
 80060dc:	3308      	adds	r3, #8
 80060de:	681c      	ldr	r4, [r3, #0]
 80060e0:	4d11      	ldr	r5, [pc, #68]	; (8006128 <_cbSendTaskList+0x88>)
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	4613      	mov	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	442b      	add	r3, r5
 80060ee:	330c      	adds	r3, #12
 80060f0:	681d      	ldr	r5, [r3, #0]
 80060f2:	4e0d      	ldr	r6, [pc, #52]	; (8006128 <_cbSendTaskList+0x88>)
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	4613      	mov	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4433      	add	r3, r6
 8006100:	3310      	adds	r3, #16
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	462b      	mov	r3, r5
 8006108:	4622      	mov	r2, r4
 800610a:	f000 f8bd 	bl	8006288 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	3301      	adds	r3, #1
 8006112:	607b      	str	r3, [r7, #4]
 8006114:	4b05      	ldr	r3, [pc, #20]	; (800612c <_cbSendTaskList+0x8c>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	429a      	cmp	r2, r3
 800611c:	d3c6      	bcc.n	80060ac <_cbSendTaskList+0xc>
  }
}
 800611e:	bf00      	nop
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006128:	20012ffc 	.word	0x20012ffc
 800612c:	2001309c 	.word	0x2001309c

08006130 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8006130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006134:	b082      	sub	sp, #8
 8006136:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8006138:	f7fe fa3c 	bl	80045b4 <xTaskGetTickCountFromISR>
 800613c:	4603      	mov	r3, r0
 800613e:	2200      	movs	r2, #0
 8006140:	469a      	mov	sl, r3
 8006142:	4693      	mov	fp, r2
 8006144:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8006148:	e9d7 0100 	ldrd	r0, r1, [r7]
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	f04f 0a00 	mov.w	sl, #0
 8006154:	f04f 0b00 	mov.w	fp, #0
 8006158:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800615c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8006160:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8006164:	4652      	mov	r2, sl
 8006166:	465b      	mov	r3, fp
 8006168:	1a14      	subs	r4, r2, r0
 800616a:	eb63 0501 	sbc.w	r5, r3, r1
 800616e:	f04f 0200 	mov.w	r2, #0
 8006172:	f04f 0300 	mov.w	r3, #0
 8006176:	00ab      	lsls	r3, r5, #2
 8006178:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800617c:	00a2      	lsls	r2, r4, #2
 800617e:	4614      	mov	r4, r2
 8006180:	461d      	mov	r5, r3
 8006182:	eb14 0800 	adds.w	r8, r4, r0
 8006186:	eb45 0901 	adc.w	r9, r5, r1
 800618a:	f04f 0200 	mov.w	r2, #0
 800618e:	f04f 0300 	mov.w	r3, #0
 8006192:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006196:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800619a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800619e:	4690      	mov	r8, r2
 80061a0:	4699      	mov	r9, r3
 80061a2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80061a6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80061aa:	4610      	mov	r0, r2
 80061ac:	4619      	mov	r1, r3
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080061b8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af02      	add	r7, sp, #8
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
 80061c4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80061c6:	2205      	movs	r2, #5
 80061c8:	492b      	ldr	r1, [pc, #172]	; (8006278 <SYSVIEW_AddTask+0xc0>)
 80061ca:	68b8      	ldr	r0, [r7, #8]
 80061cc:	f002 f8f0 	bl	80083b0 <memcmp>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d04b      	beq.n	800626e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80061d6:	4b29      	ldr	r3, [pc, #164]	; (800627c <SYSVIEW_AddTask+0xc4>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2b07      	cmp	r3, #7
 80061dc:	d903      	bls.n	80061e6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80061de:	4828      	ldr	r0, [pc, #160]	; (8006280 <SYSVIEW_AddTask+0xc8>)
 80061e0:	f002 f820 	bl	8008224 <SEGGER_SYSVIEW_Warn>
    return;
 80061e4:	e044      	b.n	8006270 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80061e6:	4b25      	ldr	r3, [pc, #148]	; (800627c <SYSVIEW_AddTask+0xc4>)
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	4926      	ldr	r1, [pc, #152]	; (8006284 <SYSVIEW_AddTask+0xcc>)
 80061ec:	4613      	mov	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	440b      	add	r3, r1
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80061fa:	4b20      	ldr	r3, [pc, #128]	; (800627c <SYSVIEW_AddTask+0xc4>)
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	4921      	ldr	r1, [pc, #132]	; (8006284 <SYSVIEW_AddTask+0xcc>)
 8006200:	4613      	mov	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	440b      	add	r3, r1
 800620a:	3304      	adds	r3, #4
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006210:	4b1a      	ldr	r3, [pc, #104]	; (800627c <SYSVIEW_AddTask+0xc4>)
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	491b      	ldr	r1, [pc, #108]	; (8006284 <SYSVIEW_AddTask+0xcc>)
 8006216:	4613      	mov	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4413      	add	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	440b      	add	r3, r1
 8006220:	3308      	adds	r3, #8
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006226:	4b15      	ldr	r3, [pc, #84]	; (800627c <SYSVIEW_AddTask+0xc4>)
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	4916      	ldr	r1, [pc, #88]	; (8006284 <SYSVIEW_AddTask+0xcc>)
 800622c:	4613      	mov	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4413      	add	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	440b      	add	r3, r1
 8006236:	330c      	adds	r3, #12
 8006238:	683a      	ldr	r2, [r7, #0]
 800623a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800623c:	4b0f      	ldr	r3, [pc, #60]	; (800627c <SYSVIEW_AddTask+0xc4>)
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	4910      	ldr	r1, [pc, #64]	; (8006284 <SYSVIEW_AddTask+0xcc>)
 8006242:	4613      	mov	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	440b      	add	r3, r1
 800624c:	3310      	adds	r3, #16
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8006252:	4b0a      	ldr	r3, [pc, #40]	; (800627c <SYSVIEW_AddTask+0xc4>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	3301      	adds	r3, #1
 8006258:	4a08      	ldr	r2, [pc, #32]	; (800627c <SYSVIEW_AddTask+0xc4>)
 800625a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	68b9      	ldr	r1, [r7, #8]
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f000 f80e 	bl	8006288 <SYSVIEW_SendTaskInfo>
 800626c:	e000      	b.n	8006270 <SYSVIEW_AddTask+0xb8>
    return;
 800626e:	bf00      	nop

}
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	08009938 	.word	0x08009938
 800627c:	2001309c 	.word	0x2001309c
 8006280:	08009940 	.word	0x08009940
 8006284:	20012ffc 	.word	0x20012ffc

08006288 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006288:	b580      	push	{r7, lr}
 800628a:	b08a      	sub	sp, #40	; 0x28
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
 8006294:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8006296:	f107 0314 	add.w	r3, r7, #20
 800629a:	2214      	movs	r2, #20
 800629c:	2100      	movs	r1, #0
 800629e:	4618      	mov	r0, r3
 80062a0:	f002 f8a4 	bl	80083ec <memset>
  TaskInfo.TaskID     = TaskID;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80062b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80062b8:	f107 0314 	add.w	r3, r7, #20
 80062bc:	4618      	mov	r0, r3
 80062be:	f001 fbbb 	bl	8007a38 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80062c2:	bf00      	nop
 80062c4:	3728      	adds	r7, #40	; 0x28
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
	...

080062cc <__NVIC_EnableIRQ>:
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	4603      	mov	r3, r0
 80062d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	db0b      	blt.n	80062f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062de:	79fb      	ldrb	r3, [r7, #7]
 80062e0:	f003 021f 	and.w	r2, r3, #31
 80062e4:	4907      	ldr	r1, [pc, #28]	; (8006304 <__NVIC_EnableIRQ+0x38>)
 80062e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062ea:	095b      	lsrs	r3, r3, #5
 80062ec:	2001      	movs	r0, #1
 80062ee:	fa00 f202 	lsl.w	r2, r0, r2
 80062f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80062f6:	bf00      	nop
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	e000e100 	.word	0xe000e100

08006308 <__NVIC_SetPriority>:
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	4603      	mov	r3, r0
 8006310:	6039      	str	r1, [r7, #0]
 8006312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006318:	2b00      	cmp	r3, #0
 800631a:	db0a      	blt.n	8006332 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	b2da      	uxtb	r2, r3
 8006320:	490c      	ldr	r1, [pc, #48]	; (8006354 <__NVIC_SetPriority+0x4c>)
 8006322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006326:	0112      	lsls	r2, r2, #4
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	440b      	add	r3, r1
 800632c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006330:	e00a      	b.n	8006348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	b2da      	uxtb	r2, r3
 8006336:	4908      	ldr	r1, [pc, #32]	; (8006358 <__NVIC_SetPriority+0x50>)
 8006338:	79fb      	ldrb	r3, [r7, #7]
 800633a:	f003 030f 	and.w	r3, r3, #15
 800633e:	3b04      	subs	r3, #4
 8006340:	0112      	lsls	r2, r2, #4
 8006342:	b2d2      	uxtb	r2, r2
 8006344:	440b      	add	r3, r1
 8006346:	761a      	strb	r2, [r3, #24]
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr
 8006354:	e000e100 	.word	0xe000e100
 8006358:	e000ed00 	.word	0xe000ed00

0800635c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8006362:	f001 ffbb 	bl	80082dc <SEGGER_SYSVIEW_IsStarted>
 8006366:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800636e:	f001 f9e7 	bl	8007740 <SEGGER_SYSVIEW_Start>
  }
}
 8006372:	bf00      	nop
 8006374:	3708      	adds	r7, #8
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
	...

0800637c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	4603      	mov	r3, r0
 8006384:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8006386:	4b0c      	ldr	r3, [pc, #48]	; (80063b8 <_cbOnUARTRx+0x3c>)
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	2b03      	cmp	r3, #3
 800638c:	d806      	bhi.n	800639c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800638e:	4b0a      	ldr	r3, [pc, #40]	; (80063b8 <_cbOnUARTRx+0x3c>)
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	3301      	adds	r3, #1
 8006394:	b2da      	uxtb	r2, r3
 8006396:	4b08      	ldr	r3, [pc, #32]	; (80063b8 <_cbOnUARTRx+0x3c>)
 8006398:	701a      	strb	r2, [r3, #0]
    goto Done;
 800639a:	e009      	b.n	80063b0 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800639c:	f7ff ffde 	bl	800635c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80063a0:	4b05      	ldr	r3, [pc, #20]	; (80063b8 <_cbOnUARTRx+0x3c>)
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	4618      	mov	r0, r3
 80063a6:	1dfb      	adds	r3, r7, #7
 80063a8:	2201      	movs	r2, #1
 80063aa:	4619      	mov	r1, r3
 80063ac:	f000 fbec 	bl	8006b88 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80063b0:	bf00      	nop
}
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	20000014 	.word	0x20000014

080063bc <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80063c4:	4b14      	ldr	r3, [pc, #80]	; (8006418 <_cbOnUARTTx+0x5c>)
 80063c6:	785b      	ldrb	r3, [r3, #1]
 80063c8:	2b03      	cmp	r3, #3
 80063ca:	d80f      	bhi.n	80063ec <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80063cc:	4b12      	ldr	r3, [pc, #72]	; (8006418 <_cbOnUARTTx+0x5c>)
 80063ce:	785b      	ldrb	r3, [r3, #1]
 80063d0:	461a      	mov	r2, r3
 80063d2:	4b12      	ldr	r3, [pc, #72]	; (800641c <_cbOnUARTTx+0x60>)
 80063d4:	5c9a      	ldrb	r2, [r3, r2]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80063da:	4b0f      	ldr	r3, [pc, #60]	; (8006418 <_cbOnUARTTx+0x5c>)
 80063dc:	785b      	ldrb	r3, [r3, #1]
 80063de:	3301      	adds	r3, #1
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	4b0d      	ldr	r3, [pc, #52]	; (8006418 <_cbOnUARTTx+0x5c>)
 80063e4:	705a      	strb	r2, [r3, #1]
    r = 1;
 80063e6:	2301      	movs	r3, #1
 80063e8:	60fb      	str	r3, [r7, #12]
    goto Done;
 80063ea:	e00f      	b.n	800640c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80063ec:	4b0a      	ldr	r3, [pc, #40]	; (8006418 <_cbOnUARTTx+0x5c>)
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	6879      	ldr	r1, [r7, #4]
 80063f4:	4618      	mov	r0, r3
 80063f6:	f000 fa1b 	bl	8006830 <SEGGER_RTT_ReadUpBufferNoLock>
 80063fa:	4603      	mov	r3, r0
 80063fc:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2b00      	cmp	r3, #0
 8006402:	da02      	bge.n	800640a <_cbOnUARTTx+0x4e>
    r = 0;
 8006404:	2300      	movs	r3, #0
 8006406:	60fb      	str	r3, [r7, #12]
 8006408:	e000      	b.n	800640c <_cbOnUARTTx+0x50>
  }
Done:
 800640a:	bf00      	nop
  return r;
 800640c:	68fb      	ldr	r3, [r7, #12]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	20000014 	.word	0x20000014
 800641c:	080099c4 	.word	0x080099c4

08006420 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8006428:	4a04      	ldr	r2, [pc, #16]	; (800643c <SEGGER_UART_init+0x1c>)
 800642a:	4905      	ldr	r1, [pc, #20]	; (8006440 <SEGGER_UART_init+0x20>)
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 f863 	bl	80064f8 <HIF_UART_Init>
}
 8006432:	bf00      	nop
 8006434:	3708      	adds	r7, #8
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	0800637d 	.word	0x0800637d
 8006440:	080063bd 	.word	0x080063bd

08006444 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800644a:	4b1e      	ldr	r3, [pc, #120]	; (80064c4 <USART2_IRQHandler+0x80>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f003 0320 	and.w	r3, r3, #32
 8006456:	2b00      	cmp	r3, #0
 8006458:	d011      	beq.n	800647e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800645a:	4b1b      	ldr	r3, [pc, #108]	; (80064c8 <USART2_IRQHandler+0x84>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	b2db      	uxtb	r3, r3
 8006460:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f003 030b 	and.w	r3, r3, #11
 8006468:	2b00      	cmp	r3, #0
 800646a:	d108      	bne.n	800647e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800646c:	4b17      	ldr	r3, [pc, #92]	; (80064cc <USART2_IRQHandler+0x88>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d004      	beq.n	800647e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8006474:	4b15      	ldr	r3, [pc, #84]	; (80064cc <USART2_IRQHandler+0x88>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	79fa      	ldrb	r2, [r7, #7]
 800647a:	4610      	mov	r0, r2
 800647c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006484:	2b00      	cmp	r3, #0
 8006486:	d01a      	beq.n	80064be <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8006488:	4b11      	ldr	r3, [pc, #68]	; (80064d0 <USART2_IRQHandler+0x8c>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d015      	beq.n	80064bc <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8006490:	4b0f      	ldr	r3, [pc, #60]	; (80064d0 <USART2_IRQHandler+0x8c>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	1dfa      	adds	r2, r7, #7
 8006496:	4610      	mov	r0, r2
 8006498:	4798      	blx	r3
 800649a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d106      	bne.n	80064b0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80064a2:	4b0c      	ldr	r3, [pc, #48]	; (80064d4 <USART2_IRQHandler+0x90>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a0b      	ldr	r2, [pc, #44]	; (80064d4 <USART2_IRQHandler+0x90>)
 80064a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ac:	6013      	str	r3, [r2, #0]
 80064ae:	e006      	b.n	80064be <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80064b0:	4b04      	ldr	r3, [pc, #16]	; (80064c4 <USART2_IRQHandler+0x80>)
 80064b2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80064b4:	79fa      	ldrb	r2, [r7, #7]
 80064b6:	4b04      	ldr	r3, [pc, #16]	; (80064c8 <USART2_IRQHandler+0x84>)
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	e000      	b.n	80064be <USART2_IRQHandler+0x7a>
      return;
 80064bc:	bf00      	nop
    }
  }
}
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	40004400 	.word	0x40004400
 80064c8:	40004404 	.word	0x40004404
 80064cc:	200130a0 	.word	0x200130a0
 80064d0:	200130a4 	.word	0x200130a4
 80064d4:	4000440c 	.word	0x4000440c

080064d8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80064d8:	b480      	push	{r7}
 80064da:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80064dc:	4b05      	ldr	r3, [pc, #20]	; (80064f4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a04      	ldr	r2, [pc, #16]	; (80064f4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80064e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e6:	6013      	str	r3, [r2, #0]
}
 80064e8:	bf00      	nop
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	4000440c 	.word	0x4000440c

080064f8 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8006504:	4b2e      	ldr	r3, [pc, #184]	; (80065c0 <HIF_UART_Init+0xc8>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a2d      	ldr	r2, [pc, #180]	; (80065c0 <HIF_UART_Init+0xc8>)
 800650a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800650e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8006510:	4b2c      	ldr	r3, [pc, #176]	; (80065c4 <HIF_UART_Init+0xcc>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a2b      	ldr	r2, [pc, #172]	; (80065c4 <HIF_UART_Init+0xcc>)
 8006516:	f043 0301 	orr.w	r3, r3, #1
 800651a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 800651c:	4b2a      	ldr	r3, [pc, #168]	; (80065c8 <HIF_UART_Init+0xd0>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006528:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8006530:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8006532:	4a25      	ldr	r2, [pc, #148]	; (80065c8 <HIF_UART_Init+0xd0>)
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8006538:	4b24      	ldr	r3, [pc, #144]	; (80065cc <HIF_UART_Init+0xd4>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006544:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800654c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800654e:	4a1f      	ldr	r2, [pc, #124]	; (80065cc <HIF_UART_Init+0xd4>)
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8006554:	4b1e      	ldr	r3, [pc, #120]	; (80065d0 <HIF_UART_Init+0xd8>)
 8006556:	f24a 022c 	movw	r2, #41004	; 0xa02c
 800655a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 800655c:	4b1d      	ldr	r3, [pc, #116]	; (80065d4 <HIF_UART_Init+0xdc>)
 800655e:	2200      	movs	r2, #0
 8006560:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8006562:	4b1d      	ldr	r3, [pc, #116]	; (80065d8 <HIF_UART_Init+0xe0>)
 8006564:	2280      	movs	r2, #128	; 0x80
 8006566:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	00db      	lsls	r3, r3, #3
 800656c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800656e:	4a1b      	ldr	r2, [pc, #108]	; (80065dc <HIF_UART_Init+0xe4>)
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	fbb2 f3f3 	udiv	r3, r2, r3
 8006576:	3301      	adds	r3, #1
 8006578:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	085b      	lsrs	r3, r3, #1
 800657e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006586:	d302      	bcc.n	800658e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8006588:	f640 73ff 	movw	r3, #4095	; 0xfff
 800658c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d004      	beq.n	800659e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	011b      	lsls	r3, r3, #4
 8006598:	4a11      	ldr	r2, [pc, #68]	; (80065e0 <HIF_UART_Init+0xe8>)
 800659a:	b29b      	uxth	r3, r3
 800659c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800659e:	4a11      	ldr	r2, [pc, #68]	; (80065e4 <HIF_UART_Init+0xec>)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80065a4:	4a10      	ldr	r2, [pc, #64]	; (80065e8 <HIF_UART_Init+0xf0>)
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80065aa:	2106      	movs	r1, #6
 80065ac:	2026      	movs	r0, #38	; 0x26
 80065ae:	f7ff feab 	bl	8006308 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80065b2:	2026      	movs	r0, #38	; 0x26
 80065b4:	f7ff fe8a 	bl	80062cc <__NVIC_EnableIRQ>
}
 80065b8:	bf00      	nop
 80065ba:	3718      	adds	r7, #24
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	40023840 	.word	0x40023840
 80065c4:	40023830 	.word	0x40023830
 80065c8:	40020020 	.word	0x40020020
 80065cc:	40020000 	.word	0x40020000
 80065d0:	4000440c 	.word	0x4000440c
 80065d4:	40004410 	.word	0x40004410
 80065d8:	40004414 	.word	0x40004414
 80065dc:	0501bd00 	.word	0x0501bd00
 80065e0:	40004408 	.word	0x40004408
 80065e4:	200130a0 	.word	0x200130a0
 80065e8:	200130a4 	.word	0x200130a4

080065ec <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80065f2:	4b26      	ldr	r3, [pc, #152]	; (800668c <_DoInit+0xa0>)
 80065f4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80065f6:	22a8      	movs	r2, #168	; 0xa8
 80065f8:	2100      	movs	r1, #0
 80065fa:	6838      	ldr	r0, [r7, #0]
 80065fc:	f001 fef6 	bl	80083ec <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	2203      	movs	r2, #3
 8006604:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	2203      	movs	r2, #3
 800660a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	4a20      	ldr	r2, [pc, #128]	; (8006690 <_DoInit+0xa4>)
 8006610:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	4a1f      	ldr	r2, [pc, #124]	; (8006694 <_DoInit+0xa8>)
 8006616:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800661e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	2200      	movs	r2, #0
 8006624:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	2200      	movs	r2, #0
 800662a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	2200      	movs	r2, #0
 8006630:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	4a16      	ldr	r2, [pc, #88]	; (8006690 <_DoInit+0xa4>)
 8006636:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	4a17      	ldr	r2, [pc, #92]	; (8006698 <_DoInit+0xac>)
 800663c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	2210      	movs	r2, #16
 8006642:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	2200      	movs	r2, #0
 8006648:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2200      	movs	r2, #0
 800664e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	2200      	movs	r2, #0
 8006654:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8006656:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800665a:	2300      	movs	r3, #0
 800665c:	607b      	str	r3, [r7, #4]
 800665e:	e00c      	b.n	800667a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f1c3 030f 	rsb	r3, r3, #15
 8006666:	4a0d      	ldr	r2, [pc, #52]	; (800669c <_DoInit+0xb0>)
 8006668:	5cd1      	ldrb	r1, [r2, r3]
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4413      	add	r3, r2
 8006670:	460a      	mov	r2, r1
 8006672:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	3301      	adds	r3, #1
 8006678:	607b      	str	r3, [r7, #4]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2b0f      	cmp	r3, #15
 800667e:	d9ef      	bls.n	8006660 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8006680:	f3bf 8f5f 	dmb	sy
}
 8006684:	bf00      	nop
 8006686:	3708      	adds	r7, #8
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	200130a8 	.word	0x200130a8
 8006690:	08009990 	.word	0x08009990
 8006694:	20013150 	.word	0x20013150
 8006698:	20013550 	.word	0x20013550
 800669c:	080099c8 	.word	0x080099c8

080066a0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b08a      	sub	sp, #40	; 0x28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80066ac:	2300      	movs	r3, #0
 80066ae:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d905      	bls.n	80066d0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	3b01      	subs	r3, #1
 80066cc:	627b      	str	r3, [r7, #36]	; 0x24
 80066ce:	e007      	b.n	80066e0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	689a      	ldr	r2, [r3, #8]
 80066d4:	69b9      	ldr	r1, [r7, #24]
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	1acb      	subs	r3, r1, r3
 80066da:	4413      	add	r3, r2
 80066dc:	3b01      	subs	r3, #1
 80066de:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	689a      	ldr	r2, [r3, #8]
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ea:	4293      	cmp	r3, r2
 80066ec:	bf28      	it	cs
 80066ee:	4613      	movcs	r3, r2
 80066f0:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80066f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4293      	cmp	r3, r2
 80066f8:	bf28      	it	cs
 80066fa:	4613      	movcs	r3, r2
 80066fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	4413      	add	r3, r2
 8006706:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8006708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800670a:	68b9      	ldr	r1, [r7, #8]
 800670c:	6978      	ldr	r0, [r7, #20]
 800670e:	f001 fe5f 	bl	80083d0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8006712:	6a3a      	ldr	r2, [r7, #32]
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	4413      	add	r3, r2
 8006718:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671e:	4413      	add	r3, r2
 8006720:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800672a:	69fa      	ldr	r2, [r7, #28]
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	4413      	add	r3, r2
 8006730:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	69fa      	ldr	r2, [r7, #28]
 8006738:	429a      	cmp	r2, r3
 800673a:	d101      	bne.n	8006740 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800673c:	2300      	movs	r3, #0
 800673e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006740:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	69fa      	ldr	r2, [r7, #28]
 8006748:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1b2      	bne.n	80066b6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8006750:	6a3b      	ldr	r3, [r7, #32]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3728      	adds	r7, #40	; 0x28
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800675a:	b580      	push	{r7, lr}
 800675c:	b088      	sub	sp, #32
 800675e:	af00      	add	r7, sp, #0
 8006760:	60f8      	str	r0, [r7, #12]
 8006762:	60b9      	str	r1, [r7, #8]
 8006764:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	689a      	ldr	r2, [r3, #8]
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8006776:	69ba      	ldr	r2, [r7, #24]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	429a      	cmp	r2, r3
 800677c:	d911      	bls.n	80067a2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	4413      	add	r3, r2
 8006786:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	68b9      	ldr	r1, [r7, #8]
 800678c:	6938      	ldr	r0, [r7, #16]
 800678e:	f001 fe1f 	bl	80083d0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006792:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8006796:	69fa      	ldr	r2, [r7, #28]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	441a      	add	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80067a0:	e01f      	b.n	80067e2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	685a      	ldr	r2, [r3, #4]
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	4413      	add	r3, r2
 80067ae:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	68b9      	ldr	r1, [r7, #8]
 80067b4:	6938      	ldr	r0, [r7, #16]
 80067b6:	f001 fe0b 	bl	80083d0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	4413      	add	r3, r2
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	4619      	mov	r1, r3
 80067d2:	6938      	ldr	r0, [r7, #16]
 80067d4:	f001 fdfc 	bl	80083d0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80067d8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	60da      	str	r2, [r3, #12]
}
 80067e2:	bf00      	nop
 80067e4:	3720      	adds	r7, #32
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80067ea:	b480      	push	{r7}
 80067ec:	b087      	sub	sp, #28
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	429a      	cmp	r2, r3
 8006804:	d808      	bhi.n	8006818 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	689a      	ldr	r2, [r3, #8]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	1ad2      	subs	r2, r2, r3
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	4413      	add	r3, r2
 8006812:	3b01      	subs	r3, #1
 8006814:	617b      	str	r3, [r7, #20]
 8006816:	e004      	b.n	8006822 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	3b01      	subs	r3, #1
 8006820:	617b      	str	r3, [r7, #20]
  }
  return r;
 8006822:	697b      	ldr	r3, [r7, #20]
}
 8006824:	4618      	mov	r0, r3
 8006826:	371c      	adds	r7, #28
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8006830:	b580      	push	{r7, lr}
 8006832:	b08c      	sub	sp, #48	; 0x30
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 800683c:	4b3e      	ldr	r3, [pc, #248]	; (8006938 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800683e:	623b      	str	r3, [r7, #32]
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800684a:	f7ff fecf 	bl	80065ec <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	1c5a      	adds	r2, r3, #1
 8006852:	4613      	mov	r3, r2
 8006854:	005b      	lsls	r3, r3, #1
 8006856:	4413      	add	r3, r2
 8006858:	00db      	lsls	r3, r3, #3
 800685a:	4a37      	ldr	r2, [pc, #220]	; (8006938 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800685c:	4413      	add	r3, r2
 800685e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8006870:	2300      	movs	r3, #0
 8006872:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8006874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	429a      	cmp	r2, r3
 800687a:	d92b      	bls.n	80068d4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	689a      	ldr	r2, [r3, #8]
 8006880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4293      	cmp	r3, r2
 800688c:	bf28      	it	cs
 800688e:	4613      	movcs	r3, r2
 8006890:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006898:	4413      	add	r3, r2
 800689a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	6939      	ldr	r1, [r7, #16]
 80068a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068a2:	f001 fd95 	bl	80083d0 <memcpy>
    NumBytesRead += NumBytesRem;
 80068a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	4413      	add	r3, r2
 80068ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80068ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	4413      	add	r3, r2
 80068b4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80068be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	4413      	add	r3, r2
 80068c4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d101      	bne.n	80068d4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80068d0:	2300      	movs	r3, #0
 80068d2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80068d4:	69ba      	ldr	r2, [r7, #24]
 80068d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4293      	cmp	r3, r2
 80068e2:	bf28      	it	cs
 80068e4:	4613      	movcs	r3, r2
 80068e6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d019      	beq.n	8006922 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f4:	4413      	add	r3, r2
 80068f6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	6939      	ldr	r1, [r7, #16]
 80068fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068fe:	f001 fd67 	bl	80083d0 <memcpy>
    NumBytesRead += NumBytesRem;
 8006902:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	4413      	add	r3, r2
 8006908:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800690a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	4413      	add	r3, r2
 8006910:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800691a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	4413      	add	r3, r2
 8006920:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8006922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800692c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800692e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006930:	4618      	mov	r0, r3
 8006932:	3730      	adds	r7, #48	; 0x30
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	200130a8 	.word	0x200130a8

0800693c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800693c:	b580      	push	{r7, lr}
 800693e:	b08c      	sub	sp, #48	; 0x30
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8006948:	4b3e      	ldr	r3, [pc, #248]	; (8006a44 <SEGGER_RTT_ReadNoLock+0x108>)
 800694a:	623b      	str	r3, [r7, #32]
 800694c:	6a3b      	ldr	r3, [r7, #32]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <SEGGER_RTT_ReadNoLock+0x1e>
 8006956:	f7ff fe49 	bl	80065ec <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	4613      	mov	r3, r2
 800695e:	005b      	lsls	r3, r3, #1
 8006960:	4413      	add	r3, r2
 8006962:	00db      	lsls	r3, r3, #3
 8006964:	3360      	adds	r3, #96	; 0x60
 8006966:	4a37      	ldr	r2, [pc, #220]	; (8006a44 <SEGGER_RTT_ReadNoLock+0x108>)
 8006968:	4413      	add	r3, r2
 800696a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800697c:	2300      	movs	r3, #0
 800697e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8006980:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	429a      	cmp	r2, r3
 8006986:	d92b      	bls.n	80069e0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4293      	cmp	r3, r2
 8006998:	bf28      	it	cs
 800699a:	4613      	movcs	r3, r2
 800699c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a4:	4413      	add	r3, r2
 80069a6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	6939      	ldr	r1, [r7, #16]
 80069ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069ae:	f001 fd0f 	bl	80083d0 <memcpy>
    NumBytesRead += NumBytesRem;
 80069b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	4413      	add	r3, r2
 80069b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80069ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	4413      	add	r3, r2
 80069c0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80069ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	4413      	add	r3, r2
 80069d0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069d8:	429a      	cmp	r2, r3
 80069da:	d101      	bne.n	80069e0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80069dc:	2300      	movs	r3, #0
 80069de:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80069e0:	69ba      	ldr	r2, [r7, #24]
 80069e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4293      	cmp	r3, r2
 80069ee:	bf28      	it	cs
 80069f0:	4613      	movcs	r3, r2
 80069f2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d019      	beq.n	8006a2e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a00:	4413      	add	r3, r2
 8006a02:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	6939      	ldr	r1, [r7, #16]
 8006a08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a0a:	f001 fce1 	bl	80083d0 <memcpy>
    NumBytesRead += NumBytesRem;
 8006a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	4413      	add	r3, r2
 8006a14:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8006a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006a26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8006a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d002      	beq.n	8006a3a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a38:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8006a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3730      	adds	r7, #48	; 0x30
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	200130a8 	.word	0x200130a8

08006a48 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b088      	sub	sp, #32
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	005b      	lsls	r3, r3, #1
 8006a5e:	4413      	add	r3, r2
 8006a60:	00db      	lsls	r3, r3, #3
 8006a62:	3360      	adds	r3, #96	; 0x60
 8006a64:	4a1f      	ldr	r2, [pc, #124]	; (8006ae4 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8006a66:	4413      	add	r3, r2
 8006a68:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d029      	beq.n	8006ac6 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d82e      	bhi.n	8006ad4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d002      	beq.n	8006a80 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d013      	beq.n	8006aa6 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8006a7e:	e029      	b.n	8006ad4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8006a80:	6978      	ldr	r0, [r7, #20]
 8006a82:	f7ff feb2 	bl	80067ea <_GetAvailWriteSpace>
 8006a86:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d202      	bcs.n	8006a96 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8006a90:	2300      	movs	r3, #0
 8006a92:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8006a94:	e021      	b.n	8006ada <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	69b9      	ldr	r1, [r7, #24]
 8006a9e:	6978      	ldr	r0, [r7, #20]
 8006aa0:	f7ff fe5b 	bl	800675a <_WriteNoCheck>
    break;
 8006aa4:	e019      	b.n	8006ada <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8006aa6:	6978      	ldr	r0, [r7, #20]
 8006aa8:	f7ff fe9f 	bl	80067ea <_GetAvailWriteSpace>
 8006aac:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	bf28      	it	cs
 8006ab6:	4613      	movcs	r3, r2
 8006ab8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8006aba:	69fa      	ldr	r2, [r7, #28]
 8006abc:	69b9      	ldr	r1, [r7, #24]
 8006abe:	6978      	ldr	r0, [r7, #20]
 8006ac0:	f7ff fe4b 	bl	800675a <_WriteNoCheck>
    break;
 8006ac4:	e009      	b.n	8006ada <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	69b9      	ldr	r1, [r7, #24]
 8006aca:	6978      	ldr	r0, [r7, #20]
 8006acc:	f7ff fde8 	bl	80066a0 <_WriteBlocking>
 8006ad0:	61f8      	str	r0, [r7, #28]
    break;
 8006ad2:	e002      	b.n	8006ada <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	61fb      	str	r3, [r7, #28]
    break;
 8006ad8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8006ada:	69fb      	ldr	r3, [r7, #28]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3720      	adds	r7, #32
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	200130a8 	.word	0x200130a8

08006ae8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b088      	sub	sp, #32
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	1c5a      	adds	r2, r3, #1
 8006afc:	4613      	mov	r3, r2
 8006afe:	005b      	lsls	r3, r3, #1
 8006b00:	4413      	add	r3, r2
 8006b02:	00db      	lsls	r3, r3, #3
 8006b04:	4a1f      	ldr	r2, [pc, #124]	; (8006b84 <SEGGER_RTT_WriteNoLock+0x9c>)
 8006b06:	4413      	add	r3, r2
 8006b08:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d029      	beq.n	8006b66 <SEGGER_RTT_WriteNoLock+0x7e>
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d82e      	bhi.n	8006b74 <SEGGER_RTT_WriteNoLock+0x8c>
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d002      	beq.n	8006b20 <SEGGER_RTT_WriteNoLock+0x38>
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d013      	beq.n	8006b46 <SEGGER_RTT_WriteNoLock+0x5e>
 8006b1e:	e029      	b.n	8006b74 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8006b20:	6978      	ldr	r0, [r7, #20]
 8006b22:	f7ff fe62 	bl	80067ea <_GetAvailWriteSpace>
 8006b26:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d202      	bcs.n	8006b36 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8006b30:	2300      	movs	r3, #0
 8006b32:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8006b34:	e021      	b.n	8006b7a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	69b9      	ldr	r1, [r7, #24]
 8006b3e:	6978      	ldr	r0, [r7, #20]
 8006b40:	f7ff fe0b 	bl	800675a <_WriteNoCheck>
    break;
 8006b44:	e019      	b.n	8006b7a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8006b46:	6978      	ldr	r0, [r7, #20]
 8006b48:	f7ff fe4f 	bl	80067ea <_GetAvailWriteSpace>
 8006b4c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	4293      	cmp	r3, r2
 8006b54:	bf28      	it	cs
 8006b56:	4613      	movcs	r3, r2
 8006b58:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8006b5a:	69fa      	ldr	r2, [r7, #28]
 8006b5c:	69b9      	ldr	r1, [r7, #24]
 8006b5e:	6978      	ldr	r0, [r7, #20]
 8006b60:	f7ff fdfb 	bl	800675a <_WriteNoCheck>
    break;
 8006b64:	e009      	b.n	8006b7a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	69b9      	ldr	r1, [r7, #24]
 8006b6a:	6978      	ldr	r0, [r7, #20]
 8006b6c:	f7ff fd98 	bl	80066a0 <_WriteBlocking>
 8006b70:	61f8      	str	r0, [r7, #28]
    break;
 8006b72:	e002      	b.n	8006b7a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8006b74:	2300      	movs	r3, #0
 8006b76:	61fb      	str	r3, [r7, #28]
    break;
 8006b78:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8006b7a:	69fb      	ldr	r3, [r7, #28]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3720      	adds	r7, #32
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	200130a8 	.word	0x200130a8

08006b88 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b088      	sub	sp, #32
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8006b94:	4b0e      	ldr	r3, [pc, #56]	; (8006bd0 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8006b96:	61fb      	str	r3, [r7, #28]
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8006ba2:	f7ff fd23 	bl	80065ec <_DoInit>
  SEGGER_RTT_LOCK();
 8006ba6:	f3ef 8311 	mrs	r3, BASEPRI
 8006baa:	f04f 0120 	mov.w	r1, #32
 8006bae:	f381 8811 	msr	BASEPRI, r1
 8006bb2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	68b9      	ldr	r1, [r7, #8]
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f7ff ff45 	bl	8006a48 <SEGGER_RTT_WriteDownBufferNoLock>
 8006bbe:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8006bc6:	697b      	ldr	r3, [r7, #20]
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3720      	adds	r7, #32
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	200130a8 	.word	0x200130a8

08006bd4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b088      	sub	sp, #32
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8006be0:	4b0e      	ldr	r3, [pc, #56]	; (8006c1c <SEGGER_RTT_Write+0x48>)
 8006be2:	61fb      	str	r3, [r7, #28]
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d101      	bne.n	8006bf2 <SEGGER_RTT_Write+0x1e>
 8006bee:	f7ff fcfd 	bl	80065ec <_DoInit>
  SEGGER_RTT_LOCK();
 8006bf2:	f3ef 8311 	mrs	r3, BASEPRI
 8006bf6:	f04f 0120 	mov.w	r1, #32
 8006bfa:	f381 8811 	msr	BASEPRI, r1
 8006bfe:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	68b9      	ldr	r1, [r7, #8]
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f7ff ff6f 	bl	8006ae8 <SEGGER_RTT_WriteNoLock>
 8006c0a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8006c12:	697b      	ldr	r3, [r7, #20]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3720      	adds	r7, #32
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	200130a8 	.word	0x200130a8

08006c20 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b088      	sub	sp, #32
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
 8006c2c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8006c2e:	4b3d      	ldr	r3, [pc, #244]	; (8006d24 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8006c30:	61bb      	str	r3, [r7, #24]
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <SEGGER_RTT_AllocUpBuffer+0x20>
 8006c3c:	f7ff fcd6 	bl	80065ec <_DoInit>
  SEGGER_RTT_LOCK();
 8006c40:	f3ef 8311 	mrs	r3, BASEPRI
 8006c44:	f04f 0120 	mov.w	r1, #32
 8006c48:	f381 8811 	msr	BASEPRI, r1
 8006c4c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006c4e:	4b35      	ldr	r3, [pc, #212]	; (8006d24 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8006c50:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8006c56:	6939      	ldr	r1, [r7, #16]
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	1c5a      	adds	r2, r3, #1
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	005b      	lsls	r3, r3, #1
 8006c60:	4413      	add	r3, r2
 8006c62:	00db      	lsls	r3, r3, #3
 8006c64:	440b      	add	r3, r1
 8006c66:	3304      	adds	r3, #4
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d008      	beq.n	8006c80 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	3301      	adds	r3, #1
 8006c72:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	69fa      	ldr	r2, [r7, #28]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	dbeb      	blt.n	8006c56 <SEGGER_RTT_AllocUpBuffer+0x36>
 8006c7e:	e000      	b.n	8006c82 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8006c80:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	69fa      	ldr	r2, [r7, #28]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	da3f      	bge.n	8006d0c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8006c8c:	6939      	ldr	r1, [r7, #16]
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	1c5a      	adds	r2, r3, #1
 8006c92:	4613      	mov	r3, r2
 8006c94:	005b      	lsls	r3, r3, #1
 8006c96:	4413      	add	r3, r2
 8006c98:	00db      	lsls	r3, r3, #3
 8006c9a:	440b      	add	r3, r1
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8006ca0:	6939      	ldr	r1, [r7, #16]
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	1c5a      	adds	r2, r3, #1
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	4413      	add	r3, r2
 8006cac:	00db      	lsls	r3, r3, #3
 8006cae:	440b      	add	r3, r1
 8006cb0:	3304      	adds	r3, #4
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8006cb6:	6939      	ldr	r1, [r7, #16]
 8006cb8:	69fa      	ldr	r2, [r7, #28]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	005b      	lsls	r3, r3, #1
 8006cbe:	4413      	add	r3, r2
 8006cc0:	00db      	lsls	r3, r3, #3
 8006cc2:	440b      	add	r3, r1
 8006cc4:	3320      	adds	r3, #32
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8006cca:	6939      	ldr	r1, [r7, #16]
 8006ccc:	69fa      	ldr	r2, [r7, #28]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	005b      	lsls	r3, r3, #1
 8006cd2:	4413      	add	r3, r2
 8006cd4:	00db      	lsls	r3, r3, #3
 8006cd6:	440b      	add	r3, r1
 8006cd8:	3328      	adds	r3, #40	; 0x28
 8006cda:	2200      	movs	r2, #0
 8006cdc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8006cde:	6939      	ldr	r1, [r7, #16]
 8006ce0:	69fa      	ldr	r2, [r7, #28]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	005b      	lsls	r3, r3, #1
 8006ce6:	4413      	add	r3, r2
 8006ce8:	00db      	lsls	r3, r3, #3
 8006cea:	440b      	add	r3, r1
 8006cec:	3324      	adds	r3, #36	; 0x24
 8006cee:	2200      	movs	r2, #0
 8006cf0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8006cf2:	6939      	ldr	r1, [r7, #16]
 8006cf4:	69fa      	ldr	r2, [r7, #28]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	005b      	lsls	r3, r3, #1
 8006cfa:	4413      	add	r3, r2
 8006cfc:	00db      	lsls	r3, r3, #3
 8006cfe:	440b      	add	r3, r1
 8006d00:	332c      	adds	r3, #44	; 0x2c
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006d06:	f3bf 8f5f 	dmb	sy
 8006d0a:	e002      	b.n	8006d12 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8006d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d10:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8006d18:	69fb      	ldr	r3, [r7, #28]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3720      	adds	r7, #32
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	200130a8 	.word	0x200130a8

08006d28 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b08a      	sub	sp, #40	; 0x28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
 8006d34:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8006d36:	4b21      	ldr	r3, [pc, #132]	; (8006dbc <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8006d38:	623b      	str	r3, [r7, #32]
 8006d3a:	6a3b      	ldr	r3, [r7, #32]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d101      	bne.n	8006d48 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8006d44:	f7ff fc52 	bl	80065ec <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006d48:	4b1c      	ldr	r3, [pc, #112]	; (8006dbc <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8006d4a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d82c      	bhi.n	8006dac <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8006d52:	f3ef 8311 	mrs	r3, BASEPRI
 8006d56:	f04f 0120 	mov.w	r1, #32
 8006d5a:	f381 8811 	msr	BASEPRI, r1
 8006d5e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	4613      	mov	r3, r2
 8006d64:	005b      	lsls	r3, r3, #1
 8006d66:	4413      	add	r3, r2
 8006d68:	00db      	lsls	r3, r3, #3
 8006d6a:	3360      	adds	r3, #96	; 0x60
 8006d6c:	69fa      	ldr	r2, [r7, #28]
 8006d6e:	4413      	add	r3, r2
 8006d70:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00e      	beq.n	8006d96 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	2200      	movs	r2, #0
 8006d94:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d9a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006d9c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8006da6:	2300      	movs	r3, #0
 8006da8:	627b      	str	r3, [r7, #36]	; 0x24
 8006daa:	e002      	b.n	8006db2 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8006dac:	f04f 33ff 	mov.w	r3, #4294967295
 8006db0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8006db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3728      	adds	r7, #40	; 0x28
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	200130a8 	.word	0x200130a8

08006dc0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8006dc0:	b480      	push	{r7}
 8006dc2:	b087      	sub	sp, #28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00f      	beq.n	8006df6 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8006dd6:	e002      	b.n	8006dde <_EncodeStr+0x1e>
      Len++;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	4413      	add	r3, r2
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1f6      	bne.n	8006dd8 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d901      	bls.n	8006df6 <_EncodeStr+0x36>
      Len = Limit;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	2bfe      	cmp	r3, #254	; 0xfe
 8006dfa:	d806      	bhi.n	8006e0a <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	1c5a      	adds	r2, r3, #1
 8006e00:	60fa      	str	r2, [r7, #12]
 8006e02:	693a      	ldr	r2, [r7, #16]
 8006e04:	b2d2      	uxtb	r2, r2
 8006e06:	701a      	strb	r2, [r3, #0]
 8006e08:	e011      	b.n	8006e2e <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	1c5a      	adds	r2, r3, #1
 8006e0e:	60fa      	str	r2, [r7, #12]
 8006e10:	22ff      	movs	r2, #255	; 0xff
 8006e12:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	1c5a      	adds	r2, r3, #1
 8006e18:	60fa      	str	r2, [r7, #12]
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	b2d2      	uxtb	r2, r2
 8006e1e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	0a19      	lsrs	r1, r3, #8
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	1c5a      	adds	r2, r3, #1
 8006e28:	60fa      	str	r2, [r7, #12]
 8006e2a:	b2ca      	uxtb	r2, r1
 8006e2c:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006e32:	e00a      	b.n	8006e4a <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8006e34:	68ba      	ldr	r2, [r7, #8]
 8006e36:	1c53      	adds	r3, r2, #1
 8006e38:	60bb      	str	r3, [r7, #8]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	1c59      	adds	r1, r3, #1
 8006e3e:	60f9      	str	r1, [r7, #12]
 8006e40:	7812      	ldrb	r2, [r2, #0]
 8006e42:	701a      	strb	r2, [r3, #0]
    n++;
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	3301      	adds	r3, #1
 8006e48:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d3f0      	bcc.n	8006e34 <_EncodeStr+0x74>
  }
  return pPayload;
 8006e52:	68fb      	ldr	r3, [r7, #12]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	371c      	adds	r7, #28
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	3307      	adds	r3, #7
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006e7e:	4b35      	ldr	r3, [pc, #212]	; (8006f54 <_HandleIncomingPacket+0xdc>)
 8006e80:	7e1b      	ldrb	r3, [r3, #24]
 8006e82:	4618      	mov	r0, r3
 8006e84:	1cfb      	adds	r3, r7, #3
 8006e86:	2201      	movs	r2, #1
 8006e88:	4619      	mov	r1, r3
 8006e8a:	f7ff fd57 	bl	800693c <SEGGER_RTT_ReadNoLock>
 8006e8e:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d052      	beq.n	8006f3c <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8006e96:	78fb      	ldrb	r3, [r7, #3]
 8006e98:	2b80      	cmp	r3, #128	; 0x80
 8006e9a:	d031      	beq.n	8006f00 <_HandleIncomingPacket+0x88>
 8006e9c:	2b80      	cmp	r3, #128	; 0x80
 8006e9e:	dc40      	bgt.n	8006f22 <_HandleIncomingPacket+0xaa>
 8006ea0:	2b07      	cmp	r3, #7
 8006ea2:	dc15      	bgt.n	8006ed0 <_HandleIncomingPacket+0x58>
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	dd3c      	ble.n	8006f22 <_HandleIncomingPacket+0xaa>
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	2b06      	cmp	r3, #6
 8006eac:	d839      	bhi.n	8006f22 <_HandleIncomingPacket+0xaa>
 8006eae:	a201      	add	r2, pc, #4	; (adr r2, 8006eb4 <_HandleIncomingPacket+0x3c>)
 8006eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb4:	08006ed7 	.word	0x08006ed7
 8006eb8:	08006edd 	.word	0x08006edd
 8006ebc:	08006ee3 	.word	0x08006ee3
 8006ec0:	08006ee9 	.word	0x08006ee9
 8006ec4:	08006eef 	.word	0x08006eef
 8006ec8:	08006ef5 	.word	0x08006ef5
 8006ecc:	08006efb 	.word	0x08006efb
 8006ed0:	2b7f      	cmp	r3, #127	; 0x7f
 8006ed2:	d035      	beq.n	8006f40 <_HandleIncomingPacket+0xc8>
 8006ed4:	e025      	b.n	8006f22 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8006ed6:	f000 fc33 	bl	8007740 <SEGGER_SYSVIEW_Start>
      break;
 8006eda:	e036      	b.n	8006f4a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006edc:	f000 fcec 	bl	80078b8 <SEGGER_SYSVIEW_Stop>
      break;
 8006ee0:	e033      	b.n	8006f4a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8006ee2:	f000 fec5 	bl	8007c70 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8006ee6:	e030      	b.n	8006f4a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006ee8:	f000 fe8a 	bl	8007c00 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006eec:	e02d      	b.n	8006f4a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8006eee:	f000 fd09 	bl	8007904 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8006ef2:	e02a      	b.n	8006f4a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006ef4:	f001 f958 	bl	80081a8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8006ef8:	e027      	b.n	8006f4a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8006efa:	f001 f937 	bl	800816c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8006efe:	e024      	b.n	8006f4a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006f00:	4b14      	ldr	r3, [pc, #80]	; (8006f54 <_HandleIncomingPacket+0xdc>)
 8006f02:	7e1b      	ldrb	r3, [r3, #24]
 8006f04:	4618      	mov	r0, r3
 8006f06:	1cfb      	adds	r3, r7, #3
 8006f08:	2201      	movs	r2, #1
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	f7ff fd16 	bl	800693c <SEGGER_RTT_ReadNoLock>
 8006f10:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d015      	beq.n	8006f44 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8006f18:	78fb      	ldrb	r3, [r7, #3]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f001 f8a6 	bl	800806c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8006f20:	e010      	b.n	8006f44 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8006f22:	78fb      	ldrb	r3, [r7, #3]
 8006f24:	b25b      	sxtb	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	da0e      	bge.n	8006f48 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006f2a:	4b0a      	ldr	r3, [pc, #40]	; (8006f54 <_HandleIncomingPacket+0xdc>)
 8006f2c:	7e1b      	ldrb	r3, [r3, #24]
 8006f2e:	4618      	mov	r0, r3
 8006f30:	1cfb      	adds	r3, r7, #3
 8006f32:	2201      	movs	r2, #1
 8006f34:	4619      	mov	r1, r3
 8006f36:	f7ff fd01 	bl	800693c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006f3a:	e005      	b.n	8006f48 <_HandleIncomingPacket+0xd0>
    }
  }
 8006f3c:	bf00      	nop
 8006f3e:	e004      	b.n	8006f4a <_HandleIncomingPacket+0xd2>
      break;
 8006f40:	bf00      	nop
 8006f42:	e002      	b.n	8006f4a <_HandleIncomingPacket+0xd2>
      break;
 8006f44:	bf00      	nop
 8006f46:	e000      	b.n	8006f4a <_HandleIncomingPacket+0xd2>
      break;
 8006f48:	bf00      	nop
}
 8006f4a:	bf00      	nop
 8006f4c:	3708      	adds	r7, #8
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	20014568 	.word	0x20014568

08006f58 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b08c      	sub	sp, #48	; 0x30
 8006f5c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8006f5e:	2301      	movs	r3, #1
 8006f60:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8006f62:	1d3b      	adds	r3, r7, #4
 8006f64:	3301      	adds	r3, #1
 8006f66:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f6c:	4b32      	ldr	r3, [pc, #200]	; (8007038 <_TrySendOverflowPacket+0xe0>)
 8006f6e:	695b      	ldr	r3, [r3, #20]
 8006f70:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f72:	e00b      	b.n	8006f8c <_TrySendOverflowPacket+0x34>
 8006f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7a:	1c59      	adds	r1, r3, #1
 8006f7c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006f7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f82:	b2d2      	uxtb	r2, r2
 8006f84:	701a      	strb	r2, [r3, #0]
 8006f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f88:	09db      	lsrs	r3, r3, #7
 8006f8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8e:	2b7f      	cmp	r3, #127	; 0x7f
 8006f90:	d8f0      	bhi.n	8006f74 <_TrySendOverflowPacket+0x1c>
 8006f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f94:	1c5a      	adds	r2, r3, #1
 8006f96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f9a:	b2d2      	uxtb	r2, r2
 8006f9c:	701a      	strb	r2, [r3, #0]
 8006f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006fa2:	4b26      	ldr	r3, [pc, #152]	; (800703c <_TrySendOverflowPacket+0xe4>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006fa8:	4b23      	ldr	r3, [pc, #140]	; (8007038 <_TrySendOverflowPacket+0xe0>)
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	69ba      	ldr	r2, [r7, #24]
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	623b      	str	r3, [r7, #32]
 8006fba:	e00b      	b.n	8006fd4 <_TrySendOverflowPacket+0x7c>
 8006fbc:	6a3b      	ldr	r3, [r7, #32]
 8006fbe:	b2da      	uxtb	r2, r3
 8006fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc2:	1c59      	adds	r1, r3, #1
 8006fc4:	6279      	str	r1, [r7, #36]	; 0x24
 8006fc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fca:	b2d2      	uxtb	r2, r2
 8006fcc:	701a      	strb	r2, [r3, #0]
 8006fce:	6a3b      	ldr	r3, [r7, #32]
 8006fd0:	09db      	lsrs	r3, r3, #7
 8006fd2:	623b      	str	r3, [r7, #32]
 8006fd4:	6a3b      	ldr	r3, [r7, #32]
 8006fd6:	2b7f      	cmp	r3, #127	; 0x7f
 8006fd8:	d8f0      	bhi.n	8006fbc <_TrySendOverflowPacket+0x64>
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	1c5a      	adds	r2, r3, #1
 8006fde:	627a      	str	r2, [r7, #36]	; 0x24
 8006fe0:	6a3a      	ldr	r2, [r7, #32]
 8006fe2:	b2d2      	uxtb	r2, r2
 8006fe4:	701a      	strb	r2, [r3, #0]
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8006fea:	4b13      	ldr	r3, [pc, #76]	; (8007038 <_TrySendOverflowPacket+0xe0>)
 8006fec:	785b      	ldrb	r3, [r3, #1]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	1d3b      	adds	r3, r7, #4
 8006ff2:	69fa      	ldr	r2, [r7, #28]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	1d3b      	adds	r3, r7, #4
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	f7f9 f8e8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007000:	4603      	mov	r3, r0
 8007002:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8007004:	f7ff fa68 	bl	80064d8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d009      	beq.n	8007022 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800700e:	4a0a      	ldr	r2, [pc, #40]	; (8007038 <_TrySendOverflowPacket+0xe0>)
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8007014:	4b08      	ldr	r3, [pc, #32]	; (8007038 <_TrySendOverflowPacket+0xe0>)
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	3b01      	subs	r3, #1
 800701a:	b2da      	uxtb	r2, r3
 800701c:	4b06      	ldr	r3, [pc, #24]	; (8007038 <_TrySendOverflowPacket+0xe0>)
 800701e:	701a      	strb	r2, [r3, #0]
 8007020:	e004      	b.n	800702c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8007022:	4b05      	ldr	r3, [pc, #20]	; (8007038 <_TrySendOverflowPacket+0xe0>)
 8007024:	695b      	ldr	r3, [r3, #20]
 8007026:	3301      	adds	r3, #1
 8007028:	4a03      	ldr	r2, [pc, #12]	; (8007038 <_TrySendOverflowPacket+0xe0>)
 800702a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800702c:	693b      	ldr	r3, [r7, #16]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3730      	adds	r7, #48	; 0x30
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	20014568 	.word	0x20014568
 800703c:	e0001004 	.word	0xe0001004

08007040 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8007040:	b580      	push	{r7, lr}
 8007042:	b08a      	sub	sp, #40	; 0x28
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800704c:	4b96      	ldr	r3, [pc, #600]	; (80072a8 <_SendPacket+0x268>)
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d010      	beq.n	8007076 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8007054:	4b94      	ldr	r3, [pc, #592]	; (80072a8 <_SendPacket+0x268>)
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	f000 8130 	beq.w	80072be <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800705e:	4b92      	ldr	r3, [pc, #584]	; (80072a8 <_SendPacket+0x268>)
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	2b02      	cmp	r3, #2
 8007064:	d109      	bne.n	800707a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8007066:	f7ff ff77 	bl	8006f58 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800706a:	4b8f      	ldr	r3, [pc, #572]	; (80072a8 <_SendPacket+0x268>)
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	2b01      	cmp	r3, #1
 8007070:	f040 8127 	bne.w	80072c2 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8007074:	e001      	b.n	800707a <_SendPacket+0x3a>
    goto Send;
 8007076:	bf00      	nop
 8007078:	e000      	b.n	800707c <_SendPacket+0x3c>
Send:
 800707a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2b1f      	cmp	r3, #31
 8007080:	d809      	bhi.n	8007096 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8007082:	4b89      	ldr	r3, [pc, #548]	; (80072a8 <_SendPacket+0x268>)
 8007084:	69da      	ldr	r2, [r3, #28]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	fa22 f303 	lsr.w	r3, r2, r3
 800708c:	f003 0301 	and.w	r3, r3, #1
 8007090:	2b00      	cmp	r3, #0
 8007092:	f040 8118 	bne.w	80072c6 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2b17      	cmp	r3, #23
 800709a:	d807      	bhi.n	80070ac <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	3b01      	subs	r3, #1
 80070a0:	60fb      	str	r3, [r7, #12]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	b2da      	uxtb	r2, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	701a      	strb	r2, [r3, #0]
 80070aa:	e0c4      	b.n	8007236 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	2b7f      	cmp	r3, #127	; 0x7f
 80070b8:	d912      	bls.n	80070e0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	09da      	lsrs	r2, r3, #7
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	3b01      	subs	r3, #1
 80070c2:	60fb      	str	r3, [r7, #12]
 80070c4:	b2d2      	uxtb	r2, r2
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	3a01      	subs	r2, #1
 80070d2:	60fa      	str	r2, [r7, #12]
 80070d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80070d8:	b2da      	uxtb	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	701a      	strb	r2, [r3, #0]
 80070de:	e006      	b.n	80070ee <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	3b01      	subs	r3, #1
 80070e4:	60fb      	str	r3, [r7, #12]
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b7e      	cmp	r3, #126	; 0x7e
 80070f2:	d807      	bhi.n	8007104 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	3b01      	subs	r3, #1
 80070f8:	60fb      	str	r3, [r7, #12]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	701a      	strb	r2, [r3, #0]
 8007102:	e098      	b.n	8007236 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800710a:	d212      	bcs.n	8007132 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	09da      	lsrs	r2, r3, #7
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	3b01      	subs	r3, #1
 8007114:	60fb      	str	r3, [r7, #12]
 8007116:	b2d2      	uxtb	r2, r2
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	b2db      	uxtb	r3, r3
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	3a01      	subs	r2, #1
 8007124:	60fa      	str	r2, [r7, #12]
 8007126:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800712a:	b2da      	uxtb	r2, r3
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	701a      	strb	r2, [r3, #0]
 8007130:	e081      	b.n	8007236 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007138:	d21d      	bcs.n	8007176 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	0b9a      	lsrs	r2, r3, #14
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	3b01      	subs	r3, #1
 8007142:	60fb      	str	r3, [r7, #12]
 8007144:	b2d2      	uxtb	r2, r2
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	09db      	lsrs	r3, r3, #7
 800714e:	b2db      	uxtb	r3, r3
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	3a01      	subs	r2, #1
 8007154:	60fa      	str	r2, [r7, #12]
 8007156:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800715a:	b2da      	uxtb	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	b2db      	uxtb	r3, r3
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	3a01      	subs	r2, #1
 8007168:	60fa      	str	r2, [r7, #12]
 800716a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800716e:	b2da      	uxtb	r2, r3
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	701a      	strb	r2, [r3, #0]
 8007174:	e05f      	b.n	8007236 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800717c:	d228      	bcs.n	80071d0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	0d5a      	lsrs	r2, r3, #21
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	3b01      	subs	r3, #1
 8007186:	60fb      	str	r3, [r7, #12]
 8007188:	b2d2      	uxtb	r2, r2
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	0b9b      	lsrs	r3, r3, #14
 8007192:	b2db      	uxtb	r3, r3
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	3a01      	subs	r2, #1
 8007198:	60fa      	str	r2, [r7, #12]
 800719a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800719e:	b2da      	uxtb	r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	09db      	lsrs	r3, r3, #7
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	3a01      	subs	r2, #1
 80071ae:	60fa      	str	r2, [r7, #12]
 80071b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80071b4:	b2da      	uxtb	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	3a01      	subs	r2, #1
 80071c2:	60fa      	str	r2, [r7, #12]
 80071c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	701a      	strb	r2, [r3, #0]
 80071ce:	e032      	b.n	8007236 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	0f1a      	lsrs	r2, r3, #28
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	3b01      	subs	r3, #1
 80071d8:	60fb      	str	r3, [r7, #12]
 80071da:	b2d2      	uxtb	r2, r2
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	0d5b      	lsrs	r3, r3, #21
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	3a01      	subs	r2, #1
 80071ea:	60fa      	str	r2, [r7, #12]
 80071ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80071f0:	b2da      	uxtb	r2, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	0b9b      	lsrs	r3, r3, #14
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	3a01      	subs	r2, #1
 8007200:	60fa      	str	r2, [r7, #12]
 8007202:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007206:	b2da      	uxtb	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	09db      	lsrs	r3, r3, #7
 8007210:	b2db      	uxtb	r3, r3
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	3a01      	subs	r2, #1
 8007216:	60fa      	str	r2, [r7, #12]
 8007218:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800721c:	b2da      	uxtb	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	b2db      	uxtb	r3, r3
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	3a01      	subs	r2, #1
 800722a:	60fa      	str	r2, [r7, #12]
 800722c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007230:	b2da      	uxtb	r2, r3
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007236:	4b1d      	ldr	r3, [pc, #116]	; (80072ac <_SendPacket+0x26c>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800723c:	4b1a      	ldr	r3, [pc, #104]	; (80072a8 <_SendPacket+0x268>)
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	69ba      	ldr	r2, [r7, #24]
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	627b      	str	r3, [r7, #36]	; 0x24
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	623b      	str	r3, [r7, #32]
 800724e:	e00b      	b.n	8007268 <_SendPacket+0x228>
 8007250:	6a3b      	ldr	r3, [r7, #32]
 8007252:	b2da      	uxtb	r2, r3
 8007254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007256:	1c59      	adds	r1, r3, #1
 8007258:	6279      	str	r1, [r7, #36]	; 0x24
 800725a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800725e:	b2d2      	uxtb	r2, r2
 8007260:	701a      	strb	r2, [r3, #0]
 8007262:	6a3b      	ldr	r3, [r7, #32]
 8007264:	09db      	lsrs	r3, r3, #7
 8007266:	623b      	str	r3, [r7, #32]
 8007268:	6a3b      	ldr	r3, [r7, #32]
 800726a:	2b7f      	cmp	r3, #127	; 0x7f
 800726c:	d8f0      	bhi.n	8007250 <_SendPacket+0x210>
 800726e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007270:	1c5a      	adds	r2, r3, #1
 8007272:	627a      	str	r2, [r7, #36]	; 0x24
 8007274:	6a3a      	ldr	r2, [r7, #32]
 8007276:	b2d2      	uxtb	r2, r2
 8007278:	701a      	strb	r2, [r3, #0]
 800727a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800727e:	4b0a      	ldr	r3, [pc, #40]	; (80072a8 <_SendPacket+0x268>)
 8007280:	785b      	ldrb	r3, [r3, #1]
 8007282:	4618      	mov	r0, r3
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	461a      	mov	r2, r3
 800728c:	68f9      	ldr	r1, [r7, #12]
 800728e:	f7f8 ff9f 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007292:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8007294:	f7ff f920 	bl	80064d8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d008      	beq.n	80072b0 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800729e:	4a02      	ldr	r2, [pc, #8]	; (80072a8 <_SendPacket+0x268>)
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	60d3      	str	r3, [r2, #12]
 80072a4:	e010      	b.n	80072c8 <_SendPacket+0x288>
 80072a6:	bf00      	nop
 80072a8:	20014568 	.word	0x20014568
 80072ac:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80072b0:	4b19      	ldr	r3, [pc, #100]	; (8007318 <_SendPacket+0x2d8>)
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	3301      	adds	r3, #1
 80072b6:	b2da      	uxtb	r2, r3
 80072b8:	4b17      	ldr	r3, [pc, #92]	; (8007318 <_SendPacket+0x2d8>)
 80072ba:	701a      	strb	r2, [r3, #0]
 80072bc:	e004      	b.n	80072c8 <_SendPacket+0x288>
    goto SendDone;
 80072be:	bf00      	nop
 80072c0:	e002      	b.n	80072c8 <_SendPacket+0x288>
      goto SendDone;
 80072c2:	bf00      	nop
 80072c4:	e000      	b.n	80072c8 <_SendPacket+0x288>
      goto SendDone;
 80072c6:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80072c8:	4b13      	ldr	r3, [pc, #76]	; (8007318 <_SendPacket+0x2d8>)
 80072ca:	7e1b      	ldrb	r3, [r3, #24]
 80072cc:	4619      	mov	r1, r3
 80072ce:	4a13      	ldr	r2, [pc, #76]	; (800731c <_SendPacket+0x2dc>)
 80072d0:	460b      	mov	r3, r1
 80072d2:	005b      	lsls	r3, r3, #1
 80072d4:	440b      	add	r3, r1
 80072d6:	00db      	lsls	r3, r3, #3
 80072d8:	4413      	add	r3, r2
 80072da:	336c      	adds	r3, #108	; 0x6c
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	4b0e      	ldr	r3, [pc, #56]	; (8007318 <_SendPacket+0x2d8>)
 80072e0:	7e1b      	ldrb	r3, [r3, #24]
 80072e2:	4618      	mov	r0, r3
 80072e4:	490d      	ldr	r1, [pc, #52]	; (800731c <_SendPacket+0x2dc>)
 80072e6:	4603      	mov	r3, r0
 80072e8:	005b      	lsls	r3, r3, #1
 80072ea:	4403      	add	r3, r0
 80072ec:	00db      	lsls	r3, r3, #3
 80072ee:	440b      	add	r3, r1
 80072f0:	3370      	adds	r3, #112	; 0x70
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d00b      	beq.n	8007310 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80072f8:	4b07      	ldr	r3, [pc, #28]	; (8007318 <_SendPacket+0x2d8>)
 80072fa:	789b      	ldrb	r3, [r3, #2]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d107      	bne.n	8007310 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007300:	4b05      	ldr	r3, [pc, #20]	; (8007318 <_SendPacket+0x2d8>)
 8007302:	2201      	movs	r2, #1
 8007304:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007306:	f7ff fdb7 	bl	8006e78 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800730a:	4b03      	ldr	r3, [pc, #12]	; (8007318 <_SendPacket+0x2d8>)
 800730c:	2200      	movs	r2, #0
 800730e:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8007310:	bf00      	nop
 8007312:	3728      	adds	r7, #40	; 0x28
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	20014568 	.word	0x20014568
 800731c:	200130a8 	.word	0x200130a8

08007320 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af02      	add	r7, sp, #8
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
 800732c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800732e:	2300      	movs	r3, #0
 8007330:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007334:	4917      	ldr	r1, [pc, #92]	; (8007394 <SEGGER_SYSVIEW_Init+0x74>)
 8007336:	4818      	ldr	r0, [pc, #96]	; (8007398 <SEGGER_SYSVIEW_Init+0x78>)
 8007338:	f7ff fc72 	bl	8006c20 <SEGGER_RTT_AllocUpBuffer>
 800733c:	4603      	mov	r3, r0
 800733e:	b2da      	uxtb	r2, r3
 8007340:	4b16      	ldr	r3, [pc, #88]	; (800739c <SEGGER_SYSVIEW_Init+0x7c>)
 8007342:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8007344:	4b15      	ldr	r3, [pc, #84]	; (800739c <SEGGER_SYSVIEW_Init+0x7c>)
 8007346:	785a      	ldrb	r2, [r3, #1]
 8007348:	4b14      	ldr	r3, [pc, #80]	; (800739c <SEGGER_SYSVIEW_Init+0x7c>)
 800734a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800734c:	4b13      	ldr	r3, [pc, #76]	; (800739c <SEGGER_SYSVIEW_Init+0x7c>)
 800734e:	7e1b      	ldrb	r3, [r3, #24]
 8007350:	4618      	mov	r0, r3
 8007352:	2300      	movs	r3, #0
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	2308      	movs	r3, #8
 8007358:	4a11      	ldr	r2, [pc, #68]	; (80073a0 <SEGGER_SYSVIEW_Init+0x80>)
 800735a:	490f      	ldr	r1, [pc, #60]	; (8007398 <SEGGER_SYSVIEW_Init+0x78>)
 800735c:	f7ff fce4 	bl	8006d28 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8007360:	4b0e      	ldr	r3, [pc, #56]	; (800739c <SEGGER_SYSVIEW_Init+0x7c>)
 8007362:	2200      	movs	r2, #0
 8007364:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007366:	4b0f      	ldr	r3, [pc, #60]	; (80073a4 <SEGGER_SYSVIEW_Init+0x84>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a0c      	ldr	r2, [pc, #48]	; (800739c <SEGGER_SYSVIEW_Init+0x7c>)
 800736c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800736e:	4a0b      	ldr	r2, [pc, #44]	; (800739c <SEGGER_SYSVIEW_Init+0x7c>)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8007374:	4a09      	ldr	r2, [pc, #36]	; (800739c <SEGGER_SYSVIEW_Init+0x7c>)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800737a:	4a08      	ldr	r2, [pc, #32]	; (800739c <SEGGER_SYSVIEW_Init+0x7c>)
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8007380:	4a06      	ldr	r2, [pc, #24]	; (800739c <SEGGER_SYSVIEW_Init+0x7c>)
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8007386:	4b05      	ldr	r3, [pc, #20]	; (800739c <SEGGER_SYSVIEW_Init+0x7c>)
 8007388:	2200      	movs	r2, #0
 800738a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800738c:	bf00      	nop
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	20013560 	.word	0x20013560
 8007398:	0800999c 	.word	0x0800999c
 800739c:	20014568 	.word	0x20014568
 80073a0:	20014560 	.word	0x20014560
 80073a4:	e0001004 	.word	0xe0001004

080073a8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80073b0:	4a04      	ldr	r2, [pc, #16]	; (80073c4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6113      	str	r3, [r2, #16]
}
 80073b6:	bf00      	nop
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	20014568 	.word	0x20014568

080073c8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80073d0:	f3ef 8311 	mrs	r3, BASEPRI
 80073d4:	f04f 0120 	mov.w	r1, #32
 80073d8:	f381 8811 	msr	BASEPRI, r1
 80073dc:	60fb      	str	r3, [r7, #12]
 80073de:	4808      	ldr	r0, [pc, #32]	; (8007400 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80073e0:	f7ff fd3e 	bl	8006e60 <_PreparePacket>
 80073e4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	68b9      	ldr	r1, [r7, #8]
 80073ea:	68b8      	ldr	r0, [r7, #8]
 80073ec:	f7ff fe28 	bl	8007040 <_SendPacket>
  RECORD_END();
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f383 8811 	msr	BASEPRI, r3
}
 80073f6:	bf00      	nop
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	20014598 	.word	0x20014598

08007404 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8007404:	b580      	push	{r7, lr}
 8007406:	b088      	sub	sp, #32
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800740e:	f3ef 8311 	mrs	r3, BASEPRI
 8007412:	f04f 0120 	mov.w	r1, #32
 8007416:	f381 8811 	msr	BASEPRI, r1
 800741a:	617b      	str	r3, [r7, #20]
 800741c:	4816      	ldr	r0, [pc, #88]	; (8007478 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800741e:	f7ff fd1f 	bl	8006e60 <_PreparePacket>
 8007422:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	61fb      	str	r3, [r7, #28]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	61bb      	str	r3, [r7, #24]
 8007430:	e00b      	b.n	800744a <SEGGER_SYSVIEW_RecordU32+0x46>
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	b2da      	uxtb	r2, r3
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	1c59      	adds	r1, r3, #1
 800743a:	61f9      	str	r1, [r7, #28]
 800743c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007440:	b2d2      	uxtb	r2, r2
 8007442:	701a      	strb	r2, [r3, #0]
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	09db      	lsrs	r3, r3, #7
 8007448:	61bb      	str	r3, [r7, #24]
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	2b7f      	cmp	r3, #127	; 0x7f
 800744e:	d8f0      	bhi.n	8007432 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	1c5a      	adds	r2, r3, #1
 8007454:	61fa      	str	r2, [r7, #28]
 8007456:	69ba      	ldr	r2, [r7, #24]
 8007458:	b2d2      	uxtb	r2, r2
 800745a:	701a      	strb	r2, [r3, #0]
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	68f9      	ldr	r1, [r7, #12]
 8007464:	6938      	ldr	r0, [r7, #16]
 8007466:	f7ff fdeb 	bl	8007040 <_SendPacket>
  RECORD_END();
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	f383 8811 	msr	BASEPRI, r3
}
 8007470:	bf00      	nop
 8007472:	3720      	adds	r7, #32
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	20014598 	.word	0x20014598

0800747c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800747c:	b580      	push	{r7, lr}
 800747e:	b08c      	sub	sp, #48	; 0x30
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007488:	f3ef 8311 	mrs	r3, BASEPRI
 800748c:	f04f 0120 	mov.w	r1, #32
 8007490:	f381 8811 	msr	BASEPRI, r1
 8007494:	61fb      	str	r3, [r7, #28]
 8007496:	4825      	ldr	r0, [pc, #148]	; (800752c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8007498:	f7ff fce2 	bl	8006e60 <_PreparePacket>
 800749c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80074aa:	e00b      	b.n	80074c4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80074ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ae:	b2da      	uxtb	r2, r3
 80074b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b2:	1c59      	adds	r1, r3, #1
 80074b4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80074b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074ba:	b2d2      	uxtb	r2, r2
 80074bc:	701a      	strb	r2, [r3, #0]
 80074be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c0:	09db      	lsrs	r3, r3, #7
 80074c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80074c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c6:	2b7f      	cmp	r3, #127	; 0x7f
 80074c8:	d8f0      	bhi.n	80074ac <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80074ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074cc:	1c5a      	adds	r2, r3, #1
 80074ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074d2:	b2d2      	uxtb	r2, r2
 80074d4:	701a      	strb	r2, [r3, #0]
 80074d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	627b      	str	r3, [r7, #36]	; 0x24
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	623b      	str	r3, [r7, #32]
 80074e2:	e00b      	b.n	80074fc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80074e4:	6a3b      	ldr	r3, [r7, #32]
 80074e6:	b2da      	uxtb	r2, r3
 80074e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ea:	1c59      	adds	r1, r3, #1
 80074ec:	6279      	str	r1, [r7, #36]	; 0x24
 80074ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074f2:	b2d2      	uxtb	r2, r2
 80074f4:	701a      	strb	r2, [r3, #0]
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	09db      	lsrs	r3, r3, #7
 80074fa:	623b      	str	r3, [r7, #32]
 80074fc:	6a3b      	ldr	r3, [r7, #32]
 80074fe:	2b7f      	cmp	r3, #127	; 0x7f
 8007500:	d8f0      	bhi.n	80074e4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8007502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007504:	1c5a      	adds	r2, r3, #1
 8007506:	627a      	str	r2, [r7, #36]	; 0x24
 8007508:	6a3a      	ldr	r2, [r7, #32]
 800750a:	b2d2      	uxtb	r2, r2
 800750c:	701a      	strb	r2, [r3, #0]
 800750e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007510:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	6979      	ldr	r1, [r7, #20]
 8007516:	69b8      	ldr	r0, [r7, #24]
 8007518:	f7ff fd92 	bl	8007040 <_SendPacket>
  RECORD_END();
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	f383 8811 	msr	BASEPRI, r3
}
 8007522:	bf00      	nop
 8007524:	3730      	adds	r7, #48	; 0x30
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	20014598 	.word	0x20014598

08007530 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8007530:	b580      	push	{r7, lr}
 8007532:	b08e      	sub	sp, #56	; 0x38
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
 800753c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800753e:	f3ef 8311 	mrs	r3, BASEPRI
 8007542:	f04f 0120 	mov.w	r1, #32
 8007546:	f381 8811 	msr	BASEPRI, r1
 800754a:	61fb      	str	r3, [r7, #28]
 800754c:	4832      	ldr	r0, [pc, #200]	; (8007618 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800754e:	f7ff fc87 	bl	8006e60 <_PreparePacket>
 8007552:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	637b      	str	r3, [r7, #52]	; 0x34
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	633b      	str	r3, [r7, #48]	; 0x30
 8007560:	e00b      	b.n	800757a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8007562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007564:	b2da      	uxtb	r2, r3
 8007566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007568:	1c59      	adds	r1, r3, #1
 800756a:	6379      	str	r1, [r7, #52]	; 0x34
 800756c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007570:	b2d2      	uxtb	r2, r2
 8007572:	701a      	strb	r2, [r3, #0]
 8007574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007576:	09db      	lsrs	r3, r3, #7
 8007578:	633b      	str	r3, [r7, #48]	; 0x30
 800757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757c:	2b7f      	cmp	r3, #127	; 0x7f
 800757e:	d8f0      	bhi.n	8007562 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8007580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007582:	1c5a      	adds	r2, r3, #1
 8007584:	637a      	str	r2, [r7, #52]	; 0x34
 8007586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007588:	b2d2      	uxtb	r2, r2
 800758a:	701a      	strb	r2, [r3, #0]
 800758c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800758e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	62bb      	str	r3, [r7, #40]	; 0x28
 8007598:	e00b      	b.n	80075b2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800759a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759c:	b2da      	uxtb	r2, r3
 800759e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a0:	1c59      	adds	r1, r3, #1
 80075a2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80075a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075a8:	b2d2      	uxtb	r2, r2
 80075aa:	701a      	strb	r2, [r3, #0]
 80075ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ae:	09db      	lsrs	r3, r3, #7
 80075b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80075b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b4:	2b7f      	cmp	r3, #127	; 0x7f
 80075b6:	d8f0      	bhi.n	800759a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80075b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ba:	1c5a      	adds	r2, r3, #1
 80075bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075c0:	b2d2      	uxtb	r2, r2
 80075c2:	701a      	strb	r2, [r3, #0]
 80075c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	627b      	str	r3, [r7, #36]	; 0x24
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	623b      	str	r3, [r7, #32]
 80075d0:	e00b      	b.n	80075ea <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80075d2:	6a3b      	ldr	r3, [r7, #32]
 80075d4:	b2da      	uxtb	r2, r3
 80075d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d8:	1c59      	adds	r1, r3, #1
 80075da:	6279      	str	r1, [r7, #36]	; 0x24
 80075dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075e0:	b2d2      	uxtb	r2, r2
 80075e2:	701a      	strb	r2, [r3, #0]
 80075e4:	6a3b      	ldr	r3, [r7, #32]
 80075e6:	09db      	lsrs	r3, r3, #7
 80075e8:	623b      	str	r3, [r7, #32]
 80075ea:	6a3b      	ldr	r3, [r7, #32]
 80075ec:	2b7f      	cmp	r3, #127	; 0x7f
 80075ee:	d8f0      	bhi.n	80075d2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80075f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f2:	1c5a      	adds	r2, r3, #1
 80075f4:	627a      	str	r2, [r7, #36]	; 0x24
 80075f6:	6a3a      	ldr	r2, [r7, #32]
 80075f8:	b2d2      	uxtb	r2, r2
 80075fa:	701a      	strb	r2, [r3, #0]
 80075fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fe:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	6979      	ldr	r1, [r7, #20]
 8007604:	69b8      	ldr	r0, [r7, #24]
 8007606:	f7ff fd1b 	bl	8007040 <_SendPacket>
  RECORD_END();
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	f383 8811 	msr	BASEPRI, r3
}
 8007610:	bf00      	nop
 8007612:	3738      	adds	r7, #56	; 0x38
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	20014598 	.word	0x20014598

0800761c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800761c:	b580      	push	{r7, lr}
 800761e:	b090      	sub	sp, #64	; 0x40
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]
 8007628:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800762a:	f3ef 8311 	mrs	r3, BASEPRI
 800762e:	f04f 0120 	mov.w	r1, #32
 8007632:	f381 8811 	msr	BASEPRI, r1
 8007636:	61fb      	str	r3, [r7, #28]
 8007638:	4840      	ldr	r0, [pc, #256]	; (800773c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800763a:	f7ff fc11 	bl	8006e60 <_PreparePacket>
 800763e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	63bb      	str	r3, [r7, #56]	; 0x38
 800764c:	e00b      	b.n	8007666 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800764e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007650:	b2da      	uxtb	r2, r3
 8007652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007654:	1c59      	adds	r1, r3, #1
 8007656:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007658:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800765c:	b2d2      	uxtb	r2, r2
 800765e:	701a      	strb	r2, [r3, #0]
 8007660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007662:	09db      	lsrs	r3, r3, #7
 8007664:	63bb      	str	r3, [r7, #56]	; 0x38
 8007666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007668:	2b7f      	cmp	r3, #127	; 0x7f
 800766a:	d8f0      	bhi.n	800764e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800766c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800766e:	1c5a      	adds	r2, r3, #1
 8007670:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007672:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007674:	b2d2      	uxtb	r2, r2
 8007676:	701a      	strb	r2, [r3, #0]
 8007678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800767a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	637b      	str	r3, [r7, #52]	; 0x34
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	633b      	str	r3, [r7, #48]	; 0x30
 8007684:	e00b      	b.n	800769e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8007686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007688:	b2da      	uxtb	r2, r3
 800768a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800768c:	1c59      	adds	r1, r3, #1
 800768e:	6379      	str	r1, [r7, #52]	; 0x34
 8007690:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007694:	b2d2      	uxtb	r2, r2
 8007696:	701a      	strb	r2, [r3, #0]
 8007698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769a:	09db      	lsrs	r3, r3, #7
 800769c:	633b      	str	r3, [r7, #48]	; 0x30
 800769e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a0:	2b7f      	cmp	r3, #127	; 0x7f
 80076a2:	d8f0      	bhi.n	8007686 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80076a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a6:	1c5a      	adds	r2, r3, #1
 80076a8:	637a      	str	r2, [r7, #52]	; 0x34
 80076aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ac:	b2d2      	uxtb	r2, r2
 80076ae:	701a      	strb	r2, [r3, #0]
 80076b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80076bc:	e00b      	b.n	80076d6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80076be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c0:	b2da      	uxtb	r2, r3
 80076c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c4:	1c59      	adds	r1, r3, #1
 80076c6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80076c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076cc:	b2d2      	uxtb	r2, r2
 80076ce:	701a      	strb	r2, [r3, #0]
 80076d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d2:	09db      	lsrs	r3, r3, #7
 80076d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80076d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d8:	2b7f      	cmp	r3, #127	; 0x7f
 80076da:	d8f0      	bhi.n	80076be <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80076dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076de:	1c5a      	adds	r2, r3, #1
 80076e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076e4:	b2d2      	uxtb	r2, r2
 80076e6:	701a      	strb	r2, [r3, #0]
 80076e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	627b      	str	r3, [r7, #36]	; 0x24
 80076f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076f2:	623b      	str	r3, [r7, #32]
 80076f4:	e00b      	b.n	800770e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80076f6:	6a3b      	ldr	r3, [r7, #32]
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fc:	1c59      	adds	r1, r3, #1
 80076fe:	6279      	str	r1, [r7, #36]	; 0x24
 8007700:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007704:	b2d2      	uxtb	r2, r2
 8007706:	701a      	strb	r2, [r3, #0]
 8007708:	6a3b      	ldr	r3, [r7, #32]
 800770a:	09db      	lsrs	r3, r3, #7
 800770c:	623b      	str	r3, [r7, #32]
 800770e:	6a3b      	ldr	r3, [r7, #32]
 8007710:	2b7f      	cmp	r3, #127	; 0x7f
 8007712:	d8f0      	bhi.n	80076f6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8007714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007716:	1c5a      	adds	r2, r3, #1
 8007718:	627a      	str	r2, [r7, #36]	; 0x24
 800771a:	6a3a      	ldr	r2, [r7, #32]
 800771c:	b2d2      	uxtb	r2, r2
 800771e:	701a      	strb	r2, [r3, #0]
 8007720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007722:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	6979      	ldr	r1, [r7, #20]
 8007728:	69b8      	ldr	r0, [r7, #24]
 800772a:	f7ff fc89 	bl	8007040 <_SendPacket>
  RECORD_END();
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	f383 8811 	msr	BASEPRI, r3
}
 8007734:	bf00      	nop
 8007736:	3740      	adds	r7, #64	; 0x40
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	20014598 	.word	0x20014598

08007740 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8007740:	b580      	push	{r7, lr}
 8007742:	b08c      	sub	sp, #48	; 0x30
 8007744:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8007746:	4b59      	ldr	r3, [pc, #356]	; (80078ac <SEGGER_SYSVIEW_Start+0x16c>)
 8007748:	2201      	movs	r2, #1
 800774a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800774c:	f3ef 8311 	mrs	r3, BASEPRI
 8007750:	f04f 0120 	mov.w	r1, #32
 8007754:	f381 8811 	msr	BASEPRI, r1
 8007758:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800775a:	4b54      	ldr	r3, [pc, #336]	; (80078ac <SEGGER_SYSVIEW_Start+0x16c>)
 800775c:	785b      	ldrb	r3, [r3, #1]
 800775e:	220a      	movs	r2, #10
 8007760:	4953      	ldr	r1, [pc, #332]	; (80078b0 <SEGGER_SYSVIEW_Start+0x170>)
 8007762:	4618      	mov	r0, r3
 8007764:	f7f8 fd34 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800776e:	f7fe feb3 	bl	80064d8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8007772:	200a      	movs	r0, #10
 8007774:	f7ff fe28 	bl	80073c8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007778:	f3ef 8311 	mrs	r3, BASEPRI
 800777c:	f04f 0120 	mov.w	r1, #32
 8007780:	f381 8811 	msr	BASEPRI, r1
 8007784:	60bb      	str	r3, [r7, #8]
 8007786:	484b      	ldr	r0, [pc, #300]	; (80078b4 <SEGGER_SYSVIEW_Start+0x174>)
 8007788:	f7ff fb6a 	bl	8006e60 <_PreparePacket>
 800778c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007796:	4b45      	ldr	r3, [pc, #276]	; (80078ac <SEGGER_SYSVIEW_Start+0x16c>)
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	62bb      	str	r3, [r7, #40]	; 0x28
 800779c:	e00b      	b.n	80077b6 <SEGGER_SYSVIEW_Start+0x76>
 800779e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a0:	b2da      	uxtb	r2, r3
 80077a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a4:	1c59      	adds	r1, r3, #1
 80077a6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80077a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077ac:	b2d2      	uxtb	r2, r2
 80077ae:	701a      	strb	r2, [r3, #0]
 80077b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b2:	09db      	lsrs	r3, r3, #7
 80077b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80077b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b8:	2b7f      	cmp	r3, #127	; 0x7f
 80077ba:	d8f0      	bhi.n	800779e <SEGGER_SYSVIEW_Start+0x5e>
 80077bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077be:	1c5a      	adds	r2, r3, #1
 80077c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077c4:	b2d2      	uxtb	r2, r2
 80077c6:	701a      	strb	r2, [r3, #0]
 80077c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ca:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	627b      	str	r3, [r7, #36]	; 0x24
 80077d0:	4b36      	ldr	r3, [pc, #216]	; (80078ac <SEGGER_SYSVIEW_Start+0x16c>)
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	623b      	str	r3, [r7, #32]
 80077d6:	e00b      	b.n	80077f0 <SEGGER_SYSVIEW_Start+0xb0>
 80077d8:	6a3b      	ldr	r3, [r7, #32]
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077de:	1c59      	adds	r1, r3, #1
 80077e0:	6279      	str	r1, [r7, #36]	; 0x24
 80077e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077e6:	b2d2      	uxtb	r2, r2
 80077e8:	701a      	strb	r2, [r3, #0]
 80077ea:	6a3b      	ldr	r3, [r7, #32]
 80077ec:	09db      	lsrs	r3, r3, #7
 80077ee:	623b      	str	r3, [r7, #32]
 80077f0:	6a3b      	ldr	r3, [r7, #32]
 80077f2:	2b7f      	cmp	r3, #127	; 0x7f
 80077f4:	d8f0      	bhi.n	80077d8 <SEGGER_SYSVIEW_Start+0x98>
 80077f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f8:	1c5a      	adds	r2, r3, #1
 80077fa:	627a      	str	r2, [r7, #36]	; 0x24
 80077fc:	6a3a      	ldr	r2, [r7, #32]
 80077fe:	b2d2      	uxtb	r2, r2
 8007800:	701a      	strb	r2, [r3, #0]
 8007802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007804:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	61fb      	str	r3, [r7, #28]
 800780a:	4b28      	ldr	r3, [pc, #160]	; (80078ac <SEGGER_SYSVIEW_Start+0x16c>)
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	61bb      	str	r3, [r7, #24]
 8007810:	e00b      	b.n	800782a <SEGGER_SYSVIEW_Start+0xea>
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	b2da      	uxtb	r2, r3
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	1c59      	adds	r1, r3, #1
 800781a:	61f9      	str	r1, [r7, #28]
 800781c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007820:	b2d2      	uxtb	r2, r2
 8007822:	701a      	strb	r2, [r3, #0]
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	09db      	lsrs	r3, r3, #7
 8007828:	61bb      	str	r3, [r7, #24]
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	2b7f      	cmp	r3, #127	; 0x7f
 800782e:	d8f0      	bhi.n	8007812 <SEGGER_SYSVIEW_Start+0xd2>
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	1c5a      	adds	r2, r3, #1
 8007834:	61fa      	str	r2, [r7, #28]
 8007836:	69ba      	ldr	r2, [r7, #24]
 8007838:	b2d2      	uxtb	r2, r2
 800783a:	701a      	strb	r2, [r3, #0]
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	617b      	str	r3, [r7, #20]
 8007844:	2300      	movs	r3, #0
 8007846:	613b      	str	r3, [r7, #16]
 8007848:	e00b      	b.n	8007862 <SEGGER_SYSVIEW_Start+0x122>
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	b2da      	uxtb	r2, r3
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	1c59      	adds	r1, r3, #1
 8007852:	6179      	str	r1, [r7, #20]
 8007854:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007858:	b2d2      	uxtb	r2, r2
 800785a:	701a      	strb	r2, [r3, #0]
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	09db      	lsrs	r3, r3, #7
 8007860:	613b      	str	r3, [r7, #16]
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	2b7f      	cmp	r3, #127	; 0x7f
 8007866:	d8f0      	bhi.n	800784a <SEGGER_SYSVIEW_Start+0x10a>
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	1c5a      	adds	r2, r3, #1
 800786c:	617a      	str	r2, [r7, #20]
 800786e:	693a      	ldr	r2, [r7, #16]
 8007870:	b2d2      	uxtb	r2, r2
 8007872:	701a      	strb	r2, [r3, #0]
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007878:	2218      	movs	r2, #24
 800787a:	6839      	ldr	r1, [r7, #0]
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f7ff fbdf 	bl	8007040 <_SendPacket>
      RECORD_END();
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007888:	4b08      	ldr	r3, [pc, #32]	; (80078ac <SEGGER_SYSVIEW_Start+0x16c>)
 800788a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788c:	2b00      	cmp	r3, #0
 800788e:	d002      	beq.n	8007896 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8007890:	4b06      	ldr	r3, [pc, #24]	; (80078ac <SEGGER_SYSVIEW_Start+0x16c>)
 8007892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007894:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8007896:	f000 f9eb 	bl	8007c70 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800789a:	f000 f9b1 	bl	8007c00 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800789e:	f000 fc83 	bl	80081a8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80078a2:	bf00      	nop
 80078a4:	3730      	adds	r7, #48	; 0x30
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	20014568 	.word	0x20014568
 80078b0:	080099dc 	.word	0x080099dc
 80078b4:	20014598 	.word	0x20014598

080078b8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80078be:	f3ef 8311 	mrs	r3, BASEPRI
 80078c2:	f04f 0120 	mov.w	r1, #32
 80078c6:	f381 8811 	msr	BASEPRI, r1
 80078ca:	607b      	str	r3, [r7, #4]
 80078cc:	480b      	ldr	r0, [pc, #44]	; (80078fc <SEGGER_SYSVIEW_Stop+0x44>)
 80078ce:	f7ff fac7 	bl	8006e60 <_PreparePacket>
 80078d2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80078d4:	4b0a      	ldr	r3, [pc, #40]	; (8007900 <SEGGER_SYSVIEW_Stop+0x48>)
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d007      	beq.n	80078ec <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80078dc:	220b      	movs	r2, #11
 80078de:	6839      	ldr	r1, [r7, #0]
 80078e0:	6838      	ldr	r0, [r7, #0]
 80078e2:	f7ff fbad 	bl	8007040 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80078e6:	4b06      	ldr	r3, [pc, #24]	; (8007900 <SEGGER_SYSVIEW_Stop+0x48>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f383 8811 	msr	BASEPRI, r3
}
 80078f2:	bf00      	nop
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	20014598 	.word	0x20014598
 8007900:	20014568 	.word	0x20014568

08007904 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8007904:	b580      	push	{r7, lr}
 8007906:	b08c      	sub	sp, #48	; 0x30
 8007908:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800790a:	f3ef 8311 	mrs	r3, BASEPRI
 800790e:	f04f 0120 	mov.w	r1, #32
 8007912:	f381 8811 	msr	BASEPRI, r1
 8007916:	60fb      	str	r3, [r7, #12]
 8007918:	4845      	ldr	r0, [pc, #276]	; (8007a30 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800791a:	f7ff faa1 	bl	8006e60 <_PreparePacket>
 800791e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007928:	4b42      	ldr	r3, [pc, #264]	; (8007a34 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	62bb      	str	r3, [r7, #40]	; 0x28
 800792e:	e00b      	b.n	8007948 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007932:	b2da      	uxtb	r2, r3
 8007934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007936:	1c59      	adds	r1, r3, #1
 8007938:	62f9      	str	r1, [r7, #44]	; 0x2c
 800793a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800793e:	b2d2      	uxtb	r2, r2
 8007940:	701a      	strb	r2, [r3, #0]
 8007942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007944:	09db      	lsrs	r3, r3, #7
 8007946:	62bb      	str	r3, [r7, #40]	; 0x28
 8007948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794a:	2b7f      	cmp	r3, #127	; 0x7f
 800794c:	d8f0      	bhi.n	8007930 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800794e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007950:	1c5a      	adds	r2, r3, #1
 8007952:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007954:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007956:	b2d2      	uxtb	r2, r2
 8007958:	701a      	strb	r2, [r3, #0]
 800795a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	627b      	str	r3, [r7, #36]	; 0x24
 8007962:	4b34      	ldr	r3, [pc, #208]	; (8007a34 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	623b      	str	r3, [r7, #32]
 8007968:	e00b      	b.n	8007982 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800796a:	6a3b      	ldr	r3, [r7, #32]
 800796c:	b2da      	uxtb	r2, r3
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	1c59      	adds	r1, r3, #1
 8007972:	6279      	str	r1, [r7, #36]	; 0x24
 8007974:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007978:	b2d2      	uxtb	r2, r2
 800797a:	701a      	strb	r2, [r3, #0]
 800797c:	6a3b      	ldr	r3, [r7, #32]
 800797e:	09db      	lsrs	r3, r3, #7
 8007980:	623b      	str	r3, [r7, #32]
 8007982:	6a3b      	ldr	r3, [r7, #32]
 8007984:	2b7f      	cmp	r3, #127	; 0x7f
 8007986:	d8f0      	bhi.n	800796a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	1c5a      	adds	r2, r3, #1
 800798c:	627a      	str	r2, [r7, #36]	; 0x24
 800798e:	6a3a      	ldr	r2, [r7, #32]
 8007990:	b2d2      	uxtb	r2, r2
 8007992:	701a      	strb	r2, [r3, #0]
 8007994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007996:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	61fb      	str	r3, [r7, #28]
 800799c:	4b25      	ldr	r3, [pc, #148]	; (8007a34 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	61bb      	str	r3, [r7, #24]
 80079a2:	e00b      	b.n	80079bc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	b2da      	uxtb	r2, r3
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	1c59      	adds	r1, r3, #1
 80079ac:	61f9      	str	r1, [r7, #28]
 80079ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079b2:	b2d2      	uxtb	r2, r2
 80079b4:	701a      	strb	r2, [r3, #0]
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	09db      	lsrs	r3, r3, #7
 80079ba:	61bb      	str	r3, [r7, #24]
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	2b7f      	cmp	r3, #127	; 0x7f
 80079c0:	d8f0      	bhi.n	80079a4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	1c5a      	adds	r2, r3, #1
 80079c6:	61fa      	str	r2, [r7, #28]
 80079c8:	69ba      	ldr	r2, [r7, #24]
 80079ca:	b2d2      	uxtb	r2, r2
 80079cc:	701a      	strb	r2, [r3, #0]
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	617b      	str	r3, [r7, #20]
 80079d6:	2300      	movs	r3, #0
 80079d8:	613b      	str	r3, [r7, #16]
 80079da:	e00b      	b.n	80079f4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	b2da      	uxtb	r2, r3
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	1c59      	adds	r1, r3, #1
 80079e4:	6179      	str	r1, [r7, #20]
 80079e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079ea:	b2d2      	uxtb	r2, r2
 80079ec:	701a      	strb	r2, [r3, #0]
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	09db      	lsrs	r3, r3, #7
 80079f2:	613b      	str	r3, [r7, #16]
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	2b7f      	cmp	r3, #127	; 0x7f
 80079f8:	d8f0      	bhi.n	80079dc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	1c5a      	adds	r2, r3, #1
 80079fe:	617a      	str	r2, [r7, #20]
 8007a00:	693a      	ldr	r2, [r7, #16]
 8007a02:	b2d2      	uxtb	r2, r2
 8007a04:	701a      	strb	r2, [r3, #0]
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007a0a:	2218      	movs	r2, #24
 8007a0c:	6879      	ldr	r1, [r7, #4]
 8007a0e:	68b8      	ldr	r0, [r7, #8]
 8007a10:	f7ff fb16 	bl	8007040 <_SendPacket>
  RECORD_END();
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007a1a:	4b06      	ldr	r3, [pc, #24]	; (8007a34 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d002      	beq.n	8007a28 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8007a22:	4b04      	ldr	r3, [pc, #16]	; (8007a34 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a26:	4798      	blx	r3
  }
}
 8007a28:	bf00      	nop
 8007a2a:	3730      	adds	r7, #48	; 0x30
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	20014598 	.word	0x20014598
 8007a34:	20014568 	.word	0x20014568

08007a38 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b092      	sub	sp, #72	; 0x48
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007a40:	f3ef 8311 	mrs	r3, BASEPRI
 8007a44:	f04f 0120 	mov.w	r1, #32
 8007a48:	f381 8811 	msr	BASEPRI, r1
 8007a4c:	617b      	str	r3, [r7, #20]
 8007a4e:	486a      	ldr	r0, [pc, #424]	; (8007bf8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8007a50:	f7ff fa06 	bl	8006e60 <_PreparePacket>
 8007a54:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	647b      	str	r3, [r7, #68]	; 0x44
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	4b66      	ldr	r3, [pc, #408]	; (8007bfc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	643b      	str	r3, [r7, #64]	; 0x40
 8007a6a:	e00b      	b.n	8007a84 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a6e:	b2da      	uxtb	r2, r3
 8007a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a72:	1c59      	adds	r1, r3, #1
 8007a74:	6479      	str	r1, [r7, #68]	; 0x44
 8007a76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a7a:	b2d2      	uxtb	r2, r2
 8007a7c:	701a      	strb	r2, [r3, #0]
 8007a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a80:	09db      	lsrs	r3, r3, #7
 8007a82:	643b      	str	r3, [r7, #64]	; 0x40
 8007a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a86:	2b7f      	cmp	r3, #127	; 0x7f
 8007a88:	d8f0      	bhi.n	8007a6c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8007a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a8c:	1c5a      	adds	r2, r3, #1
 8007a8e:	647a      	str	r2, [r7, #68]	; 0x44
 8007a90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a92:	b2d2      	uxtb	r2, r2
 8007a94:	701a      	strb	r2, [r3, #0]
 8007a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a98:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007aa4:	e00b      	b.n	8007abe <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8007aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa8:	b2da      	uxtb	r2, r3
 8007aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aac:	1c59      	adds	r1, r3, #1
 8007aae:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007ab0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ab4:	b2d2      	uxtb	r2, r2
 8007ab6:	701a      	strb	r2, [r3, #0]
 8007ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aba:	09db      	lsrs	r3, r3, #7
 8007abc:	63bb      	str	r3, [r7, #56]	; 0x38
 8007abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac0:	2b7f      	cmp	r3, #127	; 0x7f
 8007ac2:	d8f0      	bhi.n	8007aa6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8007ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ac6:	1c5a      	adds	r2, r3, #1
 8007ac8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007aca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007acc:	b2d2      	uxtb	r2, r2
 8007ace:	701a      	strb	r2, [r3, #0]
 8007ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ad2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	2220      	movs	r2, #32
 8007ada:	4619      	mov	r1, r3
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f7ff f96f 	bl	8006dc0 <_EncodeStr>
 8007ae2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8007ae4:	2209      	movs	r2, #9
 8007ae6:	68f9      	ldr	r1, [r7, #12]
 8007ae8:	6938      	ldr	r0, [r7, #16]
 8007aea:	f7ff faa9 	bl	8007040 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	637b      	str	r3, [r7, #52]	; 0x34
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	4b40      	ldr	r3, [pc, #256]	; (8007bfc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	633b      	str	r3, [r7, #48]	; 0x30
 8007b02:	e00b      	b.n	8007b1c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8007b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b06:	b2da      	uxtb	r2, r3
 8007b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b0a:	1c59      	adds	r1, r3, #1
 8007b0c:	6379      	str	r1, [r7, #52]	; 0x34
 8007b0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b12:	b2d2      	uxtb	r2, r2
 8007b14:	701a      	strb	r2, [r3, #0]
 8007b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b18:	09db      	lsrs	r3, r3, #7
 8007b1a:	633b      	str	r3, [r7, #48]	; 0x30
 8007b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1e:	2b7f      	cmp	r3, #127	; 0x7f
 8007b20:	d8f0      	bhi.n	8007b04 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8007b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b24:	1c5a      	adds	r2, r3, #1
 8007b26:	637a      	str	r2, [r7, #52]	; 0x34
 8007b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b2a:	b2d2      	uxtb	r2, r2
 8007b2c:	701a      	strb	r2, [r3, #0]
 8007b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b30:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b3c:	e00b      	b.n	8007b56 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8007b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b44:	1c59      	adds	r1, r3, #1
 8007b46:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007b48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b4c:	b2d2      	uxtb	r2, r2
 8007b4e:	701a      	strb	r2, [r3, #0]
 8007b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b52:	09db      	lsrs	r3, r3, #7
 8007b54:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b58:	2b7f      	cmp	r3, #127	; 0x7f
 8007b5a:	d8f0      	bhi.n	8007b3e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5e:	1c5a      	adds	r2, r3, #1
 8007b60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b64:	b2d2      	uxtb	r2, r2
 8007b66:	701a      	strb	r2, [r3, #0]
 8007b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	623b      	str	r3, [r7, #32]
 8007b76:	e00b      	b.n	8007b90 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007b78:	6a3b      	ldr	r3, [r7, #32]
 8007b7a:	b2da      	uxtb	r2, r3
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7e:	1c59      	adds	r1, r3, #1
 8007b80:	6279      	str	r1, [r7, #36]	; 0x24
 8007b82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b86:	b2d2      	uxtb	r2, r2
 8007b88:	701a      	strb	r2, [r3, #0]
 8007b8a:	6a3b      	ldr	r3, [r7, #32]
 8007b8c:	09db      	lsrs	r3, r3, #7
 8007b8e:	623b      	str	r3, [r7, #32]
 8007b90:	6a3b      	ldr	r3, [r7, #32]
 8007b92:	2b7f      	cmp	r3, #127	; 0x7f
 8007b94:	d8f0      	bhi.n	8007b78 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8007b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b98:	1c5a      	adds	r2, r3, #1
 8007b9a:	627a      	str	r2, [r7, #36]	; 0x24
 8007b9c:	6a3a      	ldr	r2, [r7, #32]
 8007b9e:	b2d2      	uxtb	r2, r2
 8007ba0:	701a      	strb	r2, [r3, #0]
 8007ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	61fb      	str	r3, [r7, #28]
 8007baa:	2300      	movs	r3, #0
 8007bac:	61bb      	str	r3, [r7, #24]
 8007bae:	e00b      	b.n	8007bc8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	b2da      	uxtb	r2, r3
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	1c59      	adds	r1, r3, #1
 8007bb8:	61f9      	str	r1, [r7, #28]
 8007bba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007bbe:	b2d2      	uxtb	r2, r2
 8007bc0:	701a      	strb	r2, [r3, #0]
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	09db      	lsrs	r3, r3, #7
 8007bc6:	61bb      	str	r3, [r7, #24]
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	2b7f      	cmp	r3, #127	; 0x7f
 8007bcc:	d8f0      	bhi.n	8007bb0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	1c5a      	adds	r2, r3, #1
 8007bd2:	61fa      	str	r2, [r7, #28]
 8007bd4:	69ba      	ldr	r2, [r7, #24]
 8007bd6:	b2d2      	uxtb	r2, r2
 8007bd8:	701a      	strb	r2, [r3, #0]
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007bde:	2215      	movs	r2, #21
 8007be0:	68f9      	ldr	r1, [r7, #12]
 8007be2:	6938      	ldr	r0, [r7, #16]
 8007be4:	f7ff fa2c 	bl	8007040 <_SendPacket>
  RECORD_END();
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	f383 8811 	msr	BASEPRI, r3
}
 8007bee:	bf00      	nop
 8007bf0:	3748      	adds	r7, #72	; 0x48
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	20014598 	.word	0x20014598
 8007bfc:	20014568 	.word	0x20014568

08007c00 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007c00:	b580      	push	{r7, lr}
 8007c02:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8007c04:	4b07      	ldr	r3, [pc, #28]	; (8007c24 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007c06:	6a1b      	ldr	r3, [r3, #32]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d008      	beq.n	8007c1e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007c0c:	4b05      	ldr	r3, [pc, #20]	; (8007c24 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007c0e:	6a1b      	ldr	r3, [r3, #32]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d003      	beq.n	8007c1e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8007c16:	4b03      	ldr	r3, [pc, #12]	; (8007c24 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007c18:	6a1b      	ldr	r3, [r3, #32]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	4798      	blx	r3
  }
}
 8007c1e:	bf00      	nop
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	20014568 	.word	0x20014568

08007c28 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b086      	sub	sp, #24
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007c30:	f3ef 8311 	mrs	r3, BASEPRI
 8007c34:	f04f 0120 	mov.w	r1, #32
 8007c38:	f381 8811 	msr	BASEPRI, r1
 8007c3c:	617b      	str	r3, [r7, #20]
 8007c3e:	480b      	ldr	r0, [pc, #44]	; (8007c6c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007c40:	f7ff f90e 	bl	8006e60 <_PreparePacket>
 8007c44:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007c46:	2280      	movs	r2, #128	; 0x80
 8007c48:	6879      	ldr	r1, [r7, #4]
 8007c4a:	6938      	ldr	r0, [r7, #16]
 8007c4c:	f7ff f8b8 	bl	8006dc0 <_EncodeStr>
 8007c50:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8007c52:	220e      	movs	r2, #14
 8007c54:	68f9      	ldr	r1, [r7, #12]
 8007c56:	6938      	ldr	r0, [r7, #16]
 8007c58:	f7ff f9f2 	bl	8007040 <_SendPacket>
  RECORD_END();
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	f383 8811 	msr	BASEPRI, r3
}
 8007c62:	bf00      	nop
 8007c64:	3718      	adds	r7, #24
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	20014598 	.word	0x20014598

08007c70 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007c70:	b590      	push	{r4, r7, lr}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007c76:	4b15      	ldr	r3, [pc, #84]	; (8007ccc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007c78:	6a1b      	ldr	r3, [r3, #32]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d01a      	beq.n	8007cb4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8007c7e:	4b13      	ldr	r3, [pc, #76]	; (8007ccc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d015      	beq.n	8007cb4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007c88:	4b10      	ldr	r3, [pc, #64]	; (8007ccc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007c8a:	6a1b      	ldr	r3, [r3, #32]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4798      	blx	r3
 8007c90:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007c94:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8007c96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c9a:	f04f 0200 	mov.w	r2, #0
 8007c9e:	f04f 0300 	mov.w	r3, #0
 8007ca2:	000a      	movs	r2, r1
 8007ca4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	461a      	mov	r2, r3
 8007caa:	4621      	mov	r1, r4
 8007cac:	200d      	movs	r0, #13
 8007cae:	f7ff fbe5 	bl	800747c <SEGGER_SYSVIEW_RecordU32x2>
 8007cb2:	e006      	b.n	8007cc2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8007cb4:	4b06      	ldr	r3, [pc, #24]	; (8007cd0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4619      	mov	r1, r3
 8007cba:	200c      	movs	r0, #12
 8007cbc:	f7ff fba2 	bl	8007404 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007cc0:	bf00      	nop
 8007cc2:	bf00      	nop
 8007cc4:	370c      	adds	r7, #12
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd90      	pop	{r4, r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	20014568 	.word	0x20014568
 8007cd0:	e0001004 	.word	0xe0001004

08007cd4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b086      	sub	sp, #24
 8007cd8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007cda:	f3ef 8311 	mrs	r3, BASEPRI
 8007cde:	f04f 0120 	mov.w	r1, #32
 8007ce2:	f381 8811 	msr	BASEPRI, r1
 8007ce6:	60fb      	str	r3, [r7, #12]
 8007ce8:	4819      	ldr	r0, [pc, #100]	; (8007d50 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8007cea:	f7ff f8b9 	bl	8006e60 <_PreparePacket>
 8007cee:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007cf4:	4b17      	ldr	r3, [pc, #92]	; (8007d54 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cfc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	617b      	str	r3, [r7, #20]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	613b      	str	r3, [r7, #16]
 8007d06:	e00b      	b.n	8007d20 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	b2da      	uxtb	r2, r3
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	1c59      	adds	r1, r3, #1
 8007d10:	6179      	str	r1, [r7, #20]
 8007d12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d16:	b2d2      	uxtb	r2, r2
 8007d18:	701a      	strb	r2, [r3, #0]
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	09db      	lsrs	r3, r3, #7
 8007d1e:	613b      	str	r3, [r7, #16]
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	2b7f      	cmp	r3, #127	; 0x7f
 8007d24:	d8f0      	bhi.n	8007d08 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	1c5a      	adds	r2, r3, #1
 8007d2a:	617a      	str	r2, [r7, #20]
 8007d2c:	693a      	ldr	r2, [r7, #16]
 8007d2e:	b2d2      	uxtb	r2, r2
 8007d30:	701a      	strb	r2, [r3, #0]
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8007d36:	2202      	movs	r2, #2
 8007d38:	6879      	ldr	r1, [r7, #4]
 8007d3a:	68b8      	ldr	r0, [r7, #8]
 8007d3c:	f7ff f980 	bl	8007040 <_SendPacket>
  RECORD_END();
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f383 8811 	msr	BASEPRI, r3
}
 8007d46:	bf00      	nop
 8007d48:	3718      	adds	r7, #24
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	20014598 	.word	0x20014598
 8007d54:	e000ed04 	.word	0xe000ed04

08007d58 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007d5e:	f3ef 8311 	mrs	r3, BASEPRI
 8007d62:	f04f 0120 	mov.w	r1, #32
 8007d66:	f381 8811 	msr	BASEPRI, r1
 8007d6a:	607b      	str	r3, [r7, #4]
 8007d6c:	4807      	ldr	r0, [pc, #28]	; (8007d8c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007d6e:	f7ff f877 	bl	8006e60 <_PreparePacket>
 8007d72:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007d74:	2203      	movs	r2, #3
 8007d76:	6839      	ldr	r1, [r7, #0]
 8007d78:	6838      	ldr	r0, [r7, #0]
 8007d7a:	f7ff f961 	bl	8007040 <_SendPacket>
  RECORD_END();
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f383 8811 	msr	BASEPRI, r3
}
 8007d84:	bf00      	nop
 8007d86:	3708      	adds	r7, #8
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	20014598 	.word	0x20014598

08007d90 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007d96:	f3ef 8311 	mrs	r3, BASEPRI
 8007d9a:	f04f 0120 	mov.w	r1, #32
 8007d9e:	f381 8811 	msr	BASEPRI, r1
 8007da2:	607b      	str	r3, [r7, #4]
 8007da4:	4807      	ldr	r0, [pc, #28]	; (8007dc4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8007da6:	f7ff f85b 	bl	8006e60 <_PreparePacket>
 8007daa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007dac:	2212      	movs	r2, #18
 8007dae:	6839      	ldr	r1, [r7, #0]
 8007db0:	6838      	ldr	r0, [r7, #0]
 8007db2:	f7ff f945 	bl	8007040 <_SendPacket>
  RECORD_END();
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f383 8811 	msr	BASEPRI, r3
}
 8007dbc:	bf00      	nop
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	20014598 	.word	0x20014598

08007dc8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007dce:	f3ef 8311 	mrs	r3, BASEPRI
 8007dd2:	f04f 0120 	mov.w	r1, #32
 8007dd6:	f381 8811 	msr	BASEPRI, r1
 8007dda:	607b      	str	r3, [r7, #4]
 8007ddc:	4807      	ldr	r0, [pc, #28]	; (8007dfc <SEGGER_SYSVIEW_OnIdle+0x34>)
 8007dde:	f7ff f83f 	bl	8006e60 <_PreparePacket>
 8007de2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007de4:	2211      	movs	r2, #17
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	6838      	ldr	r0, [r7, #0]
 8007dea:	f7ff f929 	bl	8007040 <_SendPacket>
  RECORD_END();
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f383 8811 	msr	BASEPRI, r3
}
 8007df4:	bf00      	nop
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	20014598 	.word	0x20014598

08007e00 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b088      	sub	sp, #32
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007e08:	f3ef 8311 	mrs	r3, BASEPRI
 8007e0c:	f04f 0120 	mov.w	r1, #32
 8007e10:	f381 8811 	msr	BASEPRI, r1
 8007e14:	617b      	str	r3, [r7, #20]
 8007e16:	4819      	ldr	r0, [pc, #100]	; (8007e7c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007e18:	f7ff f822 	bl	8006e60 <_PreparePacket>
 8007e1c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007e22:	4b17      	ldr	r3, [pc, #92]	; (8007e80 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	61fb      	str	r3, [r7, #28]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	61bb      	str	r3, [r7, #24]
 8007e34:	e00b      	b.n	8007e4e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	b2da      	uxtb	r2, r3
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	1c59      	adds	r1, r3, #1
 8007e3e:	61f9      	str	r1, [r7, #28]
 8007e40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e44:	b2d2      	uxtb	r2, r2
 8007e46:	701a      	strb	r2, [r3, #0]
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	09db      	lsrs	r3, r3, #7
 8007e4c:	61bb      	str	r3, [r7, #24]
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	2b7f      	cmp	r3, #127	; 0x7f
 8007e52:	d8f0      	bhi.n	8007e36 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	1c5a      	adds	r2, r3, #1
 8007e58:	61fa      	str	r2, [r7, #28]
 8007e5a:	69ba      	ldr	r2, [r7, #24]
 8007e5c:	b2d2      	uxtb	r2, r2
 8007e5e:	701a      	strb	r2, [r3, #0]
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007e64:	2208      	movs	r2, #8
 8007e66:	68f9      	ldr	r1, [r7, #12]
 8007e68:	6938      	ldr	r0, [r7, #16]
 8007e6a:	f7ff f8e9 	bl	8007040 <_SendPacket>
  RECORD_END();
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f383 8811 	msr	BASEPRI, r3
}
 8007e74:	bf00      	nop
 8007e76:	3720      	adds	r7, #32
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	20014598 	.word	0x20014598
 8007e80:	20014568 	.word	0x20014568

08007e84 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b088      	sub	sp, #32
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007e8c:	f3ef 8311 	mrs	r3, BASEPRI
 8007e90:	f04f 0120 	mov.w	r1, #32
 8007e94:	f381 8811 	msr	BASEPRI, r1
 8007e98:	617b      	str	r3, [r7, #20]
 8007e9a:	4819      	ldr	r0, [pc, #100]	; (8007f00 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007e9c:	f7fe ffe0 	bl	8006e60 <_PreparePacket>
 8007ea0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007ea6:	4b17      	ldr	r3, [pc, #92]	; (8007f04 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	1ad3      	subs	r3, r2, r3
 8007eae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	61fb      	str	r3, [r7, #28]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	61bb      	str	r3, [r7, #24]
 8007eb8:	e00b      	b.n	8007ed2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	b2da      	uxtb	r2, r3
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	1c59      	adds	r1, r3, #1
 8007ec2:	61f9      	str	r1, [r7, #28]
 8007ec4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ec8:	b2d2      	uxtb	r2, r2
 8007eca:	701a      	strb	r2, [r3, #0]
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	09db      	lsrs	r3, r3, #7
 8007ed0:	61bb      	str	r3, [r7, #24]
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	2b7f      	cmp	r3, #127	; 0x7f
 8007ed6:	d8f0      	bhi.n	8007eba <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	1c5a      	adds	r2, r3, #1
 8007edc:	61fa      	str	r2, [r7, #28]
 8007ede:	69ba      	ldr	r2, [r7, #24]
 8007ee0:	b2d2      	uxtb	r2, r2
 8007ee2:	701a      	strb	r2, [r3, #0]
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007ee8:	2204      	movs	r2, #4
 8007eea:	68f9      	ldr	r1, [r7, #12]
 8007eec:	6938      	ldr	r0, [r7, #16]
 8007eee:	f7ff f8a7 	bl	8007040 <_SendPacket>
  RECORD_END();
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	f383 8811 	msr	BASEPRI, r3
}
 8007ef8:	bf00      	nop
 8007efa:	3720      	adds	r7, #32
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	20014598 	.word	0x20014598
 8007f04:	20014568 	.word	0x20014568

08007f08 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b088      	sub	sp, #32
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007f10:	f3ef 8311 	mrs	r3, BASEPRI
 8007f14:	f04f 0120 	mov.w	r1, #32
 8007f18:	f381 8811 	msr	BASEPRI, r1
 8007f1c:	617b      	str	r3, [r7, #20]
 8007f1e:	4819      	ldr	r0, [pc, #100]	; (8007f84 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007f20:	f7fe ff9e 	bl	8006e60 <_PreparePacket>
 8007f24:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007f2a:	4b17      	ldr	r3, [pc, #92]	; (8007f88 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	61fb      	str	r3, [r7, #28]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	61bb      	str	r3, [r7, #24]
 8007f3c:	e00b      	b.n	8007f56 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	b2da      	uxtb	r2, r3
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	1c59      	adds	r1, r3, #1
 8007f46:	61f9      	str	r1, [r7, #28]
 8007f48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f4c:	b2d2      	uxtb	r2, r2
 8007f4e:	701a      	strb	r2, [r3, #0]
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	09db      	lsrs	r3, r3, #7
 8007f54:	61bb      	str	r3, [r7, #24]
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	2b7f      	cmp	r3, #127	; 0x7f
 8007f5a:	d8f0      	bhi.n	8007f3e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	1c5a      	adds	r2, r3, #1
 8007f60:	61fa      	str	r2, [r7, #28]
 8007f62:	69ba      	ldr	r2, [r7, #24]
 8007f64:	b2d2      	uxtb	r2, r2
 8007f66:	701a      	strb	r2, [r3, #0]
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007f6c:	2206      	movs	r2, #6
 8007f6e:	68f9      	ldr	r1, [r7, #12]
 8007f70:	6938      	ldr	r0, [r7, #16]
 8007f72:	f7ff f865 	bl	8007040 <_SendPacket>
  RECORD_END();
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	f383 8811 	msr	BASEPRI, r3
}
 8007f7c:	bf00      	nop
 8007f7e:	3720      	adds	r7, #32
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	20014598 	.word	0x20014598
 8007f88:	20014568 	.word	0x20014568

08007f8c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b08a      	sub	sp, #40	; 0x28
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007f96:	f3ef 8311 	mrs	r3, BASEPRI
 8007f9a:	f04f 0120 	mov.w	r1, #32
 8007f9e:	f381 8811 	msr	BASEPRI, r1
 8007fa2:	617b      	str	r3, [r7, #20]
 8007fa4:	4827      	ldr	r0, [pc, #156]	; (8008044 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007fa6:	f7fe ff5b 	bl	8006e60 <_PreparePacket>
 8007faa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007fb0:	4b25      	ldr	r3, [pc, #148]	; (8008048 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	623b      	str	r3, [r7, #32]
 8007fc2:	e00b      	b.n	8007fdc <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007fc4:	6a3b      	ldr	r3, [r7, #32]
 8007fc6:	b2da      	uxtb	r2, r3
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fca:	1c59      	adds	r1, r3, #1
 8007fcc:	6279      	str	r1, [r7, #36]	; 0x24
 8007fce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007fd2:	b2d2      	uxtb	r2, r2
 8007fd4:	701a      	strb	r2, [r3, #0]
 8007fd6:	6a3b      	ldr	r3, [r7, #32]
 8007fd8:	09db      	lsrs	r3, r3, #7
 8007fda:	623b      	str	r3, [r7, #32]
 8007fdc:	6a3b      	ldr	r3, [r7, #32]
 8007fde:	2b7f      	cmp	r3, #127	; 0x7f
 8007fe0:	d8f0      	bhi.n	8007fc4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe4:	1c5a      	adds	r2, r3, #1
 8007fe6:	627a      	str	r2, [r7, #36]	; 0x24
 8007fe8:	6a3a      	ldr	r2, [r7, #32]
 8007fea:	b2d2      	uxtb	r2, r2
 8007fec:	701a      	strb	r2, [r3, #0]
 8007fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	61fb      	str	r3, [r7, #28]
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	61bb      	str	r3, [r7, #24]
 8007ffa:	e00b      	b.n	8008014 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	1c59      	adds	r1, r3, #1
 8008004:	61f9      	str	r1, [r7, #28]
 8008006:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800800a:	b2d2      	uxtb	r2, r2
 800800c:	701a      	strb	r2, [r3, #0]
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	09db      	lsrs	r3, r3, #7
 8008012:	61bb      	str	r3, [r7, #24]
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	2b7f      	cmp	r3, #127	; 0x7f
 8008018:	d8f0      	bhi.n	8007ffc <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	1c5a      	adds	r2, r3, #1
 800801e:	61fa      	str	r2, [r7, #28]
 8008020:	69ba      	ldr	r2, [r7, #24]
 8008022:	b2d2      	uxtb	r2, r2
 8008024:	701a      	strb	r2, [r3, #0]
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800802a:	2207      	movs	r2, #7
 800802c:	68f9      	ldr	r1, [r7, #12]
 800802e:	6938      	ldr	r0, [r7, #16]
 8008030:	f7ff f806 	bl	8007040 <_SendPacket>
  RECORD_END();
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	f383 8811 	msr	BASEPRI, r3
}
 800803a:	bf00      	nop
 800803c:	3728      	adds	r7, #40	; 0x28
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	20014598 	.word	0x20014598
 8008048:	20014568 	.word	0x20014568

0800804c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8008054:	4b04      	ldr	r3, [pc, #16]	; (8008068 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	1ad3      	subs	r3, r2, r3
}
 800805c:	4618      	mov	r0, r3
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr
 8008068:	20014568 	.word	0x20014568

0800806c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800806c:	b580      	push	{r7, lr}
 800806e:	b08c      	sub	sp, #48	; 0x30
 8008070:	af00      	add	r7, sp, #0
 8008072:	4603      	mov	r3, r0
 8008074:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8008076:	4b3b      	ldr	r3, [pc, #236]	; (8008164 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d06d      	beq.n	800815a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800807e:	4b39      	ldr	r3, [pc, #228]	; (8008164 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8008084:	2300      	movs	r3, #0
 8008086:	62bb      	str	r3, [r7, #40]	; 0x28
 8008088:	e008      	b.n	800809c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800808a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8008090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008092:	2b00      	cmp	r3, #0
 8008094:	d007      	beq.n	80080a6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8008096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008098:	3301      	adds	r3, #1
 800809a:	62bb      	str	r3, [r7, #40]	; 0x28
 800809c:	79fb      	ldrb	r3, [r7, #7]
 800809e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d3f2      	bcc.n	800808a <SEGGER_SYSVIEW_SendModule+0x1e>
 80080a4:	e000      	b.n	80080a8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80080a6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80080a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d055      	beq.n	800815a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80080ae:	f3ef 8311 	mrs	r3, BASEPRI
 80080b2:	f04f 0120 	mov.w	r1, #32
 80080b6:	f381 8811 	msr	BASEPRI, r1
 80080ba:	617b      	str	r3, [r7, #20]
 80080bc:	482a      	ldr	r0, [pc, #168]	; (8008168 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80080be:	f7fe fecf 	bl	8006e60 <_PreparePacket>
 80080c2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	627b      	str	r3, [r7, #36]	; 0x24
 80080cc:	79fb      	ldrb	r3, [r7, #7]
 80080ce:	623b      	str	r3, [r7, #32]
 80080d0:	e00b      	b.n	80080ea <SEGGER_SYSVIEW_SendModule+0x7e>
 80080d2:	6a3b      	ldr	r3, [r7, #32]
 80080d4:	b2da      	uxtb	r2, r3
 80080d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d8:	1c59      	adds	r1, r3, #1
 80080da:	6279      	str	r1, [r7, #36]	; 0x24
 80080dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80080e0:	b2d2      	uxtb	r2, r2
 80080e2:	701a      	strb	r2, [r3, #0]
 80080e4:	6a3b      	ldr	r3, [r7, #32]
 80080e6:	09db      	lsrs	r3, r3, #7
 80080e8:	623b      	str	r3, [r7, #32]
 80080ea:	6a3b      	ldr	r3, [r7, #32]
 80080ec:	2b7f      	cmp	r3, #127	; 0x7f
 80080ee:	d8f0      	bhi.n	80080d2 <SEGGER_SYSVIEW_SendModule+0x66>
 80080f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f2:	1c5a      	adds	r2, r3, #1
 80080f4:	627a      	str	r2, [r7, #36]	; 0x24
 80080f6:	6a3a      	ldr	r2, [r7, #32]
 80080f8:	b2d2      	uxtb	r2, r2
 80080fa:	701a      	strb	r2, [r3, #0]
 80080fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fe:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	61fb      	str	r3, [r7, #28]
 8008104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	61bb      	str	r3, [r7, #24]
 800810a:	e00b      	b.n	8008124 <SEGGER_SYSVIEW_SendModule+0xb8>
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	b2da      	uxtb	r2, r3
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	1c59      	adds	r1, r3, #1
 8008114:	61f9      	str	r1, [r7, #28]
 8008116:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800811a:	b2d2      	uxtb	r2, r2
 800811c:	701a      	strb	r2, [r3, #0]
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	09db      	lsrs	r3, r3, #7
 8008122:	61bb      	str	r3, [r7, #24]
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	2b7f      	cmp	r3, #127	; 0x7f
 8008128:	d8f0      	bhi.n	800810c <SEGGER_SYSVIEW_SendModule+0xa0>
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	1c5a      	adds	r2, r3, #1
 800812e:	61fa      	str	r2, [r7, #28]
 8008130:	69ba      	ldr	r2, [r7, #24]
 8008132:	b2d2      	uxtb	r2, r2
 8008134:	701a      	strb	r2, [r3, #0]
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800813a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2280      	movs	r2, #128	; 0x80
 8008140:	4619      	mov	r1, r3
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	f7fe fe3c 	bl	8006dc0 <_EncodeStr>
 8008148:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800814a:	2216      	movs	r2, #22
 800814c:	68f9      	ldr	r1, [r7, #12]
 800814e:	6938      	ldr	r0, [r7, #16]
 8008150:	f7fe ff76 	bl	8007040 <_SendPacket>
      RECORD_END();
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800815a:	bf00      	nop
 800815c:	3730      	adds	r7, #48	; 0x30
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	20014590 	.word	0x20014590
 8008168:	20014598 	.word	0x20014598

0800816c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8008172:	4b0c      	ldr	r3, [pc, #48]	; (80081a4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00f      	beq.n	800819a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800817a:	4b0a      	ldr	r3, [pc, #40]	; (80081a4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d002      	beq.n	800818e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1f2      	bne.n	8008180 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800819a:	bf00      	nop
 800819c:	3708      	adds	r7, #8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	20014590 	.word	0x20014590

080081a8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b086      	sub	sp, #24
 80081ac:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80081ae:	f3ef 8311 	mrs	r3, BASEPRI
 80081b2:	f04f 0120 	mov.w	r1, #32
 80081b6:	f381 8811 	msr	BASEPRI, r1
 80081ba:	60fb      	str	r3, [r7, #12]
 80081bc:	4817      	ldr	r0, [pc, #92]	; (800821c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80081be:	f7fe fe4f 	bl	8006e60 <_PreparePacket>
 80081c2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	617b      	str	r3, [r7, #20]
 80081cc:	4b14      	ldr	r3, [pc, #80]	; (8008220 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	613b      	str	r3, [r7, #16]
 80081d2:	e00b      	b.n	80081ec <SEGGER_SYSVIEW_SendNumModules+0x44>
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	b2da      	uxtb	r2, r3
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	1c59      	adds	r1, r3, #1
 80081dc:	6179      	str	r1, [r7, #20]
 80081de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80081e2:	b2d2      	uxtb	r2, r2
 80081e4:	701a      	strb	r2, [r3, #0]
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	09db      	lsrs	r3, r3, #7
 80081ea:	613b      	str	r3, [r7, #16]
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	2b7f      	cmp	r3, #127	; 0x7f
 80081f0:	d8f0      	bhi.n	80081d4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	1c5a      	adds	r2, r3, #1
 80081f6:	617a      	str	r2, [r7, #20]
 80081f8:	693a      	ldr	r2, [r7, #16]
 80081fa:	b2d2      	uxtb	r2, r2
 80081fc:	701a      	strb	r2, [r3, #0]
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8008202:	221b      	movs	r2, #27
 8008204:	6879      	ldr	r1, [r7, #4]
 8008206:	68b8      	ldr	r0, [r7, #8]
 8008208:	f7fe ff1a 	bl	8007040 <_SendPacket>
  RECORD_END();
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f383 8811 	msr	BASEPRI, r3
}
 8008212:	bf00      	nop
 8008214:	3718      	adds	r7, #24
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	20014598 	.word	0x20014598
 8008220:	20014594 	.word	0x20014594

08008224 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8008224:	b580      	push	{r7, lr}
 8008226:	b08a      	sub	sp, #40	; 0x28
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800822c:	f3ef 8311 	mrs	r3, BASEPRI
 8008230:	f04f 0120 	mov.w	r1, #32
 8008234:	f381 8811 	msr	BASEPRI, r1
 8008238:	617b      	str	r3, [r7, #20]
 800823a:	4827      	ldr	r0, [pc, #156]	; (80082d8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800823c:	f7fe fe10 	bl	8006e60 <_PreparePacket>
 8008240:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008242:	2280      	movs	r2, #128	; 0x80
 8008244:	6879      	ldr	r1, [r7, #4]
 8008246:	6938      	ldr	r0, [r7, #16]
 8008248:	f7fe fdba 	bl	8006dc0 <_EncodeStr>
 800824c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	627b      	str	r3, [r7, #36]	; 0x24
 8008252:	2301      	movs	r3, #1
 8008254:	623b      	str	r3, [r7, #32]
 8008256:	e00b      	b.n	8008270 <SEGGER_SYSVIEW_Warn+0x4c>
 8008258:	6a3b      	ldr	r3, [r7, #32]
 800825a:	b2da      	uxtb	r2, r3
 800825c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825e:	1c59      	adds	r1, r3, #1
 8008260:	6279      	str	r1, [r7, #36]	; 0x24
 8008262:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008266:	b2d2      	uxtb	r2, r2
 8008268:	701a      	strb	r2, [r3, #0]
 800826a:	6a3b      	ldr	r3, [r7, #32]
 800826c:	09db      	lsrs	r3, r3, #7
 800826e:	623b      	str	r3, [r7, #32]
 8008270:	6a3b      	ldr	r3, [r7, #32]
 8008272:	2b7f      	cmp	r3, #127	; 0x7f
 8008274:	d8f0      	bhi.n	8008258 <SEGGER_SYSVIEW_Warn+0x34>
 8008276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008278:	1c5a      	adds	r2, r3, #1
 800827a:	627a      	str	r2, [r7, #36]	; 0x24
 800827c:	6a3a      	ldr	r2, [r7, #32]
 800827e:	b2d2      	uxtb	r2, r2
 8008280:	701a      	strb	r2, [r3, #0]
 8008282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008284:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	61fb      	str	r3, [r7, #28]
 800828a:	2300      	movs	r3, #0
 800828c:	61bb      	str	r3, [r7, #24]
 800828e:	e00b      	b.n	80082a8 <SEGGER_SYSVIEW_Warn+0x84>
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	b2da      	uxtb	r2, r3
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	1c59      	adds	r1, r3, #1
 8008298:	61f9      	str	r1, [r7, #28]
 800829a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800829e:	b2d2      	uxtb	r2, r2
 80082a0:	701a      	strb	r2, [r3, #0]
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	09db      	lsrs	r3, r3, #7
 80082a6:	61bb      	str	r3, [r7, #24]
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	2b7f      	cmp	r3, #127	; 0x7f
 80082ac:	d8f0      	bhi.n	8008290 <SEGGER_SYSVIEW_Warn+0x6c>
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	1c5a      	adds	r2, r3, #1
 80082b2:	61fa      	str	r2, [r7, #28]
 80082b4:	69ba      	ldr	r2, [r7, #24]
 80082b6:	b2d2      	uxtb	r2, r2
 80082b8:	701a      	strb	r2, [r3, #0]
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80082be:	221a      	movs	r2, #26
 80082c0:	68f9      	ldr	r1, [r7, #12]
 80082c2:	6938      	ldr	r0, [r7, #16]
 80082c4:	f7fe febc 	bl	8007040 <_SendPacket>
  RECORD_END();
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	f383 8811 	msr	BASEPRI, r3
}
 80082ce:	bf00      	nop
 80082d0:	3728      	adds	r7, #40	; 0x28
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	20014598 	.word	0x20014598

080082dc <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80082dc:	b580      	push	{r7, lr}
 80082de:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80082e0:	4b13      	ldr	r3, [pc, #76]	; (8008330 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80082e2:	7e1b      	ldrb	r3, [r3, #24]
 80082e4:	4619      	mov	r1, r3
 80082e6:	4a13      	ldr	r2, [pc, #76]	; (8008334 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80082e8:	460b      	mov	r3, r1
 80082ea:	005b      	lsls	r3, r3, #1
 80082ec:	440b      	add	r3, r1
 80082ee:	00db      	lsls	r3, r3, #3
 80082f0:	4413      	add	r3, r2
 80082f2:	336c      	adds	r3, #108	; 0x6c
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	4b0e      	ldr	r3, [pc, #56]	; (8008330 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80082f8:	7e1b      	ldrb	r3, [r3, #24]
 80082fa:	4618      	mov	r0, r3
 80082fc:	490d      	ldr	r1, [pc, #52]	; (8008334 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80082fe:	4603      	mov	r3, r0
 8008300:	005b      	lsls	r3, r3, #1
 8008302:	4403      	add	r3, r0
 8008304:	00db      	lsls	r3, r3, #3
 8008306:	440b      	add	r3, r1
 8008308:	3370      	adds	r3, #112	; 0x70
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	429a      	cmp	r2, r3
 800830e:	d00b      	beq.n	8008328 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8008310:	4b07      	ldr	r3, [pc, #28]	; (8008330 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8008312:	789b      	ldrb	r3, [r3, #2]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d107      	bne.n	8008328 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8008318:	4b05      	ldr	r3, [pc, #20]	; (8008330 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800831a:	2201      	movs	r2, #1
 800831c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800831e:	f7fe fdab 	bl	8006e78 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8008322:	4b03      	ldr	r3, [pc, #12]	; (8008330 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8008324:	2200      	movs	r2, #0
 8008326:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8008328:	4b01      	ldr	r3, [pc, #4]	; (8008330 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800832a:	781b      	ldrb	r3, [r3, #0]
}
 800832c:	4618      	mov	r0, r3
 800832e:	bd80      	pop	{r7, pc}
 8008330:	20014568 	.word	0x20014568
 8008334:	200130a8 	.word	0x200130a8

08008338 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
 8008344:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8008346:	683a      	ldr	r2, [r7, #0]
 8008348:	6879      	ldr	r1, [r7, #4]
 800834a:	2000      	movs	r0, #0
 800834c:	f7fe fc42 	bl	8006bd4 <SEGGER_RTT_Write>
  return len;
 8008350:	683b      	ldr	r3, [r7, #0]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
	...

0800835c <__errno>:
 800835c:	4b01      	ldr	r3, [pc, #4]	; (8008364 <__errno+0x8>)
 800835e:	6818      	ldr	r0, [r3, #0]
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	2000001c 	.word	0x2000001c

08008368 <__libc_init_array>:
 8008368:	b570      	push	{r4, r5, r6, lr}
 800836a:	4d0d      	ldr	r5, [pc, #52]	; (80083a0 <__libc_init_array+0x38>)
 800836c:	4c0d      	ldr	r4, [pc, #52]	; (80083a4 <__libc_init_array+0x3c>)
 800836e:	1b64      	subs	r4, r4, r5
 8008370:	10a4      	asrs	r4, r4, #2
 8008372:	2600      	movs	r6, #0
 8008374:	42a6      	cmp	r6, r4
 8008376:	d109      	bne.n	800838c <__libc_init_array+0x24>
 8008378:	4d0b      	ldr	r5, [pc, #44]	; (80083a8 <__libc_init_array+0x40>)
 800837a:	4c0c      	ldr	r4, [pc, #48]	; (80083ac <__libc_init_array+0x44>)
 800837c:	f001 fa32 	bl	80097e4 <_init>
 8008380:	1b64      	subs	r4, r4, r5
 8008382:	10a4      	asrs	r4, r4, #2
 8008384:	2600      	movs	r6, #0
 8008386:	42a6      	cmp	r6, r4
 8008388:	d105      	bne.n	8008396 <__libc_init_array+0x2e>
 800838a:	bd70      	pop	{r4, r5, r6, pc}
 800838c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008390:	4798      	blx	r3
 8008392:	3601      	adds	r6, #1
 8008394:	e7ee      	b.n	8008374 <__libc_init_array+0xc>
 8008396:	f855 3b04 	ldr.w	r3, [r5], #4
 800839a:	4798      	blx	r3
 800839c:	3601      	adds	r6, #1
 800839e:	e7f2      	b.n	8008386 <__libc_init_array+0x1e>
 80083a0:	08009b38 	.word	0x08009b38
 80083a4:	08009b38 	.word	0x08009b38
 80083a8:	08009b38 	.word	0x08009b38
 80083ac:	08009b3c 	.word	0x08009b3c

080083b0 <memcmp>:
 80083b0:	b510      	push	{r4, lr}
 80083b2:	3901      	subs	r1, #1
 80083b4:	4402      	add	r2, r0
 80083b6:	4290      	cmp	r0, r2
 80083b8:	d101      	bne.n	80083be <memcmp+0xe>
 80083ba:	2000      	movs	r0, #0
 80083bc:	e005      	b.n	80083ca <memcmp+0x1a>
 80083be:	7803      	ldrb	r3, [r0, #0]
 80083c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80083c4:	42a3      	cmp	r3, r4
 80083c6:	d001      	beq.n	80083cc <memcmp+0x1c>
 80083c8:	1b18      	subs	r0, r3, r4
 80083ca:	bd10      	pop	{r4, pc}
 80083cc:	3001      	adds	r0, #1
 80083ce:	e7f2      	b.n	80083b6 <memcmp+0x6>

080083d0 <memcpy>:
 80083d0:	440a      	add	r2, r1
 80083d2:	4291      	cmp	r1, r2
 80083d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80083d8:	d100      	bne.n	80083dc <memcpy+0xc>
 80083da:	4770      	bx	lr
 80083dc:	b510      	push	{r4, lr}
 80083de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083e6:	4291      	cmp	r1, r2
 80083e8:	d1f9      	bne.n	80083de <memcpy+0xe>
 80083ea:	bd10      	pop	{r4, pc}

080083ec <memset>:
 80083ec:	4402      	add	r2, r0
 80083ee:	4603      	mov	r3, r0
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d100      	bne.n	80083f6 <memset+0xa>
 80083f4:	4770      	bx	lr
 80083f6:	f803 1b01 	strb.w	r1, [r3], #1
 80083fa:	e7f9      	b.n	80083f0 <memset+0x4>

080083fc <rand>:
 80083fc:	4b16      	ldr	r3, [pc, #88]	; (8008458 <rand+0x5c>)
 80083fe:	b510      	push	{r4, lr}
 8008400:	681c      	ldr	r4, [r3, #0]
 8008402:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008404:	b9b3      	cbnz	r3, 8008434 <rand+0x38>
 8008406:	2018      	movs	r0, #24
 8008408:	f000 f886 	bl	8008518 <malloc>
 800840c:	63a0      	str	r0, [r4, #56]	; 0x38
 800840e:	b928      	cbnz	r0, 800841c <rand+0x20>
 8008410:	4602      	mov	r2, r0
 8008412:	4b12      	ldr	r3, [pc, #72]	; (800845c <rand+0x60>)
 8008414:	4812      	ldr	r0, [pc, #72]	; (8008460 <rand+0x64>)
 8008416:	214e      	movs	r1, #78	; 0x4e
 8008418:	f000 f84e 	bl	80084b8 <__assert_func>
 800841c:	4a11      	ldr	r2, [pc, #68]	; (8008464 <rand+0x68>)
 800841e:	4b12      	ldr	r3, [pc, #72]	; (8008468 <rand+0x6c>)
 8008420:	e9c0 2300 	strd	r2, r3, [r0]
 8008424:	4b11      	ldr	r3, [pc, #68]	; (800846c <rand+0x70>)
 8008426:	6083      	str	r3, [r0, #8]
 8008428:	230b      	movs	r3, #11
 800842a:	8183      	strh	r3, [r0, #12]
 800842c:	2201      	movs	r2, #1
 800842e:	2300      	movs	r3, #0
 8008430:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008434:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8008436:	4a0e      	ldr	r2, [pc, #56]	; (8008470 <rand+0x74>)
 8008438:	6920      	ldr	r0, [r4, #16]
 800843a:	6963      	ldr	r3, [r4, #20]
 800843c:	490d      	ldr	r1, [pc, #52]	; (8008474 <rand+0x78>)
 800843e:	4342      	muls	r2, r0
 8008440:	fb01 2203 	mla	r2, r1, r3, r2
 8008444:	fba0 0101 	umull	r0, r1, r0, r1
 8008448:	1c43      	adds	r3, r0, #1
 800844a:	eb42 0001 	adc.w	r0, r2, r1
 800844e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8008452:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008456:	bd10      	pop	{r4, pc}
 8008458:	2000001c 	.word	0x2000001c
 800845c:	080099ec 	.word	0x080099ec
 8008460:	08009a03 	.word	0x08009a03
 8008464:	abcd330e 	.word	0xabcd330e
 8008468:	e66d1234 	.word	0xe66d1234
 800846c:	0005deec 	.word	0x0005deec
 8008470:	5851f42d 	.word	0x5851f42d
 8008474:	4c957f2d 	.word	0x4c957f2d

08008478 <siprintf>:
 8008478:	b40e      	push	{r1, r2, r3}
 800847a:	b500      	push	{lr}
 800847c:	b09c      	sub	sp, #112	; 0x70
 800847e:	ab1d      	add	r3, sp, #116	; 0x74
 8008480:	9002      	str	r0, [sp, #8]
 8008482:	9006      	str	r0, [sp, #24]
 8008484:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008488:	4809      	ldr	r0, [pc, #36]	; (80084b0 <siprintf+0x38>)
 800848a:	9107      	str	r1, [sp, #28]
 800848c:	9104      	str	r1, [sp, #16]
 800848e:	4909      	ldr	r1, [pc, #36]	; (80084b4 <siprintf+0x3c>)
 8008490:	f853 2b04 	ldr.w	r2, [r3], #4
 8008494:	9105      	str	r1, [sp, #20]
 8008496:	6800      	ldr	r0, [r0, #0]
 8008498:	9301      	str	r3, [sp, #4]
 800849a:	a902      	add	r1, sp, #8
 800849c:	f000 f980 	bl	80087a0 <_svfiprintf_r>
 80084a0:	9b02      	ldr	r3, [sp, #8]
 80084a2:	2200      	movs	r2, #0
 80084a4:	701a      	strb	r2, [r3, #0]
 80084a6:	b01c      	add	sp, #112	; 0x70
 80084a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80084ac:	b003      	add	sp, #12
 80084ae:	4770      	bx	lr
 80084b0:	2000001c 	.word	0x2000001c
 80084b4:	ffff0208 	.word	0xffff0208

080084b8 <__assert_func>:
 80084b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084ba:	4614      	mov	r4, r2
 80084bc:	461a      	mov	r2, r3
 80084be:	4b09      	ldr	r3, [pc, #36]	; (80084e4 <__assert_func+0x2c>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4605      	mov	r5, r0
 80084c4:	68d8      	ldr	r0, [r3, #12]
 80084c6:	b14c      	cbz	r4, 80084dc <__assert_func+0x24>
 80084c8:	4b07      	ldr	r3, [pc, #28]	; (80084e8 <__assert_func+0x30>)
 80084ca:	9100      	str	r1, [sp, #0]
 80084cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80084d0:	4906      	ldr	r1, [pc, #24]	; (80084ec <__assert_func+0x34>)
 80084d2:	462b      	mov	r3, r5
 80084d4:	f000 f80e 	bl	80084f4 <fiprintf>
 80084d8:	f000 fe20 	bl	800911c <abort>
 80084dc:	4b04      	ldr	r3, [pc, #16]	; (80084f0 <__assert_func+0x38>)
 80084de:	461c      	mov	r4, r3
 80084e0:	e7f3      	b.n	80084ca <__assert_func+0x12>
 80084e2:	bf00      	nop
 80084e4:	2000001c 	.word	0x2000001c
 80084e8:	08009a5e 	.word	0x08009a5e
 80084ec:	08009a6b 	.word	0x08009a6b
 80084f0:	08009a99 	.word	0x08009a99

080084f4 <fiprintf>:
 80084f4:	b40e      	push	{r1, r2, r3}
 80084f6:	b503      	push	{r0, r1, lr}
 80084f8:	4601      	mov	r1, r0
 80084fa:	ab03      	add	r3, sp, #12
 80084fc:	4805      	ldr	r0, [pc, #20]	; (8008514 <fiprintf+0x20>)
 80084fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008502:	6800      	ldr	r0, [r0, #0]
 8008504:	9301      	str	r3, [sp, #4]
 8008506:	f000 fa75 	bl	80089f4 <_vfiprintf_r>
 800850a:	b002      	add	sp, #8
 800850c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008510:	b003      	add	sp, #12
 8008512:	4770      	bx	lr
 8008514:	2000001c 	.word	0x2000001c

08008518 <malloc>:
 8008518:	4b02      	ldr	r3, [pc, #8]	; (8008524 <malloc+0xc>)
 800851a:	4601      	mov	r1, r0
 800851c:	6818      	ldr	r0, [r3, #0]
 800851e:	f000 b86f 	b.w	8008600 <_malloc_r>
 8008522:	bf00      	nop
 8008524:	2000001c 	.word	0x2000001c

08008528 <_free_r>:
 8008528:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800852a:	2900      	cmp	r1, #0
 800852c:	d044      	beq.n	80085b8 <_free_r+0x90>
 800852e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008532:	9001      	str	r0, [sp, #4]
 8008534:	2b00      	cmp	r3, #0
 8008536:	f1a1 0404 	sub.w	r4, r1, #4
 800853a:	bfb8      	it	lt
 800853c:	18e4      	addlt	r4, r4, r3
 800853e:	f001 f82f 	bl	80095a0 <__malloc_lock>
 8008542:	4a1e      	ldr	r2, [pc, #120]	; (80085bc <_free_r+0x94>)
 8008544:	9801      	ldr	r0, [sp, #4]
 8008546:	6813      	ldr	r3, [r2, #0]
 8008548:	b933      	cbnz	r3, 8008558 <_free_r+0x30>
 800854a:	6063      	str	r3, [r4, #4]
 800854c:	6014      	str	r4, [r2, #0]
 800854e:	b003      	add	sp, #12
 8008550:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008554:	f001 b82a 	b.w	80095ac <__malloc_unlock>
 8008558:	42a3      	cmp	r3, r4
 800855a:	d908      	bls.n	800856e <_free_r+0x46>
 800855c:	6825      	ldr	r5, [r4, #0]
 800855e:	1961      	adds	r1, r4, r5
 8008560:	428b      	cmp	r3, r1
 8008562:	bf01      	itttt	eq
 8008564:	6819      	ldreq	r1, [r3, #0]
 8008566:	685b      	ldreq	r3, [r3, #4]
 8008568:	1949      	addeq	r1, r1, r5
 800856a:	6021      	streq	r1, [r4, #0]
 800856c:	e7ed      	b.n	800854a <_free_r+0x22>
 800856e:	461a      	mov	r2, r3
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	b10b      	cbz	r3, 8008578 <_free_r+0x50>
 8008574:	42a3      	cmp	r3, r4
 8008576:	d9fa      	bls.n	800856e <_free_r+0x46>
 8008578:	6811      	ldr	r1, [r2, #0]
 800857a:	1855      	adds	r5, r2, r1
 800857c:	42a5      	cmp	r5, r4
 800857e:	d10b      	bne.n	8008598 <_free_r+0x70>
 8008580:	6824      	ldr	r4, [r4, #0]
 8008582:	4421      	add	r1, r4
 8008584:	1854      	adds	r4, r2, r1
 8008586:	42a3      	cmp	r3, r4
 8008588:	6011      	str	r1, [r2, #0]
 800858a:	d1e0      	bne.n	800854e <_free_r+0x26>
 800858c:	681c      	ldr	r4, [r3, #0]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	6053      	str	r3, [r2, #4]
 8008592:	4421      	add	r1, r4
 8008594:	6011      	str	r1, [r2, #0]
 8008596:	e7da      	b.n	800854e <_free_r+0x26>
 8008598:	d902      	bls.n	80085a0 <_free_r+0x78>
 800859a:	230c      	movs	r3, #12
 800859c:	6003      	str	r3, [r0, #0]
 800859e:	e7d6      	b.n	800854e <_free_r+0x26>
 80085a0:	6825      	ldr	r5, [r4, #0]
 80085a2:	1961      	adds	r1, r4, r5
 80085a4:	428b      	cmp	r3, r1
 80085a6:	bf04      	itt	eq
 80085a8:	6819      	ldreq	r1, [r3, #0]
 80085aa:	685b      	ldreq	r3, [r3, #4]
 80085ac:	6063      	str	r3, [r4, #4]
 80085ae:	bf04      	itt	eq
 80085b0:	1949      	addeq	r1, r1, r5
 80085b2:	6021      	streq	r1, [r4, #0]
 80085b4:	6054      	str	r4, [r2, #4]
 80085b6:	e7ca      	b.n	800854e <_free_r+0x26>
 80085b8:	b003      	add	sp, #12
 80085ba:	bd30      	pop	{r4, r5, pc}
 80085bc:	2001467c 	.word	0x2001467c

080085c0 <sbrk_aligned>:
 80085c0:	b570      	push	{r4, r5, r6, lr}
 80085c2:	4e0e      	ldr	r6, [pc, #56]	; (80085fc <sbrk_aligned+0x3c>)
 80085c4:	460c      	mov	r4, r1
 80085c6:	6831      	ldr	r1, [r6, #0]
 80085c8:	4605      	mov	r5, r0
 80085ca:	b911      	cbnz	r1, 80085d2 <sbrk_aligned+0x12>
 80085cc:	f000 fcd6 	bl	8008f7c <_sbrk_r>
 80085d0:	6030      	str	r0, [r6, #0]
 80085d2:	4621      	mov	r1, r4
 80085d4:	4628      	mov	r0, r5
 80085d6:	f000 fcd1 	bl	8008f7c <_sbrk_r>
 80085da:	1c43      	adds	r3, r0, #1
 80085dc:	d00a      	beq.n	80085f4 <sbrk_aligned+0x34>
 80085de:	1cc4      	adds	r4, r0, #3
 80085e0:	f024 0403 	bic.w	r4, r4, #3
 80085e4:	42a0      	cmp	r0, r4
 80085e6:	d007      	beq.n	80085f8 <sbrk_aligned+0x38>
 80085e8:	1a21      	subs	r1, r4, r0
 80085ea:	4628      	mov	r0, r5
 80085ec:	f000 fcc6 	bl	8008f7c <_sbrk_r>
 80085f0:	3001      	adds	r0, #1
 80085f2:	d101      	bne.n	80085f8 <sbrk_aligned+0x38>
 80085f4:	f04f 34ff 	mov.w	r4, #4294967295
 80085f8:	4620      	mov	r0, r4
 80085fa:	bd70      	pop	{r4, r5, r6, pc}
 80085fc:	20014680 	.word	0x20014680

08008600 <_malloc_r>:
 8008600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008604:	1ccd      	adds	r5, r1, #3
 8008606:	f025 0503 	bic.w	r5, r5, #3
 800860a:	3508      	adds	r5, #8
 800860c:	2d0c      	cmp	r5, #12
 800860e:	bf38      	it	cc
 8008610:	250c      	movcc	r5, #12
 8008612:	2d00      	cmp	r5, #0
 8008614:	4607      	mov	r7, r0
 8008616:	db01      	blt.n	800861c <_malloc_r+0x1c>
 8008618:	42a9      	cmp	r1, r5
 800861a:	d905      	bls.n	8008628 <_malloc_r+0x28>
 800861c:	230c      	movs	r3, #12
 800861e:	603b      	str	r3, [r7, #0]
 8008620:	2600      	movs	r6, #0
 8008622:	4630      	mov	r0, r6
 8008624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008628:	4e2e      	ldr	r6, [pc, #184]	; (80086e4 <_malloc_r+0xe4>)
 800862a:	f000 ffb9 	bl	80095a0 <__malloc_lock>
 800862e:	6833      	ldr	r3, [r6, #0]
 8008630:	461c      	mov	r4, r3
 8008632:	bb34      	cbnz	r4, 8008682 <_malloc_r+0x82>
 8008634:	4629      	mov	r1, r5
 8008636:	4638      	mov	r0, r7
 8008638:	f7ff ffc2 	bl	80085c0 <sbrk_aligned>
 800863c:	1c43      	adds	r3, r0, #1
 800863e:	4604      	mov	r4, r0
 8008640:	d14d      	bne.n	80086de <_malloc_r+0xde>
 8008642:	6834      	ldr	r4, [r6, #0]
 8008644:	4626      	mov	r6, r4
 8008646:	2e00      	cmp	r6, #0
 8008648:	d140      	bne.n	80086cc <_malloc_r+0xcc>
 800864a:	6823      	ldr	r3, [r4, #0]
 800864c:	4631      	mov	r1, r6
 800864e:	4638      	mov	r0, r7
 8008650:	eb04 0803 	add.w	r8, r4, r3
 8008654:	f000 fc92 	bl	8008f7c <_sbrk_r>
 8008658:	4580      	cmp	r8, r0
 800865a:	d13a      	bne.n	80086d2 <_malloc_r+0xd2>
 800865c:	6821      	ldr	r1, [r4, #0]
 800865e:	3503      	adds	r5, #3
 8008660:	1a6d      	subs	r5, r5, r1
 8008662:	f025 0503 	bic.w	r5, r5, #3
 8008666:	3508      	adds	r5, #8
 8008668:	2d0c      	cmp	r5, #12
 800866a:	bf38      	it	cc
 800866c:	250c      	movcc	r5, #12
 800866e:	4629      	mov	r1, r5
 8008670:	4638      	mov	r0, r7
 8008672:	f7ff ffa5 	bl	80085c0 <sbrk_aligned>
 8008676:	3001      	adds	r0, #1
 8008678:	d02b      	beq.n	80086d2 <_malloc_r+0xd2>
 800867a:	6823      	ldr	r3, [r4, #0]
 800867c:	442b      	add	r3, r5
 800867e:	6023      	str	r3, [r4, #0]
 8008680:	e00e      	b.n	80086a0 <_malloc_r+0xa0>
 8008682:	6822      	ldr	r2, [r4, #0]
 8008684:	1b52      	subs	r2, r2, r5
 8008686:	d41e      	bmi.n	80086c6 <_malloc_r+0xc6>
 8008688:	2a0b      	cmp	r2, #11
 800868a:	d916      	bls.n	80086ba <_malloc_r+0xba>
 800868c:	1961      	adds	r1, r4, r5
 800868e:	42a3      	cmp	r3, r4
 8008690:	6025      	str	r5, [r4, #0]
 8008692:	bf18      	it	ne
 8008694:	6059      	strne	r1, [r3, #4]
 8008696:	6863      	ldr	r3, [r4, #4]
 8008698:	bf08      	it	eq
 800869a:	6031      	streq	r1, [r6, #0]
 800869c:	5162      	str	r2, [r4, r5]
 800869e:	604b      	str	r3, [r1, #4]
 80086a0:	4638      	mov	r0, r7
 80086a2:	f104 060b 	add.w	r6, r4, #11
 80086a6:	f000 ff81 	bl	80095ac <__malloc_unlock>
 80086aa:	f026 0607 	bic.w	r6, r6, #7
 80086ae:	1d23      	adds	r3, r4, #4
 80086b0:	1af2      	subs	r2, r6, r3
 80086b2:	d0b6      	beq.n	8008622 <_malloc_r+0x22>
 80086b4:	1b9b      	subs	r3, r3, r6
 80086b6:	50a3      	str	r3, [r4, r2]
 80086b8:	e7b3      	b.n	8008622 <_malloc_r+0x22>
 80086ba:	6862      	ldr	r2, [r4, #4]
 80086bc:	42a3      	cmp	r3, r4
 80086be:	bf0c      	ite	eq
 80086c0:	6032      	streq	r2, [r6, #0]
 80086c2:	605a      	strne	r2, [r3, #4]
 80086c4:	e7ec      	b.n	80086a0 <_malloc_r+0xa0>
 80086c6:	4623      	mov	r3, r4
 80086c8:	6864      	ldr	r4, [r4, #4]
 80086ca:	e7b2      	b.n	8008632 <_malloc_r+0x32>
 80086cc:	4634      	mov	r4, r6
 80086ce:	6876      	ldr	r6, [r6, #4]
 80086d0:	e7b9      	b.n	8008646 <_malloc_r+0x46>
 80086d2:	230c      	movs	r3, #12
 80086d4:	603b      	str	r3, [r7, #0]
 80086d6:	4638      	mov	r0, r7
 80086d8:	f000 ff68 	bl	80095ac <__malloc_unlock>
 80086dc:	e7a1      	b.n	8008622 <_malloc_r+0x22>
 80086de:	6025      	str	r5, [r4, #0]
 80086e0:	e7de      	b.n	80086a0 <_malloc_r+0xa0>
 80086e2:	bf00      	nop
 80086e4:	2001467c 	.word	0x2001467c

080086e8 <__ssputs_r>:
 80086e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086ec:	688e      	ldr	r6, [r1, #8]
 80086ee:	429e      	cmp	r6, r3
 80086f0:	4682      	mov	sl, r0
 80086f2:	460c      	mov	r4, r1
 80086f4:	4690      	mov	r8, r2
 80086f6:	461f      	mov	r7, r3
 80086f8:	d838      	bhi.n	800876c <__ssputs_r+0x84>
 80086fa:	898a      	ldrh	r2, [r1, #12]
 80086fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008700:	d032      	beq.n	8008768 <__ssputs_r+0x80>
 8008702:	6825      	ldr	r5, [r4, #0]
 8008704:	6909      	ldr	r1, [r1, #16]
 8008706:	eba5 0901 	sub.w	r9, r5, r1
 800870a:	6965      	ldr	r5, [r4, #20]
 800870c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008710:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008714:	3301      	adds	r3, #1
 8008716:	444b      	add	r3, r9
 8008718:	106d      	asrs	r5, r5, #1
 800871a:	429d      	cmp	r5, r3
 800871c:	bf38      	it	cc
 800871e:	461d      	movcc	r5, r3
 8008720:	0553      	lsls	r3, r2, #21
 8008722:	d531      	bpl.n	8008788 <__ssputs_r+0xa0>
 8008724:	4629      	mov	r1, r5
 8008726:	f7ff ff6b 	bl	8008600 <_malloc_r>
 800872a:	4606      	mov	r6, r0
 800872c:	b950      	cbnz	r0, 8008744 <__ssputs_r+0x5c>
 800872e:	230c      	movs	r3, #12
 8008730:	f8ca 3000 	str.w	r3, [sl]
 8008734:	89a3      	ldrh	r3, [r4, #12]
 8008736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800873a:	81a3      	strh	r3, [r4, #12]
 800873c:	f04f 30ff 	mov.w	r0, #4294967295
 8008740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008744:	6921      	ldr	r1, [r4, #16]
 8008746:	464a      	mov	r2, r9
 8008748:	f7ff fe42 	bl	80083d0 <memcpy>
 800874c:	89a3      	ldrh	r3, [r4, #12]
 800874e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008756:	81a3      	strh	r3, [r4, #12]
 8008758:	6126      	str	r6, [r4, #16]
 800875a:	6165      	str	r5, [r4, #20]
 800875c:	444e      	add	r6, r9
 800875e:	eba5 0509 	sub.w	r5, r5, r9
 8008762:	6026      	str	r6, [r4, #0]
 8008764:	60a5      	str	r5, [r4, #8]
 8008766:	463e      	mov	r6, r7
 8008768:	42be      	cmp	r6, r7
 800876a:	d900      	bls.n	800876e <__ssputs_r+0x86>
 800876c:	463e      	mov	r6, r7
 800876e:	6820      	ldr	r0, [r4, #0]
 8008770:	4632      	mov	r2, r6
 8008772:	4641      	mov	r1, r8
 8008774:	f000 fefa 	bl	800956c <memmove>
 8008778:	68a3      	ldr	r3, [r4, #8]
 800877a:	1b9b      	subs	r3, r3, r6
 800877c:	60a3      	str	r3, [r4, #8]
 800877e:	6823      	ldr	r3, [r4, #0]
 8008780:	4433      	add	r3, r6
 8008782:	6023      	str	r3, [r4, #0]
 8008784:	2000      	movs	r0, #0
 8008786:	e7db      	b.n	8008740 <__ssputs_r+0x58>
 8008788:	462a      	mov	r2, r5
 800878a:	f000 ff15 	bl	80095b8 <_realloc_r>
 800878e:	4606      	mov	r6, r0
 8008790:	2800      	cmp	r0, #0
 8008792:	d1e1      	bne.n	8008758 <__ssputs_r+0x70>
 8008794:	6921      	ldr	r1, [r4, #16]
 8008796:	4650      	mov	r0, sl
 8008798:	f7ff fec6 	bl	8008528 <_free_r>
 800879c:	e7c7      	b.n	800872e <__ssputs_r+0x46>
	...

080087a0 <_svfiprintf_r>:
 80087a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a4:	4698      	mov	r8, r3
 80087a6:	898b      	ldrh	r3, [r1, #12]
 80087a8:	061b      	lsls	r3, r3, #24
 80087aa:	b09d      	sub	sp, #116	; 0x74
 80087ac:	4607      	mov	r7, r0
 80087ae:	460d      	mov	r5, r1
 80087b0:	4614      	mov	r4, r2
 80087b2:	d50e      	bpl.n	80087d2 <_svfiprintf_r+0x32>
 80087b4:	690b      	ldr	r3, [r1, #16]
 80087b6:	b963      	cbnz	r3, 80087d2 <_svfiprintf_r+0x32>
 80087b8:	2140      	movs	r1, #64	; 0x40
 80087ba:	f7ff ff21 	bl	8008600 <_malloc_r>
 80087be:	6028      	str	r0, [r5, #0]
 80087c0:	6128      	str	r0, [r5, #16]
 80087c2:	b920      	cbnz	r0, 80087ce <_svfiprintf_r+0x2e>
 80087c4:	230c      	movs	r3, #12
 80087c6:	603b      	str	r3, [r7, #0]
 80087c8:	f04f 30ff 	mov.w	r0, #4294967295
 80087cc:	e0d1      	b.n	8008972 <_svfiprintf_r+0x1d2>
 80087ce:	2340      	movs	r3, #64	; 0x40
 80087d0:	616b      	str	r3, [r5, #20]
 80087d2:	2300      	movs	r3, #0
 80087d4:	9309      	str	r3, [sp, #36]	; 0x24
 80087d6:	2320      	movs	r3, #32
 80087d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80087e0:	2330      	movs	r3, #48	; 0x30
 80087e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800898c <_svfiprintf_r+0x1ec>
 80087e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087ea:	f04f 0901 	mov.w	r9, #1
 80087ee:	4623      	mov	r3, r4
 80087f0:	469a      	mov	sl, r3
 80087f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087f6:	b10a      	cbz	r2, 80087fc <_svfiprintf_r+0x5c>
 80087f8:	2a25      	cmp	r2, #37	; 0x25
 80087fa:	d1f9      	bne.n	80087f0 <_svfiprintf_r+0x50>
 80087fc:	ebba 0b04 	subs.w	fp, sl, r4
 8008800:	d00b      	beq.n	800881a <_svfiprintf_r+0x7a>
 8008802:	465b      	mov	r3, fp
 8008804:	4622      	mov	r2, r4
 8008806:	4629      	mov	r1, r5
 8008808:	4638      	mov	r0, r7
 800880a:	f7ff ff6d 	bl	80086e8 <__ssputs_r>
 800880e:	3001      	adds	r0, #1
 8008810:	f000 80aa 	beq.w	8008968 <_svfiprintf_r+0x1c8>
 8008814:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008816:	445a      	add	r2, fp
 8008818:	9209      	str	r2, [sp, #36]	; 0x24
 800881a:	f89a 3000 	ldrb.w	r3, [sl]
 800881e:	2b00      	cmp	r3, #0
 8008820:	f000 80a2 	beq.w	8008968 <_svfiprintf_r+0x1c8>
 8008824:	2300      	movs	r3, #0
 8008826:	f04f 32ff 	mov.w	r2, #4294967295
 800882a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800882e:	f10a 0a01 	add.w	sl, sl, #1
 8008832:	9304      	str	r3, [sp, #16]
 8008834:	9307      	str	r3, [sp, #28]
 8008836:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800883a:	931a      	str	r3, [sp, #104]	; 0x68
 800883c:	4654      	mov	r4, sl
 800883e:	2205      	movs	r2, #5
 8008840:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008844:	4851      	ldr	r0, [pc, #324]	; (800898c <_svfiprintf_r+0x1ec>)
 8008846:	f7f7 fd1b 	bl	8000280 <memchr>
 800884a:	9a04      	ldr	r2, [sp, #16]
 800884c:	b9d8      	cbnz	r0, 8008886 <_svfiprintf_r+0xe6>
 800884e:	06d0      	lsls	r0, r2, #27
 8008850:	bf44      	itt	mi
 8008852:	2320      	movmi	r3, #32
 8008854:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008858:	0711      	lsls	r1, r2, #28
 800885a:	bf44      	itt	mi
 800885c:	232b      	movmi	r3, #43	; 0x2b
 800885e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008862:	f89a 3000 	ldrb.w	r3, [sl]
 8008866:	2b2a      	cmp	r3, #42	; 0x2a
 8008868:	d015      	beq.n	8008896 <_svfiprintf_r+0xf6>
 800886a:	9a07      	ldr	r2, [sp, #28]
 800886c:	4654      	mov	r4, sl
 800886e:	2000      	movs	r0, #0
 8008870:	f04f 0c0a 	mov.w	ip, #10
 8008874:	4621      	mov	r1, r4
 8008876:	f811 3b01 	ldrb.w	r3, [r1], #1
 800887a:	3b30      	subs	r3, #48	; 0x30
 800887c:	2b09      	cmp	r3, #9
 800887e:	d94e      	bls.n	800891e <_svfiprintf_r+0x17e>
 8008880:	b1b0      	cbz	r0, 80088b0 <_svfiprintf_r+0x110>
 8008882:	9207      	str	r2, [sp, #28]
 8008884:	e014      	b.n	80088b0 <_svfiprintf_r+0x110>
 8008886:	eba0 0308 	sub.w	r3, r0, r8
 800888a:	fa09 f303 	lsl.w	r3, r9, r3
 800888e:	4313      	orrs	r3, r2
 8008890:	9304      	str	r3, [sp, #16]
 8008892:	46a2      	mov	sl, r4
 8008894:	e7d2      	b.n	800883c <_svfiprintf_r+0x9c>
 8008896:	9b03      	ldr	r3, [sp, #12]
 8008898:	1d19      	adds	r1, r3, #4
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	9103      	str	r1, [sp, #12]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	bfbb      	ittet	lt
 80088a2:	425b      	neglt	r3, r3
 80088a4:	f042 0202 	orrlt.w	r2, r2, #2
 80088a8:	9307      	strge	r3, [sp, #28]
 80088aa:	9307      	strlt	r3, [sp, #28]
 80088ac:	bfb8      	it	lt
 80088ae:	9204      	strlt	r2, [sp, #16]
 80088b0:	7823      	ldrb	r3, [r4, #0]
 80088b2:	2b2e      	cmp	r3, #46	; 0x2e
 80088b4:	d10c      	bne.n	80088d0 <_svfiprintf_r+0x130>
 80088b6:	7863      	ldrb	r3, [r4, #1]
 80088b8:	2b2a      	cmp	r3, #42	; 0x2a
 80088ba:	d135      	bne.n	8008928 <_svfiprintf_r+0x188>
 80088bc:	9b03      	ldr	r3, [sp, #12]
 80088be:	1d1a      	adds	r2, r3, #4
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	9203      	str	r2, [sp, #12]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	bfb8      	it	lt
 80088c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80088cc:	3402      	adds	r4, #2
 80088ce:	9305      	str	r3, [sp, #20]
 80088d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800899c <_svfiprintf_r+0x1fc>
 80088d4:	7821      	ldrb	r1, [r4, #0]
 80088d6:	2203      	movs	r2, #3
 80088d8:	4650      	mov	r0, sl
 80088da:	f7f7 fcd1 	bl	8000280 <memchr>
 80088de:	b140      	cbz	r0, 80088f2 <_svfiprintf_r+0x152>
 80088e0:	2340      	movs	r3, #64	; 0x40
 80088e2:	eba0 000a 	sub.w	r0, r0, sl
 80088e6:	fa03 f000 	lsl.w	r0, r3, r0
 80088ea:	9b04      	ldr	r3, [sp, #16]
 80088ec:	4303      	orrs	r3, r0
 80088ee:	3401      	adds	r4, #1
 80088f0:	9304      	str	r3, [sp, #16]
 80088f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088f6:	4826      	ldr	r0, [pc, #152]	; (8008990 <_svfiprintf_r+0x1f0>)
 80088f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088fc:	2206      	movs	r2, #6
 80088fe:	f7f7 fcbf 	bl	8000280 <memchr>
 8008902:	2800      	cmp	r0, #0
 8008904:	d038      	beq.n	8008978 <_svfiprintf_r+0x1d8>
 8008906:	4b23      	ldr	r3, [pc, #140]	; (8008994 <_svfiprintf_r+0x1f4>)
 8008908:	bb1b      	cbnz	r3, 8008952 <_svfiprintf_r+0x1b2>
 800890a:	9b03      	ldr	r3, [sp, #12]
 800890c:	3307      	adds	r3, #7
 800890e:	f023 0307 	bic.w	r3, r3, #7
 8008912:	3308      	adds	r3, #8
 8008914:	9303      	str	r3, [sp, #12]
 8008916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008918:	4433      	add	r3, r6
 800891a:	9309      	str	r3, [sp, #36]	; 0x24
 800891c:	e767      	b.n	80087ee <_svfiprintf_r+0x4e>
 800891e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008922:	460c      	mov	r4, r1
 8008924:	2001      	movs	r0, #1
 8008926:	e7a5      	b.n	8008874 <_svfiprintf_r+0xd4>
 8008928:	2300      	movs	r3, #0
 800892a:	3401      	adds	r4, #1
 800892c:	9305      	str	r3, [sp, #20]
 800892e:	4619      	mov	r1, r3
 8008930:	f04f 0c0a 	mov.w	ip, #10
 8008934:	4620      	mov	r0, r4
 8008936:	f810 2b01 	ldrb.w	r2, [r0], #1
 800893a:	3a30      	subs	r2, #48	; 0x30
 800893c:	2a09      	cmp	r2, #9
 800893e:	d903      	bls.n	8008948 <_svfiprintf_r+0x1a8>
 8008940:	2b00      	cmp	r3, #0
 8008942:	d0c5      	beq.n	80088d0 <_svfiprintf_r+0x130>
 8008944:	9105      	str	r1, [sp, #20]
 8008946:	e7c3      	b.n	80088d0 <_svfiprintf_r+0x130>
 8008948:	fb0c 2101 	mla	r1, ip, r1, r2
 800894c:	4604      	mov	r4, r0
 800894e:	2301      	movs	r3, #1
 8008950:	e7f0      	b.n	8008934 <_svfiprintf_r+0x194>
 8008952:	ab03      	add	r3, sp, #12
 8008954:	9300      	str	r3, [sp, #0]
 8008956:	462a      	mov	r2, r5
 8008958:	4b0f      	ldr	r3, [pc, #60]	; (8008998 <_svfiprintf_r+0x1f8>)
 800895a:	a904      	add	r1, sp, #16
 800895c:	4638      	mov	r0, r7
 800895e:	f3af 8000 	nop.w
 8008962:	1c42      	adds	r2, r0, #1
 8008964:	4606      	mov	r6, r0
 8008966:	d1d6      	bne.n	8008916 <_svfiprintf_r+0x176>
 8008968:	89ab      	ldrh	r3, [r5, #12]
 800896a:	065b      	lsls	r3, r3, #25
 800896c:	f53f af2c 	bmi.w	80087c8 <_svfiprintf_r+0x28>
 8008970:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008972:	b01d      	add	sp, #116	; 0x74
 8008974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008978:	ab03      	add	r3, sp, #12
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	462a      	mov	r2, r5
 800897e:	4b06      	ldr	r3, [pc, #24]	; (8008998 <_svfiprintf_r+0x1f8>)
 8008980:	a904      	add	r1, sp, #16
 8008982:	4638      	mov	r0, r7
 8008984:	f000 f9d4 	bl	8008d30 <_printf_i>
 8008988:	e7eb      	b.n	8008962 <_svfiprintf_r+0x1c2>
 800898a:	bf00      	nop
 800898c:	08009a9a 	.word	0x08009a9a
 8008990:	08009aa4 	.word	0x08009aa4
 8008994:	00000000 	.word	0x00000000
 8008998:	080086e9 	.word	0x080086e9
 800899c:	08009aa0 	.word	0x08009aa0

080089a0 <__sfputc_r>:
 80089a0:	6893      	ldr	r3, [r2, #8]
 80089a2:	3b01      	subs	r3, #1
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	b410      	push	{r4}
 80089a8:	6093      	str	r3, [r2, #8]
 80089aa:	da08      	bge.n	80089be <__sfputc_r+0x1e>
 80089ac:	6994      	ldr	r4, [r2, #24]
 80089ae:	42a3      	cmp	r3, r4
 80089b0:	db01      	blt.n	80089b6 <__sfputc_r+0x16>
 80089b2:	290a      	cmp	r1, #10
 80089b4:	d103      	bne.n	80089be <__sfputc_r+0x1e>
 80089b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089ba:	f000 baef 	b.w	8008f9c <__swbuf_r>
 80089be:	6813      	ldr	r3, [r2, #0]
 80089c0:	1c58      	adds	r0, r3, #1
 80089c2:	6010      	str	r0, [r2, #0]
 80089c4:	7019      	strb	r1, [r3, #0]
 80089c6:	4608      	mov	r0, r1
 80089c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089cc:	4770      	bx	lr

080089ce <__sfputs_r>:
 80089ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d0:	4606      	mov	r6, r0
 80089d2:	460f      	mov	r7, r1
 80089d4:	4614      	mov	r4, r2
 80089d6:	18d5      	adds	r5, r2, r3
 80089d8:	42ac      	cmp	r4, r5
 80089da:	d101      	bne.n	80089e0 <__sfputs_r+0x12>
 80089dc:	2000      	movs	r0, #0
 80089de:	e007      	b.n	80089f0 <__sfputs_r+0x22>
 80089e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089e4:	463a      	mov	r2, r7
 80089e6:	4630      	mov	r0, r6
 80089e8:	f7ff ffda 	bl	80089a0 <__sfputc_r>
 80089ec:	1c43      	adds	r3, r0, #1
 80089ee:	d1f3      	bne.n	80089d8 <__sfputs_r+0xa>
 80089f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080089f4 <_vfiprintf_r>:
 80089f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f8:	460d      	mov	r5, r1
 80089fa:	b09d      	sub	sp, #116	; 0x74
 80089fc:	4614      	mov	r4, r2
 80089fe:	4698      	mov	r8, r3
 8008a00:	4606      	mov	r6, r0
 8008a02:	b118      	cbz	r0, 8008a0c <_vfiprintf_r+0x18>
 8008a04:	6983      	ldr	r3, [r0, #24]
 8008a06:	b90b      	cbnz	r3, 8008a0c <_vfiprintf_r+0x18>
 8008a08:	f000 fcaa 	bl	8009360 <__sinit>
 8008a0c:	4b89      	ldr	r3, [pc, #548]	; (8008c34 <_vfiprintf_r+0x240>)
 8008a0e:	429d      	cmp	r5, r3
 8008a10:	d11b      	bne.n	8008a4a <_vfiprintf_r+0x56>
 8008a12:	6875      	ldr	r5, [r6, #4]
 8008a14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a16:	07d9      	lsls	r1, r3, #31
 8008a18:	d405      	bmi.n	8008a26 <_vfiprintf_r+0x32>
 8008a1a:	89ab      	ldrh	r3, [r5, #12]
 8008a1c:	059a      	lsls	r2, r3, #22
 8008a1e:	d402      	bmi.n	8008a26 <_vfiprintf_r+0x32>
 8008a20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a22:	f000 fd3b 	bl	800949c <__retarget_lock_acquire_recursive>
 8008a26:	89ab      	ldrh	r3, [r5, #12]
 8008a28:	071b      	lsls	r3, r3, #28
 8008a2a:	d501      	bpl.n	8008a30 <_vfiprintf_r+0x3c>
 8008a2c:	692b      	ldr	r3, [r5, #16]
 8008a2e:	b9eb      	cbnz	r3, 8008a6c <_vfiprintf_r+0x78>
 8008a30:	4629      	mov	r1, r5
 8008a32:	4630      	mov	r0, r6
 8008a34:	f000 fb04 	bl	8009040 <__swsetup_r>
 8008a38:	b1c0      	cbz	r0, 8008a6c <_vfiprintf_r+0x78>
 8008a3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a3c:	07dc      	lsls	r4, r3, #31
 8008a3e:	d50e      	bpl.n	8008a5e <_vfiprintf_r+0x6a>
 8008a40:	f04f 30ff 	mov.w	r0, #4294967295
 8008a44:	b01d      	add	sp, #116	; 0x74
 8008a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a4a:	4b7b      	ldr	r3, [pc, #492]	; (8008c38 <_vfiprintf_r+0x244>)
 8008a4c:	429d      	cmp	r5, r3
 8008a4e:	d101      	bne.n	8008a54 <_vfiprintf_r+0x60>
 8008a50:	68b5      	ldr	r5, [r6, #8]
 8008a52:	e7df      	b.n	8008a14 <_vfiprintf_r+0x20>
 8008a54:	4b79      	ldr	r3, [pc, #484]	; (8008c3c <_vfiprintf_r+0x248>)
 8008a56:	429d      	cmp	r5, r3
 8008a58:	bf08      	it	eq
 8008a5a:	68f5      	ldreq	r5, [r6, #12]
 8008a5c:	e7da      	b.n	8008a14 <_vfiprintf_r+0x20>
 8008a5e:	89ab      	ldrh	r3, [r5, #12]
 8008a60:	0598      	lsls	r0, r3, #22
 8008a62:	d4ed      	bmi.n	8008a40 <_vfiprintf_r+0x4c>
 8008a64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a66:	f000 fd1a 	bl	800949e <__retarget_lock_release_recursive>
 8008a6a:	e7e9      	b.n	8008a40 <_vfiprintf_r+0x4c>
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8008a70:	2320      	movs	r3, #32
 8008a72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a76:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a7a:	2330      	movs	r3, #48	; 0x30
 8008a7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008c40 <_vfiprintf_r+0x24c>
 8008a80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a84:	f04f 0901 	mov.w	r9, #1
 8008a88:	4623      	mov	r3, r4
 8008a8a:	469a      	mov	sl, r3
 8008a8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a90:	b10a      	cbz	r2, 8008a96 <_vfiprintf_r+0xa2>
 8008a92:	2a25      	cmp	r2, #37	; 0x25
 8008a94:	d1f9      	bne.n	8008a8a <_vfiprintf_r+0x96>
 8008a96:	ebba 0b04 	subs.w	fp, sl, r4
 8008a9a:	d00b      	beq.n	8008ab4 <_vfiprintf_r+0xc0>
 8008a9c:	465b      	mov	r3, fp
 8008a9e:	4622      	mov	r2, r4
 8008aa0:	4629      	mov	r1, r5
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	f7ff ff93 	bl	80089ce <__sfputs_r>
 8008aa8:	3001      	adds	r0, #1
 8008aaa:	f000 80aa 	beq.w	8008c02 <_vfiprintf_r+0x20e>
 8008aae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ab0:	445a      	add	r2, fp
 8008ab2:	9209      	str	r2, [sp, #36]	; 0x24
 8008ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f000 80a2 	beq.w	8008c02 <_vfiprintf_r+0x20e>
 8008abe:	2300      	movs	r3, #0
 8008ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ac4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ac8:	f10a 0a01 	add.w	sl, sl, #1
 8008acc:	9304      	str	r3, [sp, #16]
 8008ace:	9307      	str	r3, [sp, #28]
 8008ad0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ad4:	931a      	str	r3, [sp, #104]	; 0x68
 8008ad6:	4654      	mov	r4, sl
 8008ad8:	2205      	movs	r2, #5
 8008ada:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ade:	4858      	ldr	r0, [pc, #352]	; (8008c40 <_vfiprintf_r+0x24c>)
 8008ae0:	f7f7 fbce 	bl	8000280 <memchr>
 8008ae4:	9a04      	ldr	r2, [sp, #16]
 8008ae6:	b9d8      	cbnz	r0, 8008b20 <_vfiprintf_r+0x12c>
 8008ae8:	06d1      	lsls	r1, r2, #27
 8008aea:	bf44      	itt	mi
 8008aec:	2320      	movmi	r3, #32
 8008aee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008af2:	0713      	lsls	r3, r2, #28
 8008af4:	bf44      	itt	mi
 8008af6:	232b      	movmi	r3, #43	; 0x2b
 8008af8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008afc:	f89a 3000 	ldrb.w	r3, [sl]
 8008b00:	2b2a      	cmp	r3, #42	; 0x2a
 8008b02:	d015      	beq.n	8008b30 <_vfiprintf_r+0x13c>
 8008b04:	9a07      	ldr	r2, [sp, #28]
 8008b06:	4654      	mov	r4, sl
 8008b08:	2000      	movs	r0, #0
 8008b0a:	f04f 0c0a 	mov.w	ip, #10
 8008b0e:	4621      	mov	r1, r4
 8008b10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b14:	3b30      	subs	r3, #48	; 0x30
 8008b16:	2b09      	cmp	r3, #9
 8008b18:	d94e      	bls.n	8008bb8 <_vfiprintf_r+0x1c4>
 8008b1a:	b1b0      	cbz	r0, 8008b4a <_vfiprintf_r+0x156>
 8008b1c:	9207      	str	r2, [sp, #28]
 8008b1e:	e014      	b.n	8008b4a <_vfiprintf_r+0x156>
 8008b20:	eba0 0308 	sub.w	r3, r0, r8
 8008b24:	fa09 f303 	lsl.w	r3, r9, r3
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	9304      	str	r3, [sp, #16]
 8008b2c:	46a2      	mov	sl, r4
 8008b2e:	e7d2      	b.n	8008ad6 <_vfiprintf_r+0xe2>
 8008b30:	9b03      	ldr	r3, [sp, #12]
 8008b32:	1d19      	adds	r1, r3, #4
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	9103      	str	r1, [sp, #12]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	bfbb      	ittet	lt
 8008b3c:	425b      	neglt	r3, r3
 8008b3e:	f042 0202 	orrlt.w	r2, r2, #2
 8008b42:	9307      	strge	r3, [sp, #28]
 8008b44:	9307      	strlt	r3, [sp, #28]
 8008b46:	bfb8      	it	lt
 8008b48:	9204      	strlt	r2, [sp, #16]
 8008b4a:	7823      	ldrb	r3, [r4, #0]
 8008b4c:	2b2e      	cmp	r3, #46	; 0x2e
 8008b4e:	d10c      	bne.n	8008b6a <_vfiprintf_r+0x176>
 8008b50:	7863      	ldrb	r3, [r4, #1]
 8008b52:	2b2a      	cmp	r3, #42	; 0x2a
 8008b54:	d135      	bne.n	8008bc2 <_vfiprintf_r+0x1ce>
 8008b56:	9b03      	ldr	r3, [sp, #12]
 8008b58:	1d1a      	adds	r2, r3, #4
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	9203      	str	r2, [sp, #12]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	bfb8      	it	lt
 8008b62:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b66:	3402      	adds	r4, #2
 8008b68:	9305      	str	r3, [sp, #20]
 8008b6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008c50 <_vfiprintf_r+0x25c>
 8008b6e:	7821      	ldrb	r1, [r4, #0]
 8008b70:	2203      	movs	r2, #3
 8008b72:	4650      	mov	r0, sl
 8008b74:	f7f7 fb84 	bl	8000280 <memchr>
 8008b78:	b140      	cbz	r0, 8008b8c <_vfiprintf_r+0x198>
 8008b7a:	2340      	movs	r3, #64	; 0x40
 8008b7c:	eba0 000a 	sub.w	r0, r0, sl
 8008b80:	fa03 f000 	lsl.w	r0, r3, r0
 8008b84:	9b04      	ldr	r3, [sp, #16]
 8008b86:	4303      	orrs	r3, r0
 8008b88:	3401      	adds	r4, #1
 8008b8a:	9304      	str	r3, [sp, #16]
 8008b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b90:	482c      	ldr	r0, [pc, #176]	; (8008c44 <_vfiprintf_r+0x250>)
 8008b92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b96:	2206      	movs	r2, #6
 8008b98:	f7f7 fb72 	bl	8000280 <memchr>
 8008b9c:	2800      	cmp	r0, #0
 8008b9e:	d03f      	beq.n	8008c20 <_vfiprintf_r+0x22c>
 8008ba0:	4b29      	ldr	r3, [pc, #164]	; (8008c48 <_vfiprintf_r+0x254>)
 8008ba2:	bb1b      	cbnz	r3, 8008bec <_vfiprintf_r+0x1f8>
 8008ba4:	9b03      	ldr	r3, [sp, #12]
 8008ba6:	3307      	adds	r3, #7
 8008ba8:	f023 0307 	bic.w	r3, r3, #7
 8008bac:	3308      	adds	r3, #8
 8008bae:	9303      	str	r3, [sp, #12]
 8008bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bb2:	443b      	add	r3, r7
 8008bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8008bb6:	e767      	b.n	8008a88 <_vfiprintf_r+0x94>
 8008bb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bbc:	460c      	mov	r4, r1
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	e7a5      	b.n	8008b0e <_vfiprintf_r+0x11a>
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	3401      	adds	r4, #1
 8008bc6:	9305      	str	r3, [sp, #20]
 8008bc8:	4619      	mov	r1, r3
 8008bca:	f04f 0c0a 	mov.w	ip, #10
 8008bce:	4620      	mov	r0, r4
 8008bd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bd4:	3a30      	subs	r2, #48	; 0x30
 8008bd6:	2a09      	cmp	r2, #9
 8008bd8:	d903      	bls.n	8008be2 <_vfiprintf_r+0x1ee>
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d0c5      	beq.n	8008b6a <_vfiprintf_r+0x176>
 8008bde:	9105      	str	r1, [sp, #20]
 8008be0:	e7c3      	b.n	8008b6a <_vfiprintf_r+0x176>
 8008be2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008be6:	4604      	mov	r4, r0
 8008be8:	2301      	movs	r3, #1
 8008bea:	e7f0      	b.n	8008bce <_vfiprintf_r+0x1da>
 8008bec:	ab03      	add	r3, sp, #12
 8008bee:	9300      	str	r3, [sp, #0]
 8008bf0:	462a      	mov	r2, r5
 8008bf2:	4b16      	ldr	r3, [pc, #88]	; (8008c4c <_vfiprintf_r+0x258>)
 8008bf4:	a904      	add	r1, sp, #16
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	f3af 8000 	nop.w
 8008bfc:	4607      	mov	r7, r0
 8008bfe:	1c78      	adds	r0, r7, #1
 8008c00:	d1d6      	bne.n	8008bb0 <_vfiprintf_r+0x1bc>
 8008c02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c04:	07d9      	lsls	r1, r3, #31
 8008c06:	d405      	bmi.n	8008c14 <_vfiprintf_r+0x220>
 8008c08:	89ab      	ldrh	r3, [r5, #12]
 8008c0a:	059a      	lsls	r2, r3, #22
 8008c0c:	d402      	bmi.n	8008c14 <_vfiprintf_r+0x220>
 8008c0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c10:	f000 fc45 	bl	800949e <__retarget_lock_release_recursive>
 8008c14:	89ab      	ldrh	r3, [r5, #12]
 8008c16:	065b      	lsls	r3, r3, #25
 8008c18:	f53f af12 	bmi.w	8008a40 <_vfiprintf_r+0x4c>
 8008c1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c1e:	e711      	b.n	8008a44 <_vfiprintf_r+0x50>
 8008c20:	ab03      	add	r3, sp, #12
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	462a      	mov	r2, r5
 8008c26:	4b09      	ldr	r3, [pc, #36]	; (8008c4c <_vfiprintf_r+0x258>)
 8008c28:	a904      	add	r1, sp, #16
 8008c2a:	4630      	mov	r0, r6
 8008c2c:	f000 f880 	bl	8008d30 <_printf_i>
 8008c30:	e7e4      	b.n	8008bfc <_vfiprintf_r+0x208>
 8008c32:	bf00      	nop
 8008c34:	08009af0 	.word	0x08009af0
 8008c38:	08009b10 	.word	0x08009b10
 8008c3c:	08009ad0 	.word	0x08009ad0
 8008c40:	08009a9a 	.word	0x08009a9a
 8008c44:	08009aa4 	.word	0x08009aa4
 8008c48:	00000000 	.word	0x00000000
 8008c4c:	080089cf 	.word	0x080089cf
 8008c50:	08009aa0 	.word	0x08009aa0

08008c54 <_printf_common>:
 8008c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c58:	4616      	mov	r6, r2
 8008c5a:	4699      	mov	r9, r3
 8008c5c:	688a      	ldr	r2, [r1, #8]
 8008c5e:	690b      	ldr	r3, [r1, #16]
 8008c60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c64:	4293      	cmp	r3, r2
 8008c66:	bfb8      	it	lt
 8008c68:	4613      	movlt	r3, r2
 8008c6a:	6033      	str	r3, [r6, #0]
 8008c6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c70:	4607      	mov	r7, r0
 8008c72:	460c      	mov	r4, r1
 8008c74:	b10a      	cbz	r2, 8008c7a <_printf_common+0x26>
 8008c76:	3301      	adds	r3, #1
 8008c78:	6033      	str	r3, [r6, #0]
 8008c7a:	6823      	ldr	r3, [r4, #0]
 8008c7c:	0699      	lsls	r1, r3, #26
 8008c7e:	bf42      	ittt	mi
 8008c80:	6833      	ldrmi	r3, [r6, #0]
 8008c82:	3302      	addmi	r3, #2
 8008c84:	6033      	strmi	r3, [r6, #0]
 8008c86:	6825      	ldr	r5, [r4, #0]
 8008c88:	f015 0506 	ands.w	r5, r5, #6
 8008c8c:	d106      	bne.n	8008c9c <_printf_common+0x48>
 8008c8e:	f104 0a19 	add.w	sl, r4, #25
 8008c92:	68e3      	ldr	r3, [r4, #12]
 8008c94:	6832      	ldr	r2, [r6, #0]
 8008c96:	1a9b      	subs	r3, r3, r2
 8008c98:	42ab      	cmp	r3, r5
 8008c9a:	dc26      	bgt.n	8008cea <_printf_common+0x96>
 8008c9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ca0:	1e13      	subs	r3, r2, #0
 8008ca2:	6822      	ldr	r2, [r4, #0]
 8008ca4:	bf18      	it	ne
 8008ca6:	2301      	movne	r3, #1
 8008ca8:	0692      	lsls	r2, r2, #26
 8008caa:	d42b      	bmi.n	8008d04 <_printf_common+0xb0>
 8008cac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cb0:	4649      	mov	r1, r9
 8008cb2:	4638      	mov	r0, r7
 8008cb4:	47c0      	blx	r8
 8008cb6:	3001      	adds	r0, #1
 8008cb8:	d01e      	beq.n	8008cf8 <_printf_common+0xa4>
 8008cba:	6823      	ldr	r3, [r4, #0]
 8008cbc:	68e5      	ldr	r5, [r4, #12]
 8008cbe:	6832      	ldr	r2, [r6, #0]
 8008cc0:	f003 0306 	and.w	r3, r3, #6
 8008cc4:	2b04      	cmp	r3, #4
 8008cc6:	bf08      	it	eq
 8008cc8:	1aad      	subeq	r5, r5, r2
 8008cca:	68a3      	ldr	r3, [r4, #8]
 8008ccc:	6922      	ldr	r2, [r4, #16]
 8008cce:	bf0c      	ite	eq
 8008cd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cd4:	2500      	movne	r5, #0
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	bfc4      	itt	gt
 8008cda:	1a9b      	subgt	r3, r3, r2
 8008cdc:	18ed      	addgt	r5, r5, r3
 8008cde:	2600      	movs	r6, #0
 8008ce0:	341a      	adds	r4, #26
 8008ce2:	42b5      	cmp	r5, r6
 8008ce4:	d11a      	bne.n	8008d1c <_printf_common+0xc8>
 8008ce6:	2000      	movs	r0, #0
 8008ce8:	e008      	b.n	8008cfc <_printf_common+0xa8>
 8008cea:	2301      	movs	r3, #1
 8008cec:	4652      	mov	r2, sl
 8008cee:	4649      	mov	r1, r9
 8008cf0:	4638      	mov	r0, r7
 8008cf2:	47c0      	blx	r8
 8008cf4:	3001      	adds	r0, #1
 8008cf6:	d103      	bne.n	8008d00 <_printf_common+0xac>
 8008cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d00:	3501      	adds	r5, #1
 8008d02:	e7c6      	b.n	8008c92 <_printf_common+0x3e>
 8008d04:	18e1      	adds	r1, r4, r3
 8008d06:	1c5a      	adds	r2, r3, #1
 8008d08:	2030      	movs	r0, #48	; 0x30
 8008d0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d0e:	4422      	add	r2, r4
 8008d10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d18:	3302      	adds	r3, #2
 8008d1a:	e7c7      	b.n	8008cac <_printf_common+0x58>
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	4622      	mov	r2, r4
 8008d20:	4649      	mov	r1, r9
 8008d22:	4638      	mov	r0, r7
 8008d24:	47c0      	blx	r8
 8008d26:	3001      	adds	r0, #1
 8008d28:	d0e6      	beq.n	8008cf8 <_printf_common+0xa4>
 8008d2a:	3601      	adds	r6, #1
 8008d2c:	e7d9      	b.n	8008ce2 <_printf_common+0x8e>
	...

08008d30 <_printf_i>:
 8008d30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d34:	7e0f      	ldrb	r7, [r1, #24]
 8008d36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d38:	2f78      	cmp	r7, #120	; 0x78
 8008d3a:	4691      	mov	r9, r2
 8008d3c:	4680      	mov	r8, r0
 8008d3e:	460c      	mov	r4, r1
 8008d40:	469a      	mov	sl, r3
 8008d42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d46:	d807      	bhi.n	8008d58 <_printf_i+0x28>
 8008d48:	2f62      	cmp	r7, #98	; 0x62
 8008d4a:	d80a      	bhi.n	8008d62 <_printf_i+0x32>
 8008d4c:	2f00      	cmp	r7, #0
 8008d4e:	f000 80d8 	beq.w	8008f02 <_printf_i+0x1d2>
 8008d52:	2f58      	cmp	r7, #88	; 0x58
 8008d54:	f000 80a3 	beq.w	8008e9e <_printf_i+0x16e>
 8008d58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d60:	e03a      	b.n	8008dd8 <_printf_i+0xa8>
 8008d62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d66:	2b15      	cmp	r3, #21
 8008d68:	d8f6      	bhi.n	8008d58 <_printf_i+0x28>
 8008d6a:	a101      	add	r1, pc, #4	; (adr r1, 8008d70 <_printf_i+0x40>)
 8008d6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d70:	08008dc9 	.word	0x08008dc9
 8008d74:	08008ddd 	.word	0x08008ddd
 8008d78:	08008d59 	.word	0x08008d59
 8008d7c:	08008d59 	.word	0x08008d59
 8008d80:	08008d59 	.word	0x08008d59
 8008d84:	08008d59 	.word	0x08008d59
 8008d88:	08008ddd 	.word	0x08008ddd
 8008d8c:	08008d59 	.word	0x08008d59
 8008d90:	08008d59 	.word	0x08008d59
 8008d94:	08008d59 	.word	0x08008d59
 8008d98:	08008d59 	.word	0x08008d59
 8008d9c:	08008ee9 	.word	0x08008ee9
 8008da0:	08008e0d 	.word	0x08008e0d
 8008da4:	08008ecb 	.word	0x08008ecb
 8008da8:	08008d59 	.word	0x08008d59
 8008dac:	08008d59 	.word	0x08008d59
 8008db0:	08008f0b 	.word	0x08008f0b
 8008db4:	08008d59 	.word	0x08008d59
 8008db8:	08008e0d 	.word	0x08008e0d
 8008dbc:	08008d59 	.word	0x08008d59
 8008dc0:	08008d59 	.word	0x08008d59
 8008dc4:	08008ed3 	.word	0x08008ed3
 8008dc8:	682b      	ldr	r3, [r5, #0]
 8008dca:	1d1a      	adds	r2, r3, #4
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	602a      	str	r2, [r5, #0]
 8008dd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e0a3      	b.n	8008f24 <_printf_i+0x1f4>
 8008ddc:	6820      	ldr	r0, [r4, #0]
 8008dde:	6829      	ldr	r1, [r5, #0]
 8008de0:	0606      	lsls	r6, r0, #24
 8008de2:	f101 0304 	add.w	r3, r1, #4
 8008de6:	d50a      	bpl.n	8008dfe <_printf_i+0xce>
 8008de8:	680e      	ldr	r6, [r1, #0]
 8008dea:	602b      	str	r3, [r5, #0]
 8008dec:	2e00      	cmp	r6, #0
 8008dee:	da03      	bge.n	8008df8 <_printf_i+0xc8>
 8008df0:	232d      	movs	r3, #45	; 0x2d
 8008df2:	4276      	negs	r6, r6
 8008df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008df8:	485e      	ldr	r0, [pc, #376]	; (8008f74 <_printf_i+0x244>)
 8008dfa:	230a      	movs	r3, #10
 8008dfc:	e019      	b.n	8008e32 <_printf_i+0x102>
 8008dfe:	680e      	ldr	r6, [r1, #0]
 8008e00:	602b      	str	r3, [r5, #0]
 8008e02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008e06:	bf18      	it	ne
 8008e08:	b236      	sxthne	r6, r6
 8008e0a:	e7ef      	b.n	8008dec <_printf_i+0xbc>
 8008e0c:	682b      	ldr	r3, [r5, #0]
 8008e0e:	6820      	ldr	r0, [r4, #0]
 8008e10:	1d19      	adds	r1, r3, #4
 8008e12:	6029      	str	r1, [r5, #0]
 8008e14:	0601      	lsls	r1, r0, #24
 8008e16:	d501      	bpl.n	8008e1c <_printf_i+0xec>
 8008e18:	681e      	ldr	r6, [r3, #0]
 8008e1a:	e002      	b.n	8008e22 <_printf_i+0xf2>
 8008e1c:	0646      	lsls	r6, r0, #25
 8008e1e:	d5fb      	bpl.n	8008e18 <_printf_i+0xe8>
 8008e20:	881e      	ldrh	r6, [r3, #0]
 8008e22:	4854      	ldr	r0, [pc, #336]	; (8008f74 <_printf_i+0x244>)
 8008e24:	2f6f      	cmp	r7, #111	; 0x6f
 8008e26:	bf0c      	ite	eq
 8008e28:	2308      	moveq	r3, #8
 8008e2a:	230a      	movne	r3, #10
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e32:	6865      	ldr	r5, [r4, #4]
 8008e34:	60a5      	str	r5, [r4, #8]
 8008e36:	2d00      	cmp	r5, #0
 8008e38:	bfa2      	ittt	ge
 8008e3a:	6821      	ldrge	r1, [r4, #0]
 8008e3c:	f021 0104 	bicge.w	r1, r1, #4
 8008e40:	6021      	strge	r1, [r4, #0]
 8008e42:	b90e      	cbnz	r6, 8008e48 <_printf_i+0x118>
 8008e44:	2d00      	cmp	r5, #0
 8008e46:	d04d      	beq.n	8008ee4 <_printf_i+0x1b4>
 8008e48:	4615      	mov	r5, r2
 8008e4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e4e:	fb03 6711 	mls	r7, r3, r1, r6
 8008e52:	5dc7      	ldrb	r7, [r0, r7]
 8008e54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e58:	4637      	mov	r7, r6
 8008e5a:	42bb      	cmp	r3, r7
 8008e5c:	460e      	mov	r6, r1
 8008e5e:	d9f4      	bls.n	8008e4a <_printf_i+0x11a>
 8008e60:	2b08      	cmp	r3, #8
 8008e62:	d10b      	bne.n	8008e7c <_printf_i+0x14c>
 8008e64:	6823      	ldr	r3, [r4, #0]
 8008e66:	07de      	lsls	r6, r3, #31
 8008e68:	d508      	bpl.n	8008e7c <_printf_i+0x14c>
 8008e6a:	6923      	ldr	r3, [r4, #16]
 8008e6c:	6861      	ldr	r1, [r4, #4]
 8008e6e:	4299      	cmp	r1, r3
 8008e70:	bfde      	ittt	le
 8008e72:	2330      	movle	r3, #48	; 0x30
 8008e74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e7c:	1b52      	subs	r2, r2, r5
 8008e7e:	6122      	str	r2, [r4, #16]
 8008e80:	f8cd a000 	str.w	sl, [sp]
 8008e84:	464b      	mov	r3, r9
 8008e86:	aa03      	add	r2, sp, #12
 8008e88:	4621      	mov	r1, r4
 8008e8a:	4640      	mov	r0, r8
 8008e8c:	f7ff fee2 	bl	8008c54 <_printf_common>
 8008e90:	3001      	adds	r0, #1
 8008e92:	d14c      	bne.n	8008f2e <_printf_i+0x1fe>
 8008e94:	f04f 30ff 	mov.w	r0, #4294967295
 8008e98:	b004      	add	sp, #16
 8008e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e9e:	4835      	ldr	r0, [pc, #212]	; (8008f74 <_printf_i+0x244>)
 8008ea0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008ea4:	6829      	ldr	r1, [r5, #0]
 8008ea6:	6823      	ldr	r3, [r4, #0]
 8008ea8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008eac:	6029      	str	r1, [r5, #0]
 8008eae:	061d      	lsls	r5, r3, #24
 8008eb0:	d514      	bpl.n	8008edc <_printf_i+0x1ac>
 8008eb2:	07df      	lsls	r7, r3, #31
 8008eb4:	bf44      	itt	mi
 8008eb6:	f043 0320 	orrmi.w	r3, r3, #32
 8008eba:	6023      	strmi	r3, [r4, #0]
 8008ebc:	b91e      	cbnz	r6, 8008ec6 <_printf_i+0x196>
 8008ebe:	6823      	ldr	r3, [r4, #0]
 8008ec0:	f023 0320 	bic.w	r3, r3, #32
 8008ec4:	6023      	str	r3, [r4, #0]
 8008ec6:	2310      	movs	r3, #16
 8008ec8:	e7b0      	b.n	8008e2c <_printf_i+0xfc>
 8008eca:	6823      	ldr	r3, [r4, #0]
 8008ecc:	f043 0320 	orr.w	r3, r3, #32
 8008ed0:	6023      	str	r3, [r4, #0]
 8008ed2:	2378      	movs	r3, #120	; 0x78
 8008ed4:	4828      	ldr	r0, [pc, #160]	; (8008f78 <_printf_i+0x248>)
 8008ed6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008eda:	e7e3      	b.n	8008ea4 <_printf_i+0x174>
 8008edc:	0659      	lsls	r1, r3, #25
 8008ede:	bf48      	it	mi
 8008ee0:	b2b6      	uxthmi	r6, r6
 8008ee2:	e7e6      	b.n	8008eb2 <_printf_i+0x182>
 8008ee4:	4615      	mov	r5, r2
 8008ee6:	e7bb      	b.n	8008e60 <_printf_i+0x130>
 8008ee8:	682b      	ldr	r3, [r5, #0]
 8008eea:	6826      	ldr	r6, [r4, #0]
 8008eec:	6961      	ldr	r1, [r4, #20]
 8008eee:	1d18      	adds	r0, r3, #4
 8008ef0:	6028      	str	r0, [r5, #0]
 8008ef2:	0635      	lsls	r5, r6, #24
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	d501      	bpl.n	8008efc <_printf_i+0x1cc>
 8008ef8:	6019      	str	r1, [r3, #0]
 8008efa:	e002      	b.n	8008f02 <_printf_i+0x1d2>
 8008efc:	0670      	lsls	r0, r6, #25
 8008efe:	d5fb      	bpl.n	8008ef8 <_printf_i+0x1c8>
 8008f00:	8019      	strh	r1, [r3, #0]
 8008f02:	2300      	movs	r3, #0
 8008f04:	6123      	str	r3, [r4, #16]
 8008f06:	4615      	mov	r5, r2
 8008f08:	e7ba      	b.n	8008e80 <_printf_i+0x150>
 8008f0a:	682b      	ldr	r3, [r5, #0]
 8008f0c:	1d1a      	adds	r2, r3, #4
 8008f0e:	602a      	str	r2, [r5, #0]
 8008f10:	681d      	ldr	r5, [r3, #0]
 8008f12:	6862      	ldr	r2, [r4, #4]
 8008f14:	2100      	movs	r1, #0
 8008f16:	4628      	mov	r0, r5
 8008f18:	f7f7 f9b2 	bl	8000280 <memchr>
 8008f1c:	b108      	cbz	r0, 8008f22 <_printf_i+0x1f2>
 8008f1e:	1b40      	subs	r0, r0, r5
 8008f20:	6060      	str	r0, [r4, #4]
 8008f22:	6863      	ldr	r3, [r4, #4]
 8008f24:	6123      	str	r3, [r4, #16]
 8008f26:	2300      	movs	r3, #0
 8008f28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f2c:	e7a8      	b.n	8008e80 <_printf_i+0x150>
 8008f2e:	6923      	ldr	r3, [r4, #16]
 8008f30:	462a      	mov	r2, r5
 8008f32:	4649      	mov	r1, r9
 8008f34:	4640      	mov	r0, r8
 8008f36:	47d0      	blx	sl
 8008f38:	3001      	adds	r0, #1
 8008f3a:	d0ab      	beq.n	8008e94 <_printf_i+0x164>
 8008f3c:	6823      	ldr	r3, [r4, #0]
 8008f3e:	079b      	lsls	r3, r3, #30
 8008f40:	d413      	bmi.n	8008f6a <_printf_i+0x23a>
 8008f42:	68e0      	ldr	r0, [r4, #12]
 8008f44:	9b03      	ldr	r3, [sp, #12]
 8008f46:	4298      	cmp	r0, r3
 8008f48:	bfb8      	it	lt
 8008f4a:	4618      	movlt	r0, r3
 8008f4c:	e7a4      	b.n	8008e98 <_printf_i+0x168>
 8008f4e:	2301      	movs	r3, #1
 8008f50:	4632      	mov	r2, r6
 8008f52:	4649      	mov	r1, r9
 8008f54:	4640      	mov	r0, r8
 8008f56:	47d0      	blx	sl
 8008f58:	3001      	adds	r0, #1
 8008f5a:	d09b      	beq.n	8008e94 <_printf_i+0x164>
 8008f5c:	3501      	adds	r5, #1
 8008f5e:	68e3      	ldr	r3, [r4, #12]
 8008f60:	9903      	ldr	r1, [sp, #12]
 8008f62:	1a5b      	subs	r3, r3, r1
 8008f64:	42ab      	cmp	r3, r5
 8008f66:	dcf2      	bgt.n	8008f4e <_printf_i+0x21e>
 8008f68:	e7eb      	b.n	8008f42 <_printf_i+0x212>
 8008f6a:	2500      	movs	r5, #0
 8008f6c:	f104 0619 	add.w	r6, r4, #25
 8008f70:	e7f5      	b.n	8008f5e <_printf_i+0x22e>
 8008f72:	bf00      	nop
 8008f74:	08009aab 	.word	0x08009aab
 8008f78:	08009abc 	.word	0x08009abc

08008f7c <_sbrk_r>:
 8008f7c:	b538      	push	{r3, r4, r5, lr}
 8008f7e:	4d06      	ldr	r5, [pc, #24]	; (8008f98 <_sbrk_r+0x1c>)
 8008f80:	2300      	movs	r3, #0
 8008f82:	4604      	mov	r4, r0
 8008f84:	4608      	mov	r0, r1
 8008f86:	602b      	str	r3, [r5, #0]
 8008f88:	f7f8 f870 	bl	800106c <_sbrk>
 8008f8c:	1c43      	adds	r3, r0, #1
 8008f8e:	d102      	bne.n	8008f96 <_sbrk_r+0x1a>
 8008f90:	682b      	ldr	r3, [r5, #0]
 8008f92:	b103      	cbz	r3, 8008f96 <_sbrk_r+0x1a>
 8008f94:	6023      	str	r3, [r4, #0]
 8008f96:	bd38      	pop	{r3, r4, r5, pc}
 8008f98:	20014688 	.word	0x20014688

08008f9c <__swbuf_r>:
 8008f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f9e:	460e      	mov	r6, r1
 8008fa0:	4614      	mov	r4, r2
 8008fa2:	4605      	mov	r5, r0
 8008fa4:	b118      	cbz	r0, 8008fae <__swbuf_r+0x12>
 8008fa6:	6983      	ldr	r3, [r0, #24]
 8008fa8:	b90b      	cbnz	r3, 8008fae <__swbuf_r+0x12>
 8008faa:	f000 f9d9 	bl	8009360 <__sinit>
 8008fae:	4b21      	ldr	r3, [pc, #132]	; (8009034 <__swbuf_r+0x98>)
 8008fb0:	429c      	cmp	r4, r3
 8008fb2:	d12b      	bne.n	800900c <__swbuf_r+0x70>
 8008fb4:	686c      	ldr	r4, [r5, #4]
 8008fb6:	69a3      	ldr	r3, [r4, #24]
 8008fb8:	60a3      	str	r3, [r4, #8]
 8008fba:	89a3      	ldrh	r3, [r4, #12]
 8008fbc:	071a      	lsls	r2, r3, #28
 8008fbe:	d52f      	bpl.n	8009020 <__swbuf_r+0x84>
 8008fc0:	6923      	ldr	r3, [r4, #16]
 8008fc2:	b36b      	cbz	r3, 8009020 <__swbuf_r+0x84>
 8008fc4:	6923      	ldr	r3, [r4, #16]
 8008fc6:	6820      	ldr	r0, [r4, #0]
 8008fc8:	1ac0      	subs	r0, r0, r3
 8008fca:	6963      	ldr	r3, [r4, #20]
 8008fcc:	b2f6      	uxtb	r6, r6
 8008fce:	4283      	cmp	r3, r0
 8008fd0:	4637      	mov	r7, r6
 8008fd2:	dc04      	bgt.n	8008fde <__swbuf_r+0x42>
 8008fd4:	4621      	mov	r1, r4
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	f000 f92e 	bl	8009238 <_fflush_r>
 8008fdc:	bb30      	cbnz	r0, 800902c <__swbuf_r+0x90>
 8008fde:	68a3      	ldr	r3, [r4, #8]
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	60a3      	str	r3, [r4, #8]
 8008fe4:	6823      	ldr	r3, [r4, #0]
 8008fe6:	1c5a      	adds	r2, r3, #1
 8008fe8:	6022      	str	r2, [r4, #0]
 8008fea:	701e      	strb	r6, [r3, #0]
 8008fec:	6963      	ldr	r3, [r4, #20]
 8008fee:	3001      	adds	r0, #1
 8008ff0:	4283      	cmp	r3, r0
 8008ff2:	d004      	beq.n	8008ffe <__swbuf_r+0x62>
 8008ff4:	89a3      	ldrh	r3, [r4, #12]
 8008ff6:	07db      	lsls	r3, r3, #31
 8008ff8:	d506      	bpl.n	8009008 <__swbuf_r+0x6c>
 8008ffa:	2e0a      	cmp	r6, #10
 8008ffc:	d104      	bne.n	8009008 <__swbuf_r+0x6c>
 8008ffe:	4621      	mov	r1, r4
 8009000:	4628      	mov	r0, r5
 8009002:	f000 f919 	bl	8009238 <_fflush_r>
 8009006:	b988      	cbnz	r0, 800902c <__swbuf_r+0x90>
 8009008:	4638      	mov	r0, r7
 800900a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800900c:	4b0a      	ldr	r3, [pc, #40]	; (8009038 <__swbuf_r+0x9c>)
 800900e:	429c      	cmp	r4, r3
 8009010:	d101      	bne.n	8009016 <__swbuf_r+0x7a>
 8009012:	68ac      	ldr	r4, [r5, #8]
 8009014:	e7cf      	b.n	8008fb6 <__swbuf_r+0x1a>
 8009016:	4b09      	ldr	r3, [pc, #36]	; (800903c <__swbuf_r+0xa0>)
 8009018:	429c      	cmp	r4, r3
 800901a:	bf08      	it	eq
 800901c:	68ec      	ldreq	r4, [r5, #12]
 800901e:	e7ca      	b.n	8008fb6 <__swbuf_r+0x1a>
 8009020:	4621      	mov	r1, r4
 8009022:	4628      	mov	r0, r5
 8009024:	f000 f80c 	bl	8009040 <__swsetup_r>
 8009028:	2800      	cmp	r0, #0
 800902a:	d0cb      	beq.n	8008fc4 <__swbuf_r+0x28>
 800902c:	f04f 37ff 	mov.w	r7, #4294967295
 8009030:	e7ea      	b.n	8009008 <__swbuf_r+0x6c>
 8009032:	bf00      	nop
 8009034:	08009af0 	.word	0x08009af0
 8009038:	08009b10 	.word	0x08009b10
 800903c:	08009ad0 	.word	0x08009ad0

08009040 <__swsetup_r>:
 8009040:	4b32      	ldr	r3, [pc, #200]	; (800910c <__swsetup_r+0xcc>)
 8009042:	b570      	push	{r4, r5, r6, lr}
 8009044:	681d      	ldr	r5, [r3, #0]
 8009046:	4606      	mov	r6, r0
 8009048:	460c      	mov	r4, r1
 800904a:	b125      	cbz	r5, 8009056 <__swsetup_r+0x16>
 800904c:	69ab      	ldr	r3, [r5, #24]
 800904e:	b913      	cbnz	r3, 8009056 <__swsetup_r+0x16>
 8009050:	4628      	mov	r0, r5
 8009052:	f000 f985 	bl	8009360 <__sinit>
 8009056:	4b2e      	ldr	r3, [pc, #184]	; (8009110 <__swsetup_r+0xd0>)
 8009058:	429c      	cmp	r4, r3
 800905a:	d10f      	bne.n	800907c <__swsetup_r+0x3c>
 800905c:	686c      	ldr	r4, [r5, #4]
 800905e:	89a3      	ldrh	r3, [r4, #12]
 8009060:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009064:	0719      	lsls	r1, r3, #28
 8009066:	d42c      	bmi.n	80090c2 <__swsetup_r+0x82>
 8009068:	06dd      	lsls	r5, r3, #27
 800906a:	d411      	bmi.n	8009090 <__swsetup_r+0x50>
 800906c:	2309      	movs	r3, #9
 800906e:	6033      	str	r3, [r6, #0]
 8009070:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009074:	81a3      	strh	r3, [r4, #12]
 8009076:	f04f 30ff 	mov.w	r0, #4294967295
 800907a:	e03e      	b.n	80090fa <__swsetup_r+0xba>
 800907c:	4b25      	ldr	r3, [pc, #148]	; (8009114 <__swsetup_r+0xd4>)
 800907e:	429c      	cmp	r4, r3
 8009080:	d101      	bne.n	8009086 <__swsetup_r+0x46>
 8009082:	68ac      	ldr	r4, [r5, #8]
 8009084:	e7eb      	b.n	800905e <__swsetup_r+0x1e>
 8009086:	4b24      	ldr	r3, [pc, #144]	; (8009118 <__swsetup_r+0xd8>)
 8009088:	429c      	cmp	r4, r3
 800908a:	bf08      	it	eq
 800908c:	68ec      	ldreq	r4, [r5, #12]
 800908e:	e7e6      	b.n	800905e <__swsetup_r+0x1e>
 8009090:	0758      	lsls	r0, r3, #29
 8009092:	d512      	bpl.n	80090ba <__swsetup_r+0x7a>
 8009094:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009096:	b141      	cbz	r1, 80090aa <__swsetup_r+0x6a>
 8009098:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800909c:	4299      	cmp	r1, r3
 800909e:	d002      	beq.n	80090a6 <__swsetup_r+0x66>
 80090a0:	4630      	mov	r0, r6
 80090a2:	f7ff fa41 	bl	8008528 <_free_r>
 80090a6:	2300      	movs	r3, #0
 80090a8:	6363      	str	r3, [r4, #52]	; 0x34
 80090aa:	89a3      	ldrh	r3, [r4, #12]
 80090ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80090b0:	81a3      	strh	r3, [r4, #12]
 80090b2:	2300      	movs	r3, #0
 80090b4:	6063      	str	r3, [r4, #4]
 80090b6:	6923      	ldr	r3, [r4, #16]
 80090b8:	6023      	str	r3, [r4, #0]
 80090ba:	89a3      	ldrh	r3, [r4, #12]
 80090bc:	f043 0308 	orr.w	r3, r3, #8
 80090c0:	81a3      	strh	r3, [r4, #12]
 80090c2:	6923      	ldr	r3, [r4, #16]
 80090c4:	b94b      	cbnz	r3, 80090da <__swsetup_r+0x9a>
 80090c6:	89a3      	ldrh	r3, [r4, #12]
 80090c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80090cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090d0:	d003      	beq.n	80090da <__swsetup_r+0x9a>
 80090d2:	4621      	mov	r1, r4
 80090d4:	4630      	mov	r0, r6
 80090d6:	f000 fa09 	bl	80094ec <__smakebuf_r>
 80090da:	89a0      	ldrh	r0, [r4, #12]
 80090dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090e0:	f010 0301 	ands.w	r3, r0, #1
 80090e4:	d00a      	beq.n	80090fc <__swsetup_r+0xbc>
 80090e6:	2300      	movs	r3, #0
 80090e8:	60a3      	str	r3, [r4, #8]
 80090ea:	6963      	ldr	r3, [r4, #20]
 80090ec:	425b      	negs	r3, r3
 80090ee:	61a3      	str	r3, [r4, #24]
 80090f0:	6923      	ldr	r3, [r4, #16]
 80090f2:	b943      	cbnz	r3, 8009106 <__swsetup_r+0xc6>
 80090f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80090f8:	d1ba      	bne.n	8009070 <__swsetup_r+0x30>
 80090fa:	bd70      	pop	{r4, r5, r6, pc}
 80090fc:	0781      	lsls	r1, r0, #30
 80090fe:	bf58      	it	pl
 8009100:	6963      	ldrpl	r3, [r4, #20]
 8009102:	60a3      	str	r3, [r4, #8]
 8009104:	e7f4      	b.n	80090f0 <__swsetup_r+0xb0>
 8009106:	2000      	movs	r0, #0
 8009108:	e7f7      	b.n	80090fa <__swsetup_r+0xba>
 800910a:	bf00      	nop
 800910c:	2000001c 	.word	0x2000001c
 8009110:	08009af0 	.word	0x08009af0
 8009114:	08009b10 	.word	0x08009b10
 8009118:	08009ad0 	.word	0x08009ad0

0800911c <abort>:
 800911c:	b508      	push	{r3, lr}
 800911e:	2006      	movs	r0, #6
 8009120:	f000 faa2 	bl	8009668 <raise>
 8009124:	2001      	movs	r0, #1
 8009126:	f7f7 ff45 	bl	8000fb4 <_exit>
	...

0800912c <__sflush_r>:
 800912c:	898a      	ldrh	r2, [r1, #12]
 800912e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009132:	4605      	mov	r5, r0
 8009134:	0710      	lsls	r0, r2, #28
 8009136:	460c      	mov	r4, r1
 8009138:	d458      	bmi.n	80091ec <__sflush_r+0xc0>
 800913a:	684b      	ldr	r3, [r1, #4]
 800913c:	2b00      	cmp	r3, #0
 800913e:	dc05      	bgt.n	800914c <__sflush_r+0x20>
 8009140:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009142:	2b00      	cmp	r3, #0
 8009144:	dc02      	bgt.n	800914c <__sflush_r+0x20>
 8009146:	2000      	movs	r0, #0
 8009148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800914c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800914e:	2e00      	cmp	r6, #0
 8009150:	d0f9      	beq.n	8009146 <__sflush_r+0x1a>
 8009152:	2300      	movs	r3, #0
 8009154:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009158:	682f      	ldr	r7, [r5, #0]
 800915a:	602b      	str	r3, [r5, #0]
 800915c:	d032      	beq.n	80091c4 <__sflush_r+0x98>
 800915e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009160:	89a3      	ldrh	r3, [r4, #12]
 8009162:	075a      	lsls	r2, r3, #29
 8009164:	d505      	bpl.n	8009172 <__sflush_r+0x46>
 8009166:	6863      	ldr	r3, [r4, #4]
 8009168:	1ac0      	subs	r0, r0, r3
 800916a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800916c:	b10b      	cbz	r3, 8009172 <__sflush_r+0x46>
 800916e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009170:	1ac0      	subs	r0, r0, r3
 8009172:	2300      	movs	r3, #0
 8009174:	4602      	mov	r2, r0
 8009176:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009178:	6a21      	ldr	r1, [r4, #32]
 800917a:	4628      	mov	r0, r5
 800917c:	47b0      	blx	r6
 800917e:	1c43      	adds	r3, r0, #1
 8009180:	89a3      	ldrh	r3, [r4, #12]
 8009182:	d106      	bne.n	8009192 <__sflush_r+0x66>
 8009184:	6829      	ldr	r1, [r5, #0]
 8009186:	291d      	cmp	r1, #29
 8009188:	d82c      	bhi.n	80091e4 <__sflush_r+0xb8>
 800918a:	4a2a      	ldr	r2, [pc, #168]	; (8009234 <__sflush_r+0x108>)
 800918c:	40ca      	lsrs	r2, r1
 800918e:	07d6      	lsls	r6, r2, #31
 8009190:	d528      	bpl.n	80091e4 <__sflush_r+0xb8>
 8009192:	2200      	movs	r2, #0
 8009194:	6062      	str	r2, [r4, #4]
 8009196:	04d9      	lsls	r1, r3, #19
 8009198:	6922      	ldr	r2, [r4, #16]
 800919a:	6022      	str	r2, [r4, #0]
 800919c:	d504      	bpl.n	80091a8 <__sflush_r+0x7c>
 800919e:	1c42      	adds	r2, r0, #1
 80091a0:	d101      	bne.n	80091a6 <__sflush_r+0x7a>
 80091a2:	682b      	ldr	r3, [r5, #0]
 80091a4:	b903      	cbnz	r3, 80091a8 <__sflush_r+0x7c>
 80091a6:	6560      	str	r0, [r4, #84]	; 0x54
 80091a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091aa:	602f      	str	r7, [r5, #0]
 80091ac:	2900      	cmp	r1, #0
 80091ae:	d0ca      	beq.n	8009146 <__sflush_r+0x1a>
 80091b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091b4:	4299      	cmp	r1, r3
 80091b6:	d002      	beq.n	80091be <__sflush_r+0x92>
 80091b8:	4628      	mov	r0, r5
 80091ba:	f7ff f9b5 	bl	8008528 <_free_r>
 80091be:	2000      	movs	r0, #0
 80091c0:	6360      	str	r0, [r4, #52]	; 0x34
 80091c2:	e7c1      	b.n	8009148 <__sflush_r+0x1c>
 80091c4:	6a21      	ldr	r1, [r4, #32]
 80091c6:	2301      	movs	r3, #1
 80091c8:	4628      	mov	r0, r5
 80091ca:	47b0      	blx	r6
 80091cc:	1c41      	adds	r1, r0, #1
 80091ce:	d1c7      	bne.n	8009160 <__sflush_r+0x34>
 80091d0:	682b      	ldr	r3, [r5, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d0c4      	beq.n	8009160 <__sflush_r+0x34>
 80091d6:	2b1d      	cmp	r3, #29
 80091d8:	d001      	beq.n	80091de <__sflush_r+0xb2>
 80091da:	2b16      	cmp	r3, #22
 80091dc:	d101      	bne.n	80091e2 <__sflush_r+0xb6>
 80091de:	602f      	str	r7, [r5, #0]
 80091e0:	e7b1      	b.n	8009146 <__sflush_r+0x1a>
 80091e2:	89a3      	ldrh	r3, [r4, #12]
 80091e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091e8:	81a3      	strh	r3, [r4, #12]
 80091ea:	e7ad      	b.n	8009148 <__sflush_r+0x1c>
 80091ec:	690f      	ldr	r7, [r1, #16]
 80091ee:	2f00      	cmp	r7, #0
 80091f0:	d0a9      	beq.n	8009146 <__sflush_r+0x1a>
 80091f2:	0793      	lsls	r3, r2, #30
 80091f4:	680e      	ldr	r6, [r1, #0]
 80091f6:	bf08      	it	eq
 80091f8:	694b      	ldreq	r3, [r1, #20]
 80091fa:	600f      	str	r7, [r1, #0]
 80091fc:	bf18      	it	ne
 80091fe:	2300      	movne	r3, #0
 8009200:	eba6 0807 	sub.w	r8, r6, r7
 8009204:	608b      	str	r3, [r1, #8]
 8009206:	f1b8 0f00 	cmp.w	r8, #0
 800920a:	dd9c      	ble.n	8009146 <__sflush_r+0x1a>
 800920c:	6a21      	ldr	r1, [r4, #32]
 800920e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009210:	4643      	mov	r3, r8
 8009212:	463a      	mov	r2, r7
 8009214:	4628      	mov	r0, r5
 8009216:	47b0      	blx	r6
 8009218:	2800      	cmp	r0, #0
 800921a:	dc06      	bgt.n	800922a <__sflush_r+0xfe>
 800921c:	89a3      	ldrh	r3, [r4, #12]
 800921e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009222:	81a3      	strh	r3, [r4, #12]
 8009224:	f04f 30ff 	mov.w	r0, #4294967295
 8009228:	e78e      	b.n	8009148 <__sflush_r+0x1c>
 800922a:	4407      	add	r7, r0
 800922c:	eba8 0800 	sub.w	r8, r8, r0
 8009230:	e7e9      	b.n	8009206 <__sflush_r+0xda>
 8009232:	bf00      	nop
 8009234:	20400001 	.word	0x20400001

08009238 <_fflush_r>:
 8009238:	b538      	push	{r3, r4, r5, lr}
 800923a:	690b      	ldr	r3, [r1, #16]
 800923c:	4605      	mov	r5, r0
 800923e:	460c      	mov	r4, r1
 8009240:	b913      	cbnz	r3, 8009248 <_fflush_r+0x10>
 8009242:	2500      	movs	r5, #0
 8009244:	4628      	mov	r0, r5
 8009246:	bd38      	pop	{r3, r4, r5, pc}
 8009248:	b118      	cbz	r0, 8009252 <_fflush_r+0x1a>
 800924a:	6983      	ldr	r3, [r0, #24]
 800924c:	b90b      	cbnz	r3, 8009252 <_fflush_r+0x1a>
 800924e:	f000 f887 	bl	8009360 <__sinit>
 8009252:	4b14      	ldr	r3, [pc, #80]	; (80092a4 <_fflush_r+0x6c>)
 8009254:	429c      	cmp	r4, r3
 8009256:	d11b      	bne.n	8009290 <_fflush_r+0x58>
 8009258:	686c      	ldr	r4, [r5, #4]
 800925a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d0ef      	beq.n	8009242 <_fflush_r+0xa>
 8009262:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009264:	07d0      	lsls	r0, r2, #31
 8009266:	d404      	bmi.n	8009272 <_fflush_r+0x3a>
 8009268:	0599      	lsls	r1, r3, #22
 800926a:	d402      	bmi.n	8009272 <_fflush_r+0x3a>
 800926c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800926e:	f000 f915 	bl	800949c <__retarget_lock_acquire_recursive>
 8009272:	4628      	mov	r0, r5
 8009274:	4621      	mov	r1, r4
 8009276:	f7ff ff59 	bl	800912c <__sflush_r>
 800927a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800927c:	07da      	lsls	r2, r3, #31
 800927e:	4605      	mov	r5, r0
 8009280:	d4e0      	bmi.n	8009244 <_fflush_r+0xc>
 8009282:	89a3      	ldrh	r3, [r4, #12]
 8009284:	059b      	lsls	r3, r3, #22
 8009286:	d4dd      	bmi.n	8009244 <_fflush_r+0xc>
 8009288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800928a:	f000 f908 	bl	800949e <__retarget_lock_release_recursive>
 800928e:	e7d9      	b.n	8009244 <_fflush_r+0xc>
 8009290:	4b05      	ldr	r3, [pc, #20]	; (80092a8 <_fflush_r+0x70>)
 8009292:	429c      	cmp	r4, r3
 8009294:	d101      	bne.n	800929a <_fflush_r+0x62>
 8009296:	68ac      	ldr	r4, [r5, #8]
 8009298:	e7df      	b.n	800925a <_fflush_r+0x22>
 800929a:	4b04      	ldr	r3, [pc, #16]	; (80092ac <_fflush_r+0x74>)
 800929c:	429c      	cmp	r4, r3
 800929e:	bf08      	it	eq
 80092a0:	68ec      	ldreq	r4, [r5, #12]
 80092a2:	e7da      	b.n	800925a <_fflush_r+0x22>
 80092a4:	08009af0 	.word	0x08009af0
 80092a8:	08009b10 	.word	0x08009b10
 80092ac:	08009ad0 	.word	0x08009ad0

080092b0 <std>:
 80092b0:	2300      	movs	r3, #0
 80092b2:	b510      	push	{r4, lr}
 80092b4:	4604      	mov	r4, r0
 80092b6:	e9c0 3300 	strd	r3, r3, [r0]
 80092ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092be:	6083      	str	r3, [r0, #8]
 80092c0:	8181      	strh	r1, [r0, #12]
 80092c2:	6643      	str	r3, [r0, #100]	; 0x64
 80092c4:	81c2      	strh	r2, [r0, #14]
 80092c6:	6183      	str	r3, [r0, #24]
 80092c8:	4619      	mov	r1, r3
 80092ca:	2208      	movs	r2, #8
 80092cc:	305c      	adds	r0, #92	; 0x5c
 80092ce:	f7ff f88d 	bl	80083ec <memset>
 80092d2:	4b05      	ldr	r3, [pc, #20]	; (80092e8 <std+0x38>)
 80092d4:	6263      	str	r3, [r4, #36]	; 0x24
 80092d6:	4b05      	ldr	r3, [pc, #20]	; (80092ec <std+0x3c>)
 80092d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80092da:	4b05      	ldr	r3, [pc, #20]	; (80092f0 <std+0x40>)
 80092dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092de:	4b05      	ldr	r3, [pc, #20]	; (80092f4 <std+0x44>)
 80092e0:	6224      	str	r4, [r4, #32]
 80092e2:	6323      	str	r3, [r4, #48]	; 0x30
 80092e4:	bd10      	pop	{r4, pc}
 80092e6:	bf00      	nop
 80092e8:	080096a1 	.word	0x080096a1
 80092ec:	080096c3 	.word	0x080096c3
 80092f0:	080096fb 	.word	0x080096fb
 80092f4:	0800971f 	.word	0x0800971f

080092f8 <_cleanup_r>:
 80092f8:	4901      	ldr	r1, [pc, #4]	; (8009300 <_cleanup_r+0x8>)
 80092fa:	f000 b8af 	b.w	800945c <_fwalk_reent>
 80092fe:	bf00      	nop
 8009300:	08009239 	.word	0x08009239

08009304 <__sfmoreglue>:
 8009304:	b570      	push	{r4, r5, r6, lr}
 8009306:	2268      	movs	r2, #104	; 0x68
 8009308:	1e4d      	subs	r5, r1, #1
 800930a:	4355      	muls	r5, r2
 800930c:	460e      	mov	r6, r1
 800930e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009312:	f7ff f975 	bl	8008600 <_malloc_r>
 8009316:	4604      	mov	r4, r0
 8009318:	b140      	cbz	r0, 800932c <__sfmoreglue+0x28>
 800931a:	2100      	movs	r1, #0
 800931c:	e9c0 1600 	strd	r1, r6, [r0]
 8009320:	300c      	adds	r0, #12
 8009322:	60a0      	str	r0, [r4, #8]
 8009324:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009328:	f7ff f860 	bl	80083ec <memset>
 800932c:	4620      	mov	r0, r4
 800932e:	bd70      	pop	{r4, r5, r6, pc}

08009330 <__sfp_lock_acquire>:
 8009330:	4801      	ldr	r0, [pc, #4]	; (8009338 <__sfp_lock_acquire+0x8>)
 8009332:	f000 b8b3 	b.w	800949c <__retarget_lock_acquire_recursive>
 8009336:	bf00      	nop
 8009338:	20014685 	.word	0x20014685

0800933c <__sfp_lock_release>:
 800933c:	4801      	ldr	r0, [pc, #4]	; (8009344 <__sfp_lock_release+0x8>)
 800933e:	f000 b8ae 	b.w	800949e <__retarget_lock_release_recursive>
 8009342:	bf00      	nop
 8009344:	20014685 	.word	0x20014685

08009348 <__sinit_lock_acquire>:
 8009348:	4801      	ldr	r0, [pc, #4]	; (8009350 <__sinit_lock_acquire+0x8>)
 800934a:	f000 b8a7 	b.w	800949c <__retarget_lock_acquire_recursive>
 800934e:	bf00      	nop
 8009350:	20014686 	.word	0x20014686

08009354 <__sinit_lock_release>:
 8009354:	4801      	ldr	r0, [pc, #4]	; (800935c <__sinit_lock_release+0x8>)
 8009356:	f000 b8a2 	b.w	800949e <__retarget_lock_release_recursive>
 800935a:	bf00      	nop
 800935c:	20014686 	.word	0x20014686

08009360 <__sinit>:
 8009360:	b510      	push	{r4, lr}
 8009362:	4604      	mov	r4, r0
 8009364:	f7ff fff0 	bl	8009348 <__sinit_lock_acquire>
 8009368:	69a3      	ldr	r3, [r4, #24]
 800936a:	b11b      	cbz	r3, 8009374 <__sinit+0x14>
 800936c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009370:	f7ff bff0 	b.w	8009354 <__sinit_lock_release>
 8009374:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009378:	6523      	str	r3, [r4, #80]	; 0x50
 800937a:	4b13      	ldr	r3, [pc, #76]	; (80093c8 <__sinit+0x68>)
 800937c:	4a13      	ldr	r2, [pc, #76]	; (80093cc <__sinit+0x6c>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	62a2      	str	r2, [r4, #40]	; 0x28
 8009382:	42a3      	cmp	r3, r4
 8009384:	bf04      	itt	eq
 8009386:	2301      	moveq	r3, #1
 8009388:	61a3      	streq	r3, [r4, #24]
 800938a:	4620      	mov	r0, r4
 800938c:	f000 f820 	bl	80093d0 <__sfp>
 8009390:	6060      	str	r0, [r4, #4]
 8009392:	4620      	mov	r0, r4
 8009394:	f000 f81c 	bl	80093d0 <__sfp>
 8009398:	60a0      	str	r0, [r4, #8]
 800939a:	4620      	mov	r0, r4
 800939c:	f000 f818 	bl	80093d0 <__sfp>
 80093a0:	2200      	movs	r2, #0
 80093a2:	60e0      	str	r0, [r4, #12]
 80093a4:	2104      	movs	r1, #4
 80093a6:	6860      	ldr	r0, [r4, #4]
 80093a8:	f7ff ff82 	bl	80092b0 <std>
 80093ac:	68a0      	ldr	r0, [r4, #8]
 80093ae:	2201      	movs	r2, #1
 80093b0:	2109      	movs	r1, #9
 80093b2:	f7ff ff7d 	bl	80092b0 <std>
 80093b6:	68e0      	ldr	r0, [r4, #12]
 80093b8:	2202      	movs	r2, #2
 80093ba:	2112      	movs	r1, #18
 80093bc:	f7ff ff78 	bl	80092b0 <std>
 80093c0:	2301      	movs	r3, #1
 80093c2:	61a3      	str	r3, [r4, #24]
 80093c4:	e7d2      	b.n	800936c <__sinit+0xc>
 80093c6:	bf00      	nop
 80093c8:	080099e8 	.word	0x080099e8
 80093cc:	080092f9 	.word	0x080092f9

080093d0 <__sfp>:
 80093d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d2:	4607      	mov	r7, r0
 80093d4:	f7ff ffac 	bl	8009330 <__sfp_lock_acquire>
 80093d8:	4b1e      	ldr	r3, [pc, #120]	; (8009454 <__sfp+0x84>)
 80093da:	681e      	ldr	r6, [r3, #0]
 80093dc:	69b3      	ldr	r3, [r6, #24]
 80093de:	b913      	cbnz	r3, 80093e6 <__sfp+0x16>
 80093e0:	4630      	mov	r0, r6
 80093e2:	f7ff ffbd 	bl	8009360 <__sinit>
 80093e6:	3648      	adds	r6, #72	; 0x48
 80093e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80093ec:	3b01      	subs	r3, #1
 80093ee:	d503      	bpl.n	80093f8 <__sfp+0x28>
 80093f0:	6833      	ldr	r3, [r6, #0]
 80093f2:	b30b      	cbz	r3, 8009438 <__sfp+0x68>
 80093f4:	6836      	ldr	r6, [r6, #0]
 80093f6:	e7f7      	b.n	80093e8 <__sfp+0x18>
 80093f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80093fc:	b9d5      	cbnz	r5, 8009434 <__sfp+0x64>
 80093fe:	4b16      	ldr	r3, [pc, #88]	; (8009458 <__sfp+0x88>)
 8009400:	60e3      	str	r3, [r4, #12]
 8009402:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009406:	6665      	str	r5, [r4, #100]	; 0x64
 8009408:	f000 f847 	bl	800949a <__retarget_lock_init_recursive>
 800940c:	f7ff ff96 	bl	800933c <__sfp_lock_release>
 8009410:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009414:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009418:	6025      	str	r5, [r4, #0]
 800941a:	61a5      	str	r5, [r4, #24]
 800941c:	2208      	movs	r2, #8
 800941e:	4629      	mov	r1, r5
 8009420:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009424:	f7fe ffe2 	bl	80083ec <memset>
 8009428:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800942c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009430:	4620      	mov	r0, r4
 8009432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009434:	3468      	adds	r4, #104	; 0x68
 8009436:	e7d9      	b.n	80093ec <__sfp+0x1c>
 8009438:	2104      	movs	r1, #4
 800943a:	4638      	mov	r0, r7
 800943c:	f7ff ff62 	bl	8009304 <__sfmoreglue>
 8009440:	4604      	mov	r4, r0
 8009442:	6030      	str	r0, [r6, #0]
 8009444:	2800      	cmp	r0, #0
 8009446:	d1d5      	bne.n	80093f4 <__sfp+0x24>
 8009448:	f7ff ff78 	bl	800933c <__sfp_lock_release>
 800944c:	230c      	movs	r3, #12
 800944e:	603b      	str	r3, [r7, #0]
 8009450:	e7ee      	b.n	8009430 <__sfp+0x60>
 8009452:	bf00      	nop
 8009454:	080099e8 	.word	0x080099e8
 8009458:	ffff0001 	.word	0xffff0001

0800945c <_fwalk_reent>:
 800945c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009460:	4606      	mov	r6, r0
 8009462:	4688      	mov	r8, r1
 8009464:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009468:	2700      	movs	r7, #0
 800946a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800946e:	f1b9 0901 	subs.w	r9, r9, #1
 8009472:	d505      	bpl.n	8009480 <_fwalk_reent+0x24>
 8009474:	6824      	ldr	r4, [r4, #0]
 8009476:	2c00      	cmp	r4, #0
 8009478:	d1f7      	bne.n	800946a <_fwalk_reent+0xe>
 800947a:	4638      	mov	r0, r7
 800947c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009480:	89ab      	ldrh	r3, [r5, #12]
 8009482:	2b01      	cmp	r3, #1
 8009484:	d907      	bls.n	8009496 <_fwalk_reent+0x3a>
 8009486:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800948a:	3301      	adds	r3, #1
 800948c:	d003      	beq.n	8009496 <_fwalk_reent+0x3a>
 800948e:	4629      	mov	r1, r5
 8009490:	4630      	mov	r0, r6
 8009492:	47c0      	blx	r8
 8009494:	4307      	orrs	r7, r0
 8009496:	3568      	adds	r5, #104	; 0x68
 8009498:	e7e9      	b.n	800946e <_fwalk_reent+0x12>

0800949a <__retarget_lock_init_recursive>:
 800949a:	4770      	bx	lr

0800949c <__retarget_lock_acquire_recursive>:
 800949c:	4770      	bx	lr

0800949e <__retarget_lock_release_recursive>:
 800949e:	4770      	bx	lr

080094a0 <__swhatbuf_r>:
 80094a0:	b570      	push	{r4, r5, r6, lr}
 80094a2:	460e      	mov	r6, r1
 80094a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094a8:	2900      	cmp	r1, #0
 80094aa:	b096      	sub	sp, #88	; 0x58
 80094ac:	4614      	mov	r4, r2
 80094ae:	461d      	mov	r5, r3
 80094b0:	da08      	bge.n	80094c4 <__swhatbuf_r+0x24>
 80094b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80094b6:	2200      	movs	r2, #0
 80094b8:	602a      	str	r2, [r5, #0]
 80094ba:	061a      	lsls	r2, r3, #24
 80094bc:	d410      	bmi.n	80094e0 <__swhatbuf_r+0x40>
 80094be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094c2:	e00e      	b.n	80094e2 <__swhatbuf_r+0x42>
 80094c4:	466a      	mov	r2, sp
 80094c6:	f000 f93f 	bl	8009748 <_fstat_r>
 80094ca:	2800      	cmp	r0, #0
 80094cc:	dbf1      	blt.n	80094b2 <__swhatbuf_r+0x12>
 80094ce:	9a01      	ldr	r2, [sp, #4]
 80094d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80094d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80094d8:	425a      	negs	r2, r3
 80094da:	415a      	adcs	r2, r3
 80094dc:	602a      	str	r2, [r5, #0]
 80094de:	e7ee      	b.n	80094be <__swhatbuf_r+0x1e>
 80094e0:	2340      	movs	r3, #64	; 0x40
 80094e2:	2000      	movs	r0, #0
 80094e4:	6023      	str	r3, [r4, #0]
 80094e6:	b016      	add	sp, #88	; 0x58
 80094e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080094ec <__smakebuf_r>:
 80094ec:	898b      	ldrh	r3, [r1, #12]
 80094ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80094f0:	079d      	lsls	r5, r3, #30
 80094f2:	4606      	mov	r6, r0
 80094f4:	460c      	mov	r4, r1
 80094f6:	d507      	bpl.n	8009508 <__smakebuf_r+0x1c>
 80094f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80094fc:	6023      	str	r3, [r4, #0]
 80094fe:	6123      	str	r3, [r4, #16]
 8009500:	2301      	movs	r3, #1
 8009502:	6163      	str	r3, [r4, #20]
 8009504:	b002      	add	sp, #8
 8009506:	bd70      	pop	{r4, r5, r6, pc}
 8009508:	ab01      	add	r3, sp, #4
 800950a:	466a      	mov	r2, sp
 800950c:	f7ff ffc8 	bl	80094a0 <__swhatbuf_r>
 8009510:	9900      	ldr	r1, [sp, #0]
 8009512:	4605      	mov	r5, r0
 8009514:	4630      	mov	r0, r6
 8009516:	f7ff f873 	bl	8008600 <_malloc_r>
 800951a:	b948      	cbnz	r0, 8009530 <__smakebuf_r+0x44>
 800951c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009520:	059a      	lsls	r2, r3, #22
 8009522:	d4ef      	bmi.n	8009504 <__smakebuf_r+0x18>
 8009524:	f023 0303 	bic.w	r3, r3, #3
 8009528:	f043 0302 	orr.w	r3, r3, #2
 800952c:	81a3      	strh	r3, [r4, #12]
 800952e:	e7e3      	b.n	80094f8 <__smakebuf_r+0xc>
 8009530:	4b0d      	ldr	r3, [pc, #52]	; (8009568 <__smakebuf_r+0x7c>)
 8009532:	62b3      	str	r3, [r6, #40]	; 0x28
 8009534:	89a3      	ldrh	r3, [r4, #12]
 8009536:	6020      	str	r0, [r4, #0]
 8009538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800953c:	81a3      	strh	r3, [r4, #12]
 800953e:	9b00      	ldr	r3, [sp, #0]
 8009540:	6163      	str	r3, [r4, #20]
 8009542:	9b01      	ldr	r3, [sp, #4]
 8009544:	6120      	str	r0, [r4, #16]
 8009546:	b15b      	cbz	r3, 8009560 <__smakebuf_r+0x74>
 8009548:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800954c:	4630      	mov	r0, r6
 800954e:	f000 f90d 	bl	800976c <_isatty_r>
 8009552:	b128      	cbz	r0, 8009560 <__smakebuf_r+0x74>
 8009554:	89a3      	ldrh	r3, [r4, #12]
 8009556:	f023 0303 	bic.w	r3, r3, #3
 800955a:	f043 0301 	orr.w	r3, r3, #1
 800955e:	81a3      	strh	r3, [r4, #12]
 8009560:	89a0      	ldrh	r0, [r4, #12]
 8009562:	4305      	orrs	r5, r0
 8009564:	81a5      	strh	r5, [r4, #12]
 8009566:	e7cd      	b.n	8009504 <__smakebuf_r+0x18>
 8009568:	080092f9 	.word	0x080092f9

0800956c <memmove>:
 800956c:	4288      	cmp	r0, r1
 800956e:	b510      	push	{r4, lr}
 8009570:	eb01 0402 	add.w	r4, r1, r2
 8009574:	d902      	bls.n	800957c <memmove+0x10>
 8009576:	4284      	cmp	r4, r0
 8009578:	4623      	mov	r3, r4
 800957a:	d807      	bhi.n	800958c <memmove+0x20>
 800957c:	1e43      	subs	r3, r0, #1
 800957e:	42a1      	cmp	r1, r4
 8009580:	d008      	beq.n	8009594 <memmove+0x28>
 8009582:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009586:	f803 2f01 	strb.w	r2, [r3, #1]!
 800958a:	e7f8      	b.n	800957e <memmove+0x12>
 800958c:	4402      	add	r2, r0
 800958e:	4601      	mov	r1, r0
 8009590:	428a      	cmp	r2, r1
 8009592:	d100      	bne.n	8009596 <memmove+0x2a>
 8009594:	bd10      	pop	{r4, pc}
 8009596:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800959a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800959e:	e7f7      	b.n	8009590 <memmove+0x24>

080095a0 <__malloc_lock>:
 80095a0:	4801      	ldr	r0, [pc, #4]	; (80095a8 <__malloc_lock+0x8>)
 80095a2:	f7ff bf7b 	b.w	800949c <__retarget_lock_acquire_recursive>
 80095a6:	bf00      	nop
 80095a8:	20014684 	.word	0x20014684

080095ac <__malloc_unlock>:
 80095ac:	4801      	ldr	r0, [pc, #4]	; (80095b4 <__malloc_unlock+0x8>)
 80095ae:	f7ff bf76 	b.w	800949e <__retarget_lock_release_recursive>
 80095b2:	bf00      	nop
 80095b4:	20014684 	.word	0x20014684

080095b8 <_realloc_r>:
 80095b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095bc:	4680      	mov	r8, r0
 80095be:	4614      	mov	r4, r2
 80095c0:	460e      	mov	r6, r1
 80095c2:	b921      	cbnz	r1, 80095ce <_realloc_r+0x16>
 80095c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095c8:	4611      	mov	r1, r2
 80095ca:	f7ff b819 	b.w	8008600 <_malloc_r>
 80095ce:	b92a      	cbnz	r2, 80095dc <_realloc_r+0x24>
 80095d0:	f7fe ffaa 	bl	8008528 <_free_r>
 80095d4:	4625      	mov	r5, r4
 80095d6:	4628      	mov	r0, r5
 80095d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095dc:	f000 f8e8 	bl	80097b0 <_malloc_usable_size_r>
 80095e0:	4284      	cmp	r4, r0
 80095e2:	4607      	mov	r7, r0
 80095e4:	d802      	bhi.n	80095ec <_realloc_r+0x34>
 80095e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80095ea:	d812      	bhi.n	8009612 <_realloc_r+0x5a>
 80095ec:	4621      	mov	r1, r4
 80095ee:	4640      	mov	r0, r8
 80095f0:	f7ff f806 	bl	8008600 <_malloc_r>
 80095f4:	4605      	mov	r5, r0
 80095f6:	2800      	cmp	r0, #0
 80095f8:	d0ed      	beq.n	80095d6 <_realloc_r+0x1e>
 80095fa:	42bc      	cmp	r4, r7
 80095fc:	4622      	mov	r2, r4
 80095fe:	4631      	mov	r1, r6
 8009600:	bf28      	it	cs
 8009602:	463a      	movcs	r2, r7
 8009604:	f7fe fee4 	bl	80083d0 <memcpy>
 8009608:	4631      	mov	r1, r6
 800960a:	4640      	mov	r0, r8
 800960c:	f7fe ff8c 	bl	8008528 <_free_r>
 8009610:	e7e1      	b.n	80095d6 <_realloc_r+0x1e>
 8009612:	4635      	mov	r5, r6
 8009614:	e7df      	b.n	80095d6 <_realloc_r+0x1e>

08009616 <_raise_r>:
 8009616:	291f      	cmp	r1, #31
 8009618:	b538      	push	{r3, r4, r5, lr}
 800961a:	4604      	mov	r4, r0
 800961c:	460d      	mov	r5, r1
 800961e:	d904      	bls.n	800962a <_raise_r+0x14>
 8009620:	2316      	movs	r3, #22
 8009622:	6003      	str	r3, [r0, #0]
 8009624:	f04f 30ff 	mov.w	r0, #4294967295
 8009628:	bd38      	pop	{r3, r4, r5, pc}
 800962a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800962c:	b112      	cbz	r2, 8009634 <_raise_r+0x1e>
 800962e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009632:	b94b      	cbnz	r3, 8009648 <_raise_r+0x32>
 8009634:	4620      	mov	r0, r4
 8009636:	f000 f831 	bl	800969c <_getpid_r>
 800963a:	462a      	mov	r2, r5
 800963c:	4601      	mov	r1, r0
 800963e:	4620      	mov	r0, r4
 8009640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009644:	f000 b818 	b.w	8009678 <_kill_r>
 8009648:	2b01      	cmp	r3, #1
 800964a:	d00a      	beq.n	8009662 <_raise_r+0x4c>
 800964c:	1c59      	adds	r1, r3, #1
 800964e:	d103      	bne.n	8009658 <_raise_r+0x42>
 8009650:	2316      	movs	r3, #22
 8009652:	6003      	str	r3, [r0, #0]
 8009654:	2001      	movs	r0, #1
 8009656:	e7e7      	b.n	8009628 <_raise_r+0x12>
 8009658:	2400      	movs	r4, #0
 800965a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800965e:	4628      	mov	r0, r5
 8009660:	4798      	blx	r3
 8009662:	2000      	movs	r0, #0
 8009664:	e7e0      	b.n	8009628 <_raise_r+0x12>
	...

08009668 <raise>:
 8009668:	4b02      	ldr	r3, [pc, #8]	; (8009674 <raise+0xc>)
 800966a:	4601      	mov	r1, r0
 800966c:	6818      	ldr	r0, [r3, #0]
 800966e:	f7ff bfd2 	b.w	8009616 <_raise_r>
 8009672:	bf00      	nop
 8009674:	2000001c 	.word	0x2000001c

08009678 <_kill_r>:
 8009678:	b538      	push	{r3, r4, r5, lr}
 800967a:	4d07      	ldr	r5, [pc, #28]	; (8009698 <_kill_r+0x20>)
 800967c:	2300      	movs	r3, #0
 800967e:	4604      	mov	r4, r0
 8009680:	4608      	mov	r0, r1
 8009682:	4611      	mov	r1, r2
 8009684:	602b      	str	r3, [r5, #0]
 8009686:	f7f7 fc85 	bl	8000f94 <_kill>
 800968a:	1c43      	adds	r3, r0, #1
 800968c:	d102      	bne.n	8009694 <_kill_r+0x1c>
 800968e:	682b      	ldr	r3, [r5, #0]
 8009690:	b103      	cbz	r3, 8009694 <_kill_r+0x1c>
 8009692:	6023      	str	r3, [r4, #0]
 8009694:	bd38      	pop	{r3, r4, r5, pc}
 8009696:	bf00      	nop
 8009698:	20014688 	.word	0x20014688

0800969c <_getpid_r>:
 800969c:	f7f7 bc72 	b.w	8000f84 <_getpid>

080096a0 <__sread>:
 80096a0:	b510      	push	{r4, lr}
 80096a2:	460c      	mov	r4, r1
 80096a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096a8:	f000 f88a 	bl	80097c0 <_read_r>
 80096ac:	2800      	cmp	r0, #0
 80096ae:	bfab      	itete	ge
 80096b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80096b2:	89a3      	ldrhlt	r3, [r4, #12]
 80096b4:	181b      	addge	r3, r3, r0
 80096b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80096ba:	bfac      	ite	ge
 80096bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80096be:	81a3      	strhlt	r3, [r4, #12]
 80096c0:	bd10      	pop	{r4, pc}

080096c2 <__swrite>:
 80096c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096c6:	461f      	mov	r7, r3
 80096c8:	898b      	ldrh	r3, [r1, #12]
 80096ca:	05db      	lsls	r3, r3, #23
 80096cc:	4605      	mov	r5, r0
 80096ce:	460c      	mov	r4, r1
 80096d0:	4616      	mov	r6, r2
 80096d2:	d505      	bpl.n	80096e0 <__swrite+0x1e>
 80096d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096d8:	2302      	movs	r3, #2
 80096da:	2200      	movs	r2, #0
 80096dc:	f000 f856 	bl	800978c <_lseek_r>
 80096e0:	89a3      	ldrh	r3, [r4, #12]
 80096e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096ea:	81a3      	strh	r3, [r4, #12]
 80096ec:	4632      	mov	r2, r6
 80096ee:	463b      	mov	r3, r7
 80096f0:	4628      	mov	r0, r5
 80096f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096f6:	f7fe be1f 	b.w	8008338 <_write_r>

080096fa <__sseek>:
 80096fa:	b510      	push	{r4, lr}
 80096fc:	460c      	mov	r4, r1
 80096fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009702:	f000 f843 	bl	800978c <_lseek_r>
 8009706:	1c43      	adds	r3, r0, #1
 8009708:	89a3      	ldrh	r3, [r4, #12]
 800970a:	bf15      	itete	ne
 800970c:	6560      	strne	r0, [r4, #84]	; 0x54
 800970e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009712:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009716:	81a3      	strheq	r3, [r4, #12]
 8009718:	bf18      	it	ne
 800971a:	81a3      	strhne	r3, [r4, #12]
 800971c:	bd10      	pop	{r4, pc}

0800971e <__sclose>:
 800971e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009722:	f000 b801 	b.w	8009728 <_close_r>
	...

08009728 <_close_r>:
 8009728:	b538      	push	{r3, r4, r5, lr}
 800972a:	4d06      	ldr	r5, [pc, #24]	; (8009744 <_close_r+0x1c>)
 800972c:	2300      	movs	r3, #0
 800972e:	4604      	mov	r4, r0
 8009730:	4608      	mov	r0, r1
 8009732:	602b      	str	r3, [r5, #0]
 8009734:	f7f7 fc65 	bl	8001002 <_close>
 8009738:	1c43      	adds	r3, r0, #1
 800973a:	d102      	bne.n	8009742 <_close_r+0x1a>
 800973c:	682b      	ldr	r3, [r5, #0]
 800973e:	b103      	cbz	r3, 8009742 <_close_r+0x1a>
 8009740:	6023      	str	r3, [r4, #0]
 8009742:	bd38      	pop	{r3, r4, r5, pc}
 8009744:	20014688 	.word	0x20014688

08009748 <_fstat_r>:
 8009748:	b538      	push	{r3, r4, r5, lr}
 800974a:	4d07      	ldr	r5, [pc, #28]	; (8009768 <_fstat_r+0x20>)
 800974c:	2300      	movs	r3, #0
 800974e:	4604      	mov	r4, r0
 8009750:	4608      	mov	r0, r1
 8009752:	4611      	mov	r1, r2
 8009754:	602b      	str	r3, [r5, #0]
 8009756:	f7f7 fc60 	bl	800101a <_fstat>
 800975a:	1c43      	adds	r3, r0, #1
 800975c:	d102      	bne.n	8009764 <_fstat_r+0x1c>
 800975e:	682b      	ldr	r3, [r5, #0]
 8009760:	b103      	cbz	r3, 8009764 <_fstat_r+0x1c>
 8009762:	6023      	str	r3, [r4, #0]
 8009764:	bd38      	pop	{r3, r4, r5, pc}
 8009766:	bf00      	nop
 8009768:	20014688 	.word	0x20014688

0800976c <_isatty_r>:
 800976c:	b538      	push	{r3, r4, r5, lr}
 800976e:	4d06      	ldr	r5, [pc, #24]	; (8009788 <_isatty_r+0x1c>)
 8009770:	2300      	movs	r3, #0
 8009772:	4604      	mov	r4, r0
 8009774:	4608      	mov	r0, r1
 8009776:	602b      	str	r3, [r5, #0]
 8009778:	f7f7 fc5f 	bl	800103a <_isatty>
 800977c:	1c43      	adds	r3, r0, #1
 800977e:	d102      	bne.n	8009786 <_isatty_r+0x1a>
 8009780:	682b      	ldr	r3, [r5, #0]
 8009782:	b103      	cbz	r3, 8009786 <_isatty_r+0x1a>
 8009784:	6023      	str	r3, [r4, #0]
 8009786:	bd38      	pop	{r3, r4, r5, pc}
 8009788:	20014688 	.word	0x20014688

0800978c <_lseek_r>:
 800978c:	b538      	push	{r3, r4, r5, lr}
 800978e:	4d07      	ldr	r5, [pc, #28]	; (80097ac <_lseek_r+0x20>)
 8009790:	4604      	mov	r4, r0
 8009792:	4608      	mov	r0, r1
 8009794:	4611      	mov	r1, r2
 8009796:	2200      	movs	r2, #0
 8009798:	602a      	str	r2, [r5, #0]
 800979a:	461a      	mov	r2, r3
 800979c:	f7f7 fc58 	bl	8001050 <_lseek>
 80097a0:	1c43      	adds	r3, r0, #1
 80097a2:	d102      	bne.n	80097aa <_lseek_r+0x1e>
 80097a4:	682b      	ldr	r3, [r5, #0]
 80097a6:	b103      	cbz	r3, 80097aa <_lseek_r+0x1e>
 80097a8:	6023      	str	r3, [r4, #0]
 80097aa:	bd38      	pop	{r3, r4, r5, pc}
 80097ac:	20014688 	.word	0x20014688

080097b0 <_malloc_usable_size_r>:
 80097b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097b4:	1f18      	subs	r0, r3, #4
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	bfbc      	itt	lt
 80097ba:	580b      	ldrlt	r3, [r1, r0]
 80097bc:	18c0      	addlt	r0, r0, r3
 80097be:	4770      	bx	lr

080097c0 <_read_r>:
 80097c0:	b538      	push	{r3, r4, r5, lr}
 80097c2:	4d07      	ldr	r5, [pc, #28]	; (80097e0 <_read_r+0x20>)
 80097c4:	4604      	mov	r4, r0
 80097c6:	4608      	mov	r0, r1
 80097c8:	4611      	mov	r1, r2
 80097ca:	2200      	movs	r2, #0
 80097cc:	602a      	str	r2, [r5, #0]
 80097ce:	461a      	mov	r2, r3
 80097d0:	f7f7 fbfa 	bl	8000fc8 <_read>
 80097d4:	1c43      	adds	r3, r0, #1
 80097d6:	d102      	bne.n	80097de <_read_r+0x1e>
 80097d8:	682b      	ldr	r3, [r5, #0]
 80097da:	b103      	cbz	r3, 80097de <_read_r+0x1e>
 80097dc:	6023      	str	r3, [r4, #0]
 80097de:	bd38      	pop	{r3, r4, r5, pc}
 80097e0:	20014688 	.word	0x20014688

080097e4 <_init>:
 80097e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097e6:	bf00      	nop
 80097e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ea:	bc08      	pop	{r3}
 80097ec:	469e      	mov	lr, r3
 80097ee:	4770      	bx	lr

080097f0 <_fini>:
 80097f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097f2:	bf00      	nop
 80097f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097f6:	bc08      	pop	{r3}
 80097f8:	469e      	mov	lr, r3
 80097fa:	4770      	bx	lr
