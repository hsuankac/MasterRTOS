
007Task_Priority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005838  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080059c8  080059c8  000159c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ae4  08005ae4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ae4  08005ae4  00015ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005aec  08005aec  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005aec  08005aec  00015aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005af0  08005af0  00015af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005af4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00014418  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20014434  20014434  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012759  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a4d  00000000  00000000  000327a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001150  00000000  00000000  000351f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fe8  00000000  00000000  00036348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022afd  00000000  00000000  00037330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013092  00000000  00000000  00059e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5d97  00000000  00000000  0006cebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00142c56  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047f4  00000000  00000000  00142ca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080059b0 	.word	0x080059b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	080059b0 	.word	0x080059b0

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e60 	.word	0x20012e60

08000264 <strlen>:
 8000264:	4603      	mov	r3, r0
 8000266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026a:	2a00      	cmp	r2, #0
 800026c:	d1fb      	bne.n	8000266 <strlen+0x2>
 800026e:	1a18      	subs	r0, r3, r0
 8000270:	3801      	subs	r0, #1
 8000272:	4770      	bx	lr

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b974 	b.w	8000574 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468e      	mov	lr, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d14d      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d969      	bls.n	800038c <__udivmoddi4+0xe8>
 80002b8:	fab2 f282 	clz	r2, r2
 80002bc:	b152      	cbz	r2, 80002d4 <__udivmoddi4+0x30>
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	f1c2 0120 	rsb	r1, r2, #32
 80002c6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ce:	ea41 0e03 	orr.w	lr, r1, r3
 80002d2:	4094      	lsls	r4, r2
 80002d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d8:	0c21      	lsrs	r1, r4, #16
 80002da:	fbbe f6f8 	udiv	r6, lr, r8
 80002de:	fa1f f78c 	uxth.w	r7, ip
 80002e2:	fb08 e316 	mls	r3, r8, r6, lr
 80002e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ea:	fb06 f107 	mul.w	r1, r6, r7
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002fa:	f080 811f 	bcs.w	800053c <__udivmoddi4+0x298>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 811c 	bls.w	800053c <__udivmoddi4+0x298>
 8000304:	3e02      	subs	r6, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a5b      	subs	r3, r3, r1
 800030a:	b2a4      	uxth	r4, r4
 800030c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000310:	fb08 3310 	mls	r3, r8, r0, r3
 8000314:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000318:	fb00 f707 	mul.w	r7, r0, r7
 800031c:	42a7      	cmp	r7, r4
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x92>
 8000320:	eb1c 0404 	adds.w	r4, ip, r4
 8000324:	f100 33ff 	add.w	r3, r0, #4294967295
 8000328:	f080 810a 	bcs.w	8000540 <__udivmoddi4+0x29c>
 800032c:	42a7      	cmp	r7, r4
 800032e:	f240 8107 	bls.w	8000540 <__udivmoddi4+0x29c>
 8000332:	4464      	add	r4, ip
 8000334:	3802      	subs	r0, #2
 8000336:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800033a:	1be4      	subs	r4, r4, r7
 800033c:	2600      	movs	r6, #0
 800033e:	b11d      	cbz	r5, 8000348 <__udivmoddi4+0xa4>
 8000340:	40d4      	lsrs	r4, r2
 8000342:	2300      	movs	r3, #0
 8000344:	e9c5 4300 	strd	r4, r3, [r5]
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0xc2>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80ef 	beq.w	8000536 <__udivmoddi4+0x292>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x160>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xd4>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80f9 	bhi.w	800056a <__udivmoddi4+0x2c6>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0303 	sbc.w	r3, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	469e      	mov	lr, r3
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e0      	beq.n	8000348 <__udivmoddi4+0xa4>
 8000386:	e9c5 4e00 	strd	r4, lr, [r5]
 800038a:	e7dd      	b.n	8000348 <__udivmoddi4+0xa4>
 800038c:	b902      	cbnz	r2, 8000390 <__udivmoddi4+0xec>
 800038e:	deff      	udf	#255	; 0xff
 8000390:	fab2 f282 	clz	r2, r2
 8000394:	2a00      	cmp	r2, #0
 8000396:	f040 8092 	bne.w	80004be <__udivmoddi4+0x21a>
 800039a:	eba1 010c 	sub.w	r1, r1, ip
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f fe8c 	uxth.w	lr, ip
 80003a6:	2601      	movs	r6, #1
 80003a8:	0c20      	lsrs	r0, r4, #16
 80003aa:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ae:	fb07 1113 	mls	r1, r7, r3, r1
 80003b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b6:	fb0e f003 	mul.w	r0, lr, r3
 80003ba:	4288      	cmp	r0, r1
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x12c>
 80003be:	eb1c 0101 	adds.w	r1, ip, r1
 80003c2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c6:	d202      	bcs.n	80003ce <__udivmoddi4+0x12a>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f200 80cb 	bhi.w	8000564 <__udivmoddi4+0x2c0>
 80003ce:	4643      	mov	r3, r8
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d8:	fb07 1110 	mls	r1, r7, r0, r1
 80003dc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e0:	fb0e fe00 	mul.w	lr, lr, r0
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x156>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x154>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2ca>
 80003f8:	4608      	mov	r0, r1
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000402:	e79c      	b.n	800033e <__udivmoddi4+0x9a>
 8000404:	f1c6 0720 	rsb	r7, r6, #32
 8000408:	40b3      	lsls	r3, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f407 	lsr.w	r4, r0, r7
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	431c      	orrs	r4, r3
 800041c:	40f9      	lsrs	r1, r7
 800041e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000422:	fa00 f306 	lsl.w	r3, r0, r6
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	0c20      	lsrs	r0, r4, #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fb09 1118 	mls	r1, r9, r8, r1
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	fb08 f00e 	mul.w	r0, r8, lr
 800043c:	4288      	cmp	r0, r1
 800043e:	fa02 f206 	lsl.w	r2, r2, r6
 8000442:	d90b      	bls.n	800045c <__udivmoddi4+0x1b8>
 8000444:	eb1c 0101 	adds.w	r1, ip, r1
 8000448:	f108 3aff 	add.w	sl, r8, #4294967295
 800044c:	f080 8088 	bcs.w	8000560 <__udivmoddi4+0x2bc>
 8000450:	4288      	cmp	r0, r1
 8000452:	f240 8085 	bls.w	8000560 <__udivmoddi4+0x2bc>
 8000456:	f1a8 0802 	sub.w	r8, r8, #2
 800045a:	4461      	add	r1, ip
 800045c:	1a09      	subs	r1, r1, r0
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb1 f0f9 	udiv	r0, r1, r9
 8000464:	fb09 1110 	mls	r1, r9, r0, r1
 8000468:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000470:	458e      	cmp	lr, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x1e2>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f100 34ff 	add.w	r4, r0, #4294967295
 800047c:	d26c      	bcs.n	8000558 <__udivmoddi4+0x2b4>
 800047e:	458e      	cmp	lr, r1
 8000480:	d96a      	bls.n	8000558 <__udivmoddi4+0x2b4>
 8000482:	3802      	subs	r0, #2
 8000484:	4461      	add	r1, ip
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	fba0 9402 	umull	r9, r4, r0, r2
 800048e:	eba1 010e 	sub.w	r1, r1, lr
 8000492:	42a1      	cmp	r1, r4
 8000494:	46c8      	mov	r8, r9
 8000496:	46a6      	mov	lr, r4
 8000498:	d356      	bcc.n	8000548 <__udivmoddi4+0x2a4>
 800049a:	d053      	beq.n	8000544 <__udivmoddi4+0x2a0>
 800049c:	b15d      	cbz	r5, 80004b6 <__udivmoddi4+0x212>
 800049e:	ebb3 0208 	subs.w	r2, r3, r8
 80004a2:	eb61 010e 	sbc.w	r1, r1, lr
 80004a6:	fa01 f707 	lsl.w	r7, r1, r7
 80004aa:	fa22 f306 	lsr.w	r3, r2, r6
 80004ae:	40f1      	lsrs	r1, r6
 80004b0:	431f      	orrs	r7, r3
 80004b2:	e9c5 7100 	strd	r7, r1, [r5]
 80004b6:	2600      	movs	r6, #0
 80004b8:	4631      	mov	r1, r6
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	40d8      	lsrs	r0, r3
 80004c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c8:	fa21 f303 	lsr.w	r3, r1, r3
 80004cc:	4091      	lsls	r1, r2
 80004ce:	4301      	orrs	r1, r0
 80004d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d4:	fa1f fe8c 	uxth.w	lr, ip
 80004d8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004dc:	fb07 3610 	mls	r6, r7, r0, r3
 80004e0:	0c0b      	lsrs	r3, r1, #16
 80004e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e6:	fb00 f60e 	mul.w	r6, r0, lr
 80004ea:	429e      	cmp	r6, r3
 80004ec:	fa04 f402 	lsl.w	r4, r4, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x260>
 80004f2:	eb1c 0303 	adds.w	r3, ip, r3
 80004f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fa:	d22f      	bcs.n	800055c <__udivmoddi4+0x2b8>
 80004fc:	429e      	cmp	r6, r3
 80004fe:	d92d      	bls.n	800055c <__udivmoddi4+0x2b8>
 8000500:	3802      	subs	r0, #2
 8000502:	4463      	add	r3, ip
 8000504:	1b9b      	subs	r3, r3, r6
 8000506:	b289      	uxth	r1, r1
 8000508:	fbb3 f6f7 	udiv	r6, r3, r7
 800050c:	fb07 3316 	mls	r3, r7, r6, r3
 8000510:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000514:	fb06 f30e 	mul.w	r3, r6, lr
 8000518:	428b      	cmp	r3, r1
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x28a>
 800051c:	eb1c 0101 	adds.w	r1, ip, r1
 8000520:	f106 38ff 	add.w	r8, r6, #4294967295
 8000524:	d216      	bcs.n	8000554 <__udivmoddi4+0x2b0>
 8000526:	428b      	cmp	r3, r1
 8000528:	d914      	bls.n	8000554 <__udivmoddi4+0x2b0>
 800052a:	3e02      	subs	r6, #2
 800052c:	4461      	add	r1, ip
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000534:	e738      	b.n	80003a8 <__udivmoddi4+0x104>
 8000536:	462e      	mov	r6, r5
 8000538:	4628      	mov	r0, r5
 800053a:	e705      	b.n	8000348 <__udivmoddi4+0xa4>
 800053c:	4606      	mov	r6, r0
 800053e:	e6e3      	b.n	8000308 <__udivmoddi4+0x64>
 8000540:	4618      	mov	r0, r3
 8000542:	e6f8      	b.n	8000336 <__udivmoddi4+0x92>
 8000544:	454b      	cmp	r3, r9
 8000546:	d2a9      	bcs.n	800049c <__udivmoddi4+0x1f8>
 8000548:	ebb9 0802 	subs.w	r8, r9, r2
 800054c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000550:	3801      	subs	r0, #1
 8000552:	e7a3      	b.n	800049c <__udivmoddi4+0x1f8>
 8000554:	4646      	mov	r6, r8
 8000556:	e7ea      	b.n	800052e <__udivmoddi4+0x28a>
 8000558:	4620      	mov	r0, r4
 800055a:	e794      	b.n	8000486 <__udivmoddi4+0x1e2>
 800055c:	4640      	mov	r0, r8
 800055e:	e7d1      	b.n	8000504 <__udivmoddi4+0x260>
 8000560:	46d0      	mov	r8, sl
 8000562:	e77b      	b.n	800045c <__udivmoddi4+0x1b8>
 8000564:	3b02      	subs	r3, #2
 8000566:	4461      	add	r1, ip
 8000568:	e732      	b.n	80003d0 <__udivmoddi4+0x12c>
 800056a:	4630      	mov	r0, r6
 800056c:	e709      	b.n	8000382 <__udivmoddi4+0xde>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x156>

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af02      	add	r7, sp, #8


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fbc5 	bl	8000d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f851 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f8b9 	bl	80006fc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(250000);
 800058a:	4821      	ldr	r0, [pc, #132]	; (8000610 <main+0x98>)
 800058c:	f003 fc18 	bl	8003dc0 <SEGGER_UART_init>

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 8000590:	4b20      	ldr	r3, [pc, #128]	; (8000614 <main+0x9c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a1f      	ldr	r2, [pc, #124]	; (8000614 <main+0x9c>)
 8000596:	f043 0301 	orr.w	r3, r3, #1
 800059a:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800059c:	f003 f9ca 	bl	8003934 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 80005a0:	f004 fc20 	bl	8004de4 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler, "Task-1", 200, NULL, 2, &task1_handle);
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2302      	movs	r3, #2
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2300      	movs	r3, #0
 80005b0:	22c8      	movs	r2, #200	; 0xc8
 80005b2:	4919      	ldr	r1, [pc, #100]	; (8000618 <main+0xa0>)
 80005b4:	4819      	ldr	r0, [pc, #100]	; (800061c <main+0xa4>)
 80005b6:	f001 fec4 	bl	8002342 <xTaskCreate>
 80005ba:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d00a      	beq.n	80005d8 <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005c6:	f383 8811 	msr	BASEPRI, r3
 80005ca:	f3bf 8f6f 	isb	sy
 80005ce:	f3bf 8f4f 	dsb	sy
 80005d2:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005d4:	bf00      	nop
 80005d6:	e7fe      	b.n	80005d6 <main+0x5e>

  status = xTaskCreate(task2_handler, "Task-2", 200,NULL, 3, &task2_handle);
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	9301      	str	r3, [sp, #4]
 80005dc:	2303      	movs	r3, #3
 80005de:	9300      	str	r3, [sp, #0]
 80005e0:	2300      	movs	r3, #0
 80005e2:	22c8      	movs	r2, #200	; 0xc8
 80005e4:	490e      	ldr	r1, [pc, #56]	; (8000620 <main+0xa8>)
 80005e6:	480f      	ldr	r0, [pc, #60]	; (8000624 <main+0xac>)
 80005e8:	f001 feab 	bl	8002342 <xTaskCreate>
 80005ec:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d00a      	beq.n	800060a <main+0x92>
        __asm volatile
 80005f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f8:	f383 8811 	msr	BASEPRI, r3
 80005fc:	f3bf 8f6f 	isb	sy
 8000600:	f3bf 8f4f 	dsb	sy
 8000604:	60fb      	str	r3, [r7, #12]
    }
 8000606:	bf00      	nop
 8000608:	e7fe      	b.n	8000608 <main+0x90>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800060a:	f002 f8d7 	bl	80027bc <vTaskStartScheduler>



  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060e:	e7fe      	b.n	800060e <main+0x96>
 8000610:	0003d090 	.word	0x0003d090
 8000614:	e0001000 	.word	0xe0001000
 8000618:	080059c8 	.word	0x080059c8
 800061c:	08000a59 	.word	0x08000a59
 8000620:	080059d0 	.word	0x080059d0
 8000624:	08000a7d 	.word	0x08000a7d

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2230      	movs	r2, #48	; 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f005 f9b2 	bl	80059a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a27      	ldr	r2, [pc, #156]	; (80006f4 <SystemClock_Config+0xcc>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <SystemClock_Config+0xd0>)
 8000672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	2310      	movs	r3, #16
 800068e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000690:	2302      	movs	r3, #2
 8000692:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000694:	2300      	movs	r3, #0
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000698:	2308      	movs	r3, #8
 800069a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800069c:	23a8      	movs	r3, #168	; 0xa8
 800069e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006a4:	2307      	movs	r3, #7
 80006a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 0320 	add.w	r3, r7, #32
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fe69 	bl	8001384 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b8:	f000 fa12 	bl	8000ae0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2302      	movs	r3, #2
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2105      	movs	r1, #5
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 f8ca 	bl	8001874 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006e6:	f000 f9fb 	bl	8000ae0 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	; 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08c      	sub	sp, #48	; 0x30
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
 8000716:	4ba6      	ldr	r3, [pc, #664]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4aa5      	ldr	r2, [pc, #660]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 800071c:	f043 0310 	orr.w	r3, r3, #16
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4ba3      	ldr	r3, [pc, #652]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0310 	and.w	r3, r3, #16
 800072a:	61bb      	str	r3, [r7, #24]
 800072c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
 8000732:	4b9f      	ldr	r3, [pc, #636]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a9e      	ldr	r2, [pc, #632]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b9c      	ldr	r3, [pc, #624]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	4b98      	ldr	r3, [pc, #608]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a97      	ldr	r2, [pc, #604]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b95      	ldr	r3, [pc, #596]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	4b91      	ldr	r3, [pc, #580]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a90      	ldr	r2, [pc, #576]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b8e      	ldr	r3, [pc, #568]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b8a      	ldr	r3, [pc, #552]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a89      	ldr	r2, [pc, #548]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b87      	ldr	r3, [pc, #540]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b83      	ldr	r3, [pc, #524]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a82      	ldr	r2, [pc, #520]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 80007a8:	f043 0308 	orr.w	r3, r3, #8
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b80      	ldr	r3, [pc, #512]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0308 	and.w	r3, r3, #8
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2108      	movs	r1, #8
 80007be:	487d      	ldr	r0, [pc, #500]	; (80009b4 <MX_GPIO_Init+0x2b8>)
 80007c0:	f000 fd88 	bl	80012d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007c4:	2201      	movs	r2, #1
 80007c6:	2101      	movs	r1, #1
 80007c8:	487b      	ldr	r0, [pc, #492]	; (80009b8 <MX_GPIO_Init+0x2bc>)
 80007ca:	f000 fd83 	bl	80012d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ce:	2200      	movs	r2, #0
 80007d0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007d4:	4879      	ldr	r0, [pc, #484]	; (80009bc <MX_GPIO_Init+0x2c0>)
 80007d6:	f000 fd7d 	bl	80012d4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007da:	2308      	movs	r3, #8
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4619      	mov	r1, r3
 80007f0:	4870      	ldr	r0, [pc, #448]	; (80009b4 <MX_GPIO_Init+0x2b8>)
 80007f2:	f000 fbd3 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007f6:	2301      	movs	r3, #1
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	486a      	ldr	r0, [pc, #424]	; (80009b8 <MX_GPIO_Init+0x2bc>)
 800080e:	f000 fbc5 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000812:	2308      	movs	r3, #8
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000816:	2302      	movs	r3, #2
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000822:	2305      	movs	r3, #5
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	4862      	ldr	r0, [pc, #392]	; (80009b8 <MX_GPIO_Init+0x2bc>)
 800082e:	f000 fbb5 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000832:	2301      	movs	r3, #1
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000836:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800083a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	485e      	ldr	r0, [pc, #376]	; (80009c0 <MX_GPIO_Init+0x2c4>)
 8000848:	f000 fba8 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800084c:	2310      	movs	r3, #16
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800085c:	2306      	movs	r3, #6
 800085e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	4856      	ldr	r0, [pc, #344]	; (80009c0 <MX_GPIO_Init+0x2c4>)
 8000868:	f000 fb98 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800086c:	23e0      	movs	r3, #224	; 0xe0
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800087c:	2305      	movs	r3, #5
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	484e      	ldr	r0, [pc, #312]	; (80009c0 <MX_GPIO_Init+0x2c4>)
 8000888:	f000 fb88 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800088c:	2304      	movs	r3, #4
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	4849      	ldr	r0, [pc, #292]	; (80009c4 <MX_GPIO_Init+0x2c8>)
 80008a0:	f000 fb7c 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008b6:	2305      	movs	r3, #5
 80008b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4840      	ldr	r0, [pc, #256]	; (80009c4 <MX_GPIO_Init+0x2c8>)
 80008c2:	f000 fb6b 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008c6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008ca:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	4837      	ldr	r0, [pc, #220]	; (80009bc <MX_GPIO_Init+0x2c0>)
 80008e0:	f000 fb5c 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008e4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008f6:	2306      	movs	r3, #6
 80008f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	482d      	ldr	r0, [pc, #180]	; (80009b8 <MX_GPIO_Init+0x2bc>)
 8000902:	f000 fb4b 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000906:	f44f 7300 	mov.w	r3, #512	; 0x200
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4829      	ldr	r0, [pc, #164]	; (80009c0 <MX_GPIO_Init+0x2c4>)
 800091c:	f000 fb3e 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000920:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000932:	230a      	movs	r3, #10
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4820      	ldr	r0, [pc, #128]	; (80009c0 <MX_GPIO_Init+0x2c4>)
 800093e:	f000 fb2d 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000942:	2320      	movs	r3, #32
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4819      	ldr	r0, [pc, #100]	; (80009bc <MX_GPIO_Init+0x2c0>)
 8000956:	f000 fb21 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800095a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000960:	2312      	movs	r3, #18
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000964:	2301      	movs	r3, #1
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800096c:	2304      	movs	r3, #4
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	4813      	ldr	r0, [pc, #76]	; (80009c4 <MX_GPIO_Init+0x2c8>)
 8000978:	f000 fb10 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800097c:	2302      	movs	r3, #2
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000980:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <MX_GPIO_Init+0x2b8>)
 8000992:	f000 fb03 	bl	8000f9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2106      	movs	r1, #6
 800099a:	2006      	movs	r0, #6
 800099c:	f000 fad4 	bl	8000f48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009a0:	2006      	movs	r0, #6
 80009a2:	f000 faed 	bl	8000f80 <HAL_NVIC_EnableIRQ>

}
 80009a6:	bf00      	nop
 80009a8:	3730      	adds	r7, #48	; 0x30
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40021000 	.word	0x40021000
 80009b8:	40020800 	.word	0x40020800
 80009bc:	40020c00 	.word	0x40020c00
 80009c0:	40020000 	.word	0x40020000
 80009c4:	40020400 	.word	0x40020400

080009c8 <switch_priority>:

/* USER CODE BEGIN 4 */

void switch_priority(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
	UBaseType_t p1,p2;
	xTaskHandle t1,t2,curr;

	BaseType_t switch_priority = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]

	portENTER_CRITICAL();
 80009d2:	f002 fc77 	bl	80032c4 <vPortEnterCritical>
	if(status_button){
 80009d6:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <switch_priority+0x84>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d004      	beq.n	80009e8 <switch_priority+0x20>
		status_button = 0;
 80009de:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <switch_priority+0x84>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
		switch_priority = 1;
 80009e4:	2301      	movs	r3, #1
 80009e6:	617b      	str	r3, [r7, #20]
	}
	portEXIT_CRITICAL();
 80009e8:	f002 fc9c 	bl	8003324 <vPortExitCritical>

	if(switch_priority){
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d027      	beq.n	8000a42 <switch_priority+0x7a>
		t1 = xTaskGetHandle("Task-1");
 80009f2:	4817      	ldr	r0, [pc, #92]	; (8000a50 <switch_priority+0x88>)
 80009f4:	f002 f86c 	bl	8002ad0 <xTaskGetHandle>
 80009f8:	6138      	str	r0, [r7, #16]
		t2 = xTaskGetHandle("Task-2");
 80009fa:	4816      	ldr	r0, [pc, #88]	; (8000a54 <switch_priority+0x8c>)
 80009fc:	f002 f868 	bl	8002ad0 <xTaskGetHandle>
 8000a00:	60f8      	str	r0, [r7, #12]

		p1 = uxTaskPriorityGet(t1);
 8000a02:	6938      	ldr	r0, [r7, #16]
 8000a04:	f001 fe00 	bl	8002608 <uxTaskPriorityGet>
 8000a08:	60b8      	str	r0, [r7, #8]
		p2 = uxTaskPriorityGet(t2);
 8000a0a:	68f8      	ldr	r0, [r7, #12]
 8000a0c:	f001 fdfc 	bl	8002608 <uxTaskPriorityGet>
 8000a10:	6078      	str	r0, [r7, #4]

		curr = xTaskGetCurrentTaskHandle();
 8000a12:	f002 fa9b 	bl	8002f4c <xTaskGetCurrentTaskHandle>
 8000a16:	6038      	str	r0, [r7, #0]

		if(curr == t1){
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d108      	bne.n	8000a32 <switch_priority+0x6a>
			vTaskPrioritySet(t1,p2);
 8000a20:	6879      	ldr	r1, [r7, #4]
 8000a22:	6938      	ldr	r0, [r7, #16]
 8000a24:	f001 fe0a 	bl	800263c <vTaskPrioritySet>
			vTaskPrioritySet(t2,p1);
 8000a28:	68b9      	ldr	r1, [r7, #8]
 8000a2a:	68f8      	ldr	r0, [r7, #12]
 8000a2c:	f001 fe06 	bl	800263c <vTaskPrioritySet>
			vTaskPrioritySet(t2,p1);
			vTaskPrioritySet(t1,p2);
		}
	}

}
 8000a30:	e007      	b.n	8000a42 <switch_priority+0x7a>
			vTaskPrioritySet(t2,p1);
 8000a32:	68b9      	ldr	r1, [r7, #8]
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	f001 fe01 	bl	800263c <vTaskPrioritySet>
			vTaskPrioritySet(t1,p2);
 8000a3a:	6879      	ldr	r1, [r7, #4]
 8000a3c:	6938      	ldr	r0, [r7, #16]
 8000a3e:	f001 fdfd 	bl	800263c <vTaskPrioritySet>
}
 8000a42:	bf00      	nop
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000038 	.word	0x20000038
 8000a50:	080059c8 	.word	0x080059c8
 8000a54:	080059d0 	.word	0x080059d0

08000a58 <task1_handler>:

static void task1_handler(void* parameters)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <task1_handler+0x20>)
 8000a66:	f000 fc4e 	bl	8001306 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000a6a:	2064      	movs	r0, #100	; 0x64
 8000a6c:	f000 f990 	bl	8000d90 <HAL_Delay>
		switch_priority();
 8000a70:	f7ff ffaa 	bl	80009c8 <switch_priority>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a74:	e7f4      	b.n	8000a60 <task1_handler+0x8>
 8000a76:	bf00      	nop
 8000a78:	40020c00 	.word	0x40020c00

08000a7c <task2_handler>:

}


static void task2_handler(void* parameters)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a88:	4804      	ldr	r0, [pc, #16]	; (8000a9c <task2_handler+0x20>)
 8000a8a:	f000 fc3c 	bl	8001306 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000a8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a92:	f000 f97d 	bl	8000d90 <HAL_Delay>
		switch_priority();
 8000a96:	f7ff ff97 	bl	80009c8 <switch_priority>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a9a:	e7f3      	b.n	8000a84 <task2_handler+0x8>
 8000a9c:	40020c00 	.word	0x40020c00

08000aa0 <button_interrupt_handler>:

}


void button_interrupt_handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	traceISR_ENTER();
 8000aa4:	f004 fc68 	bl	8005378 <SEGGER_SYSVIEW_RecordEnterISR>
	status_button = 1;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <button_interrupt_handler+0x18>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	601a      	str	r2, [r3, #0]
	traceISR_EXIT();
 8000aae:	f004 fca5 	bl	80053fc <SEGGER_SYSVIEW_RecordExitISR>
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000038 	.word	0x20000038

08000abc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a04      	ldr	r2, [pc, #16]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d101      	bne.n	8000ad2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ace:	f000 f93f 	bl	8000d50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40001000 	.word	0x40001000

08000ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
	...

08000af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <HAL_MspInit+0x4c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	4a0f      	ldr	r2, [pc, #60]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b04:	6453      	str	r3, [r2, #68]	; 0x44
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b20:	6413      	str	r3, [r2, #64]	; 0x40
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b2e:	f002 fb4b 	bl	80031c8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800

08000b40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08e      	sub	sp, #56	; 0x38
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	4b33      	ldr	r3, [pc, #204]	; (8000c24 <HAL_InitTick+0xe4>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	4a32      	ldr	r2, [pc, #200]	; (8000c24 <HAL_InitTick+0xe4>)
 8000b5a:	f043 0310 	orr.w	r3, r3, #16
 8000b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b60:	4b30      	ldr	r3, [pc, #192]	; (8000c24 <HAL_InitTick+0xe4>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	f003 0310 	and.w	r3, r3, #16
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b6c:	f107 0210 	add.w	r2, r7, #16
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4611      	mov	r1, r2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f001 f888 	bl	8001c8c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b7c:	6a3b      	ldr	r3, [r7, #32]
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d103      	bne.n	8000b8e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b86:	f001 f86d 	bl	8001c64 <HAL_RCC_GetPCLK1Freq>
 8000b8a:	6378      	str	r0, [r7, #52]	; 0x34
 8000b8c:	e004      	b.n	8000b98 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b8e:	f001 f869 	bl	8001c64 <HAL_RCC_GetPCLK1Freq>
 8000b92:	4603      	mov	r3, r0
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b9a:	4a23      	ldr	r2, [pc, #140]	; (8000c28 <HAL_InitTick+0xe8>)
 8000b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba0:	0c9b      	lsrs	r3, r3, #18
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ba6:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <HAL_InitTick+0xec>)
 8000ba8:	4a21      	ldr	r2, [pc, #132]	; (8000c30 <HAL_InitTick+0xf0>)
 8000baa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bac:	4b1f      	ldr	r3, [pc, #124]	; (8000c2c <HAL_InitTick+0xec>)
 8000bae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bb2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bb4:	4a1d      	ldr	r2, [pc, #116]	; (8000c2c <HAL_InitTick+0xec>)
 8000bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bb8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bba:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <HAL_InitTick+0xec>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc0:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <HAL_InitTick+0xec>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc6:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <HAL_InitTick+0xec>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bcc:	4817      	ldr	r0, [pc, #92]	; (8000c2c <HAL_InitTick+0xec>)
 8000bce:	f001 f88f 	bl	8001cf0 <HAL_TIM_Base_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000bd8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d11b      	bne.n	8000c18 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000be0:	4812      	ldr	r0, [pc, #72]	; (8000c2c <HAL_InitTick+0xec>)
 8000be2:	f001 f8df 	bl	8001da4 <HAL_TIM_Base_Start_IT>
 8000be6:	4603      	mov	r3, r0
 8000be8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000bec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d111      	bne.n	8000c18 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bf4:	2036      	movs	r0, #54	; 0x36
 8000bf6:	f000 f9c3 	bl	8000f80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d808      	bhi.n	8000c12 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c00:	2200      	movs	r2, #0
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	2036      	movs	r0, #54	; 0x36
 8000c06:	f000 f99f 	bl	8000f48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <HAL_InitTick+0xf4>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6013      	str	r3, [r2, #0]
 8000c10:	e002      	b.n	8000c18 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3738      	adds	r7, #56	; 0x38
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40023800 	.word	0x40023800
 8000c28:	431bde83 	.word	0x431bde83
 8000c2c:	2000003c 	.word	0x2000003c
 8000c30:	40001000 	.word	0x40001000
 8000c34:	20000004 	.word	0x20000004

08000c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <HardFault_Handler+0x4>

08000c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <MemManage_Handler+0x4>

08000c52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <BusFault_Handler+0x4>

08000c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <UsageFault_Handler+0x4>

08000c5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	button_interrupt_handler();
 8000c70:	f7ff ff16 	bl	8000aa0 <button_interrupt_handler>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c74:	2001      	movs	r0, #1
 8000c76:	f000 fb61 	bl	800133c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c84:	4802      	ldr	r0, [pc, #8]	; (8000c90 <TIM6_DAC_IRQHandler+0x10>)
 8000c86:	f001 f8fd 	bl	8001e84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	2000003c 	.word	0x2000003c

08000c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <SystemInit+0x20>)
 8000c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9e:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <SystemInit+0x20>)
 8000ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cbc:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cbe:	490e      	ldr	r1, [pc, #56]	; (8000cf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cc0:	4a0e      	ldr	r2, [pc, #56]	; (8000cfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc4:	e002      	b.n	8000ccc <LoopCopyDataInit>

08000cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cca:	3304      	adds	r3, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd0:	d3f9      	bcc.n	8000cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cd4:	4c0b      	ldr	r4, [pc, #44]	; (8000d04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd8:	e001      	b.n	8000cde <LoopFillZerobss>

08000cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cdc:	3204      	adds	r2, #4

08000cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce0:	d3fb      	bcc.n	8000cda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ce2:	f7ff ffd7 	bl	8000c94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ce6:	f004 fe19 	bl	800591c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cea:	f7ff fc45 	bl	8000578 <main>
  bx  lr    
 8000cee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000cfc:	08005af4 	.word	0x08005af4
  ldr r2, =_sbss
 8000d00:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000d04:	20014434 	.word	0x20014434

08000d08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d08:	e7fe      	b.n	8000d08 <ADC_IRQHandler>
	...

08000d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d10:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <HAL_Init+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <HAL_Init+0x40>)
 8000d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <HAL_Init+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <HAL_Init+0x40>)
 8000d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a07      	ldr	r2, [pc, #28]	; (8000d4c <HAL_Init+0x40>)
 8000d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d34:	2003      	movs	r0, #3
 8000d36:	f000 f8fc 	bl	8000f32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f7ff ff00 	bl	8000b40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d40:	f7ff fed6 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40023c00 	.word	0x40023c00

08000d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_IncTick+0x20>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_IncTick+0x24>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4413      	add	r3, r2
 8000d60:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <HAL_IncTick+0x24>)
 8000d62:	6013      	str	r3, [r2, #0]
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	20000008 	.word	0x20000008
 8000d74:	20000084 	.word	0x20000084

08000d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d7c:	4b03      	ldr	r3, [pc, #12]	; (8000d8c <HAL_GetTick+0x14>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	20000084 	.word	0x20000084

08000d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d98:	f7ff ffee 	bl	8000d78 <HAL_GetTick>
 8000d9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da8:	d005      	beq.n	8000db6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000daa:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <HAL_Delay+0x44>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	461a      	mov	r2, r3
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	4413      	add	r3, r2
 8000db4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000db6:	bf00      	nop
 8000db8:	f7ff ffde 	bl	8000d78 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d8f7      	bhi.n	8000db8 <HAL_Delay+0x28>
  {
  }
}
 8000dc8:	bf00      	nop
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000008 	.word	0x20000008

08000dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df4:	4013      	ands	r3, r2
 8000df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0a:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	60d3      	str	r3, [r2, #12]
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <__NVIC_GetPriorityGrouping+0x18>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	0a1b      	lsrs	r3, r3, #8
 8000e2a:	f003 0307 	and.w	r3, r3, #7
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	db0b      	blt.n	8000e66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	f003 021f 	and.w	r2, r3, #31
 8000e54:	4907      	ldr	r1, [pc, #28]	; (8000e74 <__NVIC_EnableIRQ+0x38>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	095b      	lsrs	r3, r3, #5
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000e100 	.word	0xe000e100

08000e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	6039      	str	r1, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	db0a      	blt.n	8000ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	490c      	ldr	r1, [pc, #48]	; (8000ec4 <__NVIC_SetPriority+0x4c>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	0112      	lsls	r2, r2, #4
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea0:	e00a      	b.n	8000eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4908      	ldr	r1, [pc, #32]	; (8000ec8 <__NVIC_SetPriority+0x50>)
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	f003 030f 	and.w	r3, r3, #15
 8000eae:	3b04      	subs	r3, #4
 8000eb0:	0112      	lsls	r2, r2, #4
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	440b      	add	r3, r1
 8000eb6:	761a      	strb	r2, [r3, #24]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000e100 	.word	0xe000e100
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	; 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f1c3 0307 	rsb	r3, r3, #7
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	bf28      	it	cs
 8000eea:	2304      	movcs	r3, #4
 8000eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	2b06      	cmp	r3, #6
 8000ef4:	d902      	bls.n	8000efc <NVIC_EncodePriority+0x30>
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3b03      	subs	r3, #3
 8000efa:	e000      	b.n	8000efe <NVIC_EncodePriority+0x32>
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	401a      	ands	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f14:	f04f 31ff 	mov.w	r1, #4294967295
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	43d9      	mvns	r1, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	4313      	orrs	r3, r2
         );
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3724      	adds	r7, #36	; 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ff4c 	bl	8000dd8 <__NVIC_SetPriorityGrouping>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
 8000f54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f5a:	f7ff ff61 	bl	8000e20 <__NVIC_GetPriorityGrouping>
 8000f5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	68b9      	ldr	r1, [r7, #8]
 8000f64:	6978      	ldr	r0, [r7, #20]
 8000f66:	f7ff ffb1 	bl	8000ecc <NVIC_EncodePriority>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f70:	4611      	mov	r1, r2
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff80 	bl	8000e78 <__NVIC_SetPriority>
}
 8000f78:	bf00      	nop
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ff54 	bl	8000e3c <__NVIC_EnableIRQ>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	; 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
 8000fb6:	e16b      	b.n	8001290 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fb8:	2201      	movs	r2, #1
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	697a      	ldr	r2, [r7, #20]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	f040 815a 	bne.w	800128a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d005      	beq.n	8000fee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d130      	bne.n	8001050 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	68da      	ldr	r2, [r3, #12]
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001024:	2201      	movs	r2, #1
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	091b      	lsrs	r3, r3, #4
 800103a:	f003 0201 	and.w	r2, r3, #1
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	2b03      	cmp	r3, #3
 800105a:	d017      	beq.n	800108c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2203      	movs	r2, #3
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d123      	bne.n	80010e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	08da      	lsrs	r2, r3, #3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3208      	adds	r2, #8
 80010a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	220f      	movs	r2, #15
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	691a      	ldr	r2, [r3, #16]
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	08da      	lsrs	r2, r3, #3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3208      	adds	r2, #8
 80010da:	69b9      	ldr	r1, [r7, #24]
 80010dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	2203      	movs	r2, #3
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0203 	and.w	r2, r3, #3
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800111c:	2b00      	cmp	r3, #0
 800111e:	f000 80b4 	beq.w	800128a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4b60      	ldr	r3, [pc, #384]	; (80012a8 <HAL_GPIO_Init+0x30c>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	4a5f      	ldr	r2, [pc, #380]	; (80012a8 <HAL_GPIO_Init+0x30c>)
 800112c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001130:	6453      	str	r3, [r2, #68]	; 0x44
 8001132:	4b5d      	ldr	r3, [pc, #372]	; (80012a8 <HAL_GPIO_Init+0x30c>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800113e:	4a5b      	ldr	r2, [pc, #364]	; (80012ac <HAL_GPIO_Init+0x310>)
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	089b      	lsrs	r3, r3, #2
 8001144:	3302      	adds	r3, #2
 8001146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	220f      	movs	r2, #15
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a52      	ldr	r2, [pc, #328]	; (80012b0 <HAL_GPIO_Init+0x314>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d02b      	beq.n	80011c2 <HAL_GPIO_Init+0x226>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a51      	ldr	r2, [pc, #324]	; (80012b4 <HAL_GPIO_Init+0x318>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d025      	beq.n	80011be <HAL_GPIO_Init+0x222>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a50      	ldr	r2, [pc, #320]	; (80012b8 <HAL_GPIO_Init+0x31c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d01f      	beq.n	80011ba <HAL_GPIO_Init+0x21e>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a4f      	ldr	r2, [pc, #316]	; (80012bc <HAL_GPIO_Init+0x320>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d019      	beq.n	80011b6 <HAL_GPIO_Init+0x21a>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a4e      	ldr	r2, [pc, #312]	; (80012c0 <HAL_GPIO_Init+0x324>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d013      	beq.n	80011b2 <HAL_GPIO_Init+0x216>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4d      	ldr	r2, [pc, #308]	; (80012c4 <HAL_GPIO_Init+0x328>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d00d      	beq.n	80011ae <HAL_GPIO_Init+0x212>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4c      	ldr	r2, [pc, #304]	; (80012c8 <HAL_GPIO_Init+0x32c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d007      	beq.n	80011aa <HAL_GPIO_Init+0x20e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4b      	ldr	r2, [pc, #300]	; (80012cc <HAL_GPIO_Init+0x330>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d101      	bne.n	80011a6 <HAL_GPIO_Init+0x20a>
 80011a2:	2307      	movs	r3, #7
 80011a4:	e00e      	b.n	80011c4 <HAL_GPIO_Init+0x228>
 80011a6:	2308      	movs	r3, #8
 80011a8:	e00c      	b.n	80011c4 <HAL_GPIO_Init+0x228>
 80011aa:	2306      	movs	r3, #6
 80011ac:	e00a      	b.n	80011c4 <HAL_GPIO_Init+0x228>
 80011ae:	2305      	movs	r3, #5
 80011b0:	e008      	b.n	80011c4 <HAL_GPIO_Init+0x228>
 80011b2:	2304      	movs	r3, #4
 80011b4:	e006      	b.n	80011c4 <HAL_GPIO_Init+0x228>
 80011b6:	2303      	movs	r3, #3
 80011b8:	e004      	b.n	80011c4 <HAL_GPIO_Init+0x228>
 80011ba:	2302      	movs	r3, #2
 80011bc:	e002      	b.n	80011c4 <HAL_GPIO_Init+0x228>
 80011be:	2301      	movs	r3, #1
 80011c0:	e000      	b.n	80011c4 <HAL_GPIO_Init+0x228>
 80011c2:	2300      	movs	r3, #0
 80011c4:	69fa      	ldr	r2, [r7, #28]
 80011c6:	f002 0203 	and.w	r2, r2, #3
 80011ca:	0092      	lsls	r2, r2, #2
 80011cc:	4093      	lsls	r3, r2
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d4:	4935      	ldr	r1, [pc, #212]	; (80012ac <HAL_GPIO_Init+0x310>)
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	089b      	lsrs	r3, r3, #2
 80011da:	3302      	adds	r3, #2
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011e2:	4b3b      	ldr	r3, [pc, #236]	; (80012d0 <HAL_GPIO_Init+0x334>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4013      	ands	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001206:	4a32      	ldr	r2, [pc, #200]	; (80012d0 <HAL_GPIO_Init+0x334>)
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800120c:	4b30      	ldr	r3, [pc, #192]	; (80012d0 <HAL_GPIO_Init+0x334>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001230:	4a27      	ldr	r2, [pc, #156]	; (80012d0 <HAL_GPIO_Init+0x334>)
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001236:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <HAL_GPIO_Init+0x334>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800125a:	4a1d      	ldr	r2, [pc, #116]	; (80012d0 <HAL_GPIO_Init+0x334>)
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <HAL_GPIO_Init+0x334>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001284:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <HAL_GPIO_Init+0x334>)
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3301      	adds	r3, #1
 800128e:	61fb      	str	r3, [r7, #28]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	2b0f      	cmp	r3, #15
 8001294:	f67f ae90 	bls.w	8000fb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	3724      	adds	r7, #36	; 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40013800 	.word	0x40013800
 80012b0:	40020000 	.word	0x40020000
 80012b4:	40020400 	.word	0x40020400
 80012b8:	40020800 	.word	0x40020800
 80012bc:	40020c00 	.word	0x40020c00
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40021400 	.word	0x40021400
 80012c8:	40021800 	.word	0x40021800
 80012cc:	40021c00 	.word	0x40021c00
 80012d0:	40013c00 	.word	0x40013c00

080012d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	807b      	strh	r3, [r7, #2]
 80012e0:	4613      	mov	r3, r2
 80012e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012e4:	787b      	ldrb	r3, [r7, #1]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ea:	887a      	ldrh	r2, [r7, #2]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012f0:	e003      	b.n	80012fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012f2:	887b      	ldrh	r3, [r7, #2]
 80012f4:	041a      	lsls	r2, r3, #16
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	619a      	str	r2, [r3, #24]
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001306:	b480      	push	{r7}
 8001308:	b085      	sub	sp, #20
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	460b      	mov	r3, r1
 8001310:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001318:	887a      	ldrh	r2, [r7, #2]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4013      	ands	r3, r2
 800131e:	041a      	lsls	r2, r3, #16
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	43d9      	mvns	r1, r3
 8001324:	887b      	ldrh	r3, [r7, #2]
 8001326:	400b      	ands	r3, r1
 8001328:	431a      	orrs	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	619a      	str	r2, [r3, #24]
}
 800132e:	bf00      	nop
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001348:	695a      	ldr	r2, [r3, #20]
 800134a:	88fb      	ldrh	r3, [r7, #6]
 800134c:	4013      	ands	r3, r2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d006      	beq.n	8001360 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001352:	4a05      	ldr	r2, [pc, #20]	; (8001368 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001354:	88fb      	ldrh	r3, [r7, #6]
 8001356:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001358:	88fb      	ldrh	r3, [r7, #6]
 800135a:	4618      	mov	r0, r3
 800135c:	f000 f806 	bl	800136c <HAL_GPIO_EXTI_Callback>
  }
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40013c00 	.word	0x40013c00

0800136c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d101      	bne.n	8001396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e267      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d075      	beq.n	800148e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013a2:	4b88      	ldr	r3, [pc, #544]	; (80015c4 <HAL_RCC_OscConfig+0x240>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 030c 	and.w	r3, r3, #12
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	d00c      	beq.n	80013c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ae:	4b85      	ldr	r3, [pc, #532]	; (80015c4 <HAL_RCC_OscConfig+0x240>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013b6:	2b08      	cmp	r3, #8
 80013b8:	d112      	bne.n	80013e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ba:	4b82      	ldr	r3, [pc, #520]	; (80015c4 <HAL_RCC_OscConfig+0x240>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013c6:	d10b      	bne.n	80013e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c8:	4b7e      	ldr	r3, [pc, #504]	; (80015c4 <HAL_RCC_OscConfig+0x240>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d05b      	beq.n	800148c <HAL_RCC_OscConfig+0x108>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d157      	bne.n	800148c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e242      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e8:	d106      	bne.n	80013f8 <HAL_RCC_OscConfig+0x74>
 80013ea:	4b76      	ldr	r3, [pc, #472]	; (80015c4 <HAL_RCC_OscConfig+0x240>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a75      	ldr	r2, [pc, #468]	; (80015c4 <HAL_RCC_OscConfig+0x240>)
 80013f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	e01d      	b.n	8001434 <HAL_RCC_OscConfig+0xb0>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001400:	d10c      	bne.n	800141c <HAL_RCC_OscConfig+0x98>
 8001402:	4b70      	ldr	r3, [pc, #448]	; (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a6f      	ldr	r2, [pc, #444]	; (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	4b6d      	ldr	r3, [pc, #436]	; (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a6c      	ldr	r2, [pc, #432]	; (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	e00b      	b.n	8001434 <HAL_RCC_OscConfig+0xb0>
 800141c:	4b69      	ldr	r3, [pc, #420]	; (80015c4 <HAL_RCC_OscConfig+0x240>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a68      	ldr	r2, [pc, #416]	; (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	4b66      	ldr	r3, [pc, #408]	; (80015c4 <HAL_RCC_OscConfig+0x240>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a65      	ldr	r2, [pc, #404]	; (80015c4 <HAL_RCC_OscConfig+0x240>)
 800142e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001432:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d013      	beq.n	8001464 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143c:	f7ff fc9c 	bl	8000d78 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001444:	f7ff fc98 	bl	8000d78 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b64      	cmp	r3, #100	; 0x64
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e207      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001456:	4b5b      	ldr	r3, [pc, #364]	; (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0xc0>
 8001462:	e014      	b.n	800148e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001464:	f7ff fc88 	bl	8000d78 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800146c:	f7ff fc84 	bl	8000d78 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b64      	cmp	r3, #100	; 0x64
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e1f3      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147e:	4b51      	ldr	r3, [pc, #324]	; (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f0      	bne.n	800146c <HAL_RCC_OscConfig+0xe8>
 800148a:	e000      	b.n	800148e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800148c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d063      	beq.n	8001562 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800149a:	4b4a      	ldr	r3, [pc, #296]	; (80015c4 <HAL_RCC_OscConfig+0x240>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00b      	beq.n	80014be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014a6:	4b47      	ldr	r3, [pc, #284]	; (80015c4 <HAL_RCC_OscConfig+0x240>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d11c      	bne.n	80014ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014b2:	4b44      	ldr	r3, [pc, #272]	; (80015c4 <HAL_RCC_OscConfig+0x240>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d116      	bne.n	80014ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014be:	4b41      	ldr	r3, [pc, #260]	; (80015c4 <HAL_RCC_OscConfig+0x240>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d005      	beq.n	80014d6 <HAL_RCC_OscConfig+0x152>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d001      	beq.n	80014d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e1c7      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d6:	4b3b      	ldr	r3, [pc, #236]	; (80015c4 <HAL_RCC_OscConfig+0x240>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	4937      	ldr	r1, [pc, #220]	; (80015c4 <HAL_RCC_OscConfig+0x240>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ea:	e03a      	b.n	8001562 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d020      	beq.n	8001536 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f4:	4b34      	ldr	r3, [pc, #208]	; (80015c8 <HAL_RCC_OscConfig+0x244>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fa:	f7ff fc3d 	bl	8000d78 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001502:	f7ff fc39 	bl	8000d78 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e1a8      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001514:	4b2b      	ldr	r3, [pc, #172]	; (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001520:	4b28      	ldr	r3, [pc, #160]	; (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	4925      	ldr	r1, [pc, #148]	; (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001530:	4313      	orrs	r3, r2
 8001532:	600b      	str	r3, [r1, #0]
 8001534:	e015      	b.n	8001562 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001536:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <HAL_RCC_OscConfig+0x244>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153c:	f7ff fc1c 	bl	8000d78 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001544:	f7ff fc18 	bl	8000d78 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e187      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001556:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	2b00      	cmp	r3, #0
 800156c:	d036      	beq.n	80015dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d016      	beq.n	80015a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001576:	4b15      	ldr	r3, [pc, #84]	; (80015cc <HAL_RCC_OscConfig+0x248>)
 8001578:	2201      	movs	r2, #1
 800157a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157c:	f7ff fbfc 	bl	8000d78 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001584:	f7ff fbf8 	bl	8000d78 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e167      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <HAL_RCC_OscConfig+0x240>)
 8001598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0f0      	beq.n	8001584 <HAL_RCC_OscConfig+0x200>
 80015a2:	e01b      	b.n	80015dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015a4:	4b09      	ldr	r3, [pc, #36]	; (80015cc <HAL_RCC_OscConfig+0x248>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015aa:	f7ff fbe5 	bl	8000d78 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b0:	e00e      	b.n	80015d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015b2:	f7ff fbe1 	bl	8000d78 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d907      	bls.n	80015d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e150      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
 80015c4:	40023800 	.word	0x40023800
 80015c8:	42470000 	.word	0x42470000
 80015cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d0:	4b88      	ldr	r3, [pc, #544]	; (80017f4 <HAL_RCC_OscConfig+0x470>)
 80015d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1ea      	bne.n	80015b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 8097 	beq.w	8001718 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ea:	2300      	movs	r3, #0
 80015ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ee:	4b81      	ldr	r3, [pc, #516]	; (80017f4 <HAL_RCC_OscConfig+0x470>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10f      	bne.n	800161a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	4b7d      	ldr	r3, [pc, #500]	; (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	4a7c      	ldr	r2, [pc, #496]	; (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001608:	6413      	str	r3, [r2, #64]	; 0x40
 800160a:	4b7a      	ldr	r3, [pc, #488]	; (80017f4 <HAL_RCC_OscConfig+0x470>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001616:	2301      	movs	r3, #1
 8001618:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161a:	4b77      	ldr	r3, [pc, #476]	; (80017f8 <HAL_RCC_OscConfig+0x474>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001622:	2b00      	cmp	r3, #0
 8001624:	d118      	bne.n	8001658 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001626:	4b74      	ldr	r3, [pc, #464]	; (80017f8 <HAL_RCC_OscConfig+0x474>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a73      	ldr	r2, [pc, #460]	; (80017f8 <HAL_RCC_OscConfig+0x474>)
 800162c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001632:	f7ff fba1 	bl	8000d78 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800163a:	f7ff fb9d 	bl	8000d78 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e10c      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164c:	4b6a      	ldr	r3, [pc, #424]	; (80017f8 <HAL_RCC_OscConfig+0x474>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0f0      	beq.n	800163a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d106      	bne.n	800166e <HAL_RCC_OscConfig+0x2ea>
 8001660:	4b64      	ldr	r3, [pc, #400]	; (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001664:	4a63      	ldr	r2, [pc, #396]	; (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	6713      	str	r3, [r2, #112]	; 0x70
 800166c:	e01c      	b.n	80016a8 <HAL_RCC_OscConfig+0x324>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2b05      	cmp	r3, #5
 8001674:	d10c      	bne.n	8001690 <HAL_RCC_OscConfig+0x30c>
 8001676:	4b5f      	ldr	r3, [pc, #380]	; (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167a:	4a5e      	ldr	r2, [pc, #376]	; (80017f4 <HAL_RCC_OscConfig+0x470>)
 800167c:	f043 0304 	orr.w	r3, r3, #4
 8001680:	6713      	str	r3, [r2, #112]	; 0x70
 8001682:	4b5c      	ldr	r3, [pc, #368]	; (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001686:	4a5b      	ldr	r2, [pc, #364]	; (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6713      	str	r3, [r2, #112]	; 0x70
 800168e:	e00b      	b.n	80016a8 <HAL_RCC_OscConfig+0x324>
 8001690:	4b58      	ldr	r3, [pc, #352]	; (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001694:	4a57      	ldr	r2, [pc, #348]	; (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001696:	f023 0301 	bic.w	r3, r3, #1
 800169a:	6713      	str	r3, [r2, #112]	; 0x70
 800169c:	4b55      	ldr	r3, [pc, #340]	; (80017f4 <HAL_RCC_OscConfig+0x470>)
 800169e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a0:	4a54      	ldr	r2, [pc, #336]	; (80017f4 <HAL_RCC_OscConfig+0x470>)
 80016a2:	f023 0304 	bic.w	r3, r3, #4
 80016a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d015      	beq.n	80016dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b0:	f7ff fb62 	bl	8000d78 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b6:	e00a      	b.n	80016ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b8:	f7ff fb5e 	bl	8000d78 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e0cb      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ce:	4b49      	ldr	r3, [pc, #292]	; (80017f4 <HAL_RCC_OscConfig+0x470>)
 80016d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0ee      	beq.n	80016b8 <HAL_RCC_OscConfig+0x334>
 80016da:	e014      	b.n	8001706 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016dc:	f7ff fb4c 	bl	8000d78 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e2:	e00a      	b.n	80016fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e4:	f7ff fb48 	bl	8000d78 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e0b5      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016fa:	4b3e      	ldr	r3, [pc, #248]	; (80017f4 <HAL_RCC_OscConfig+0x470>)
 80016fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1ee      	bne.n	80016e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001706:	7dfb      	ldrb	r3, [r7, #23]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d105      	bne.n	8001718 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800170c:	4b39      	ldr	r3, [pc, #228]	; (80017f4 <HAL_RCC_OscConfig+0x470>)
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	4a38      	ldr	r2, [pc, #224]	; (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001712:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001716:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 80a1 	beq.w	8001864 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001722:	4b34      	ldr	r3, [pc, #208]	; (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	2b08      	cmp	r3, #8
 800172c:	d05c      	beq.n	80017e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d141      	bne.n	80017ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001736:	4b31      	ldr	r3, [pc, #196]	; (80017fc <HAL_RCC_OscConfig+0x478>)
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173c:	f7ff fb1c 	bl	8000d78 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001744:	f7ff fb18 	bl	8000d78 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e087      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001756:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f0      	bne.n	8001744 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69da      	ldr	r2, [r3, #28]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	431a      	orrs	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001770:	019b      	lsls	r3, r3, #6
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001778:	085b      	lsrs	r3, r3, #1
 800177a:	3b01      	subs	r3, #1
 800177c:	041b      	lsls	r3, r3, #16
 800177e:	431a      	orrs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001784:	061b      	lsls	r3, r3, #24
 8001786:	491b      	ldr	r1, [pc, #108]	; (80017f4 <HAL_RCC_OscConfig+0x470>)
 8001788:	4313      	orrs	r3, r2
 800178a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800178c:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <HAL_RCC_OscConfig+0x478>)
 800178e:	2201      	movs	r2, #1
 8001790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001792:	f7ff faf1 	bl	8000d78 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800179a:	f7ff faed 	bl	8000d78 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e05c      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <HAL_RCC_OscConfig+0x470>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0f0      	beq.n	800179a <HAL_RCC_OscConfig+0x416>
 80017b8:	e054      	b.n	8001864 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ba:	4b10      	ldr	r3, [pc, #64]	; (80017fc <HAL_RCC_OscConfig+0x478>)
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7ff fada 	bl	8000d78 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c8:	f7ff fad6 	bl	8000d78 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e045      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_RCC_OscConfig+0x470>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f0      	bne.n	80017c8 <HAL_RCC_OscConfig+0x444>
 80017e6:	e03d      	b.n	8001864 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d107      	bne.n	8001800 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e038      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40007000 	.word	0x40007000
 80017fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001800:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <HAL_RCC_OscConfig+0x4ec>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d028      	beq.n	8001860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001818:	429a      	cmp	r2, r3
 800181a:	d121      	bne.n	8001860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001826:	429a      	cmp	r2, r3
 8001828:	d11a      	bne.n	8001860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001830:	4013      	ands	r3, r2
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001836:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001838:	4293      	cmp	r3, r2
 800183a:	d111      	bne.n	8001860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001846:	085b      	lsrs	r3, r3, #1
 8001848:	3b01      	subs	r3, #1
 800184a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800184c:	429a      	cmp	r2, r3
 800184e:	d107      	bne.n	8001860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800185c:	429a      	cmp	r2, r3
 800185e:	d001      	beq.n	8001864 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e000      	b.n	8001866 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40023800 	.word	0x40023800

08001874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e0cc      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001888:	4b68      	ldr	r3, [pc, #416]	; (8001a2c <HAL_RCC_ClockConfig+0x1b8>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d90c      	bls.n	80018b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001896:	4b65      	ldr	r3, [pc, #404]	; (8001a2c <HAL_RCC_ClockConfig+0x1b8>)
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189e:	4b63      	ldr	r3, [pc, #396]	; (8001a2c <HAL_RCC_ClockConfig+0x1b8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e0b8      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d020      	beq.n	80018fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d005      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018c8:	4b59      	ldr	r3, [pc, #356]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	4a58      	ldr	r2, [pc, #352]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018e0:	4b53      	ldr	r3, [pc, #332]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	4a52      	ldr	r2, [pc, #328]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ec:	4b50      	ldr	r3, [pc, #320]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	494d      	ldr	r1, [pc, #308]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d044      	beq.n	8001994 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d107      	bne.n	8001922 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001912:	4b47      	ldr	r3, [pc, #284]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d119      	bne.n	8001952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e07f      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b02      	cmp	r3, #2
 8001928:	d003      	beq.n	8001932 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800192e:	2b03      	cmp	r3, #3
 8001930:	d107      	bne.n	8001942 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001932:	4b3f      	ldr	r3, [pc, #252]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d109      	bne.n	8001952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e06f      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001942:	4b3b      	ldr	r3, [pc, #236]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e067      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001952:	4b37      	ldr	r3, [pc, #220]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f023 0203 	bic.w	r2, r3, #3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	4934      	ldr	r1, [pc, #208]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001960:	4313      	orrs	r3, r2
 8001962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001964:	f7ff fa08 	bl	8000d78 <HAL_GetTick>
 8001968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196a:	e00a      	b.n	8001982 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800196c:	f7ff fa04 	bl	8000d78 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	f241 3288 	movw	r2, #5000	; 0x1388
 800197a:	4293      	cmp	r3, r2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e04f      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001982:	4b2b      	ldr	r3, [pc, #172]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 020c 	and.w	r2, r3, #12
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	429a      	cmp	r2, r3
 8001992:	d1eb      	bne.n	800196c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001994:	4b25      	ldr	r3, [pc, #148]	; (8001a2c <HAL_RCC_ClockConfig+0x1b8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d20c      	bcs.n	80019bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a2:	4b22      	ldr	r3, [pc, #136]	; (8001a2c <HAL_RCC_ClockConfig+0x1b8>)
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019aa:	4b20      	ldr	r3, [pc, #128]	; (8001a2c <HAL_RCC_ClockConfig+0x1b8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d001      	beq.n	80019bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e032      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d008      	beq.n	80019da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c8:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	4916      	ldr	r1, [pc, #88]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d009      	beq.n	80019fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019e6:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	490e      	ldr	r1, [pc, #56]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019fa:	f000 f821 	bl	8001a40 <HAL_RCC_GetSysClockFreq>
 80019fe:	4602      	mov	r2, r0
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	091b      	lsrs	r3, r3, #4
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	490a      	ldr	r1, [pc, #40]	; (8001a34 <HAL_RCC_ClockConfig+0x1c0>)
 8001a0c:	5ccb      	ldrb	r3, [r1, r3]
 8001a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a12:	4a09      	ldr	r2, [pc, #36]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <HAL_RCC_ClockConfig+0x1c8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff f890 	bl	8000b40 <HAL_InitTick>

  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023c00 	.word	0x40023c00
 8001a30:	40023800 	.word	0x40023800
 8001a34:	08005aa0 	.word	0x08005aa0
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	20000004 	.word	0x20000004

08001a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a44:	b094      	sub	sp, #80	; 0x50
 8001a46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	647b      	str	r3, [r7, #68]	; 0x44
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a50:	2300      	movs	r3, #0
 8001a52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a58:	4b79      	ldr	r3, [pc, #484]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 030c 	and.w	r3, r3, #12
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d00d      	beq.n	8001a80 <HAL_RCC_GetSysClockFreq+0x40>
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	f200 80e1 	bhi.w	8001c2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d002      	beq.n	8001a74 <HAL_RCC_GetSysClockFreq+0x34>
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	d003      	beq.n	8001a7a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a72:	e0db      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a74:	4b73      	ldr	r3, [pc, #460]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a76:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a78:	e0db      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a7a:	4b73      	ldr	r3, [pc, #460]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a7e:	e0d8      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a80:	4b6f      	ldr	r3, [pc, #444]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a88:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a8a:	4b6d      	ldr	r3, [pc, #436]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d063      	beq.n	8001b5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a96:	4b6a      	ldr	r3, [pc, #424]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	099b      	lsrs	r3, r3, #6
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001aa0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aa8:	633b      	str	r3, [r7, #48]	; 0x30
 8001aaa:	2300      	movs	r3, #0
 8001aac:	637b      	str	r3, [r7, #52]	; 0x34
 8001aae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ab2:	4622      	mov	r2, r4
 8001ab4:	462b      	mov	r3, r5
 8001ab6:	f04f 0000 	mov.w	r0, #0
 8001aba:	f04f 0100 	mov.w	r1, #0
 8001abe:	0159      	lsls	r1, r3, #5
 8001ac0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ac4:	0150      	lsls	r0, r2, #5
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4621      	mov	r1, r4
 8001acc:	1a51      	subs	r1, r2, r1
 8001ace:	6139      	str	r1, [r7, #16]
 8001ad0:	4629      	mov	r1, r5
 8001ad2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ae4:	4659      	mov	r1, fp
 8001ae6:	018b      	lsls	r3, r1, #6
 8001ae8:	4651      	mov	r1, sl
 8001aea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aee:	4651      	mov	r1, sl
 8001af0:	018a      	lsls	r2, r1, #6
 8001af2:	4651      	mov	r1, sl
 8001af4:	ebb2 0801 	subs.w	r8, r2, r1
 8001af8:	4659      	mov	r1, fp
 8001afa:	eb63 0901 	sbc.w	r9, r3, r1
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b12:	4690      	mov	r8, r2
 8001b14:	4699      	mov	r9, r3
 8001b16:	4623      	mov	r3, r4
 8001b18:	eb18 0303 	adds.w	r3, r8, r3
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	462b      	mov	r3, r5
 8001b20:	eb49 0303 	adc.w	r3, r9, r3
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	f04f 0300 	mov.w	r3, #0
 8001b2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b32:	4629      	mov	r1, r5
 8001b34:	024b      	lsls	r3, r1, #9
 8001b36:	4621      	mov	r1, r4
 8001b38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b3c:	4621      	mov	r1, r4
 8001b3e:	024a      	lsls	r2, r1, #9
 8001b40:	4610      	mov	r0, r2
 8001b42:	4619      	mov	r1, r3
 8001b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b46:	2200      	movs	r2, #0
 8001b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b50:	f7fe fb90 	bl	8000274 <__aeabi_uldivmod>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4613      	mov	r3, r2
 8001b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b5c:	e058      	b.n	8001c10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b5e:	4b38      	ldr	r3, [pc, #224]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	099b      	lsrs	r3, r3, #6
 8001b64:	2200      	movs	r2, #0
 8001b66:	4618      	mov	r0, r3
 8001b68:	4611      	mov	r1, r2
 8001b6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b6e:	623b      	str	r3, [r7, #32]
 8001b70:	2300      	movs	r3, #0
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
 8001b74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b78:	4642      	mov	r2, r8
 8001b7a:	464b      	mov	r3, r9
 8001b7c:	f04f 0000 	mov.w	r0, #0
 8001b80:	f04f 0100 	mov.w	r1, #0
 8001b84:	0159      	lsls	r1, r3, #5
 8001b86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b8a:	0150      	lsls	r0, r2, #5
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4641      	mov	r1, r8
 8001b92:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b96:	4649      	mov	r1, r9
 8001b98:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ba8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bb0:	ebb2 040a 	subs.w	r4, r2, sl
 8001bb4:	eb63 050b 	sbc.w	r5, r3, fp
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	f04f 0300 	mov.w	r3, #0
 8001bc0:	00eb      	lsls	r3, r5, #3
 8001bc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bc6:	00e2      	lsls	r2, r4, #3
 8001bc8:	4614      	mov	r4, r2
 8001bca:	461d      	mov	r5, r3
 8001bcc:	4643      	mov	r3, r8
 8001bce:	18e3      	adds	r3, r4, r3
 8001bd0:	603b      	str	r3, [r7, #0]
 8001bd2:	464b      	mov	r3, r9
 8001bd4:	eb45 0303 	adc.w	r3, r5, r3
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001be6:	4629      	mov	r1, r5
 8001be8:	028b      	lsls	r3, r1, #10
 8001bea:	4621      	mov	r1, r4
 8001bec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bf0:	4621      	mov	r1, r4
 8001bf2:	028a      	lsls	r2, r1, #10
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	61bb      	str	r3, [r7, #24]
 8001bfe:	61fa      	str	r2, [r7, #28]
 8001c00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c04:	f7fe fb36 	bl	8000274 <__aeabi_uldivmod>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c10:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	0c1b      	lsrs	r3, r3, #16
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c2a:	e002      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3750      	adds	r7, #80	; 0x50
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800
 8001c44:	00f42400 	.word	0x00f42400
 8001c48:	007a1200 	.word	0x007a1200

08001c4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c50:	4b03      	ldr	r3, [pc, #12]	; (8001c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c52:	681b      	ldr	r3, [r3, #0]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000000 	.word	0x20000000

08001c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c68:	f7ff fff0 	bl	8001c4c <HAL_RCC_GetHCLKFreq>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	0a9b      	lsrs	r3, r3, #10
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	4903      	ldr	r1, [pc, #12]	; (8001c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c7a:	5ccb      	ldrb	r3, [r1, r3]
 8001c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40023800 	.word	0x40023800
 8001c88:	08005ab0 	.word	0x08005ab0

08001c8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	220f      	movs	r2, #15
 8001c9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 0203 	and.w	r2, r3, #3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <HAL_RCC_GetClockConfig+0x5c>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	08db      	lsrs	r3, r3, #3
 8001cc6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cce:	4b07      	ldr	r3, [pc, #28]	; (8001cec <HAL_RCC_GetClockConfig+0x60>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0207 	and.w	r2, r3, #7
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	601a      	str	r2, [r3, #0]
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40023c00 	.word	0x40023c00

08001cf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e041      	b.n	8001d86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d106      	bne.n	8001d1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f839 	bl	8001d8e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2202      	movs	r2, #2
 8001d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4610      	mov	r0, r2
 8001d30:	f000 f9d8 	bl	80020e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d001      	beq.n	8001dbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e04e      	b.n	8001e5a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0201 	orr.w	r2, r2, #1
 8001dd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a23      	ldr	r2, [pc, #140]	; (8001e68 <HAL_TIM_Base_Start_IT+0xc4>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d022      	beq.n	8001e24 <HAL_TIM_Base_Start_IT+0x80>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de6:	d01d      	beq.n	8001e24 <HAL_TIM_Base_Start_IT+0x80>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a1f      	ldr	r2, [pc, #124]	; (8001e6c <HAL_TIM_Base_Start_IT+0xc8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d018      	beq.n	8001e24 <HAL_TIM_Base_Start_IT+0x80>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a1e      	ldr	r2, [pc, #120]	; (8001e70 <HAL_TIM_Base_Start_IT+0xcc>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d013      	beq.n	8001e24 <HAL_TIM_Base_Start_IT+0x80>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a1c      	ldr	r2, [pc, #112]	; (8001e74 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d00e      	beq.n	8001e24 <HAL_TIM_Base_Start_IT+0x80>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a1b      	ldr	r2, [pc, #108]	; (8001e78 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d009      	beq.n	8001e24 <HAL_TIM_Base_Start_IT+0x80>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a19      	ldr	r2, [pc, #100]	; (8001e7c <HAL_TIM_Base_Start_IT+0xd8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d004      	beq.n	8001e24 <HAL_TIM_Base_Start_IT+0x80>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a18      	ldr	r2, [pc, #96]	; (8001e80 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d111      	bne.n	8001e48 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b06      	cmp	r3, #6
 8001e34:	d010      	beq.n	8001e58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f042 0201 	orr.w	r2, r2, #1
 8001e44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e46:	e007      	b.n	8001e58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0201 	orr.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40010000 	.word	0x40010000
 8001e6c:	40000400 	.word	0x40000400
 8001e70:	40000800 	.word	0x40000800
 8001e74:	40000c00 	.word	0x40000c00
 8001e78:	40010400 	.word	0x40010400
 8001e7c:	40014000 	.word	0x40014000
 8001e80:	40001800 	.word	0x40001800

08001e84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d122      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d11b      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f06f 0202 	mvn.w	r2, #2
 8001eb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f8ee 	bl	80020a8 <HAL_TIM_IC_CaptureCallback>
 8001ecc:	e005      	b.n	8001eda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f8e0 	bl	8002094 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f8f1 	bl	80020bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d122      	bne.n	8001f34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d11b      	bne.n	8001f34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0204 	mvn.w	r2, #4
 8001f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2202      	movs	r2, #2
 8001f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f8c4 	bl	80020a8 <HAL_TIM_IC_CaptureCallback>
 8001f20:	e005      	b.n	8001f2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f8b6 	bl	8002094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f8c7 	bl	80020bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d122      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d11b      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0208 	mvn.w	r2, #8
 8001f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2204      	movs	r2, #4
 8001f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f89a 	bl	80020a8 <HAL_TIM_IC_CaptureCallback>
 8001f74:	e005      	b.n	8001f82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f88c 	bl	8002094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f89d 	bl	80020bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	f003 0310 	and.w	r3, r3, #16
 8001f92:	2b10      	cmp	r3, #16
 8001f94:	d122      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f003 0310 	and.w	r3, r3, #16
 8001fa0:	2b10      	cmp	r3, #16
 8001fa2:	d11b      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f06f 0210 	mvn.w	r2, #16
 8001fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2208      	movs	r2, #8
 8001fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f870 	bl	80020a8 <HAL_TIM_IC_CaptureCallback>
 8001fc8:	e005      	b.n	8001fd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f862 	bl	8002094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f873 	bl	80020bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d10e      	bne.n	8002008 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d107      	bne.n	8002008 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f06f 0201 	mvn.w	r2, #1
 8002000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7fe fd5a 	bl	8000abc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002012:	2b80      	cmp	r3, #128	; 0x80
 8002014:	d10e      	bne.n	8002034 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002020:	2b80      	cmp	r3, #128	; 0x80
 8002022:	d107      	bne.n	8002034 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800202c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f902 	bl	8002238 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203e:	2b40      	cmp	r3, #64	; 0x40
 8002040:	d10e      	bne.n	8002060 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204c:	2b40      	cmp	r3, #64	; 0x40
 800204e:	d107      	bne.n	8002060 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f838 	bl	80020d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f003 0320 	and.w	r3, r3, #32
 800206a:	2b20      	cmp	r3, #32
 800206c:	d10e      	bne.n	800208c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f003 0320 	and.w	r3, r3, #32
 8002078:	2b20      	cmp	r3, #32
 800207a:	d107      	bne.n	800208c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0220 	mvn.w	r2, #32
 8002084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f8cc 	bl	8002224 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a40      	ldr	r2, [pc, #256]	; (80021f8 <TIM_Base_SetConfig+0x114>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d013      	beq.n	8002124 <TIM_Base_SetConfig+0x40>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002102:	d00f      	beq.n	8002124 <TIM_Base_SetConfig+0x40>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a3d      	ldr	r2, [pc, #244]	; (80021fc <TIM_Base_SetConfig+0x118>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d00b      	beq.n	8002124 <TIM_Base_SetConfig+0x40>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a3c      	ldr	r2, [pc, #240]	; (8002200 <TIM_Base_SetConfig+0x11c>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d007      	beq.n	8002124 <TIM_Base_SetConfig+0x40>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a3b      	ldr	r2, [pc, #236]	; (8002204 <TIM_Base_SetConfig+0x120>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d003      	beq.n	8002124 <TIM_Base_SetConfig+0x40>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a3a      	ldr	r2, [pc, #232]	; (8002208 <TIM_Base_SetConfig+0x124>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d108      	bne.n	8002136 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800212a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	4313      	orrs	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a2f      	ldr	r2, [pc, #188]	; (80021f8 <TIM_Base_SetConfig+0x114>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d02b      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002144:	d027      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a2c      	ldr	r2, [pc, #176]	; (80021fc <TIM_Base_SetConfig+0x118>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d023      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a2b      	ldr	r2, [pc, #172]	; (8002200 <TIM_Base_SetConfig+0x11c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d01f      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a2a      	ldr	r2, [pc, #168]	; (8002204 <TIM_Base_SetConfig+0x120>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d01b      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a29      	ldr	r2, [pc, #164]	; (8002208 <TIM_Base_SetConfig+0x124>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d017      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a28      	ldr	r2, [pc, #160]	; (800220c <TIM_Base_SetConfig+0x128>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d013      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a27      	ldr	r2, [pc, #156]	; (8002210 <TIM_Base_SetConfig+0x12c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00f      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a26      	ldr	r2, [pc, #152]	; (8002214 <TIM_Base_SetConfig+0x130>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d00b      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a25      	ldr	r2, [pc, #148]	; (8002218 <TIM_Base_SetConfig+0x134>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d007      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a24      	ldr	r2, [pc, #144]	; (800221c <TIM_Base_SetConfig+0x138>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d003      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a23      	ldr	r2, [pc, #140]	; (8002220 <TIM_Base_SetConfig+0x13c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d108      	bne.n	80021a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800219c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <TIM_Base_SetConfig+0x114>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d003      	beq.n	80021dc <TIM_Base_SetConfig+0xf8>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a0c      	ldr	r2, [pc, #48]	; (8002208 <TIM_Base_SetConfig+0x124>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d103      	bne.n	80021e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	615a      	str	r2, [r3, #20]
}
 80021ea:	bf00      	nop
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40010000 	.word	0x40010000
 80021fc:	40000400 	.word	0x40000400
 8002200:	40000800 	.word	0x40000800
 8002204:	40000c00 	.word	0x40000c00
 8002208:	40010400 	.word	0x40010400
 800220c:	40014000 	.word	0x40014000
 8002210:	40014400 	.word	0x40014400
 8002214:	40014800 	.word	0x40014800
 8002218:	40001800 	.word	0x40001800
 800221c:	40001c00 	.word	0x40001c00
 8002220:	40002000 	.word	0x40002000

08002224 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f103 0208 	add.w	r2, r3, #8
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f04f 32ff 	mov.w	r2, #4294967295
 8002264:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f103 0208 	add.w	r2, r3, #8
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f103 0208 	add.w	r2, r3, #8
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80022a6:	b480      	push	{r7}
 80022a8:	b085      	sub	sp, #20
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	1c5a      	adds	r2, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	601a      	str	r2, [r3, #0]
}
 80022e2:	bf00      	nop
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022ee:	b480      	push	{r7}
 80022f0:	b085      	sub	sp, #20
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6892      	ldr	r2, [r2, #8]
 8002304:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6852      	ldr	r2, [r2, #4]
 800230e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	429a      	cmp	r2, r3
 8002318:	d103      	bne.n	8002322 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	1e5a      	subs	r2, r3, #1
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002342:	b580      	push	{r7, lr}
 8002344:	b08c      	sub	sp, #48	; 0x30
 8002346:	af04      	add	r7, sp, #16
 8002348:	60f8      	str	r0, [r7, #12]
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	603b      	str	r3, [r7, #0]
 800234e:	4613      	mov	r3, r2
 8002350:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002352:	88fb      	ldrh	r3, [r7, #6]
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4618      	mov	r0, r3
 8002358:	f001 f8e0 	bl	800351c <pvPortMalloc>
 800235c:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00e      	beq.n	8002382 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002364:	2058      	movs	r0, #88	; 0x58
 8002366:	f001 f8d9 	bl	800351c <pvPortMalloc>
 800236a:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	631a      	str	r2, [r3, #48]	; 0x30
 8002378:	e005      	b.n	8002386 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800237a:	6978      	ldr	r0, [r7, #20]
 800237c:	f001 f9ae 	bl	80036dc <vPortFree>
 8002380:	e001      	b.n	8002386 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d013      	beq.n	80023b4 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800238c:	88fa      	ldrh	r2, [r7, #6]
 800238e:	2300      	movs	r3, #0
 8002390:	9303      	str	r3, [sp, #12]
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	9302      	str	r3, [sp, #8]
 8002396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002398:	9301      	str	r3, [sp, #4]
 800239a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 f80e 	bl	80023c4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80023a8:	69f8      	ldr	r0, [r7, #28]
 80023aa:	f000 f8a1 	bl	80024f0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80023ae:	2301      	movs	r3, #1
 80023b0:	61bb      	str	r3, [r7, #24]
 80023b2:	e002      	b.n	80023ba <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80023b4:	f04f 33ff 	mov.w	r3, #4294967295
 80023b8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80023ba:	69bb      	ldr	r3, [r7, #24]
    }
 80023bc:	4618      	mov	r0, r3
 80023be:	3720      	adds	r7, #32
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
 80023d0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80023d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	461a      	mov	r2, r3
 80023dc:	21a5      	movs	r1, #165	; 0xa5
 80023de:	f003 fadf 	bl	80059a0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80023e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80023ec:	3b01      	subs	r3, #1
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	f023 0307 	bic.w	r3, r3, #7
 80023fa:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <prvInitialiseNewTask+0x58>
        __asm volatile
 8002406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800240a:	f383 8811 	msr	BASEPRI, r3
 800240e:	f3bf 8f6f 	isb	sy
 8002412:	f3bf 8f4f 	dsb	sy
 8002416:	617b      	str	r3, [r7, #20]
    }
 8002418:	bf00      	nop
 800241a:	e7fe      	b.n	800241a <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d01f      	beq.n	8002462 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
 8002426:	e012      	b.n	800244e <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	4413      	add	r3, r2
 800242e:	7819      	ldrb	r1, [r3, #0]
 8002430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	4413      	add	r3, r2
 8002436:	3334      	adds	r3, #52	; 0x34
 8002438:	460a      	mov	r2, r1
 800243a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	4413      	add	r3, r2
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d006      	beq.n	8002456 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	3301      	adds	r3, #1
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	2b09      	cmp	r3, #9
 8002452:	d9e9      	bls.n	8002428 <prvInitialiseNewTask+0x64>
 8002454:	e000      	b.n	8002458 <prvInitialiseNewTask+0x94>
            {
                break;
 8002456:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002460:	e003      	b.n	800246a <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800246a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246c:	2b04      	cmp	r3, #4
 800246e:	d901      	bls.n	8002474 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002470:	2304      	movs	r3, #4
 8002472:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002478:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800247a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800247e:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002482:	2200      	movs	r2, #0
 8002484:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002488:	3304      	adds	r3, #4
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fefe 	bl	800228c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002492:	3318      	adds	r3, #24
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fef9 	bl	800228c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800249a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800249e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a2:	f1c3 0205 	rsb	r2, r3, #5
 80024a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80024aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024ae:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80024b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b2:	3350      	adds	r3, #80	; 0x50
 80024b4:	2204      	movs	r2, #4
 80024b6:	2100      	movs	r1, #0
 80024b8:	4618      	mov	r0, r3
 80024ba:	f003 fa71 	bl	80059a0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80024be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c0:	3354      	adds	r3, #84	; 0x54
 80024c2:	2201      	movs	r2, #1
 80024c4:	2100      	movs	r1, #0
 80024c6:	4618      	mov	r0, r3
 80024c8:	f003 fa6a 	bl	80059a0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	68f9      	ldr	r1, [r7, #12]
 80024d0:	69b8      	ldr	r0, [r7, #24]
 80024d2:	f000 fd4b 	bl	8002f6c <pxPortInitialiseStack>
 80024d6:	4602      	mov	r2, r0
 80024d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024da:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80024dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80024e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024e6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80024e8:	bf00      	nop
 80024ea:	3720      	adds	r7, #32
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80024f0:	b5b0      	push	{r4, r5, r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80024f8:	f000 fee4 	bl	80032c4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80024fc:	4b3b      	ldr	r3, [pc, #236]	; (80025ec <prvAddNewTaskToReadyList+0xfc>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	3301      	adds	r3, #1
 8002502:	4a3a      	ldr	r2, [pc, #232]	; (80025ec <prvAddNewTaskToReadyList+0xfc>)
 8002504:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002506:	4b3a      	ldr	r3, [pc, #232]	; (80025f0 <prvAddNewTaskToReadyList+0x100>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d109      	bne.n	8002522 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800250e:	4a38      	ldr	r2, [pc, #224]	; (80025f0 <prvAddNewTaskToReadyList+0x100>)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002514:	4b35      	ldr	r3, [pc, #212]	; (80025ec <prvAddNewTaskToReadyList+0xfc>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d110      	bne.n	800253e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800251c:	f000 fc7c 	bl	8002e18 <prvInitialiseTaskLists>
 8002520:	e00d      	b.n	800253e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002522:	4b34      	ldr	r3, [pc, #208]	; (80025f4 <prvAddNewTaskToReadyList+0x104>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d109      	bne.n	800253e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800252a:	4b31      	ldr	r3, [pc, #196]	; (80025f0 <prvAddNewTaskToReadyList+0x100>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002534:	429a      	cmp	r2, r3
 8002536:	d802      	bhi.n	800253e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002538:	4a2d      	ldr	r2, [pc, #180]	; (80025f0 <prvAddNewTaskToReadyList+0x100>)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800253e:	4b2e      	ldr	r3, [pc, #184]	; (80025f8 <prvAddNewTaskToReadyList+0x108>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	3301      	adds	r3, #1
 8002544:	4a2c      	ldr	r2, [pc, #176]	; (80025f8 <prvAddNewTaskToReadyList+0x108>)
 8002546:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002548:	4b2b      	ldr	r3, [pc, #172]	; (80025f8 <prvAddNewTaskToReadyList+0x108>)
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d016      	beq.n	8002584 <prvAddNewTaskToReadyList+0x94>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4618      	mov	r0, r3
 800255a:	f002 ffa3 	bl	80054a4 <SEGGER_SYSVIEW_OnTaskCreate>
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	461d      	mov	r5, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	461c      	mov	r4, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	1ae3      	subs	r3, r4, r3
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	462b      	mov	r3, r5
 8002580:	f001 fa7a 	bl	8003a78 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4618      	mov	r0, r3
 8002588:	f003 f810 	bl	80055ac <SEGGER_SYSVIEW_OnTaskStartReady>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002590:	2201      	movs	r2, #1
 8002592:	409a      	lsls	r2, r3
 8002594:	4b19      	ldr	r3, [pc, #100]	; (80025fc <prvAddNewTaskToReadyList+0x10c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4313      	orrs	r3, r2
 800259a:	4a18      	ldr	r2, [pc, #96]	; (80025fc <prvAddNewTaskToReadyList+0x10c>)
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4a15      	ldr	r2, [pc, #84]	; (8002600 <prvAddNewTaskToReadyList+0x110>)
 80025ac:	441a      	add	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3304      	adds	r3, #4
 80025b2:	4619      	mov	r1, r3
 80025b4:	4610      	mov	r0, r2
 80025b6:	f7ff fe76 	bl	80022a6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80025ba:	f000 feb3 	bl	8003324 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80025be:	4b0d      	ldr	r3, [pc, #52]	; (80025f4 <prvAddNewTaskToReadyList+0x104>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00e      	beq.n	80025e4 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80025c6:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <prvAddNewTaskToReadyList+0x100>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d207      	bcs.n	80025e4 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <prvAddNewTaskToReadyList+0x114>)
 80025d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	f3bf 8f4f 	dsb	sy
 80025e0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80025e4:	bf00      	nop
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bdb0      	pop	{r4, r5, r7, pc}
 80025ec:	20000160 	.word	0x20000160
 80025f0:	20000088 	.word	0x20000088
 80025f4:	2000016c 	.word	0x2000016c
 80025f8:	2000017c 	.word	0x2000017c
 80025fc:	20000168 	.word	0x20000168
 8002600:	2000008c 	.word	0x2000008c
 8002604:	e000ed04 	.word	0xe000ed04

08002608 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 8002610:	f000 fe58 	bl	80032c4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d102      	bne.n	8002620 <uxTaskPriorityGet+0x18>
 800261a:	4b07      	ldr	r3, [pc, #28]	; (8002638 <uxTaskPriorityGet+0x30>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	e000      	b.n	8002622 <uxTaskPriorityGet+0x1a>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 800262a:	f000 fe7b 	bl	8003324 <vPortExitCritical>

        return uxReturn;
 800262e:	68bb      	ldr	r3, [r7, #8]
    }
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20000088 	.word	0x20000088

0800263c <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 800263c:	b580      	push	{r7, lr}
 800263e:	b08a      	sub	sp, #40	; 0x28
 8002640:	af02      	add	r7, sp, #8
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]

        configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	2b04      	cmp	r3, #4
 800264e:	d90a      	bls.n	8002666 <vTaskPrioritySet+0x2a>
        __asm volatile
 8002650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002654:	f383 8811 	msr	BASEPRI, r3
 8002658:	f3bf 8f6f 	isb	sy
 800265c:	f3bf 8f4f 	dsb	sy
 8002660:	60fb      	str	r3, [r7, #12]
    }
 8002662:	bf00      	nop
 8002664:	e7fe      	b.n	8002664 <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b04      	cmp	r3, #4
 800266a:	d901      	bls.n	8002670 <vTaskPrioritySet+0x34>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800266c:	2304      	movs	r3, #4
 800266e:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8002670:	f000 fe28 	bl	80032c4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d102      	bne.n	8002680 <vTaskPrioritySet+0x44>
 800267a:	4b4c      	ldr	r3, [pc, #304]	; (80027ac <vTaskPrioritySet+0x170>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	e000      	b.n	8002682 <vTaskPrioritySet+0x46>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	4618      	mov	r0, r3
 8002688:	f002 ffd2 	bl	8005630 <SEGGER_SYSVIEW_ShrinkId>
 800268c:	4603      	mov	r3, r0
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	4619      	mov	r1, r3
 8002692:	2028      	movs	r0, #40	; 0x28
 8002694:	f002 fb4c 	bl	8004d30 <SEGGER_SYSVIEW_RecordU32x2>
 8002698:	69b8      	ldr	r0, [r7, #24]
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a4:	461a      	mov	r2, r3
 80026a6:	2300      	movs	r3, #0
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	4613      	mov	r3, r2
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	f001 fa4b 	bl	8003b48 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
                {
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b6:	617b      	str	r3, [r7, #20]
                {
                    uxCurrentBasePriority = pxTCB->uxPriority;
                }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d06f      	beq.n	80027a0 <vTaskPrioritySet+0x164>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d90d      	bls.n	80026e4 <vTaskPrioritySet+0xa8>
                {
                    if( pxTCB != pxCurrentTCB )
 80026c8:	4b38      	ldr	r3, [pc, #224]	; (80027ac <vTaskPrioritySet+0x170>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d00f      	beq.n	80026f2 <vTaskPrioritySet+0xb6>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80026d2:	4b36      	ldr	r3, [pc, #216]	; (80027ac <vTaskPrioritySet+0x170>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d309      	bcc.n	80026f2 <vTaskPrioritySet+0xb6>
                        {
                            xYieldRequired = pdTRUE;
 80026de:	2301      	movs	r3, #1
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	e006      	b.n	80026f2 <vTaskPrioritySet+0xb6>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 80026e4:	4b31      	ldr	r3, [pc, #196]	; (80027ac <vTaskPrioritySet+0x170>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d101      	bne.n	80026f2 <vTaskPrioritySet+0xb6>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 80026ee:	2301      	movs	r3, #1
 80026f0:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f6:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* Only change the priority being used if the task is not
                         * currently using an inherited priority. */
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002700:	429a      	cmp	r2, r3
 8002702:	d102      	bne.n	800270a <vTaskPrioritySet+0xce>
                        {
                            pxTCB->uxPriority = uxNewPriority;
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	62da      	str	r2, [r3, #44]	; 0x2c
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        /* The base priority gets set whatever. */
                        pxTCB->uxBasePriority = uxNewPriority;
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	649a      	str	r2, [r3, #72]	; 0x48
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	2b00      	cmp	r3, #0
 8002716:	db04      	blt.n	8002722 <vTaskPrioritySet+0xe6>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	f1c3 0205 	rsb	r2, r3, #5
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	6959      	ldr	r1, [r3, #20]
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4a1f      	ldr	r2, [pc, #124]	; (80027b0 <vTaskPrioritySet+0x174>)
 8002732:	4413      	add	r3, r2
 8002734:	4299      	cmp	r1, r3
 8002736:	d128      	bne.n	800278a <vTaskPrioritySet+0x14e>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to it's new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	3304      	adds	r3, #4
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fdd6 	bl	80022ee <uxListRemove>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d109      	bne.n	800275c <vTaskPrioritySet+0x120>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8002748:	2201      	movs	r2, #1
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43da      	mvns	r2, r3
 8002752:	4b18      	ldr	r3, [pc, #96]	; (80027b4 <vTaskPrioritySet+0x178>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4013      	ands	r3, r2
 8002758:	4a16      	ldr	r2, [pc, #88]	; (80027b4 <vTaskPrioritySet+0x178>)
 800275a:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

					prvReaddTaskToReadyList( pxTCB );
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002760:	2201      	movs	r2, #1
 8002762:	409a      	lsls	r2, r3
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <vTaskPrioritySet+0x178>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4313      	orrs	r3, r2
 800276a:	4a12      	ldr	r2, [pc, #72]	; (80027b4 <vTaskPrioritySet+0x178>)
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4a0d      	ldr	r2, [pc, #52]	; (80027b0 <vTaskPrioritySet+0x174>)
 800277c:	441a      	add	r2, r3
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	3304      	adds	r3, #4
 8002782:	4619      	mov	r1, r3
 8002784:	4610      	mov	r0, r2
 8002786:	f7ff fd8e 	bl	80022a6 <vListInsertEnd>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d007      	beq.n	80027a0 <vTaskPrioritySet+0x164>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 8002790:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <vTaskPrioritySet+0x17c>)
 8002792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	f3bf 8f4f 	dsb	sy
 800279c:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 80027a0:	f000 fdc0 	bl	8003324 <vPortExitCritical>
    }
 80027a4:	bf00      	nop
 80027a6:	3720      	adds	r7, #32
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20000088 	.word	0x20000088
 80027b0:	2000008c 	.word	0x2000008c
 80027b4:	20000168 	.word	0x20000168
 80027b8:	e000ed04 	.word	0xe000ed04

080027bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80027c2:	4b24      	ldr	r3, [pc, #144]	; (8002854 <vTaskStartScheduler+0x98>)
 80027c4:	9301      	str	r3, [sp, #4]
 80027c6:	2300      	movs	r3, #0
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	2300      	movs	r3, #0
 80027cc:	2282      	movs	r2, #130	; 0x82
 80027ce:	4922      	ldr	r1, [pc, #136]	; (8002858 <vTaskStartScheduler+0x9c>)
 80027d0:	4822      	ldr	r0, [pc, #136]	; (800285c <vTaskStartScheduler+0xa0>)
 80027d2:	f7ff fdb6 	bl	8002342 <xTaskCreate>
 80027d6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d124      	bne.n	8002828 <vTaskStartScheduler+0x6c>
        __asm volatile
 80027de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e2:	f383 8811 	msr	BASEPRI, r3
 80027e6:	f3bf 8f6f 	isb	sy
 80027ea:	f3bf 8f4f 	dsb	sy
 80027ee:	60bb      	str	r3, [r7, #8]
    }
 80027f0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80027f2:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <vTaskStartScheduler+0xa4>)
 80027f4:	f04f 32ff 	mov.w	r2, #4294967295
 80027f8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80027fa:	4b1a      	ldr	r3, [pc, #104]	; (8002864 <vTaskStartScheduler+0xa8>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002800:	4b19      	ldr	r3, [pc, #100]	; (8002868 <vTaskStartScheduler+0xac>)
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002806:	4b19      	ldr	r3, [pc, #100]	; (800286c <vTaskStartScheduler+0xb0>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	4b12      	ldr	r3, [pc, #72]	; (8002854 <vTaskStartScheduler+0x98>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d102      	bne.n	8002818 <vTaskStartScheduler+0x5c>
 8002812:	f002 fe2b 	bl	800546c <SEGGER_SYSVIEW_OnIdle>
 8002816:	e004      	b.n	8002822 <vTaskStartScheduler+0x66>
 8002818:	4b14      	ldr	r3, [pc, #80]	; (800286c <vTaskStartScheduler+0xb0>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f002 fe83 	bl	8005528 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002822:	f000 fc2f 	bl	8003084 <xPortStartScheduler>
 8002826:	e00e      	b.n	8002846 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282e:	d10a      	bne.n	8002846 <vTaskStartScheduler+0x8a>
        __asm volatile
 8002830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002834:	f383 8811 	msr	BASEPRI, r3
 8002838:	f3bf 8f6f 	isb	sy
 800283c:	f3bf 8f4f 	dsb	sy
 8002840:	607b      	str	r3, [r7, #4]
    }
 8002842:	bf00      	nop
 8002844:	e7fe      	b.n	8002844 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002846:	4b0a      	ldr	r3, [pc, #40]	; (8002870 <vTaskStartScheduler+0xb4>)
 8002848:	681b      	ldr	r3, [r3, #0]
}
 800284a:	bf00      	nop
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20000184 	.word	0x20000184
 8002858:	080059d8 	.word	0x080059d8
 800285c:	08002de9 	.word	0x08002de9
 8002860:	20000180 	.word	0x20000180
 8002864:	2000016c 	.word	0x2000016c
 8002868:	20000164 	.word	0x20000164
 800286c:	20000088 	.word	0x20000088
 8002870:	2000000c 	.word	0x2000000c

08002874 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002878:	4b04      	ldr	r3, [pc, #16]	; (800288c <vTaskSuspendAll+0x18>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	3301      	adds	r3, #1
 800287e:	4a03      	ldr	r2, [pc, #12]	; (800288c <vTaskSuspendAll+0x18>)
 8002880:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002882:	bf00      	nop
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	20000188 	.word	0x20000188

08002890 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800289a:	2300      	movs	r3, #0
 800289c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800289e:	4b43      	ldr	r3, [pc, #268]	; (80029ac <xTaskResumeAll+0x11c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10a      	bne.n	80028bc <xTaskResumeAll+0x2c>
        __asm volatile
 80028a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028aa:	f383 8811 	msr	BASEPRI, r3
 80028ae:	f3bf 8f6f 	isb	sy
 80028b2:	f3bf 8f4f 	dsb	sy
 80028b6:	603b      	str	r3, [r7, #0]
    }
 80028b8:	bf00      	nop
 80028ba:	e7fe      	b.n	80028ba <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80028bc:	f000 fd02 	bl	80032c4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80028c0:	4b3a      	ldr	r3, [pc, #232]	; (80029ac <xTaskResumeAll+0x11c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	3b01      	subs	r3, #1
 80028c6:	4a39      	ldr	r2, [pc, #228]	; (80029ac <xTaskResumeAll+0x11c>)
 80028c8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028ca:	4b38      	ldr	r3, [pc, #224]	; (80029ac <xTaskResumeAll+0x11c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d165      	bne.n	800299e <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80028d2:	4b37      	ldr	r3, [pc, #220]	; (80029b0 <xTaskResumeAll+0x120>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d061      	beq.n	800299e <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80028da:	e032      	b.n	8002942 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028dc:	4b35      	ldr	r3, [pc, #212]	; (80029b4 <xTaskResumeAll+0x124>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	3318      	adds	r3, #24
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff fd00 	bl	80022ee <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	3304      	adds	r3, #4
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff fcfb 	bl	80022ee <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f002 fe56 	bl	80055ac <SEGGER_SYSVIEW_OnTaskStartReady>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002904:	2201      	movs	r2, #1
 8002906:	409a      	lsls	r2, r3
 8002908:	4b2b      	ldr	r3, [pc, #172]	; (80029b8 <xTaskResumeAll+0x128>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4313      	orrs	r3, r2
 800290e:	4a2a      	ldr	r2, [pc, #168]	; (80029b8 <xTaskResumeAll+0x128>)
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4a27      	ldr	r2, [pc, #156]	; (80029bc <xTaskResumeAll+0x12c>)
 8002920:	441a      	add	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	3304      	adds	r3, #4
 8002926:	4619      	mov	r1, r3
 8002928:	4610      	mov	r0, r2
 800292a:	f7ff fcbc 	bl	80022a6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002932:	4b23      	ldr	r3, [pc, #140]	; (80029c0 <xTaskResumeAll+0x130>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002938:	429a      	cmp	r2, r3
 800293a:	d302      	bcc.n	8002942 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 800293c:	4b21      	ldr	r3, [pc, #132]	; (80029c4 <xTaskResumeAll+0x134>)
 800293e:	2201      	movs	r2, #1
 8002940:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002942:	4b1c      	ldr	r3, [pc, #112]	; (80029b4 <xTaskResumeAll+0x124>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1c8      	bne.n	80028dc <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002950:	f000 fae0 	bl	8002f14 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002954:	4b1c      	ldr	r3, [pc, #112]	; (80029c8 <xTaskResumeAll+0x138>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d010      	beq.n	8002982 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002960:	f000 f91c 	bl	8002b9c <xTaskIncrementTick>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d002      	beq.n	8002970 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800296a:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <xTaskResumeAll+0x134>)
 800296c:	2201      	movs	r2, #1
 800296e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3b01      	subs	r3, #1
 8002974:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1f1      	bne.n	8002960 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800297c:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <xTaskResumeAll+0x138>)
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002982:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <xTaskResumeAll+0x134>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d009      	beq.n	800299e <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800298a:	2301      	movs	r3, #1
 800298c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800298e:	4b0f      	ldr	r3, [pc, #60]	; (80029cc <xTaskResumeAll+0x13c>)
 8002990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	f3bf 8f4f 	dsb	sy
 800299a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800299e:	f000 fcc1 	bl	8003324 <vPortExitCritical>

    return xAlreadyYielded;
 80029a2:	68bb      	ldr	r3, [r7, #8]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20000188 	.word	0x20000188
 80029b0:	20000160 	.word	0x20000160
 80029b4:	20000120 	.word	0x20000120
 80029b8:	20000168 	.word	0x20000168
 80029bc:	2000008c 	.word	0x2000008c
 80029c0:	20000088 	.word	0x20000088
 80029c4:	20000174 	.word	0x20000174
 80029c8:	20000170 	.word	0x20000170
 80029cc:	e000ed04 	.word	0xe000ed04

080029d0 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80029d6:	f000 fd61 	bl	800349c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80029da:	2300      	movs	r3, #0
 80029dc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80029de:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <xTaskGetTickCountFromISR+0x20>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80029e4:	683b      	ldr	r3, [r7, #0]
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20000164 	.word	0x20000164

080029f4 <prvSearchForNameWithinSingleList>:

#if ( INCLUDE_xTaskGetHandle == 1 )

    static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
                                                     const char pcNameToQuery[] )
    {
 80029f4:	b480      	push	{r7}
 80029f6:	b08b      	sub	sp, #44	; 0x2c
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
        TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
        char cNextChar;
        BaseType_t xBreakLoop;

        /* This function is called with the scheduler suspended. */

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d05b      	beq.n	8002ac2 <prvSearchForNameWithinSingleList+0xce>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	61bb      	str	r3, [r7, #24]
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	605a      	str	r2, [r3, #4]
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	3308      	adds	r3, #8
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d104      	bne.n	8002a2e <prvSearchForNameWithinSingleList+0x3a>
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	617b      	str	r3, [r7, #20]

            do
            {
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	605a      	str	r2, [r3, #4]
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	3308      	adds	r3, #8
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d104      	bne.n	8002a5a <prvSearchForNameWithinSingleList+0x66>
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	605a      	str	r2, [r3, #4]
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	60fb      	str	r3, [r7, #12]

                /* Check each character in the name looking for a match or
                 * mismatch. */
                xBreakLoop = pdFALSE;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]

                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a66:	2300      	movs	r3, #0
 8002a68:	623b      	str	r3, [r7, #32]
 8002a6a:	e01c      	b.n	8002aa6 <prvSearchForNameWithinSingleList+0xb2>
                {
                    cNextChar = pxNextTCB->pcTaskName[ x ];
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	4413      	add	r3, r2
 8002a72:	3334      	adds	r3, #52	; 0x34
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	72fb      	strb	r3, [r7, #11]

                    if( cNextChar != pcNameToQuery[ x ] )
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	7afa      	ldrb	r2, [r7, #11]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d002      	beq.n	8002a8c <prvSearchForNameWithinSingleList+0x98>
                    {
                        /* Characters didn't match. */
                        xBreakLoop = pdTRUE;
 8002a86:	2301      	movs	r3, #1
 8002a88:	61fb      	str	r3, [r7, #28]
 8002a8a:	e006      	b.n	8002a9a <prvSearchForNameWithinSingleList+0xa6>
                    }
                    else if( cNextChar == ( char ) 0x00 )
 8002a8c:	7afb      	ldrb	r3, [r7, #11]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d103      	bne.n	8002a9a <prvSearchForNameWithinSingleList+0xa6>
                    {
                        /* Both strings terminated, a match must have been
                         * found. */
                        pxReturn = pxNextTCB;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	627b      	str	r3, [r7, #36]	; 0x24
                        xBreakLoop = pdTRUE;
 8002a96:	2301      	movs	r3, #1
 8002a98:	61fb      	str	r3, [r7, #28]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    if( xBreakLoop != pdFALSE )
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d106      	bne.n	8002aae <prvSearchForNameWithinSingleList+0xba>
                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	623b      	str	r3, [r7, #32]
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	2b09      	cmp	r3, #9
 8002aaa:	d9df      	bls.n	8002a6c <prvSearchForNameWithinSingleList+0x78>
 8002aac:	e000      	b.n	8002ab0 <prvSearchForNameWithinSingleList+0xbc>
                    {
                        break;
 8002aae:	bf00      	nop
                    }
                }

                if( pxReturn != NULL )
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d104      	bne.n	8002ac0 <prvSearchForNameWithinSingleList+0xcc>
                {
                    /* The handle has been found. */
                    break;
                }
            } while( pxNextTCB != pxFirstTCB );
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d1bb      	bne.n	8002a36 <prvSearchForNameWithinSingleList+0x42>
 8002abe:	e000      	b.n	8002ac2 <prvSearchForNameWithinSingleList+0xce>
                    break;
 8002ac0:	bf00      	nop
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return pxReturn;
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	372c      	adds	r7, #44	; 0x2c
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

    TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
        UBaseType_t uxQueue = configMAX_PRIORITIES;
 8002ad8:	2305      	movs	r3, #5
 8002ada:	617b      	str	r3, [r7, #20]
        TCB_t * pxTCB;

        /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
        configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7fd fbc1 	bl	8000264 <strlen>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b09      	cmp	r3, #9
 8002ae6:	d90a      	bls.n	8002afe <xTaskGetHandle+0x2e>
        __asm volatile
 8002ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aec:	f383 8811 	msr	BASEPRI, r3
 8002af0:	f3bf 8f6f 	isb	sy
 8002af4:	f3bf 8f4f 	dsb	sy
 8002af8:	60fb      	str	r3, [r7, #12]
    }
 8002afa:	bf00      	nop
 8002afc:	e7fe      	b.n	8002afc <xTaskGetHandle+0x2c>

        vTaskSuspendAll();
 8002afe:	f7ff feb9 	bl	8002874 <vTaskSuspendAll>
        {
            /* Search the ready lists. */
            do
            {
                uxQueue--;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	3b01      	subs	r3, #1
 8002b06:	617b      	str	r3, [r7, #20]
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4a1d      	ldr	r2, [pc, #116]	; (8002b88 <xTaskGetHandle+0xb8>)
 8002b14:	4413      	add	r3, r2
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff ff6b 	bl	80029f4 <prvSearchForNameWithinSingleList>
 8002b1e:	6138      	str	r0, [r7, #16]

                if( pxTCB != NULL )
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d103      	bne.n	8002b2e <xTaskGetHandle+0x5e>
                {
                    /* Found the handle. */
                    break;
                }
            } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1ea      	bne.n	8002b02 <xTaskGetHandle+0x32>
 8002b2c:	e000      	b.n	8002b30 <xTaskGetHandle+0x60>
                    break;
 8002b2e:	bf00      	nop

            /* Search the delayed lists. */
            if( pxTCB == NULL )
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d106      	bne.n	8002b44 <xTaskGetHandle+0x74>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 8002b36:	4b15      	ldr	r3, [pc, #84]	; (8002b8c <xTaskGetHandle+0xbc>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff ff59 	bl	80029f4 <prvSearchForNameWithinSingleList>
 8002b42:	6138      	str	r0, [r7, #16]
            }

            if( pxTCB == NULL )
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d106      	bne.n	8002b58 <xTaskGetHandle+0x88>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 8002b4a:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <xTaskGetHandle+0xc0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff ff4f 	bl	80029f4 <prvSearchForNameWithinSingleList>
 8002b56:	6138      	str	r0, [r7, #16]
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    if( pxTCB == NULL )
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d104      	bne.n	8002b68 <xTaskGetHandle+0x98>
                    {
                        /* Search the suspended list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	480c      	ldr	r0, [pc, #48]	; (8002b94 <xTaskGetHandle+0xc4>)
 8002b62:	f7ff ff47 	bl	80029f4 <prvSearchForNameWithinSingleList>
 8002b66:	6138      	str	r0, [r7, #16]
                }
            #endif

            #if ( INCLUDE_vTaskDelete == 1 )
                {
                    if( pxTCB == NULL )
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d104      	bne.n	8002b78 <xTaskGetHandle+0xa8>
                    {
                        /* Search the deleted list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4809      	ldr	r0, [pc, #36]	; (8002b98 <xTaskGetHandle+0xc8>)
 8002b72:	f7ff ff3f 	bl	80029f4 <prvSearchForNameWithinSingleList>
 8002b76:	6138      	str	r0, [r7, #16]
                    }
                }
            #endif
        }
        ( void ) xTaskResumeAll();
 8002b78:	f7ff fe8a 	bl	8002890 <xTaskResumeAll>

        return pxTCB;
 8002b7c:	693b      	ldr	r3, [r7, #16]
    }
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	2000008c 	.word	0x2000008c
 8002b8c:	20000118 	.word	0x20000118
 8002b90:	2000011c 	.word	0x2000011c
 8002b94:	2000014c 	.word	0x2000014c
 8002b98:	20000134 	.word	0x20000134

08002b9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ba6:	4b50      	ldr	r3, [pc, #320]	; (8002ce8 <xTaskIncrementTick+0x14c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f040 8092 	bne.w	8002cd4 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002bb0:	4b4e      	ldr	r3, [pc, #312]	; (8002cec <xTaskIncrementTick+0x150>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002bb8:	4a4c      	ldr	r2, [pc, #304]	; (8002cec <xTaskIncrementTick+0x150>)
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d120      	bne.n	8002c06 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002bc4:	4b4a      	ldr	r3, [pc, #296]	; (8002cf0 <xTaskIncrementTick+0x154>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00a      	beq.n	8002be4 <xTaskIncrementTick+0x48>
        __asm volatile
 8002bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd2:	f383 8811 	msr	BASEPRI, r3
 8002bd6:	f3bf 8f6f 	isb	sy
 8002bda:	f3bf 8f4f 	dsb	sy
 8002bde:	603b      	str	r3, [r7, #0]
    }
 8002be0:	bf00      	nop
 8002be2:	e7fe      	b.n	8002be2 <xTaskIncrementTick+0x46>
 8002be4:	4b42      	ldr	r3, [pc, #264]	; (8002cf0 <xTaskIncrementTick+0x154>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	4b42      	ldr	r3, [pc, #264]	; (8002cf4 <xTaskIncrementTick+0x158>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a40      	ldr	r2, [pc, #256]	; (8002cf0 <xTaskIncrementTick+0x154>)
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	4a40      	ldr	r2, [pc, #256]	; (8002cf4 <xTaskIncrementTick+0x158>)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	4b3f      	ldr	r3, [pc, #252]	; (8002cf8 <xTaskIncrementTick+0x15c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	4a3e      	ldr	r2, [pc, #248]	; (8002cf8 <xTaskIncrementTick+0x15c>)
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	f000 f987 	bl	8002f14 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002c06:	4b3d      	ldr	r3, [pc, #244]	; (8002cfc <xTaskIncrementTick+0x160>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d34c      	bcc.n	8002caa <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c10:	4b37      	ldr	r3, [pc, #220]	; (8002cf0 <xTaskIncrementTick+0x154>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d104      	bne.n	8002c24 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c1a:	4b38      	ldr	r3, [pc, #224]	; (8002cfc <xTaskIncrementTick+0x160>)
 8002c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c20:	601a      	str	r2, [r3, #0]
                    break;
 8002c22:	e042      	b.n	8002caa <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c24:	4b32      	ldr	r3, [pc, #200]	; (8002cf0 <xTaskIncrementTick+0x154>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d203      	bcs.n	8002c44 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002c3c:	4a2f      	ldr	r2, [pc, #188]	; (8002cfc <xTaskIncrementTick+0x160>)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002c42:	e032      	b.n	8002caa <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	3304      	adds	r3, #4
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff fb50 	bl	80022ee <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d004      	beq.n	8002c60 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	3318      	adds	r3, #24
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff fb47 	bl	80022ee <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f002 fca2 	bl	80055ac <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	4b23      	ldr	r3, [pc, #140]	; (8002d00 <xTaskIncrementTick+0x164>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	4a22      	ldr	r2, [pc, #136]	; (8002d00 <xTaskIncrementTick+0x164>)
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4a1f      	ldr	r2, [pc, #124]	; (8002d04 <xTaskIncrementTick+0x168>)
 8002c88:	441a      	add	r2, r3
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4610      	mov	r0, r2
 8002c92:	f7ff fb08 	bl	80022a6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c9a:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <xTaskIncrementTick+0x16c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d3b5      	bcc.n	8002c10 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ca8:	e7b2      	b.n	8002c10 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002caa:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <xTaskIncrementTick+0x16c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb0:	4914      	ldr	r1, [pc, #80]	; (8002d04 <xTaskIncrementTick+0x168>)
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d901      	bls.n	8002cc6 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002cc6:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <xTaskIncrementTick+0x170>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d007      	beq.n	8002cde <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	e004      	b.n	8002cde <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002cd4:	4b0e      	ldr	r3, [pc, #56]	; (8002d10 <xTaskIncrementTick+0x174>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	4a0d      	ldr	r2, [pc, #52]	; (8002d10 <xTaskIncrementTick+0x174>)
 8002cdc:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002cde:	697b      	ldr	r3, [r7, #20]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20000188 	.word	0x20000188
 8002cec:	20000164 	.word	0x20000164
 8002cf0:	20000118 	.word	0x20000118
 8002cf4:	2000011c 	.word	0x2000011c
 8002cf8:	20000178 	.word	0x20000178
 8002cfc:	20000180 	.word	0x20000180
 8002d00:	20000168 	.word	0x20000168
 8002d04:	2000008c 	.word	0x2000008c
 8002d08:	20000088 	.word	0x20000088
 8002d0c:	20000174 	.word	0x20000174
 8002d10:	20000170 	.word	0x20000170

08002d14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002d1a:	4b2d      	ldr	r3, [pc, #180]	; (8002dd0 <vTaskSwitchContext+0xbc>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002d22:	4b2c      	ldr	r3, [pc, #176]	; (8002dd4 <vTaskSwitchContext+0xc0>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002d28:	e04d      	b.n	8002dc6 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002d2a:	4b2a      	ldr	r3, [pc, #168]	; (8002dd4 <vTaskSwitchContext+0xc0>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d30:	4b29      	ldr	r3, [pc, #164]	; (8002dd8 <vTaskSwitchContext+0xc4>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	fab3 f383 	clz	r3, r3
 8002d3c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002d3e:	7afb      	ldrb	r3, [r7, #11]
 8002d40:	f1c3 031f 	rsb	r3, r3, #31
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	4925      	ldr	r1, [pc, #148]	; (8002ddc <vTaskSwitchContext+0xc8>)
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10a      	bne.n	8002d70 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5e:	f383 8811 	msr	BASEPRI, r3
 8002d62:	f3bf 8f6f 	isb	sy
 8002d66:	f3bf 8f4f 	dsb	sy
 8002d6a:	607b      	str	r3, [r7, #4]
    }
 8002d6c:	bf00      	nop
 8002d6e:	e7fe      	b.n	8002d6e <vTaskSwitchContext+0x5a>
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4a18      	ldr	r2, [pc, #96]	; (8002ddc <vTaskSwitchContext+0xc8>)
 8002d7c:	4413      	add	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	3308      	adds	r3, #8
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d104      	bne.n	8002da0 <vTaskSwitchContext+0x8c>
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	605a      	str	r2, [r3, #4]
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	4a0e      	ldr	r2, [pc, #56]	; (8002de0 <vTaskSwitchContext+0xcc>)
 8002da8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002daa:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <vTaskSwitchContext+0xcc>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <vTaskSwitchContext+0xd0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d102      	bne.n	8002dbc <vTaskSwitchContext+0xa8>
 8002db6:	f002 fb59 	bl	800546c <SEGGER_SYSVIEW_OnIdle>
}
 8002dba:	e004      	b.n	8002dc6 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002dbc:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <vTaskSwitchContext+0xcc>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f002 fbb1 	bl	8005528 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002dc6:	bf00      	nop
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20000188 	.word	0x20000188
 8002dd4:	20000174 	.word	0x20000174
 8002dd8:	20000168 	.word	0x20000168
 8002ddc:	2000008c 	.word	0x2000008c
 8002de0:	20000088 	.word	0x20000088
 8002de4:	20000184 	.word	0x20000184

08002de8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002df0:	f000 f852 	bl	8002e98 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002df4:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <prvIdleTask+0x28>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d9f9      	bls.n	8002df0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002dfc:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <prvIdleTask+0x2c>)
 8002dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002e0c:	e7f0      	b.n	8002df0 <prvIdleTask+0x8>
 8002e0e:	bf00      	nop
 8002e10:	2000008c 	.word	0x2000008c
 8002e14:	e000ed04 	.word	0xe000ed04

08002e18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e1e:	2300      	movs	r3, #0
 8002e20:	607b      	str	r3, [r7, #4]
 8002e22:	e00c      	b.n	8002e3e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4a12      	ldr	r2, [pc, #72]	; (8002e78 <prvInitialiseTaskLists+0x60>)
 8002e30:	4413      	add	r3, r2
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fa0a 	bl	800224c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	607b      	str	r3, [r7, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d9ef      	bls.n	8002e24 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002e44:	480d      	ldr	r0, [pc, #52]	; (8002e7c <prvInitialiseTaskLists+0x64>)
 8002e46:	f7ff fa01 	bl	800224c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002e4a:	480d      	ldr	r0, [pc, #52]	; (8002e80 <prvInitialiseTaskLists+0x68>)
 8002e4c:	f7ff f9fe 	bl	800224c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002e50:	480c      	ldr	r0, [pc, #48]	; (8002e84 <prvInitialiseTaskLists+0x6c>)
 8002e52:	f7ff f9fb 	bl	800224c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002e56:	480c      	ldr	r0, [pc, #48]	; (8002e88 <prvInitialiseTaskLists+0x70>)
 8002e58:	f7ff f9f8 	bl	800224c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002e5c:	480b      	ldr	r0, [pc, #44]	; (8002e8c <prvInitialiseTaskLists+0x74>)
 8002e5e:	f7ff f9f5 	bl	800224c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002e62:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <prvInitialiseTaskLists+0x78>)
 8002e64:	4a05      	ldr	r2, [pc, #20]	; (8002e7c <prvInitialiseTaskLists+0x64>)
 8002e66:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002e68:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <prvInitialiseTaskLists+0x7c>)
 8002e6a:	4a05      	ldr	r2, [pc, #20]	; (8002e80 <prvInitialiseTaskLists+0x68>)
 8002e6c:	601a      	str	r2, [r3, #0]
}
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	2000008c 	.word	0x2000008c
 8002e7c:	200000f0 	.word	0x200000f0
 8002e80:	20000104 	.word	0x20000104
 8002e84:	20000120 	.word	0x20000120
 8002e88:	20000134 	.word	0x20000134
 8002e8c:	2000014c 	.word	0x2000014c
 8002e90:	20000118 	.word	0x20000118
 8002e94:	2000011c 	.word	0x2000011c

08002e98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e9e:	e019      	b.n	8002ed4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002ea0:	f000 fa10 	bl	80032c4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ea4:	4b10      	ldr	r3, [pc, #64]	; (8002ee8 <prvCheckTasksWaitingTermination+0x50>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3304      	adds	r3, #4
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff fa1c 	bl	80022ee <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002eb6:	4b0d      	ldr	r3, [pc, #52]	; (8002eec <prvCheckTasksWaitingTermination+0x54>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	4a0b      	ldr	r2, [pc, #44]	; (8002eec <prvCheckTasksWaitingTermination+0x54>)
 8002ebe:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <prvCheckTasksWaitingTermination+0x58>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	4a0a      	ldr	r2, [pc, #40]	; (8002ef0 <prvCheckTasksWaitingTermination+0x58>)
 8002ec8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002eca:	f000 fa2b 	bl	8003324 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f810 	bl	8002ef4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ed4:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <prvCheckTasksWaitingTermination+0x58>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1e1      	bne.n	8002ea0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002edc:	bf00      	nop
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000134 	.word	0x20000134
 8002eec:	20000160 	.word	0x20000160
 8002ef0:	20000148 	.word	0x20000148

08002ef4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 fbeb 	bl	80036dc <vPortFree>
                vPortFree( pxTCB );
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 fbe8 	bl	80036dc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002f0c:	bf00      	nop
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f18:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <prvResetNextTaskUnblockTime+0x30>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d104      	bne.n	8002f2c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002f22:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <prvResetNextTaskUnblockTime+0x34>)
 8002f24:	f04f 32ff 	mov.w	r2, #4294967295
 8002f28:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002f2a:	e005      	b.n	8002f38 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f2c:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <prvResetNextTaskUnblockTime+0x30>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <prvResetNextTaskUnblockTime+0x34>)
 8002f36:	6013      	str	r3, [r2, #0]
}
 8002f38:	bf00      	nop
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	20000118 	.word	0x20000118
 8002f48:	20000180 	.word	0x20000180

08002f4c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8002f52:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <xTaskGetCurrentTaskHandle+0x1c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	607b      	str	r3, [r7, #4]

        return xReturn;
 8002f58:	687b      	ldr	r3, [r7, #4]
    }
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	20000088 	.word	0x20000088

08002f6c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	3b04      	subs	r3, #4
 8002f7c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f84:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	3b04      	subs	r3, #4
 8002f8a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	f023 0201 	bic.w	r2, r3, #1
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	3b04      	subs	r3, #4
 8002f9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002f9c:	4a0c      	ldr	r2, [pc, #48]	; (8002fd0 <pxPortInitialiseStack+0x64>)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	3b14      	subs	r3, #20
 8002fa6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	3b04      	subs	r3, #4
 8002fb2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f06f 0202 	mvn.w	r2, #2
 8002fba:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	3b20      	subs	r3, #32
 8002fc0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	08002fd5 	.word	0x08002fd5

08002fd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002fde:	4b12      	ldr	r3, [pc, #72]	; (8003028 <prvTaskExitError+0x54>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe6:	d00a      	beq.n	8002ffe <prvTaskExitError+0x2a>
        __asm volatile
 8002fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fec:	f383 8811 	msr	BASEPRI, r3
 8002ff0:	f3bf 8f6f 	isb	sy
 8002ff4:	f3bf 8f4f 	dsb	sy
 8002ff8:	60fb      	str	r3, [r7, #12]
    }
 8002ffa:	bf00      	nop
 8002ffc:	e7fe      	b.n	8002ffc <prvTaskExitError+0x28>
        __asm volatile
 8002ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003002:	f383 8811 	msr	BASEPRI, r3
 8003006:	f3bf 8f6f 	isb	sy
 800300a:	f3bf 8f4f 	dsb	sy
 800300e:	60bb      	str	r3, [r7, #8]
    }
 8003010:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003012:	bf00      	nop
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0fc      	beq.n	8003014 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800301a:	bf00      	nop
 800301c:	bf00      	nop
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	20000010 	.word	0x20000010
 800302c:	00000000 	.word	0x00000000

08003030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003030:	4b07      	ldr	r3, [pc, #28]	; (8003050 <pxCurrentTCBConst2>)
 8003032:	6819      	ldr	r1, [r3, #0]
 8003034:	6808      	ldr	r0, [r1, #0]
 8003036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800303a:	f380 8809 	msr	PSP, r0
 800303e:	f3bf 8f6f 	isb	sy
 8003042:	f04f 0000 	mov.w	r0, #0
 8003046:	f380 8811 	msr	BASEPRI, r0
 800304a:	4770      	bx	lr
 800304c:	f3af 8000 	nop.w

08003050 <pxCurrentTCBConst2>:
 8003050:	20000088 	.word	0x20000088
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003054:	bf00      	nop
 8003056:	bf00      	nop

08003058 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003058:	4808      	ldr	r0, [pc, #32]	; (800307c <prvPortStartFirstTask+0x24>)
 800305a:	6800      	ldr	r0, [r0, #0]
 800305c:	6800      	ldr	r0, [r0, #0]
 800305e:	f380 8808 	msr	MSP, r0
 8003062:	f04f 0000 	mov.w	r0, #0
 8003066:	f380 8814 	msr	CONTROL, r0
 800306a:	b662      	cpsie	i
 800306c:	b661      	cpsie	f
 800306e:	f3bf 8f4f 	dsb	sy
 8003072:	f3bf 8f6f 	isb	sy
 8003076:	df00      	svc	0
 8003078:	bf00      	nop
 800307a:	0000      	.short	0x0000
 800307c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003080:	bf00      	nop
 8003082:	bf00      	nop

08003084 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800308a:	4b46      	ldr	r3, [pc, #280]	; (80031a4 <xPortStartScheduler+0x120>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a46      	ldr	r2, [pc, #280]	; (80031a8 <xPortStartScheduler+0x124>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d10a      	bne.n	80030aa <xPortStartScheduler+0x26>
        __asm volatile
 8003094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003098:	f383 8811 	msr	BASEPRI, r3
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	613b      	str	r3, [r7, #16]
    }
 80030a6:	bf00      	nop
 80030a8:	e7fe      	b.n	80030a8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80030aa:	4b3e      	ldr	r3, [pc, #248]	; (80031a4 <xPortStartScheduler+0x120>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a3f      	ldr	r2, [pc, #252]	; (80031ac <xPortStartScheduler+0x128>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d10a      	bne.n	80030ca <xPortStartScheduler+0x46>
        __asm volatile
 80030b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b8:	f383 8811 	msr	BASEPRI, r3
 80030bc:	f3bf 8f6f 	isb	sy
 80030c0:	f3bf 8f4f 	dsb	sy
 80030c4:	60fb      	str	r3, [r7, #12]
    }
 80030c6:	bf00      	nop
 80030c8:	e7fe      	b.n	80030c8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80030ca:	4b39      	ldr	r3, [pc, #228]	; (80031b0 <xPortStartScheduler+0x12c>)
 80030cc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	22ff      	movs	r2, #255	; 0xff
 80030da:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80030e4:	78fb      	ldrb	r3, [r7, #3]
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	4b31      	ldr	r3, [pc, #196]	; (80031b4 <xPortStartScheduler+0x130>)
 80030f0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80030f2:	4b31      	ldr	r3, [pc, #196]	; (80031b8 <xPortStartScheduler+0x134>)
 80030f4:	2207      	movs	r2, #7
 80030f6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80030f8:	e009      	b.n	800310e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80030fa:	4b2f      	ldr	r3, [pc, #188]	; (80031b8 <xPortStartScheduler+0x134>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	3b01      	subs	r3, #1
 8003100:	4a2d      	ldr	r2, [pc, #180]	; (80031b8 <xPortStartScheduler+0x134>)
 8003102:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003104:	78fb      	ldrb	r3, [r7, #3]
 8003106:	b2db      	uxtb	r3, r3
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	b2db      	uxtb	r3, r3
 800310c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800310e:	78fb      	ldrb	r3, [r7, #3]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003116:	2b80      	cmp	r3, #128	; 0x80
 8003118:	d0ef      	beq.n	80030fa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800311a:	4b27      	ldr	r3, [pc, #156]	; (80031b8 <xPortStartScheduler+0x134>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f1c3 0307 	rsb	r3, r3, #7
 8003122:	2b04      	cmp	r3, #4
 8003124:	d00a      	beq.n	800313c <xPortStartScheduler+0xb8>
        __asm volatile
 8003126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800312a:	f383 8811 	msr	BASEPRI, r3
 800312e:	f3bf 8f6f 	isb	sy
 8003132:	f3bf 8f4f 	dsb	sy
 8003136:	60bb      	str	r3, [r7, #8]
    }
 8003138:	bf00      	nop
 800313a:	e7fe      	b.n	800313a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800313c:	4b1e      	ldr	r3, [pc, #120]	; (80031b8 <xPortStartScheduler+0x134>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	021b      	lsls	r3, r3, #8
 8003142:	4a1d      	ldr	r2, [pc, #116]	; (80031b8 <xPortStartScheduler+0x134>)
 8003144:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003146:	4b1c      	ldr	r3, [pc, #112]	; (80031b8 <xPortStartScheduler+0x134>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800314e:	4a1a      	ldr	r2, [pc, #104]	; (80031b8 <xPortStartScheduler+0x134>)
 8003150:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	b2da      	uxtb	r2, r3
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800315a:	4b18      	ldr	r3, [pc, #96]	; (80031bc <xPortStartScheduler+0x138>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a17      	ldr	r2, [pc, #92]	; (80031bc <xPortStartScheduler+0x138>)
 8003160:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003164:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003166:	4b15      	ldr	r3, [pc, #84]	; (80031bc <xPortStartScheduler+0x138>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a14      	ldr	r2, [pc, #80]	; (80031bc <xPortStartScheduler+0x138>)
 800316c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003170:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003172:	f000 f963 	bl	800343c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003176:	4b12      	ldr	r3, [pc, #72]	; (80031c0 <xPortStartScheduler+0x13c>)
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800317c:	f000 f982 	bl	8003484 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003180:	4b10      	ldr	r3, [pc, #64]	; (80031c4 <xPortStartScheduler+0x140>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a0f      	ldr	r2, [pc, #60]	; (80031c4 <xPortStartScheduler+0x140>)
 8003186:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800318a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800318c:	f7ff ff64 	bl	8003058 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003190:	f7ff fdc0 	bl	8002d14 <vTaskSwitchContext>
    prvTaskExitError();
 8003194:	f7ff ff1e 	bl	8002fd4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	e000ed00 	.word	0xe000ed00
 80031a8:	410fc271 	.word	0x410fc271
 80031ac:	410fc270 	.word	0x410fc270
 80031b0:	e000e400 	.word	0xe000e400
 80031b4:	2000018c 	.word	0x2000018c
 80031b8:	20000190 	.word	0x20000190
 80031bc:	e000ed20 	.word	0xe000ed20
 80031c0:	20000010 	.word	0x20000010
 80031c4:	e000ef34 	.word	0xe000ef34

080031c8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80031ce:	4b37      	ldr	r3, [pc, #220]	; (80032ac <vInitPrioGroupValue+0xe4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a37      	ldr	r2, [pc, #220]	; (80032b0 <vInitPrioGroupValue+0xe8>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d10a      	bne.n	80031ee <vInitPrioGroupValue+0x26>
        __asm volatile
 80031d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031dc:	f383 8811 	msr	BASEPRI, r3
 80031e0:	f3bf 8f6f 	isb	sy
 80031e4:	f3bf 8f4f 	dsb	sy
 80031e8:	613b      	str	r3, [r7, #16]
    }
 80031ea:	bf00      	nop
 80031ec:	e7fe      	b.n	80031ec <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80031ee:	4b2f      	ldr	r3, [pc, #188]	; (80032ac <vInitPrioGroupValue+0xe4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a30      	ldr	r2, [pc, #192]	; (80032b4 <vInitPrioGroupValue+0xec>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d10a      	bne.n	800320e <vInitPrioGroupValue+0x46>
        __asm volatile
 80031f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fc:	f383 8811 	msr	BASEPRI, r3
 8003200:	f3bf 8f6f 	isb	sy
 8003204:	f3bf 8f4f 	dsb	sy
 8003208:	60fb      	str	r3, [r7, #12]
    }
 800320a:	bf00      	nop
 800320c:	e7fe      	b.n	800320c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800320e:	4b2a      	ldr	r3, [pc, #168]	; (80032b8 <vInitPrioGroupValue+0xf0>)
 8003210:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	b2db      	uxtb	r3, r3
 8003218:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	22ff      	movs	r2, #255	; 0xff
 800321e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	b2db      	uxtb	r3, r3
 800322c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003230:	b2da      	uxtb	r2, r3
 8003232:	4b22      	ldr	r3, [pc, #136]	; (80032bc <vInitPrioGroupValue+0xf4>)
 8003234:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003236:	4b22      	ldr	r3, [pc, #136]	; (80032c0 <vInitPrioGroupValue+0xf8>)
 8003238:	2207      	movs	r2, #7
 800323a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800323c:	e009      	b.n	8003252 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800323e:	4b20      	ldr	r3, [pc, #128]	; (80032c0 <vInitPrioGroupValue+0xf8>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	3b01      	subs	r3, #1
 8003244:	4a1e      	ldr	r2, [pc, #120]	; (80032c0 <vInitPrioGroupValue+0xf8>)
 8003246:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	b2db      	uxtb	r3, r3
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	b2db      	uxtb	r3, r3
 8003250:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003252:	78fb      	ldrb	r3, [r7, #3]
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800325a:	2b80      	cmp	r3, #128	; 0x80
 800325c:	d0ef      	beq.n	800323e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800325e:	4b18      	ldr	r3, [pc, #96]	; (80032c0 <vInitPrioGroupValue+0xf8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f1c3 0307 	rsb	r3, r3, #7
 8003266:	2b04      	cmp	r3, #4
 8003268:	d00a      	beq.n	8003280 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800326a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326e:	f383 8811 	msr	BASEPRI, r3
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	60bb      	str	r3, [r7, #8]
    }
 800327c:	bf00      	nop
 800327e:	e7fe      	b.n	800327e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003280:	4b0f      	ldr	r3, [pc, #60]	; (80032c0 <vInitPrioGroupValue+0xf8>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	021b      	lsls	r3, r3, #8
 8003286:	4a0e      	ldr	r2, [pc, #56]	; (80032c0 <vInitPrioGroupValue+0xf8>)
 8003288:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800328a:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <vInitPrioGroupValue+0xf8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003292:	4a0b      	ldr	r2, [pc, #44]	; (80032c0 <vInitPrioGroupValue+0xf8>)
 8003294:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	b2da      	uxtb	r2, r3
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800329e:	bf00      	nop
 80032a0:	371c      	adds	r7, #28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	e000ed00 	.word	0xe000ed00
 80032b0:	410fc271 	.word	0x410fc271
 80032b4:	410fc270 	.word	0x410fc270
 80032b8:	e000e400 	.word	0xe000e400
 80032bc:	2000018c 	.word	0x2000018c
 80032c0:	20000190 	.word	0x20000190

080032c4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
        __asm volatile
 80032ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ce:	f383 8811 	msr	BASEPRI, r3
 80032d2:	f3bf 8f6f 	isb	sy
 80032d6:	f3bf 8f4f 	dsb	sy
 80032da:	607b      	str	r3, [r7, #4]
    }
 80032dc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80032de:	4b0f      	ldr	r3, [pc, #60]	; (800331c <vPortEnterCritical+0x58>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	3301      	adds	r3, #1
 80032e4:	4a0d      	ldr	r2, [pc, #52]	; (800331c <vPortEnterCritical+0x58>)
 80032e6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80032e8:	4b0c      	ldr	r3, [pc, #48]	; (800331c <vPortEnterCritical+0x58>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d10f      	bne.n	8003310 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <vPortEnterCritical+0x5c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <vPortEnterCritical+0x4c>
        __asm volatile
 80032fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fe:	f383 8811 	msr	BASEPRI, r3
 8003302:	f3bf 8f6f 	isb	sy
 8003306:	f3bf 8f4f 	dsb	sy
 800330a:	603b      	str	r3, [r7, #0]
    }
 800330c:	bf00      	nop
 800330e:	e7fe      	b.n	800330e <vPortEnterCritical+0x4a>
    }
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	20000010 	.word	0x20000010
 8003320:	e000ed04 	.word	0xe000ed04

08003324 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800332a:	4b12      	ldr	r3, [pc, #72]	; (8003374 <vPortExitCritical+0x50>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10a      	bne.n	8003348 <vPortExitCritical+0x24>
        __asm volatile
 8003332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003336:	f383 8811 	msr	BASEPRI, r3
 800333a:	f3bf 8f6f 	isb	sy
 800333e:	f3bf 8f4f 	dsb	sy
 8003342:	607b      	str	r3, [r7, #4]
    }
 8003344:	bf00      	nop
 8003346:	e7fe      	b.n	8003346 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003348:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <vPortExitCritical+0x50>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	3b01      	subs	r3, #1
 800334e:	4a09      	ldr	r2, [pc, #36]	; (8003374 <vPortExitCritical+0x50>)
 8003350:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003352:	4b08      	ldr	r3, [pc, #32]	; (8003374 <vPortExitCritical+0x50>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d105      	bne.n	8003366 <vPortExitCritical+0x42>
 800335a:	2300      	movs	r3, #0
 800335c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003364:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	20000010 	.word	0x20000010
	...

08003380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003380:	f3ef 8009 	mrs	r0, PSP
 8003384:	f3bf 8f6f 	isb	sy
 8003388:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <pxCurrentTCBConst>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	f01e 0f10 	tst.w	lr, #16
 8003390:	bf08      	it	eq
 8003392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800339a:	6010      	str	r0, [r2, #0]
 800339c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80033a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80033a4:	f380 8811 	msr	BASEPRI, r0
 80033a8:	f3bf 8f4f 	dsb	sy
 80033ac:	f3bf 8f6f 	isb	sy
 80033b0:	f7ff fcb0 	bl	8002d14 <vTaskSwitchContext>
 80033b4:	f04f 0000 	mov.w	r0, #0
 80033b8:	f380 8811 	msr	BASEPRI, r0
 80033bc:	bc09      	pop	{r0, r3}
 80033be:	6819      	ldr	r1, [r3, #0]
 80033c0:	6808      	ldr	r0, [r1, #0]
 80033c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033c6:	f01e 0f10 	tst.w	lr, #16
 80033ca:	bf08      	it	eq
 80033cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80033d0:	f380 8809 	msr	PSP, r0
 80033d4:	f3bf 8f6f 	isb	sy
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	f3af 8000 	nop.w

080033e0 <pxCurrentTCBConst>:
 80033e0:	20000088 	.word	0x20000088
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80033e4:	bf00      	nop
 80033e6:	bf00      	nop

080033e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
        __asm volatile
 80033ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f2:	f383 8811 	msr	BASEPRI, r3
 80033f6:	f3bf 8f6f 	isb	sy
 80033fa:	f3bf 8f4f 	dsb	sy
 80033fe:	607b      	str	r3, [r7, #4]
    }
 8003400:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003402:	f001 ffb9 	bl	8005378 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003406:	f7ff fbc9 	bl	8002b9c <xTaskIncrementTick>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d006      	beq.n	800341e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003410:	f002 f810 	bl	8005434 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003414:	4b08      	ldr	r3, [pc, #32]	; (8003438 <SysTick_Handler+0x50>)
 8003416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	e001      	b.n	8003422 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800341e:	f001 ffed 	bl	80053fc <SEGGER_SYSVIEW_RecordExitISR>
 8003422:	2300      	movs	r3, #0
 8003424:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	f383 8811 	msr	BASEPRI, r3
    }
 800342c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	e000ed04 	.word	0xe000ed04

0800343c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003440:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <vPortSetupTimerInterrupt+0x34>)
 8003442:	2200      	movs	r2, #0
 8003444:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003446:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <vPortSetupTimerInterrupt+0x38>)
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800344c:	4b0a      	ldr	r3, [pc, #40]	; (8003478 <vPortSetupTimerInterrupt+0x3c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a0a      	ldr	r2, [pc, #40]	; (800347c <vPortSetupTimerInterrupt+0x40>)
 8003452:	fba2 2303 	umull	r2, r3, r2, r3
 8003456:	099b      	lsrs	r3, r3, #6
 8003458:	4a09      	ldr	r2, [pc, #36]	; (8003480 <vPortSetupTimerInterrupt+0x44>)
 800345a:	3b01      	subs	r3, #1
 800345c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800345e:	4b04      	ldr	r3, [pc, #16]	; (8003470 <vPortSetupTimerInterrupt+0x34>)
 8003460:	2207      	movs	r2, #7
 8003462:	601a      	str	r2, [r3, #0]
}
 8003464:	bf00      	nop
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	e000e010 	.word	0xe000e010
 8003474:	e000e018 	.word	0xe000e018
 8003478:	20000000 	.word	0x20000000
 800347c:	10624dd3 	.word	0x10624dd3
 8003480:	e000e014 	.word	0xe000e014

08003484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003484:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003494 <vPortEnableVFP+0x10>
 8003488:	6801      	ldr	r1, [r0, #0]
 800348a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800348e:	6001      	str	r1, [r0, #0]
 8003490:	4770      	bx	lr
 8003492:	0000      	.short	0x0000
 8003494:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003498:	bf00      	nop
 800349a:	bf00      	nop

0800349c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80034a2:	f3ef 8305 	mrs	r3, IPSR
 80034a6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2b0f      	cmp	r3, #15
 80034ac:	d914      	bls.n	80034d8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80034ae:	4a17      	ldr	r2, [pc, #92]	; (800350c <vPortValidateInterruptPriority+0x70>)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4413      	add	r3, r2
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80034b8:	4b15      	ldr	r3, [pc, #84]	; (8003510 <vPortValidateInterruptPriority+0x74>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	7afa      	ldrb	r2, [r7, #11]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d20a      	bcs.n	80034d8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80034c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c6:	f383 8811 	msr	BASEPRI, r3
 80034ca:	f3bf 8f6f 	isb	sy
 80034ce:	f3bf 8f4f 	dsb	sy
 80034d2:	607b      	str	r3, [r7, #4]
    }
 80034d4:	bf00      	nop
 80034d6:	e7fe      	b.n	80034d6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80034d8:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <vPortValidateInterruptPriority+0x78>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80034e0:	4b0d      	ldr	r3, [pc, #52]	; (8003518 <vPortValidateInterruptPriority+0x7c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d90a      	bls.n	80034fe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80034e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ec:	f383 8811 	msr	BASEPRI, r3
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	f3bf 8f4f 	dsb	sy
 80034f8:	603b      	str	r3, [r7, #0]
    }
 80034fa:	bf00      	nop
 80034fc:	e7fe      	b.n	80034fc <vPortValidateInterruptPriority+0x60>
    }
 80034fe:	bf00      	nop
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	e000e3f0 	.word	0xe000e3f0
 8003510:	2000018c 	.word	0x2000018c
 8003514:	e000ed0c 	.word	0xe000ed0c
 8003518:	20000190 	.word	0x20000190

0800351c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08a      	sub	sp, #40	; 0x28
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003524:	2300      	movs	r3, #0
 8003526:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003528:	f7ff f9a4 	bl	8002874 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800352c:	4b65      	ldr	r3, [pc, #404]	; (80036c4 <pvPortMalloc+0x1a8>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003534:	f000 f934 	bl	80037a0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003538:	4b63      	ldr	r3, [pc, #396]	; (80036c8 <pvPortMalloc+0x1ac>)
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4013      	ands	r3, r2
 8003540:	2b00      	cmp	r3, #0
 8003542:	f040 80a7 	bne.w	8003694 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d02d      	beq.n	80035a8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800354c:	2208      	movs	r2, #8
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	429a      	cmp	r2, r3
 8003556:	d227      	bcs.n	80035a8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003558:	2208      	movs	r2, #8
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4413      	add	r3, r2
 800355e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	2b00      	cmp	r3, #0
 8003568:	d021      	beq.n	80035ae <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f023 0307 	bic.w	r3, r3, #7
 8003570:	3308      	adds	r3, #8
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	429a      	cmp	r2, r3
 8003576:	d214      	bcs.n	80035a2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f023 0307 	bic.w	r3, r3, #7
 800357e:	3308      	adds	r3, #8
 8003580:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	2b00      	cmp	r3, #0
 800358a:	d010      	beq.n	80035ae <pvPortMalloc+0x92>
        __asm volatile
 800358c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003590:	f383 8811 	msr	BASEPRI, r3
 8003594:	f3bf 8f6f 	isb	sy
 8003598:	f3bf 8f4f 	dsb	sy
 800359c:	617b      	str	r3, [r7, #20]
    }
 800359e:	bf00      	nop
 80035a0:	e7fe      	b.n	80035a0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80035a2:	2300      	movs	r3, #0
 80035a4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80035a6:	e002      	b.n	80035ae <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	607b      	str	r3, [r7, #4]
 80035ac:	e000      	b.n	80035b0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80035ae:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d06e      	beq.n	8003694 <pvPortMalloc+0x178>
 80035b6:	4b45      	ldr	r3, [pc, #276]	; (80036cc <pvPortMalloc+0x1b0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d869      	bhi.n	8003694 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80035c0:	4b43      	ldr	r3, [pc, #268]	; (80036d0 <pvPortMalloc+0x1b4>)
 80035c2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80035c4:	4b42      	ldr	r3, [pc, #264]	; (80036d0 <pvPortMalloc+0x1b4>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80035ca:	e004      	b.n	80035d6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d903      	bls.n	80035e8 <pvPortMalloc+0xcc>
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1f1      	bne.n	80035cc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80035e8:	4b36      	ldr	r3, [pc, #216]	; (80036c4 <pvPortMalloc+0x1a8>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d050      	beq.n	8003694 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2208      	movs	r2, #8
 80035f8:	4413      	add	r3, r2
 80035fa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	1ad2      	subs	r2, r2, r3
 800360c:	2308      	movs	r3, #8
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	429a      	cmp	r2, r3
 8003612:	d91f      	bls.n	8003654 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4413      	add	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00a      	beq.n	800363c <pvPortMalloc+0x120>
        __asm volatile
 8003626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362a:	f383 8811 	msr	BASEPRI, r3
 800362e:	f3bf 8f6f 	isb	sy
 8003632:	f3bf 8f4f 	dsb	sy
 8003636:	613b      	str	r3, [r7, #16]
    }
 8003638:	bf00      	nop
 800363a:	e7fe      	b.n	800363a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	1ad2      	subs	r2, r2, r3
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800364e:	69b8      	ldr	r0, [r7, #24]
 8003650:	f000 f908 	bl	8003864 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003654:	4b1d      	ldr	r3, [pc, #116]	; (80036cc <pvPortMalloc+0x1b0>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	4a1b      	ldr	r2, [pc, #108]	; (80036cc <pvPortMalloc+0x1b0>)
 8003660:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003662:	4b1a      	ldr	r3, [pc, #104]	; (80036cc <pvPortMalloc+0x1b0>)
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	4b1b      	ldr	r3, [pc, #108]	; (80036d4 <pvPortMalloc+0x1b8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d203      	bcs.n	8003676 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800366e:	4b17      	ldr	r3, [pc, #92]	; (80036cc <pvPortMalloc+0x1b0>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a18      	ldr	r2, [pc, #96]	; (80036d4 <pvPortMalloc+0x1b8>)
 8003674:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	4b13      	ldr	r3, [pc, #76]	; (80036c8 <pvPortMalloc+0x1ac>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	431a      	orrs	r2, r3
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800368a:	4b13      	ldr	r3, [pc, #76]	; (80036d8 <pvPortMalloc+0x1bc>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	3301      	adds	r3, #1
 8003690:	4a11      	ldr	r2, [pc, #68]	; (80036d8 <pvPortMalloc+0x1bc>)
 8003692:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003694:	f7ff f8fc 	bl	8002890 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <pvPortMalloc+0x19c>
        __asm volatile
 80036a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a6:	f383 8811 	msr	BASEPRI, r3
 80036aa:	f3bf 8f6f 	isb	sy
 80036ae:	f3bf 8f4f 	dsb	sy
 80036b2:	60fb      	str	r3, [r7, #12]
    }
 80036b4:	bf00      	nop
 80036b6:	e7fe      	b.n	80036b6 <pvPortMalloc+0x19a>
    return pvReturn;
 80036b8:	69fb      	ldr	r3, [r7, #28]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3728      	adds	r7, #40	; 0x28
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20012d9c 	.word	0x20012d9c
 80036c8:	20012db0 	.word	0x20012db0
 80036cc:	20012da0 	.word	0x20012da0
 80036d0:	20012d94 	.word	0x20012d94
 80036d4:	20012da4 	.word	0x20012da4
 80036d8:	20012da8 	.word	0x20012da8

080036dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d04d      	beq.n	800378a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80036ee:	2308      	movs	r3, #8
 80036f0:	425b      	negs	r3, r3
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	4413      	add	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	4b24      	ldr	r3, [pc, #144]	; (8003794 <vPortFree+0xb8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4013      	ands	r3, r2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10a      	bne.n	8003720 <vPortFree+0x44>
        __asm volatile
 800370a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370e:	f383 8811 	msr	BASEPRI, r3
 8003712:	f3bf 8f6f 	isb	sy
 8003716:	f3bf 8f4f 	dsb	sy
 800371a:	60fb      	str	r3, [r7, #12]
    }
 800371c:	bf00      	nop
 800371e:	e7fe      	b.n	800371e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00a      	beq.n	800373e <vPortFree+0x62>
        __asm volatile
 8003728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	f3bf 8f6f 	isb	sy
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	60bb      	str	r3, [r7, #8]
    }
 800373a:	bf00      	nop
 800373c:	e7fe      	b.n	800373c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	4b14      	ldr	r3, [pc, #80]	; (8003794 <vPortFree+0xb8>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4013      	ands	r3, r2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d01e      	beq.n	800378a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d11a      	bne.n	800378a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	4b0e      	ldr	r3, [pc, #56]	; (8003794 <vPortFree+0xb8>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	43db      	mvns	r3, r3
 800375e:	401a      	ands	r2, r3
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003764:	f7ff f886 	bl	8002874 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	4b0a      	ldr	r3, [pc, #40]	; (8003798 <vPortFree+0xbc>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4413      	add	r3, r2
 8003772:	4a09      	ldr	r2, [pc, #36]	; (8003798 <vPortFree+0xbc>)
 8003774:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003776:	6938      	ldr	r0, [r7, #16]
 8003778:	f000 f874 	bl	8003864 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800377c:	4b07      	ldr	r3, [pc, #28]	; (800379c <vPortFree+0xc0>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	3301      	adds	r3, #1
 8003782:	4a06      	ldr	r2, [pc, #24]	; (800379c <vPortFree+0xc0>)
 8003784:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003786:	f7ff f883 	bl	8002890 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800378a:	bf00      	nop
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	20012db0 	.word	0x20012db0
 8003798:	20012da0 	.word	0x20012da0
 800379c:	20012dac 	.word	0x20012dac

080037a0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80037a6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80037aa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80037ac:	4b27      	ldr	r3, [pc, #156]	; (800384c <prvHeapInit+0xac>)
 80037ae:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00c      	beq.n	80037d4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	3307      	adds	r3, #7
 80037be:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0307 	bic.w	r3, r3, #7
 80037c6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	4a1f      	ldr	r2, [pc, #124]	; (800384c <prvHeapInit+0xac>)
 80037d0:	4413      	add	r3, r2
 80037d2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80037d8:	4a1d      	ldr	r2, [pc, #116]	; (8003850 <prvHeapInit+0xb0>)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80037de:	4b1c      	ldr	r3, [pc, #112]	; (8003850 <prvHeapInit+0xb0>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	4413      	add	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80037ec:	2208      	movs	r2, #8
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	1a9b      	subs	r3, r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 0307 	bic.w	r3, r3, #7
 80037fa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4a15      	ldr	r2, [pc, #84]	; (8003854 <prvHeapInit+0xb4>)
 8003800:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003802:	4b14      	ldr	r3, [pc, #80]	; (8003854 <prvHeapInit+0xb4>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2200      	movs	r2, #0
 8003808:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800380a:	4b12      	ldr	r3, [pc, #72]	; (8003854 <prvHeapInit+0xb4>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	1ad2      	subs	r2, r2, r3
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003820:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <prvHeapInit+0xb4>)
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	4a0a      	ldr	r2, [pc, #40]	; (8003858 <prvHeapInit+0xb8>)
 800382e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	4a09      	ldr	r2, [pc, #36]	; (800385c <prvHeapInit+0xbc>)
 8003836:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003838:	4b09      	ldr	r3, [pc, #36]	; (8003860 <prvHeapInit+0xc0>)
 800383a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800383e:	601a      	str	r2, [r3, #0]
}
 8003840:	bf00      	nop
 8003842:	3714      	adds	r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	20000194 	.word	0x20000194
 8003850:	20012d94 	.word	0x20012d94
 8003854:	20012d9c 	.word	0x20012d9c
 8003858:	20012da4 	.word	0x20012da4
 800385c:	20012da0 	.word	0x20012da0
 8003860:	20012db0 	.word	0x20012db0

08003864 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800386c:	4b28      	ldr	r3, [pc, #160]	; (8003910 <prvInsertBlockIntoFreeList+0xac>)
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	e002      	b.n	8003878 <prvInsertBlockIntoFreeList+0x14>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	429a      	cmp	r2, r3
 8003880:	d8f7      	bhi.n	8003872 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	4413      	add	r3, r2
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	429a      	cmp	r2, r3
 8003892:	d108      	bne.n	80038a6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	441a      	add	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	441a      	add	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d118      	bne.n	80038ec <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	4b15      	ldr	r3, [pc, #84]	; (8003914 <prvInsertBlockIntoFreeList+0xb0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d00d      	beq.n	80038e2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	441a      	add	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	e008      	b.n	80038f4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80038e2:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <prvInsertBlockIntoFreeList+0xb0>)
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	e003      	b.n	80038f4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d002      	beq.n	8003902 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003902:	bf00      	nop
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	20012d94 	.word	0x20012d94
 8003914:	20012d9c 	.word	0x20012d9c

08003918 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800391c:	4803      	ldr	r0, [pc, #12]	; (800392c <_cbSendSystemDesc+0x14>)
 800391e:	f001 fcd5 	bl	80052cc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003922:	4803      	ldr	r0, [pc, #12]	; (8003930 <_cbSendSystemDesc+0x18>)
 8003924:	f001 fcd2 	bl	80052cc <SEGGER_SYSVIEW_SendSysDesc>
}
 8003928:	bf00      	nop
 800392a:	bd80      	pop	{r7, pc}
 800392c:	080059e0 	.word	0x080059e0
 8003930:	08005a24 	.word	0x08005a24

08003934 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003938:	4b06      	ldr	r3, [pc, #24]	; (8003954 <SEGGER_SYSVIEW_Conf+0x20>)
 800393a:	6818      	ldr	r0, [r3, #0]
 800393c:	4b05      	ldr	r3, [pc, #20]	; (8003954 <SEGGER_SYSVIEW_Conf+0x20>)
 800393e:	6819      	ldr	r1, [r3, #0]
 8003940:	4b05      	ldr	r3, [pc, #20]	; (8003958 <SEGGER_SYSVIEW_Conf+0x24>)
 8003942:	4a06      	ldr	r2, [pc, #24]	; (800395c <SEGGER_SYSVIEW_Conf+0x28>)
 8003944:	f001 f946 	bl	8004bd4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003948:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800394c:	f001 f986 	bl	8004c5c <SEGGER_SYSVIEW_SetRAMBase>
}
 8003950:	bf00      	nop
 8003952:	bd80      	pop	{r7, pc}
 8003954:	20000000 	.word	0x20000000
 8003958:	08003919 	.word	0x08003919
 800395c:	08005ab8 	.word	0x08005ab8

08003960 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003962:	b085      	sub	sp, #20
 8003964:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003966:	2300      	movs	r3, #0
 8003968:	607b      	str	r3, [r7, #4]
 800396a:	e033      	b.n	80039d4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800396c:	491e      	ldr	r1, [pc, #120]	; (80039e8 <_cbSendTaskList+0x88>)
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	6818      	ldr	r0, [r3, #0]
 800397c:	491a      	ldr	r1, [pc, #104]	; (80039e8 <_cbSendTaskList+0x88>)
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	4613      	mov	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	3304      	adds	r3, #4
 800398c:	6819      	ldr	r1, [r3, #0]
 800398e:	4c16      	ldr	r4, [pc, #88]	; (80039e8 <_cbSendTaskList+0x88>)
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	4613      	mov	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4423      	add	r3, r4
 800399c:	3308      	adds	r3, #8
 800399e:	681c      	ldr	r4, [r3, #0]
 80039a0:	4d11      	ldr	r5, [pc, #68]	; (80039e8 <_cbSendTaskList+0x88>)
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	442b      	add	r3, r5
 80039ae:	330c      	adds	r3, #12
 80039b0:	681d      	ldr	r5, [r3, #0]
 80039b2:	4e0d      	ldr	r6, [pc, #52]	; (80039e8 <_cbSendTaskList+0x88>)
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4433      	add	r3, r6
 80039c0:	3310      	adds	r3, #16
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	462b      	mov	r3, r5
 80039c8:	4622      	mov	r2, r4
 80039ca:	f000 f92d 	bl	8003c28 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	3301      	adds	r3, #1
 80039d2:	607b      	str	r3, [r7, #4]
 80039d4:	4b05      	ldr	r3, [pc, #20]	; (80039ec <_cbSendTaskList+0x8c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d3c6      	bcc.n	800396c <_cbSendTaskList+0xc>
  }
}
 80039de:	bf00      	nop
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039e8:	20012db4 	.word	0x20012db4
 80039ec:	20012e54 	.word	0x20012e54

080039f0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80039f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039f4:	b082      	sub	sp, #8
 80039f6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80039f8:	f7fe ffea 	bl	80029d0 <xTaskGetTickCountFromISR>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2200      	movs	r2, #0
 8003a00:	469a      	mov	sl, r3
 8003a02:	4693      	mov	fp, r2
 8003a04:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003a08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	f04f 0a00 	mov.w	sl, #0
 8003a14:	f04f 0b00 	mov.w	fp, #0
 8003a18:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003a1c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003a20:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003a24:	4652      	mov	r2, sl
 8003a26:	465b      	mov	r3, fp
 8003a28:	1a14      	subs	r4, r2, r0
 8003a2a:	eb63 0501 	sbc.w	r5, r3, r1
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	f04f 0300 	mov.w	r3, #0
 8003a36:	00ab      	lsls	r3, r5, #2
 8003a38:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003a3c:	00a2      	lsls	r2, r4, #2
 8003a3e:	4614      	mov	r4, r2
 8003a40:	461d      	mov	r5, r3
 8003a42:	eb14 0800 	adds.w	r8, r4, r0
 8003a46:	eb45 0901 	adc.w	r9, r5, r1
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	f04f 0300 	mov.w	r3, #0
 8003a52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a5e:	4690      	mov	r8, r2
 8003a60:	4699      	mov	r9, r3
 8003a62:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003a66:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003a6a:	4610      	mov	r0, r2
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003a78 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af02      	add	r7, sp, #8
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003a86:	2205      	movs	r2, #5
 8003a88:	492b      	ldr	r1, [pc, #172]	; (8003b38 <SYSVIEW_AddTask+0xc0>)
 8003a8a:	68b8      	ldr	r0, [r7, #8]
 8003a8c:	f001 ff6a 	bl	8005964 <memcmp>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d04b      	beq.n	8003b2e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003a96:	4b29      	ldr	r3, [pc, #164]	; (8003b3c <SYSVIEW_AddTask+0xc4>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b07      	cmp	r3, #7
 8003a9c:	d903      	bls.n	8003aa6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003a9e:	4828      	ldr	r0, [pc, #160]	; (8003b40 <SYSVIEW_AddTask+0xc8>)
 8003aa0:	f001 feb2 	bl	8005808 <SEGGER_SYSVIEW_Warn>
    return;
 8003aa4:	e044      	b.n	8003b30 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003aa6:	4b25      	ldr	r3, [pc, #148]	; (8003b3c <SYSVIEW_AddTask+0xc4>)
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	4926      	ldr	r1, [pc, #152]	; (8003b44 <SYSVIEW_AddTask+0xcc>)
 8003aac:	4613      	mov	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003aba:	4b20      	ldr	r3, [pc, #128]	; (8003b3c <SYSVIEW_AddTask+0xc4>)
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	4921      	ldr	r1, [pc, #132]	; (8003b44 <SYSVIEW_AddTask+0xcc>)
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	3304      	adds	r3, #4
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003ad0:	4b1a      	ldr	r3, [pc, #104]	; (8003b3c <SYSVIEW_AddTask+0xc4>)
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	491b      	ldr	r1, [pc, #108]	; (8003b44 <SYSVIEW_AddTask+0xcc>)
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4413      	add	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	440b      	add	r3, r1
 8003ae0:	3308      	adds	r3, #8
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003ae6:	4b15      	ldr	r3, [pc, #84]	; (8003b3c <SYSVIEW_AddTask+0xc4>)
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	4916      	ldr	r1, [pc, #88]	; (8003b44 <SYSVIEW_AddTask+0xcc>)
 8003aec:	4613      	mov	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	330c      	adds	r3, #12
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003afc:	4b0f      	ldr	r3, [pc, #60]	; (8003b3c <SYSVIEW_AddTask+0xc4>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	4910      	ldr	r1, [pc, #64]	; (8003b44 <SYSVIEW_AddTask+0xcc>)
 8003b02:	4613      	mov	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4413      	add	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	440b      	add	r3, r1
 8003b0c:	3310      	adds	r3, #16
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003b12:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <SYSVIEW_AddTask+0xc4>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	3301      	adds	r3, #1
 8003b18:	4a08      	ldr	r2, [pc, #32]	; (8003b3c <SYSVIEW_AddTask+0xc4>)
 8003b1a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	68b9      	ldr	r1, [r7, #8]
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 f87e 	bl	8003c28 <SYSVIEW_SendTaskInfo>
 8003b2c:	e000      	b.n	8003b30 <SYSVIEW_AddTask+0xb8>
    return;
 8003b2e:	bf00      	nop

}
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	08005a34 	.word	0x08005a34
 8003b3c:	20012e54 	.word	0x20012e54
 8003b40:	08005a3c 	.word	0x08005a3c
 8003b44:	20012db4 	.word	0x20012db4

08003b48 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003b56:	2205      	movs	r2, #5
 8003b58:	4930      	ldr	r1, [pc, #192]	; (8003c1c <SYSVIEW_UpdateTask+0xd4>)
 8003b5a:	68b8      	ldr	r0, [r7, #8]
 8003b5c:	f001 ff02 	bl	8005964 <memcmp>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d056      	beq.n	8003c14 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 8003b66:	2300      	movs	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	e00d      	b.n	8003b88 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 8003b6c:	492c      	ldr	r1, [pc, #176]	; (8003c20 <SYSVIEW_UpdateTask+0xd8>)
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	4613      	mov	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d008      	beq.n	8003b94 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	3301      	adds	r3, #1
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	4b26      	ldr	r3, [pc, #152]	; (8003c24 <SYSVIEW_UpdateTask+0xdc>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d3ec      	bcc.n	8003b6c <SYSVIEW_UpdateTask+0x24>
 8003b92:	e000      	b.n	8003b96 <SYSVIEW_UpdateTask+0x4e>
      break;
 8003b94:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 8003b96:	4b23      	ldr	r3, [pc, #140]	; (8003c24 <SYSVIEW_UpdateTask+0xdc>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d230      	bcs.n	8003c02 <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 8003ba0:	491f      	ldr	r1, [pc, #124]	; (8003c20 <SYSVIEW_UpdateTask+0xd8>)
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	440b      	add	r3, r1
 8003bae:	3304      	adds	r3, #4
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 8003bb4:	491a      	ldr	r1, [pc, #104]	; (8003c20 <SYSVIEW_UpdateTask+0xd8>)
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	3308      	adds	r3, #8
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 8003bc8:	4915      	ldr	r1, [pc, #84]	; (8003c20 <SYSVIEW_UpdateTask+0xd8>)
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	330c      	adds	r3, #12
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 8003bdc:	4910      	ldr	r1, [pc, #64]	; (8003c20 <SYSVIEW_UpdateTask+0xd8>)
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	3310      	adds	r3, #16
 8003bec:	6a3a      	ldr	r2, [r7, #32]
 8003bee:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	68b9      	ldr	r1, [r7, #8]
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 f814 	bl	8003c28 <SYSVIEW_SendTaskInfo>
 8003c00:	e009      	b.n	8003c16 <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	68b9      	ldr	r1, [r7, #8]
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f7ff ff33 	bl	8003a78 <SYSVIEW_AddTask>
 8003c12:	e000      	b.n	8003c16 <SYSVIEW_UpdateTask+0xce>
    return;
 8003c14:	bf00      	nop
  }
}
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	08005a34 	.word	0x08005a34
 8003c20:	20012db4 	.word	0x20012db4
 8003c24:	20012e54 	.word	0x20012e54

08003c28 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b08a      	sub	sp, #40	; 0x28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
 8003c34:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003c36:	f107 0314 	add.w	r3, r7, #20
 8003c3a:	2214      	movs	r2, #20
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f001 feae 	bl	80059a0 <memset>
  TaskInfo.TaskID     = TaskID;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c56:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003c58:	f107 0314 	add.w	r3, r7, #20
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f001 fa3d 	bl	80050dc <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003c62:	bf00      	nop
 8003c64:	3728      	adds	r7, #40	; 0x28
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
	...

08003c6c <__NVIC_EnableIRQ>:
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	4603      	mov	r3, r0
 8003c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	db0b      	blt.n	8003c96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c7e:	79fb      	ldrb	r3, [r7, #7]
 8003c80:	f003 021f 	and.w	r2, r3, #31
 8003c84:	4907      	ldr	r1, [pc, #28]	; (8003ca4 <__NVIC_EnableIRQ+0x38>)
 8003c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8a:	095b      	lsrs	r3, r3, #5
 8003c8c:	2001      	movs	r0, #1
 8003c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	e000e100 	.word	0xe000e100

08003ca8 <__NVIC_SetPriority>:
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	6039      	str	r1, [r7, #0]
 8003cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	db0a      	blt.n	8003cd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	490c      	ldr	r1, [pc, #48]	; (8003cf4 <__NVIC_SetPriority+0x4c>)
 8003cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc6:	0112      	lsls	r2, r2, #4
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	440b      	add	r3, r1
 8003ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003cd0:	e00a      	b.n	8003ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	4908      	ldr	r1, [pc, #32]	; (8003cf8 <__NVIC_SetPriority+0x50>)
 8003cd8:	79fb      	ldrb	r3, [r7, #7]
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	3b04      	subs	r3, #4
 8003ce0:	0112      	lsls	r2, r2, #4
 8003ce2:	b2d2      	uxtb	r2, r2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	761a      	strb	r2, [r3, #24]
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	e000e100 	.word	0xe000e100
 8003cf8:	e000ed00 	.word	0xe000ed00

08003cfc <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003d02:	f001 fddd 	bl	80058c0 <SEGGER_SYSVIEW_IsStarted>
 8003d06:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8003d0e:	f001 f869 	bl	8004de4 <SEGGER_SYSVIEW_Start>
  }
}
 8003d12:	bf00      	nop
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
	...

08003d1c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	4603      	mov	r3, r0
 8003d24:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003d26:	4b0c      	ldr	r3, [pc, #48]	; (8003d58 <_cbOnUARTRx+0x3c>)
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d806      	bhi.n	8003d3c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8003d2e:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <_cbOnUARTRx+0x3c>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	3301      	adds	r3, #1
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	4b08      	ldr	r3, [pc, #32]	; (8003d58 <_cbOnUARTRx+0x3c>)
 8003d38:	701a      	strb	r2, [r3, #0]
    goto Done;
 8003d3a:	e009      	b.n	8003d50 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8003d3c:	f7ff ffde 	bl	8003cfc <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003d40:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <_cbOnUARTRx+0x3c>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	4618      	mov	r0, r3
 8003d46:	1dfb      	adds	r3, r7, #7
 8003d48:	2201      	movs	r2, #1
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	f000 fb9c 	bl	8004488 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003d50:	bf00      	nop
}
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	20000014 	.word	0x20000014

08003d5c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003d64:	4b14      	ldr	r3, [pc, #80]	; (8003db8 <_cbOnUARTTx+0x5c>)
 8003d66:	785b      	ldrb	r3, [r3, #1]
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d80f      	bhi.n	8003d8c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8003d6c:	4b12      	ldr	r3, [pc, #72]	; (8003db8 <_cbOnUARTTx+0x5c>)
 8003d6e:	785b      	ldrb	r3, [r3, #1]
 8003d70:	461a      	mov	r2, r3
 8003d72:	4b12      	ldr	r3, [pc, #72]	; (8003dbc <_cbOnUARTTx+0x60>)
 8003d74:	5c9a      	ldrb	r2, [r3, r2]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8003d7a:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <_cbOnUARTTx+0x5c>)
 8003d7c:	785b      	ldrb	r3, [r3, #1]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	4b0d      	ldr	r3, [pc, #52]	; (8003db8 <_cbOnUARTTx+0x5c>)
 8003d84:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003d86:	2301      	movs	r3, #1
 8003d88:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003d8a:	e00f      	b.n	8003dac <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003d8c:	4b0a      	ldr	r3, [pc, #40]	; (8003db8 <_cbOnUARTTx+0x5c>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 fa1b 	bl	80041d0 <SEGGER_RTT_ReadUpBufferNoLock>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	da02      	bge.n	8003daa <_cbOnUARTTx+0x4e>
    r = 0;
 8003da4:	2300      	movs	r3, #0
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	e000      	b.n	8003dac <_cbOnUARTTx+0x50>
  }
Done:
 8003daa:	bf00      	nop
  return r;
 8003dac:	68fb      	ldr	r3, [r7, #12]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	20000014 	.word	0x20000014
 8003dbc:	08005ac0 	.word	0x08005ac0

08003dc0 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003dc8:	4a04      	ldr	r2, [pc, #16]	; (8003ddc <SEGGER_UART_init+0x1c>)
 8003dca:	4905      	ldr	r1, [pc, #20]	; (8003de0 <SEGGER_UART_init+0x20>)
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f863 	bl	8003e98 <HIF_UART_Init>
}
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	08003d1d 	.word	0x08003d1d
 8003de0:	08003d5d 	.word	0x08003d5d

08003de4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003dea:	4b1e      	ldr	r3, [pc, #120]	; (8003e64 <USART2_IRQHandler+0x80>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f003 0320 	and.w	r3, r3, #32
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d011      	beq.n	8003e1e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003dfa:	4b1b      	ldr	r3, [pc, #108]	; (8003e68 <USART2_IRQHandler+0x84>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f003 030b 	and.w	r3, r3, #11
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d108      	bne.n	8003e1e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003e0c:	4b17      	ldr	r3, [pc, #92]	; (8003e6c <USART2_IRQHandler+0x88>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d004      	beq.n	8003e1e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003e14:	4b15      	ldr	r3, [pc, #84]	; (8003e6c <USART2_IRQHandler+0x88>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	79fa      	ldrb	r2, [r7, #7]
 8003e1a:	4610      	mov	r0, r2
 8003e1c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d01a      	beq.n	8003e5e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003e28:	4b11      	ldr	r3, [pc, #68]	; (8003e70 <USART2_IRQHandler+0x8c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d015      	beq.n	8003e5c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003e30:	4b0f      	ldr	r3, [pc, #60]	; (8003e70 <USART2_IRQHandler+0x8c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	1dfa      	adds	r2, r7, #7
 8003e36:	4610      	mov	r0, r2
 8003e38:	4798      	blx	r3
 8003e3a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d106      	bne.n	8003e50 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003e42:	4b0c      	ldr	r3, [pc, #48]	; (8003e74 <USART2_IRQHandler+0x90>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a0b      	ldr	r2, [pc, #44]	; (8003e74 <USART2_IRQHandler+0x90>)
 8003e48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	e006      	b.n	8003e5e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003e50:	4b04      	ldr	r3, [pc, #16]	; (8003e64 <USART2_IRQHandler+0x80>)
 8003e52:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003e54:	79fa      	ldrb	r2, [r7, #7]
 8003e56:	4b04      	ldr	r3, [pc, #16]	; (8003e68 <USART2_IRQHandler+0x84>)
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	e000      	b.n	8003e5e <USART2_IRQHandler+0x7a>
      return;
 8003e5c:	bf00      	nop
    }
  }
}
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	40004400 	.word	0x40004400
 8003e68:	40004404 	.word	0x40004404
 8003e6c:	20012e58 	.word	0x20012e58
 8003e70:	20012e5c 	.word	0x20012e5c
 8003e74:	4000440c 	.word	0x4000440c

08003e78 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a04      	ldr	r2, [pc, #16]	; (8003e94 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e86:	6013      	str	r3, [r2, #0]
}
 8003e88:	bf00      	nop
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	4000440c 	.word	0x4000440c

08003e98 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003ea4:	4b2e      	ldr	r3, [pc, #184]	; (8003f60 <HIF_UART_Init+0xc8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a2d      	ldr	r2, [pc, #180]	; (8003f60 <HIF_UART_Init+0xc8>)
 8003eaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eae:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8003eb0:	4b2c      	ldr	r3, [pc, #176]	; (8003f64 <HIF_UART_Init+0xcc>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a2b      	ldr	r2, [pc, #172]	; (8003f64 <HIF_UART_Init+0xcc>)
 8003eb6:	f043 0301 	orr.w	r3, r3, #1
 8003eba:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8003ebc:	4b2a      	ldr	r3, [pc, #168]	; (8003f68 <HIF_UART_Init+0xd0>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ec8:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8003ed0:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003ed2:	4a25      	ldr	r2, [pc, #148]	; (8003f68 <HIF_UART_Init+0xd0>)
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003ed8:	4b24      	ldr	r3, [pc, #144]	; (8003f6c <HIF_UART_Init+0xd4>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ee4:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003eec:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8003eee:	4a1f      	ldr	r2, [pc, #124]	; (8003f6c <HIF_UART_Init+0xd4>)
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003ef4:	4b1e      	ldr	r3, [pc, #120]	; (8003f70 <HIF_UART_Init+0xd8>)
 8003ef6:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8003efa:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8003efc:	4b1d      	ldr	r3, [pc, #116]	; (8003f74 <HIF_UART_Init+0xdc>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003f02:	4b1d      	ldr	r3, [pc, #116]	; (8003f78 <HIF_UART_Init+0xe0>)
 8003f04:	2280      	movs	r2, #128	; 0x80
 8003f06:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8003f0e:	4a1b      	ldr	r2, [pc, #108]	; (8003f7c <HIF_UART_Init+0xe4>)
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f16:	3301      	adds	r3, #1
 8003f18:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	085b      	lsrs	r3, r3, #1
 8003f1e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f26:	d302      	bcc.n	8003f2e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003f28:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003f2c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d004      	beq.n	8003f3e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	011b      	lsls	r3, r3, #4
 8003f38:	4a11      	ldr	r2, [pc, #68]	; (8003f80 <HIF_UART_Init+0xe8>)
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8003f3e:	4a11      	ldr	r2, [pc, #68]	; (8003f84 <HIF_UART_Init+0xec>)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003f44:	4a10      	ldr	r2, [pc, #64]	; (8003f88 <HIF_UART_Init+0xf0>)
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003f4a:	2106      	movs	r1, #6
 8003f4c:	2026      	movs	r0, #38	; 0x26
 8003f4e:	f7ff feab 	bl	8003ca8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003f52:	2026      	movs	r0, #38	; 0x26
 8003f54:	f7ff fe8a 	bl	8003c6c <__NVIC_EnableIRQ>
}
 8003f58:	bf00      	nop
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40023840 	.word	0x40023840
 8003f64:	40023830 	.word	0x40023830
 8003f68:	40020020 	.word	0x40020020
 8003f6c:	40020000 	.word	0x40020000
 8003f70:	4000440c 	.word	0x4000440c
 8003f74:	40004410 	.word	0x40004410
 8003f78:	40004414 	.word	0x40004414
 8003f7c:	0501bd00 	.word	0x0501bd00
 8003f80:	40004408 	.word	0x40004408
 8003f84:	20012e58 	.word	0x20012e58
 8003f88:	20012e5c 	.word	0x20012e5c

08003f8c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003f92:	4b26      	ldr	r3, [pc, #152]	; (800402c <_DoInit+0xa0>)
 8003f94:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003f96:	22a8      	movs	r2, #168	; 0xa8
 8003f98:	2100      	movs	r1, #0
 8003f9a:	6838      	ldr	r0, [r7, #0]
 8003f9c:	f001 fd00 	bl	80059a0 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	2203      	movs	r2, #3
 8003fa4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2203      	movs	r2, #3
 8003faa:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	4a20      	ldr	r2, [pc, #128]	; (8004030 <_DoInit+0xa4>)
 8003fb0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	4a1f      	ldr	r2, [pc, #124]	; (8004034 <_DoInit+0xa8>)
 8003fb6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fbe:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	4a16      	ldr	r2, [pc, #88]	; (8004030 <_DoInit+0xa4>)
 8003fd6:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	4a17      	ldr	r2, [pc, #92]	; (8004038 <_DoInit+0xac>)
 8003fdc:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2210      	movs	r2, #16
 8003fe2:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2200      	movs	r2, #0
 8003fee:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003ff6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	607b      	str	r3, [r7, #4]
 8003ffe:	e00c      	b.n	800401a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f1c3 030f 	rsb	r3, r3, #15
 8004006:	4a0d      	ldr	r2, [pc, #52]	; (800403c <_DoInit+0xb0>)
 8004008:	5cd1      	ldrb	r1, [r2, r3]
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4413      	add	r3, r2
 8004010:	460a      	mov	r2, r1
 8004012:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3301      	adds	r3, #1
 8004018:	607b      	str	r3, [r7, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b0f      	cmp	r3, #15
 800401e:	d9ef      	bls.n	8004000 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004020:	f3bf 8f5f 	dmb	sy
}
 8004024:	bf00      	nop
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	20012e60 	.word	0x20012e60
 8004030:	08005a8c 	.word	0x08005a8c
 8004034:	20012f08 	.word	0x20012f08
 8004038:	20013308 	.word	0x20013308
 800403c:	08005ac4 	.word	0x08005ac4

08004040 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004040:	b580      	push	{r7, lr}
 8004042:	b08a      	sub	sp, #40	; 0x28
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800404c:	2300      	movs	r3, #0
 800404e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	429a      	cmp	r2, r3
 8004062:	d905      	bls.n	8004070 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	3b01      	subs	r3, #1
 800406c:	627b      	str	r3, [r7, #36]	; 0x24
 800406e:	e007      	b.n	8004080 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	69b9      	ldr	r1, [r7, #24]
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	1acb      	subs	r3, r1, r3
 800407a:	4413      	add	r3, r2
 800407c:	3b01      	subs	r3, #1
 800407e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800408a:	4293      	cmp	r3, r2
 800408c:	bf28      	it	cs
 800408e:	4613      	movcs	r3, r2
 8004090:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4293      	cmp	r3, r2
 8004098:	bf28      	it	cs
 800409a:	4613      	movcs	r3, r2
 800409c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	4413      	add	r3, r2
 80040a6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80040a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040aa:	68b9      	ldr	r1, [r7, #8]
 80040ac:	6978      	ldr	r0, [r7, #20]
 80040ae:	f001 fc69 	bl	8005984 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80040b2:	6a3a      	ldr	r2, [r7, #32]
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	4413      	add	r3, r2
 80040b8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	4413      	add	r3, r2
 80040c0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80040ca:	69fa      	ldr	r2, [r7, #28]
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	4413      	add	r3, r2
 80040d0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	69fa      	ldr	r2, [r7, #28]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d101      	bne.n	80040e0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80040dc:	2300      	movs	r3, #0
 80040de:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80040e0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	69fa      	ldr	r2, [r7, #28]
 80040e8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1b2      	bne.n	8004056 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80040f0:	6a3b      	ldr	r3, [r7, #32]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3728      	adds	r7, #40	; 0x28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b088      	sub	sp, #32
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	429a      	cmp	r2, r3
 800411c:	d911      	bls.n	8004142 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	4413      	add	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	68b9      	ldr	r1, [r7, #8]
 800412c:	6938      	ldr	r0, [r7, #16]
 800412e:	f001 fc29 	bl	8005984 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004132:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004136:	69fa      	ldr	r2, [r7, #28]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	441a      	add	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004140:	e01f      	b.n	8004182 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	4413      	add	r3, r2
 800414e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	68b9      	ldr	r1, [r7, #8]
 8004154:	6938      	ldr	r0, [r7, #16]
 8004156:	f001 fc15 	bl	8005984 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	4413      	add	r3, r2
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	4619      	mov	r1, r3
 8004172:	6938      	ldr	r0, [r7, #16]
 8004174:	f001 fc06 	bl	8005984 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004178:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	60da      	str	r2, [r3, #12]
}
 8004182:	bf00      	nop
 8004184:	3720      	adds	r7, #32
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800418a:	b480      	push	{r7}
 800418c:	b087      	sub	sp, #28
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d808      	bhi.n	80041b8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	689a      	ldr	r2, [r3, #8]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	1ad2      	subs	r2, r2, r3
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	4413      	add	r3, r2
 80041b2:	3b01      	subs	r3, #1
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	e004      	b.n	80041c2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	3b01      	subs	r3, #1
 80041c0:	617b      	str	r3, [r7, #20]
  }
  return r;
 80041c2:	697b      	ldr	r3, [r7, #20]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	371c      	adds	r7, #28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b08c      	sub	sp, #48	; 0x30
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80041dc:	4b3e      	ldr	r3, [pc, #248]	; (80042d8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80041de:	623b      	str	r3, [r7, #32]
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80041ea:	f7ff fecf 	bl	8003f8c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	1c5a      	adds	r2, r3, #1
 80041f2:	4613      	mov	r3, r2
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	4413      	add	r3, r2
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	4a37      	ldr	r2, [pc, #220]	; (80042d8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80041fc:	4413      	add	r3, r2
 80041fe:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004210:	2300      	movs	r3, #0
 8004212:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004214:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	429a      	cmp	r2, r3
 800421a:	d92b      	bls.n	8004274 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4293      	cmp	r3, r2
 800422c:	bf28      	it	cs
 800422e:	4613      	movcs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004238:	4413      	add	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	6939      	ldr	r1, [r7, #16]
 8004240:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004242:	f001 fb9f 	bl	8005984 <memcpy>
    NumBytesRead += NumBytesRem;
 8004246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	4413      	add	r3, r2
 800424c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800424e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	4413      	add	r3, r2
 8004254:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800425e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	4413      	add	r3, r2
 8004264:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800426c:	429a      	cmp	r2, r3
 800426e:	d101      	bne.n	8004274 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004270:	2300      	movs	r3, #0
 8004272:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4293      	cmp	r3, r2
 8004282:	bf28      	it	cs
 8004284:	4613      	movcs	r3, r2
 8004286:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d019      	beq.n	80042c2 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004294:	4413      	add	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	6939      	ldr	r1, [r7, #16]
 800429c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800429e:	f001 fb71 	bl	8005984 <memcpy>
    NumBytesRead += NumBytesRem;
 80042a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	4413      	add	r3, r2
 80042a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80042aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	4413      	add	r3, r2
 80042b0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80042ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	4413      	add	r3, r2
 80042c0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80042c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042cc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80042ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3730      	adds	r7, #48	; 0x30
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	20012e60 	.word	0x20012e60

080042dc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08c      	sub	sp, #48	; 0x30
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80042e8:	4b3e      	ldr	r3, [pc, #248]	; (80043e4 <SEGGER_RTT_ReadNoLock+0x108>)
 80042ea:	623b      	str	r3, [r7, #32]
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <SEGGER_RTT_ReadNoLock+0x1e>
 80042f6:	f7ff fe49 	bl	8003f8c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	4613      	mov	r3, r2
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	4413      	add	r3, r2
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	3360      	adds	r3, #96	; 0x60
 8004306:	4a37      	ldr	r2, [pc, #220]	; (80043e4 <SEGGER_RTT_ReadNoLock+0x108>)
 8004308:	4413      	add	r3, r2
 800430a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800431c:	2300      	movs	r3, #0
 800431e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	429a      	cmp	r2, r3
 8004326:	d92b      	bls.n	8004380 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4293      	cmp	r3, r2
 8004338:	bf28      	it	cs
 800433a:	4613      	movcs	r3, r2
 800433c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004344:	4413      	add	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	6939      	ldr	r1, [r7, #16]
 800434c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800434e:	f001 fb19 	bl	8005984 <memcpy>
    NumBytesRead += NumBytesRem;
 8004352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	4413      	add	r3, r2
 8004358:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800435a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	4413      	add	r3, r2
 8004360:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800436a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	4413      	add	r3, r2
 8004370:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004378:	429a      	cmp	r2, r3
 800437a:	d101      	bne.n	8004380 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800437c:	2300      	movs	r3, #0
 800437e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4293      	cmp	r3, r2
 800438e:	bf28      	it	cs
 8004390:	4613      	movcs	r3, r2
 8004392:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d019      	beq.n	80043ce <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a0:	4413      	add	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	6939      	ldr	r1, [r7, #16]
 80043a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043aa:	f001 faeb 	bl	8005984 <memcpy>
    NumBytesRead += NumBytesRem;
 80043ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	4413      	add	r3, r2
 80043b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80043b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	4413      	add	r3, r2
 80043bc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80043c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	4413      	add	r3, r2
 80043cc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80043ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043d8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80043da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3730      	adds	r7, #48	; 0x30
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	20012e60 	.word	0x20012e60

080043e8 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	4613      	mov	r3, r2
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	4413      	add	r3, r2
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	3360      	adds	r3, #96	; 0x60
 8004404:	4a1f      	ldr	r2, [pc, #124]	; (8004484 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8004406:	4413      	add	r3, r2
 8004408:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	2b02      	cmp	r3, #2
 8004410:	d029      	beq.n	8004466 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8004412:	2b02      	cmp	r3, #2
 8004414:	d82e      	bhi.n	8004474 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8004416:	2b00      	cmp	r3, #0
 8004418:	d002      	beq.n	8004420 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800441a:	2b01      	cmp	r3, #1
 800441c:	d013      	beq.n	8004446 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800441e:	e029      	b.n	8004474 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004420:	6978      	ldr	r0, [r7, #20]
 8004422:	f7ff feb2 	bl	800418a <_GetAvailWriteSpace>
 8004426:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	429a      	cmp	r2, r3
 800442e:	d202      	bcs.n	8004436 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8004430:	2300      	movs	r3, #0
 8004432:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004434:	e021      	b.n	800447a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	69b9      	ldr	r1, [r7, #24]
 800443e:	6978      	ldr	r0, [r7, #20]
 8004440:	f7ff fe5b 	bl	80040fa <_WriteNoCheck>
    break;
 8004444:	e019      	b.n	800447a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004446:	6978      	ldr	r0, [r7, #20]
 8004448:	f7ff fe9f 	bl	800418a <_GetAvailWriteSpace>
 800444c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	4293      	cmp	r3, r2
 8004454:	bf28      	it	cs
 8004456:	4613      	movcs	r3, r2
 8004458:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800445a:	69fa      	ldr	r2, [r7, #28]
 800445c:	69b9      	ldr	r1, [r7, #24]
 800445e:	6978      	ldr	r0, [r7, #20]
 8004460:	f7ff fe4b 	bl	80040fa <_WriteNoCheck>
    break;
 8004464:	e009      	b.n	800447a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	69b9      	ldr	r1, [r7, #24]
 800446a:	6978      	ldr	r0, [r7, #20]
 800446c:	f7ff fde8 	bl	8004040 <_WriteBlocking>
 8004470:	61f8      	str	r0, [r7, #28]
    break;
 8004472:	e002      	b.n	800447a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8004474:	2300      	movs	r3, #0
 8004476:	61fb      	str	r3, [r7, #28]
    break;
 8004478:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800447a:	69fb      	ldr	r3, [r7, #28]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3720      	adds	r7, #32
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	20012e60 	.word	0x20012e60

08004488 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004488:	b580      	push	{r7, lr}
 800448a:	b088      	sub	sp, #32
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004494:	4b0e      	ldr	r3, [pc, #56]	; (80044d0 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8004496:	61fb      	str	r3, [r7, #28]
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <SEGGER_RTT_WriteDownBuffer+0x1e>
 80044a2:	f7ff fd73 	bl	8003f8c <_DoInit>
  SEGGER_RTT_LOCK();
 80044a6:	f3ef 8311 	mrs	r3, BASEPRI
 80044aa:	f04f 0120 	mov.w	r1, #32
 80044ae:	f381 8811 	msr	BASEPRI, r1
 80044b2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	68b9      	ldr	r1, [r7, #8]
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f7ff ff95 	bl	80043e8 <SEGGER_RTT_WriteDownBufferNoLock>
 80044be:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80044c6:	697b      	ldr	r3, [r7, #20]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3720      	adds	r7, #32
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	20012e60 	.word	0x20012e60

080044d4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b088      	sub	sp, #32
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
 80044e0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80044e2:	4b3d      	ldr	r3, [pc, #244]	; (80045d8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80044e4:	61bb      	str	r3, [r7, #24]
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80044f0:	f7ff fd4c 	bl	8003f8c <_DoInit>
  SEGGER_RTT_LOCK();
 80044f4:	f3ef 8311 	mrs	r3, BASEPRI
 80044f8:	f04f 0120 	mov.w	r1, #32
 80044fc:	f381 8811 	msr	BASEPRI, r1
 8004500:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004502:	4b35      	ldr	r3, [pc, #212]	; (80045d8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004504:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004506:	2300      	movs	r3, #0
 8004508:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800450a:	6939      	ldr	r1, [r7, #16]
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	1c5a      	adds	r2, r3, #1
 8004510:	4613      	mov	r3, r2
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	4413      	add	r3, r2
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	440b      	add	r3, r1
 800451a:	3304      	adds	r3, #4
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d008      	beq.n	8004534 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	3301      	adds	r3, #1
 8004526:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	69fa      	ldr	r2, [r7, #28]
 800452e:	429a      	cmp	r2, r3
 8004530:	dbeb      	blt.n	800450a <SEGGER_RTT_AllocUpBuffer+0x36>
 8004532:	e000      	b.n	8004536 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004534:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	69fa      	ldr	r2, [r7, #28]
 800453c:	429a      	cmp	r2, r3
 800453e:	da3f      	bge.n	80045c0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004540:	6939      	ldr	r1, [r7, #16]
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	4613      	mov	r3, r2
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	4413      	add	r3, r2
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	440b      	add	r3, r1
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004554:	6939      	ldr	r1, [r7, #16]
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	1c5a      	adds	r2, r3, #1
 800455a:	4613      	mov	r3, r2
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	4413      	add	r3, r2
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	440b      	add	r3, r1
 8004564:	3304      	adds	r3, #4
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800456a:	6939      	ldr	r1, [r7, #16]
 800456c:	69fa      	ldr	r2, [r7, #28]
 800456e:	4613      	mov	r3, r2
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	4413      	add	r3, r2
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	440b      	add	r3, r1
 8004578:	3320      	adds	r3, #32
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800457e:	6939      	ldr	r1, [r7, #16]
 8004580:	69fa      	ldr	r2, [r7, #28]
 8004582:	4613      	mov	r3, r2
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	4413      	add	r3, r2
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	440b      	add	r3, r1
 800458c:	3328      	adds	r3, #40	; 0x28
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004592:	6939      	ldr	r1, [r7, #16]
 8004594:	69fa      	ldr	r2, [r7, #28]
 8004596:	4613      	mov	r3, r2
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	4413      	add	r3, r2
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	440b      	add	r3, r1
 80045a0:	3324      	adds	r3, #36	; 0x24
 80045a2:	2200      	movs	r2, #0
 80045a4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80045a6:	6939      	ldr	r1, [r7, #16]
 80045a8:	69fa      	ldr	r2, [r7, #28]
 80045aa:	4613      	mov	r3, r2
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	4413      	add	r3, r2
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	440b      	add	r3, r1
 80045b4:	332c      	adds	r3, #44	; 0x2c
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80045ba:	f3bf 8f5f 	dmb	sy
 80045be:	e002      	b.n	80045c6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80045c0:	f04f 33ff 	mov.w	r3, #4294967295
 80045c4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80045cc:	69fb      	ldr	r3, [r7, #28]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3720      	adds	r7, #32
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	20012e60 	.word	0x20012e60

080045dc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08a      	sub	sp, #40	; 0x28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
 80045e8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80045ea:	4b21      	ldr	r3, [pc, #132]	; (8004670 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80045ec:	623b      	str	r3, [r7, #32]
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <SEGGER_RTT_ConfigDownBuffer+0x20>
 80045f8:	f7ff fcc8 	bl	8003f8c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80045fc:	4b1c      	ldr	r3, [pc, #112]	; (8004670 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80045fe:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2b02      	cmp	r3, #2
 8004604:	d82c      	bhi.n	8004660 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004606:	f3ef 8311 	mrs	r3, BASEPRI
 800460a:	f04f 0120 	mov.w	r1, #32
 800460e:	f381 8811 	msr	BASEPRI, r1
 8004612:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	4613      	mov	r3, r2
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	4413      	add	r3, r2
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	3360      	adds	r3, #96	; 0x60
 8004620:	69fa      	ldr	r2, [r7, #28]
 8004622:	4413      	add	r3, r2
 8004624:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00e      	beq.n	800464a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2200      	movs	r2, #0
 8004642:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	2200      	movs	r2, #0
 8004648:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800464e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004650:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800465a:	2300      	movs	r3, #0
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
 800465e:	e002      	b.n	8004666 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004660:	f04f 33ff 	mov.w	r3, #4294967295
 8004664:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004668:	4618      	mov	r0, r3
 800466a:	3728      	adds	r7, #40	; 0x28
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	20012e60 	.word	0x20012e60

08004674 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004674:	b480      	push	{r7}
 8004676:	b087      	sub	sp, #28
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004680:	2300      	movs	r3, #0
 8004682:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00f      	beq.n	80046aa <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800468a:	e002      	b.n	8004692 <_EncodeStr+0x1e>
      Len++;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	3301      	adds	r3, #1
 8004690:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	4413      	add	r3, r2
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f6      	bne.n	800468c <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d901      	bls.n	80046aa <_EncodeStr+0x36>
      Len = Limit;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	2bfe      	cmp	r3, #254	; 0xfe
 80046ae:	d806      	bhi.n	80046be <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	1c5a      	adds	r2, r3, #1
 80046b4:	60fa      	str	r2, [r7, #12]
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	701a      	strb	r2, [r3, #0]
 80046bc:	e011      	b.n	80046e2 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	60fa      	str	r2, [r7, #12]
 80046c4:	22ff      	movs	r2, #255	; 0xff
 80046c6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	1c5a      	adds	r2, r3, #1
 80046cc:	60fa      	str	r2, [r7, #12]
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	0a19      	lsrs	r1, r3, #8
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	60fa      	str	r2, [r7, #12]
 80046de:	b2ca      	uxtb	r2, r1
 80046e0:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80046e2:	2300      	movs	r3, #0
 80046e4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80046e6:	e00a      	b.n	80046fe <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	1c53      	adds	r3, r2, #1
 80046ec:	60bb      	str	r3, [r7, #8]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	1c59      	adds	r1, r3, #1
 80046f2:	60f9      	str	r1, [r7, #12]
 80046f4:	7812      	ldrb	r2, [r2, #0]
 80046f6:	701a      	strb	r2, [r3, #0]
    n++;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	3301      	adds	r3, #1
 80046fc:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	429a      	cmp	r2, r3
 8004704:	d3f0      	bcc.n	80046e8 <_EncodeStr+0x74>
  }
  return pPayload;
 8004706:	68fb      	ldr	r3, [r7, #12]
}
 8004708:	4618      	mov	r0, r3
 800470a:	371c      	adds	r7, #28
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3307      	adds	r3, #7
}
 8004720:	4618      	mov	r0, r3
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004732:	4b35      	ldr	r3, [pc, #212]	; (8004808 <_HandleIncomingPacket+0xdc>)
 8004734:	7e1b      	ldrb	r3, [r3, #24]
 8004736:	4618      	mov	r0, r3
 8004738:	1cfb      	adds	r3, r7, #3
 800473a:	2201      	movs	r2, #1
 800473c:	4619      	mov	r1, r3
 800473e:	f7ff fdcd 	bl	80042dc <SEGGER_RTT_ReadNoLock>
 8004742:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d052      	beq.n	80047f0 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800474a:	78fb      	ldrb	r3, [r7, #3]
 800474c:	2b80      	cmp	r3, #128	; 0x80
 800474e:	d031      	beq.n	80047b4 <_HandleIncomingPacket+0x88>
 8004750:	2b80      	cmp	r3, #128	; 0x80
 8004752:	dc40      	bgt.n	80047d6 <_HandleIncomingPacket+0xaa>
 8004754:	2b07      	cmp	r3, #7
 8004756:	dc15      	bgt.n	8004784 <_HandleIncomingPacket+0x58>
 8004758:	2b00      	cmp	r3, #0
 800475a:	dd3c      	ble.n	80047d6 <_HandleIncomingPacket+0xaa>
 800475c:	3b01      	subs	r3, #1
 800475e:	2b06      	cmp	r3, #6
 8004760:	d839      	bhi.n	80047d6 <_HandleIncomingPacket+0xaa>
 8004762:	a201      	add	r2, pc, #4	; (adr r2, 8004768 <_HandleIncomingPacket+0x3c>)
 8004764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004768:	0800478b 	.word	0x0800478b
 800476c:	08004791 	.word	0x08004791
 8004770:	08004797 	.word	0x08004797
 8004774:	0800479d 	.word	0x0800479d
 8004778:	080047a3 	.word	0x080047a3
 800477c:	080047a9 	.word	0x080047a9
 8004780:	080047af 	.word	0x080047af
 8004784:	2b7f      	cmp	r3, #127	; 0x7f
 8004786:	d035      	beq.n	80047f4 <_HandleIncomingPacket+0xc8>
 8004788:	e025      	b.n	80047d6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800478a:	f000 fb2b 	bl	8004de4 <SEGGER_SYSVIEW_Start>
      break;
 800478e:	e036      	b.n	80047fe <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004790:	f000 fbe4 	bl	8004f5c <SEGGER_SYSVIEW_Stop>
      break;
 8004794:	e033      	b.n	80047fe <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004796:	f000 fdbd 	bl	8005314 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800479a:	e030      	b.n	80047fe <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800479c:	f000 fd82 	bl	80052a4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80047a0:	e02d      	b.n	80047fe <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80047a2:	f000 fc01 	bl	8004fa8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80047a6:	e02a      	b.n	80047fe <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80047a8:	f000 fff0 	bl	800578c <SEGGER_SYSVIEW_SendNumModules>
      break;
 80047ac:	e027      	b.n	80047fe <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80047ae:	f000 ffcf 	bl	8005750 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80047b2:	e024      	b.n	80047fe <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80047b4:	4b14      	ldr	r3, [pc, #80]	; (8004808 <_HandleIncomingPacket+0xdc>)
 80047b6:	7e1b      	ldrb	r3, [r3, #24]
 80047b8:	4618      	mov	r0, r3
 80047ba:	1cfb      	adds	r3, r7, #3
 80047bc:	2201      	movs	r2, #1
 80047be:	4619      	mov	r1, r3
 80047c0:	f7ff fd8c 	bl	80042dc <SEGGER_RTT_ReadNoLock>
 80047c4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d015      	beq.n	80047f8 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80047cc:	78fb      	ldrb	r3, [r7, #3]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 ff3e 	bl	8005650 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80047d4:	e010      	b.n	80047f8 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80047d6:	78fb      	ldrb	r3, [r7, #3]
 80047d8:	b25b      	sxtb	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	da0e      	bge.n	80047fc <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80047de:	4b0a      	ldr	r3, [pc, #40]	; (8004808 <_HandleIncomingPacket+0xdc>)
 80047e0:	7e1b      	ldrb	r3, [r3, #24]
 80047e2:	4618      	mov	r0, r3
 80047e4:	1cfb      	adds	r3, r7, #3
 80047e6:	2201      	movs	r2, #1
 80047e8:	4619      	mov	r1, r3
 80047ea:	f7ff fd77 	bl	80042dc <SEGGER_RTT_ReadNoLock>
      }
      break;
 80047ee:	e005      	b.n	80047fc <_HandleIncomingPacket+0xd0>
    }
  }
 80047f0:	bf00      	nop
 80047f2:	e004      	b.n	80047fe <_HandleIncomingPacket+0xd2>
      break;
 80047f4:	bf00      	nop
 80047f6:	e002      	b.n	80047fe <_HandleIncomingPacket+0xd2>
      break;
 80047f8:	bf00      	nop
 80047fa:	e000      	b.n	80047fe <_HandleIncomingPacket+0xd2>
      break;
 80047fc:	bf00      	nop
}
 80047fe:	bf00      	nop
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	20014320 	.word	0x20014320

0800480c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800480c:	b580      	push	{r7, lr}
 800480e:	b08c      	sub	sp, #48	; 0x30
 8004810:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004812:	2301      	movs	r3, #1
 8004814:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004816:	1d3b      	adds	r3, r7, #4
 8004818:	3301      	adds	r3, #1
 800481a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004820:	4b32      	ldr	r3, [pc, #200]	; (80048ec <_TrySendOverflowPacket+0xe0>)
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	62bb      	str	r3, [r7, #40]	; 0x28
 8004826:	e00b      	b.n	8004840 <_TrySendOverflowPacket+0x34>
 8004828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482a:	b2da      	uxtb	r2, r3
 800482c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482e:	1c59      	adds	r1, r3, #1
 8004830:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004832:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	701a      	strb	r2, [r3, #0]
 800483a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483c:	09db      	lsrs	r3, r3, #7
 800483e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004842:	2b7f      	cmp	r3, #127	; 0x7f
 8004844:	d8f0      	bhi.n	8004828 <_TrySendOverflowPacket+0x1c>
 8004846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004848:	1c5a      	adds	r2, r3, #1
 800484a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800484c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	701a      	strb	r2, [r3, #0]
 8004852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004854:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004856:	4b26      	ldr	r3, [pc, #152]	; (80048f0 <_TrySendOverflowPacket+0xe4>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800485c:	4b23      	ldr	r3, [pc, #140]	; (80048ec <_TrySendOverflowPacket+0xe0>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	627b      	str	r3, [r7, #36]	; 0x24
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	623b      	str	r3, [r7, #32]
 800486e:	e00b      	b.n	8004888 <_TrySendOverflowPacket+0x7c>
 8004870:	6a3b      	ldr	r3, [r7, #32]
 8004872:	b2da      	uxtb	r2, r3
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	1c59      	adds	r1, r3, #1
 8004878:	6279      	str	r1, [r7, #36]	; 0x24
 800487a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	701a      	strb	r2, [r3, #0]
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	09db      	lsrs	r3, r3, #7
 8004886:	623b      	str	r3, [r7, #32]
 8004888:	6a3b      	ldr	r3, [r7, #32]
 800488a:	2b7f      	cmp	r3, #127	; 0x7f
 800488c:	d8f0      	bhi.n	8004870 <_TrySendOverflowPacket+0x64>
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	627a      	str	r2, [r7, #36]	; 0x24
 8004894:	6a3a      	ldr	r2, [r7, #32]
 8004896:	b2d2      	uxtb	r2, r2
 8004898:	701a      	strb	r2, [r3, #0]
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800489e:	4b13      	ldr	r3, [pc, #76]	; (80048ec <_TrySendOverflowPacket+0xe0>)
 80048a0:	785b      	ldrb	r3, [r3, #1]
 80048a2:	4618      	mov	r0, r3
 80048a4:	1d3b      	adds	r3, r7, #4
 80048a6:	69fa      	ldr	r2, [r7, #28]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	461a      	mov	r2, r3
 80048ac:	1d3b      	adds	r3, r7, #4
 80048ae:	4619      	mov	r1, r3
 80048b0:	f7fb fc8e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80048b4:	4603      	mov	r3, r0
 80048b6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80048b8:	f7ff fade 	bl	8003e78 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d009      	beq.n	80048d6 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80048c2:	4a0a      	ldr	r2, [pc, #40]	; (80048ec <_TrySendOverflowPacket+0xe0>)
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80048c8:	4b08      	ldr	r3, [pc, #32]	; (80048ec <_TrySendOverflowPacket+0xe0>)
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	4b06      	ldr	r3, [pc, #24]	; (80048ec <_TrySendOverflowPacket+0xe0>)
 80048d2:	701a      	strb	r2, [r3, #0]
 80048d4:	e004      	b.n	80048e0 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80048d6:	4b05      	ldr	r3, [pc, #20]	; (80048ec <_TrySendOverflowPacket+0xe0>)
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	3301      	adds	r3, #1
 80048dc:	4a03      	ldr	r2, [pc, #12]	; (80048ec <_TrySendOverflowPacket+0xe0>)
 80048de:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80048e0:	693b      	ldr	r3, [r7, #16]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3730      	adds	r7, #48	; 0x30
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	20014320 	.word	0x20014320
 80048f0:	e0001004 	.word	0xe0001004

080048f4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b08a      	sub	sp, #40	; 0x28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004900:	4b96      	ldr	r3, [pc, #600]	; (8004b5c <_SendPacket+0x268>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d010      	beq.n	800492a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004908:	4b94      	ldr	r3, [pc, #592]	; (8004b5c <_SendPacket+0x268>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 8130 	beq.w	8004b72 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004912:	4b92      	ldr	r3, [pc, #584]	; (8004b5c <_SendPacket+0x268>)
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	2b02      	cmp	r3, #2
 8004918:	d109      	bne.n	800492e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800491a:	f7ff ff77 	bl	800480c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800491e:	4b8f      	ldr	r3, [pc, #572]	; (8004b5c <_SendPacket+0x268>)
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	2b01      	cmp	r3, #1
 8004924:	f040 8127 	bne.w	8004b76 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8004928:	e001      	b.n	800492e <_SendPacket+0x3a>
    goto Send;
 800492a:	bf00      	nop
 800492c:	e000      	b.n	8004930 <_SendPacket+0x3c>
Send:
 800492e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b1f      	cmp	r3, #31
 8004934:	d809      	bhi.n	800494a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004936:	4b89      	ldr	r3, [pc, #548]	; (8004b5c <_SendPacket+0x268>)
 8004938:	69da      	ldr	r2, [r3, #28]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	fa22 f303 	lsr.w	r3, r2, r3
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	2b00      	cmp	r3, #0
 8004946:	f040 8118 	bne.w	8004b7a <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b17      	cmp	r3, #23
 800494e:	d807      	bhi.n	8004960 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	3b01      	subs	r3, #1
 8004954:	60fb      	str	r3, [r7, #12]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	b2da      	uxtb	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	701a      	strb	r2, [r3, #0]
 800495e:	e0c4      	b.n	8004aea <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	2b7f      	cmp	r3, #127	; 0x7f
 800496c:	d912      	bls.n	8004994 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	09da      	lsrs	r2, r3, #7
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	3b01      	subs	r3, #1
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	b2d2      	uxtb	r2, r2
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	b2db      	uxtb	r3, r3
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	3a01      	subs	r2, #1
 8004986:	60fa      	str	r2, [r7, #12]
 8004988:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800498c:	b2da      	uxtb	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	701a      	strb	r2, [r3, #0]
 8004992:	e006      	b.n	80049a2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	3b01      	subs	r3, #1
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	b2da      	uxtb	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b7e      	cmp	r3, #126	; 0x7e
 80049a6:	d807      	bhi.n	80049b8 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	3b01      	subs	r3, #1
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	701a      	strb	r2, [r3, #0]
 80049b6:	e098      	b.n	8004aea <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049be:	d212      	bcs.n	80049e6 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	09da      	lsrs	r2, r3, #7
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	3b01      	subs	r3, #1
 80049c8:	60fb      	str	r3, [r7, #12]
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	3a01      	subs	r2, #1
 80049d8:	60fa      	str	r2, [r7, #12]
 80049da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	701a      	strb	r2, [r3, #0]
 80049e4:	e081      	b.n	8004aea <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049ec:	d21d      	bcs.n	8004a2a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	0b9a      	lsrs	r2, r3, #14
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	3b01      	subs	r3, #1
 80049f6:	60fb      	str	r3, [r7, #12]
 80049f8:	b2d2      	uxtb	r2, r2
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	09db      	lsrs	r3, r3, #7
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	3a01      	subs	r2, #1
 8004a08:	60fa      	str	r2, [r7, #12]
 8004a0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	3a01      	subs	r2, #1
 8004a1c:	60fa      	str	r2, [r7, #12]
 8004a1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	701a      	strb	r2, [r3, #0]
 8004a28:	e05f      	b.n	8004aea <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a30:	d228      	bcs.n	8004a84 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	0d5a      	lsrs	r2, r3, #21
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	b2d2      	uxtb	r2, r2
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	0b9b      	lsrs	r3, r3, #14
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	3a01      	subs	r2, #1
 8004a4c:	60fa      	str	r2, [r7, #12]
 8004a4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	09db      	lsrs	r3, r3, #7
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	3a01      	subs	r2, #1
 8004a62:	60fa      	str	r2, [r7, #12]
 8004a64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	3a01      	subs	r2, #1
 8004a76:	60fa      	str	r2, [r7, #12]
 8004a78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	701a      	strb	r2, [r3, #0]
 8004a82:	e032      	b.n	8004aea <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	0f1a      	lsrs	r2, r3, #28
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	60fb      	str	r3, [r7, #12]
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	0d5b      	lsrs	r3, r3, #21
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	3a01      	subs	r2, #1
 8004a9e:	60fa      	str	r2, [r7, #12]
 8004aa0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004aa4:	b2da      	uxtb	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	0b9b      	lsrs	r3, r3, #14
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	3a01      	subs	r2, #1
 8004ab4:	60fa      	str	r2, [r7, #12]
 8004ab6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	09db      	lsrs	r3, r3, #7
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	3a01      	subs	r2, #1
 8004aca:	60fa      	str	r2, [r7, #12]
 8004acc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	3a01      	subs	r2, #1
 8004ade:	60fa      	str	r2, [r7, #12]
 8004ae0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004aea:	4b1d      	ldr	r3, [pc, #116]	; (8004b60 <_SendPacket+0x26c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004af0:	4b1a      	ldr	r3, [pc, #104]	; (8004b5c <_SendPacket+0x268>)
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	623b      	str	r3, [r7, #32]
 8004b02:	e00b      	b.n	8004b1c <_SendPacket+0x228>
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	1c59      	adds	r1, r3, #1
 8004b0c:	6279      	str	r1, [r7, #36]	; 0x24
 8004b0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	701a      	strb	r2, [r3, #0]
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	09db      	lsrs	r3, r3, #7
 8004b1a:	623b      	str	r3, [r7, #32]
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	2b7f      	cmp	r3, #127	; 0x7f
 8004b20:	d8f0      	bhi.n	8004b04 <_SendPacket+0x210>
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	627a      	str	r2, [r7, #36]	; 0x24
 8004b28:	6a3a      	ldr	r2, [r7, #32]
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	701a      	strb	r2, [r3, #0]
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004b32:	4b0a      	ldr	r3, [pc, #40]	; (8004b5c <_SendPacket+0x268>)
 8004b34:	785b      	ldrb	r3, [r3, #1]
 8004b36:	4618      	mov	r0, r3
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	461a      	mov	r2, r3
 8004b40:	68f9      	ldr	r1, [r7, #12]
 8004b42:	f7fb fb45 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004b46:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004b48:	f7ff f996 	bl	8003e78 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d008      	beq.n	8004b64 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004b52:	4a02      	ldr	r2, [pc, #8]	; (8004b5c <_SendPacket+0x268>)
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	60d3      	str	r3, [r2, #12]
 8004b58:	e010      	b.n	8004b7c <_SendPacket+0x288>
 8004b5a:	bf00      	nop
 8004b5c:	20014320 	.word	0x20014320
 8004b60:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004b64:	4b19      	ldr	r3, [pc, #100]	; (8004bcc <_SendPacket+0x2d8>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	4b17      	ldr	r3, [pc, #92]	; (8004bcc <_SendPacket+0x2d8>)
 8004b6e:	701a      	strb	r2, [r3, #0]
 8004b70:	e004      	b.n	8004b7c <_SendPacket+0x288>
    goto SendDone;
 8004b72:	bf00      	nop
 8004b74:	e002      	b.n	8004b7c <_SendPacket+0x288>
      goto SendDone;
 8004b76:	bf00      	nop
 8004b78:	e000      	b.n	8004b7c <_SendPacket+0x288>
      goto SendDone;
 8004b7a:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004b7c:	4b13      	ldr	r3, [pc, #76]	; (8004bcc <_SendPacket+0x2d8>)
 8004b7e:	7e1b      	ldrb	r3, [r3, #24]
 8004b80:	4619      	mov	r1, r3
 8004b82:	4a13      	ldr	r2, [pc, #76]	; (8004bd0 <_SendPacket+0x2dc>)
 8004b84:	460b      	mov	r3, r1
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	440b      	add	r3, r1
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	4413      	add	r3, r2
 8004b8e:	336c      	adds	r3, #108	; 0x6c
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	4b0e      	ldr	r3, [pc, #56]	; (8004bcc <_SendPacket+0x2d8>)
 8004b94:	7e1b      	ldrb	r3, [r3, #24]
 8004b96:	4618      	mov	r0, r3
 8004b98:	490d      	ldr	r1, [pc, #52]	; (8004bd0 <_SendPacket+0x2dc>)
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	4403      	add	r3, r0
 8004ba0:	00db      	lsls	r3, r3, #3
 8004ba2:	440b      	add	r3, r1
 8004ba4:	3370      	adds	r3, #112	; 0x70
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d00b      	beq.n	8004bc4 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004bac:	4b07      	ldr	r3, [pc, #28]	; (8004bcc <_SendPacket+0x2d8>)
 8004bae:	789b      	ldrb	r3, [r3, #2]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d107      	bne.n	8004bc4 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004bb4:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <_SendPacket+0x2d8>)
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004bba:	f7ff fdb7 	bl	800472c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004bbe:	4b03      	ldr	r3, [pc, #12]	; (8004bcc <_SendPacket+0x2d8>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004bc4:	bf00      	nop
 8004bc6:	3728      	adds	r7, #40	; 0x28
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	20014320 	.word	0x20014320
 8004bd0:	20012e60 	.word	0x20012e60

08004bd4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
 8004be0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004be2:	2300      	movs	r3, #0
 8004be4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004be8:	4917      	ldr	r1, [pc, #92]	; (8004c48 <SEGGER_SYSVIEW_Init+0x74>)
 8004bea:	4818      	ldr	r0, [pc, #96]	; (8004c4c <SEGGER_SYSVIEW_Init+0x78>)
 8004bec:	f7ff fc72 	bl	80044d4 <SEGGER_RTT_AllocUpBuffer>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	4b16      	ldr	r3, [pc, #88]	; (8004c50 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bf6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004bf8:	4b15      	ldr	r3, [pc, #84]	; (8004c50 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bfa:	785a      	ldrb	r2, [r3, #1]
 8004bfc:	4b14      	ldr	r3, [pc, #80]	; (8004c50 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bfe:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004c00:	4b13      	ldr	r3, [pc, #76]	; (8004c50 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c02:	7e1b      	ldrb	r3, [r3, #24]
 8004c04:	4618      	mov	r0, r3
 8004c06:	2300      	movs	r3, #0
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	2308      	movs	r3, #8
 8004c0c:	4a11      	ldr	r2, [pc, #68]	; (8004c54 <SEGGER_SYSVIEW_Init+0x80>)
 8004c0e:	490f      	ldr	r1, [pc, #60]	; (8004c4c <SEGGER_SYSVIEW_Init+0x78>)
 8004c10:	f7ff fce4 	bl	80045dc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004c14:	4b0e      	ldr	r3, [pc, #56]	; (8004c50 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004c1a:	4b0f      	ldr	r3, [pc, #60]	; (8004c58 <SEGGER_SYSVIEW_Init+0x84>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a0c      	ldr	r2, [pc, #48]	; (8004c50 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c20:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004c22:	4a0b      	ldr	r2, [pc, #44]	; (8004c50 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004c28:	4a09      	ldr	r2, [pc, #36]	; (8004c50 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004c2e:	4a08      	ldr	r2, [pc, #32]	; (8004c50 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004c34:	4a06      	ldr	r2, [pc, #24]	; (8004c50 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004c3a:	4b05      	ldr	r3, [pc, #20]	; (8004c50 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004c40:	bf00      	nop
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	20013318 	.word	0x20013318
 8004c4c:	08005a98 	.word	0x08005a98
 8004c50:	20014320 	.word	0x20014320
 8004c54:	20014318 	.word	0x20014318
 8004c58:	e0001004 	.word	0xe0001004

08004c5c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004c64:	4a04      	ldr	r2, [pc, #16]	; (8004c78 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6113      	str	r3, [r2, #16]
}
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	20014320 	.word	0x20014320

08004c7c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004c84:	f3ef 8311 	mrs	r3, BASEPRI
 8004c88:	f04f 0120 	mov.w	r1, #32
 8004c8c:	f381 8811 	msr	BASEPRI, r1
 8004c90:	60fb      	str	r3, [r7, #12]
 8004c92:	4808      	ldr	r0, [pc, #32]	; (8004cb4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004c94:	f7ff fd3e 	bl	8004714 <_PreparePacket>
 8004c98:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	68b9      	ldr	r1, [r7, #8]
 8004c9e:	68b8      	ldr	r0, [r7, #8]
 8004ca0:	f7ff fe28 	bl	80048f4 <_SendPacket>
  RECORD_END();
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f383 8811 	msr	BASEPRI, r3
}
 8004caa:	bf00      	nop
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	20014350 	.word	0x20014350

08004cb8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b088      	sub	sp, #32
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004cc2:	f3ef 8311 	mrs	r3, BASEPRI
 8004cc6:	f04f 0120 	mov.w	r1, #32
 8004cca:	f381 8811 	msr	BASEPRI, r1
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	4816      	ldr	r0, [pc, #88]	; (8004d2c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004cd2:	f7ff fd1f 	bl	8004714 <_PreparePacket>
 8004cd6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	61fb      	str	r3, [r7, #28]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	61bb      	str	r3, [r7, #24]
 8004ce4:	e00b      	b.n	8004cfe <SEGGER_SYSVIEW_RecordU32+0x46>
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	1c59      	adds	r1, r3, #1
 8004cee:	61f9      	str	r1, [r7, #28]
 8004cf0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cf4:	b2d2      	uxtb	r2, r2
 8004cf6:	701a      	strb	r2, [r3, #0]
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	09db      	lsrs	r3, r3, #7
 8004cfc:	61bb      	str	r3, [r7, #24]
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	2b7f      	cmp	r3, #127	; 0x7f
 8004d02:	d8f0      	bhi.n	8004ce6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	1c5a      	adds	r2, r3, #1
 8004d08:	61fa      	str	r2, [r7, #28]
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	b2d2      	uxtb	r2, r2
 8004d0e:	701a      	strb	r2, [r3, #0]
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	68f9      	ldr	r1, [r7, #12]
 8004d18:	6938      	ldr	r0, [r7, #16]
 8004d1a:	f7ff fdeb 	bl	80048f4 <_SendPacket>
  RECORD_END();
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f383 8811 	msr	BASEPRI, r3
}
 8004d24:	bf00      	nop
 8004d26:	3720      	adds	r7, #32
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	20014350 	.word	0x20014350

08004d30 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b08c      	sub	sp, #48	; 0x30
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d3c:	f3ef 8311 	mrs	r3, BASEPRI
 8004d40:	f04f 0120 	mov.w	r1, #32
 8004d44:	f381 8811 	msr	BASEPRI, r1
 8004d48:	61fb      	str	r3, [r7, #28]
 8004d4a:	4825      	ldr	r0, [pc, #148]	; (8004de0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004d4c:	f7ff fce2 	bl	8004714 <_PreparePacket>
 8004d50:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d5e:	e00b      	b.n	8004d78 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d66:	1c59      	adds	r1, r3, #1
 8004d68:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004d6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d6e:	b2d2      	uxtb	r2, r2
 8004d70:	701a      	strb	r2, [r3, #0]
 8004d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d74:	09db      	lsrs	r3, r3, #7
 8004d76:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7a:	2b7f      	cmp	r3, #127	; 0x7f
 8004d7c:	d8f0      	bhi.n	8004d60 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d80:	1c5a      	adds	r2, r3, #1
 8004d82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	701a      	strb	r2, [r3, #0]
 8004d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	627b      	str	r3, [r7, #36]	; 0x24
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	623b      	str	r3, [r7, #32]
 8004d96:	e00b      	b.n	8004db0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	1c59      	adds	r1, r3, #1
 8004da0:	6279      	str	r1, [r7, #36]	; 0x24
 8004da2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	6a3b      	ldr	r3, [r7, #32]
 8004dac:	09db      	lsrs	r3, r3, #7
 8004dae:	623b      	str	r3, [r7, #32]
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	2b7f      	cmp	r3, #127	; 0x7f
 8004db4:	d8f0      	bhi.n	8004d98 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	627a      	str	r2, [r7, #36]	; 0x24
 8004dbc:	6a3a      	ldr	r2, [r7, #32]
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	701a      	strb	r2, [r3, #0]
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	6979      	ldr	r1, [r7, #20]
 8004dca:	69b8      	ldr	r0, [r7, #24]
 8004dcc:	f7ff fd92 	bl	80048f4 <_SendPacket>
  RECORD_END();
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	f383 8811 	msr	BASEPRI, r3
}
 8004dd6:	bf00      	nop
 8004dd8:	3730      	adds	r7, #48	; 0x30
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	20014350 	.word	0x20014350

08004de4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b08c      	sub	sp, #48	; 0x30
 8004de8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004dea:	4b59      	ldr	r3, [pc, #356]	; (8004f50 <SEGGER_SYSVIEW_Start+0x16c>)
 8004dec:	2201      	movs	r2, #1
 8004dee:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004df0:	f3ef 8311 	mrs	r3, BASEPRI
 8004df4:	f04f 0120 	mov.w	r1, #32
 8004df8:	f381 8811 	msr	BASEPRI, r1
 8004dfc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004dfe:	4b54      	ldr	r3, [pc, #336]	; (8004f50 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e00:	785b      	ldrb	r3, [r3, #1]
 8004e02:	220a      	movs	r2, #10
 8004e04:	4953      	ldr	r1, [pc, #332]	; (8004f54 <SEGGER_SYSVIEW_Start+0x170>)
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fb f9e2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004e12:	f7ff f831 	bl	8003e78 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004e16:	200a      	movs	r0, #10
 8004e18:	f7ff ff30 	bl	8004c7c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e1c:	f3ef 8311 	mrs	r3, BASEPRI
 8004e20:	f04f 0120 	mov.w	r1, #32
 8004e24:	f381 8811 	msr	BASEPRI, r1
 8004e28:	60bb      	str	r3, [r7, #8]
 8004e2a:	484b      	ldr	r0, [pc, #300]	; (8004f58 <SEGGER_SYSVIEW_Start+0x174>)
 8004e2c:	f7ff fc72 	bl	8004714 <_PreparePacket>
 8004e30:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e3a:	4b45      	ldr	r3, [pc, #276]	; (8004f50 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e40:	e00b      	b.n	8004e5a <SEGGER_SYSVIEW_Start+0x76>
 8004e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e48:	1c59      	adds	r1, r3, #1
 8004e4a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004e4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e50:	b2d2      	uxtb	r2, r2
 8004e52:	701a      	strb	r2, [r3, #0]
 8004e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e56:	09db      	lsrs	r3, r3, #7
 8004e58:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e5e:	d8f0      	bhi.n	8004e42 <SEGGER_SYSVIEW_Start+0x5e>
 8004e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e68:	b2d2      	uxtb	r2, r2
 8004e6a:	701a      	strb	r2, [r3, #0]
 8004e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	627b      	str	r3, [r7, #36]	; 0x24
 8004e74:	4b36      	ldr	r3, [pc, #216]	; (8004f50 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	623b      	str	r3, [r7, #32]
 8004e7a:	e00b      	b.n	8004e94 <SEGGER_SYSVIEW_Start+0xb0>
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	b2da      	uxtb	r2, r3
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	1c59      	adds	r1, r3, #1
 8004e84:	6279      	str	r1, [r7, #36]	; 0x24
 8004e86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e8a:	b2d2      	uxtb	r2, r2
 8004e8c:	701a      	strb	r2, [r3, #0]
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	09db      	lsrs	r3, r3, #7
 8004e92:	623b      	str	r3, [r7, #32]
 8004e94:	6a3b      	ldr	r3, [r7, #32]
 8004e96:	2b7f      	cmp	r3, #127	; 0x7f
 8004e98:	d8f0      	bhi.n	8004e7c <SEGGER_SYSVIEW_Start+0x98>
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	1c5a      	adds	r2, r3, #1
 8004e9e:	627a      	str	r2, [r7, #36]	; 0x24
 8004ea0:	6a3a      	ldr	r2, [r7, #32]
 8004ea2:	b2d2      	uxtb	r2, r2
 8004ea4:	701a      	strb	r2, [r3, #0]
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	61fb      	str	r3, [r7, #28]
 8004eae:	4b28      	ldr	r3, [pc, #160]	; (8004f50 <SEGGER_SYSVIEW_Start+0x16c>)
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	61bb      	str	r3, [r7, #24]
 8004eb4:	e00b      	b.n	8004ece <SEGGER_SYSVIEW_Start+0xea>
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	1c59      	adds	r1, r3, #1
 8004ebe:	61f9      	str	r1, [r7, #28]
 8004ec0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	701a      	strb	r2, [r3, #0]
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	09db      	lsrs	r3, r3, #7
 8004ecc:	61bb      	str	r3, [r7, #24]
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	2b7f      	cmp	r3, #127	; 0x7f
 8004ed2:	d8f0      	bhi.n	8004eb6 <SEGGER_SYSVIEW_Start+0xd2>
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	1c5a      	adds	r2, r3, #1
 8004ed8:	61fa      	str	r2, [r7, #28]
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	b2d2      	uxtb	r2, r2
 8004ede:	701a      	strb	r2, [r3, #0]
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	617b      	str	r3, [r7, #20]
 8004ee8:	2300      	movs	r3, #0
 8004eea:	613b      	str	r3, [r7, #16]
 8004eec:	e00b      	b.n	8004f06 <SEGGER_SYSVIEW_Start+0x122>
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	1c59      	adds	r1, r3, #1
 8004ef6:	6179      	str	r1, [r7, #20]
 8004ef8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004efc:	b2d2      	uxtb	r2, r2
 8004efe:	701a      	strb	r2, [r3, #0]
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	09db      	lsrs	r3, r3, #7
 8004f04:	613b      	str	r3, [r7, #16]
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	2b7f      	cmp	r3, #127	; 0x7f
 8004f0a:	d8f0      	bhi.n	8004eee <SEGGER_SYSVIEW_Start+0x10a>
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	617a      	str	r2, [r7, #20]
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	701a      	strb	r2, [r3, #0]
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004f1c:	2218      	movs	r2, #24
 8004f1e:	6839      	ldr	r1, [r7, #0]
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7ff fce7 	bl	80048f4 <_SendPacket>
      RECORD_END();
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004f2c:	4b08      	ldr	r3, [pc, #32]	; (8004f50 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d002      	beq.n	8004f3a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004f34:	4b06      	ldr	r3, [pc, #24]	; (8004f50 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f38:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004f3a:	f000 f9eb 	bl	8005314 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004f3e:	f000 f9b1 	bl	80052a4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004f42:	f000 fc23 	bl	800578c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004f46:	bf00      	nop
 8004f48:	3730      	adds	r7, #48	; 0x30
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	20014320 	.word	0x20014320
 8004f54:	08005ad8 	.word	0x08005ad8
 8004f58:	20014350 	.word	0x20014350

08004f5c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004f62:	f3ef 8311 	mrs	r3, BASEPRI
 8004f66:	f04f 0120 	mov.w	r1, #32
 8004f6a:	f381 8811 	msr	BASEPRI, r1
 8004f6e:	607b      	str	r3, [r7, #4]
 8004f70:	480b      	ldr	r0, [pc, #44]	; (8004fa0 <SEGGER_SYSVIEW_Stop+0x44>)
 8004f72:	f7ff fbcf 	bl	8004714 <_PreparePacket>
 8004f76:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004f78:	4b0a      	ldr	r3, [pc, #40]	; (8004fa4 <SEGGER_SYSVIEW_Stop+0x48>)
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d007      	beq.n	8004f90 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004f80:	220b      	movs	r2, #11
 8004f82:	6839      	ldr	r1, [r7, #0]
 8004f84:	6838      	ldr	r0, [r7, #0]
 8004f86:	f7ff fcb5 	bl	80048f4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004f8a:	4b06      	ldr	r3, [pc, #24]	; (8004fa4 <SEGGER_SYSVIEW_Stop+0x48>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f383 8811 	msr	BASEPRI, r3
}
 8004f96:	bf00      	nop
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	20014350 	.word	0x20014350
 8004fa4:	20014320 	.word	0x20014320

08004fa8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08c      	sub	sp, #48	; 0x30
 8004fac:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004fae:	f3ef 8311 	mrs	r3, BASEPRI
 8004fb2:	f04f 0120 	mov.w	r1, #32
 8004fb6:	f381 8811 	msr	BASEPRI, r1
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	4845      	ldr	r0, [pc, #276]	; (80050d4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004fbe:	f7ff fba9 	bl	8004714 <_PreparePacket>
 8004fc2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fcc:	4b42      	ldr	r3, [pc, #264]	; (80050d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fd2:	e00b      	b.n	8004fec <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fda:	1c59      	adds	r1, r3, #1
 8004fdc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004fde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	701a      	strb	r2, [r3, #0]
 8004fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe8:	09db      	lsrs	r3, r3, #7
 8004fea:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fee:	2b7f      	cmp	r3, #127	; 0x7f
 8004ff0:	d8f0      	bhi.n	8004fd4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ff8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	701a      	strb	r2, [r3, #0]
 8004ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005000:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	627b      	str	r3, [r7, #36]	; 0x24
 8005006:	4b34      	ldr	r3, [pc, #208]	; (80050d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	623b      	str	r3, [r7, #32]
 800500c:	e00b      	b.n	8005026 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800500e:	6a3b      	ldr	r3, [r7, #32]
 8005010:	b2da      	uxtb	r2, r3
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	1c59      	adds	r1, r3, #1
 8005016:	6279      	str	r1, [r7, #36]	; 0x24
 8005018:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800501c:	b2d2      	uxtb	r2, r2
 800501e:	701a      	strb	r2, [r3, #0]
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	09db      	lsrs	r3, r3, #7
 8005024:	623b      	str	r3, [r7, #32]
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	2b7f      	cmp	r3, #127	; 0x7f
 800502a:	d8f0      	bhi.n	800500e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	1c5a      	adds	r2, r3, #1
 8005030:	627a      	str	r2, [r7, #36]	; 0x24
 8005032:	6a3a      	ldr	r2, [r7, #32]
 8005034:	b2d2      	uxtb	r2, r2
 8005036:	701a      	strb	r2, [r3, #0]
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	61fb      	str	r3, [r7, #28]
 8005040:	4b25      	ldr	r3, [pc, #148]	; (80050d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	61bb      	str	r3, [r7, #24]
 8005046:	e00b      	b.n	8005060 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	b2da      	uxtb	r2, r3
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	1c59      	adds	r1, r3, #1
 8005050:	61f9      	str	r1, [r7, #28]
 8005052:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005056:	b2d2      	uxtb	r2, r2
 8005058:	701a      	strb	r2, [r3, #0]
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	09db      	lsrs	r3, r3, #7
 800505e:	61bb      	str	r3, [r7, #24]
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	2b7f      	cmp	r3, #127	; 0x7f
 8005064:	d8f0      	bhi.n	8005048 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	61fa      	str	r2, [r7, #28]
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	701a      	strb	r2, [r3, #0]
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	617b      	str	r3, [r7, #20]
 800507a:	2300      	movs	r3, #0
 800507c:	613b      	str	r3, [r7, #16]
 800507e:	e00b      	b.n	8005098 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	b2da      	uxtb	r2, r3
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	1c59      	adds	r1, r3, #1
 8005088:	6179      	str	r1, [r7, #20]
 800508a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800508e:	b2d2      	uxtb	r2, r2
 8005090:	701a      	strb	r2, [r3, #0]
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	09db      	lsrs	r3, r3, #7
 8005096:	613b      	str	r3, [r7, #16]
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	2b7f      	cmp	r3, #127	; 0x7f
 800509c:	d8f0      	bhi.n	8005080 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	617a      	str	r2, [r7, #20]
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	701a      	strb	r2, [r3, #0]
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80050ae:	2218      	movs	r2, #24
 80050b0:	6879      	ldr	r1, [r7, #4]
 80050b2:	68b8      	ldr	r0, [r7, #8]
 80050b4:	f7ff fc1e 	bl	80048f4 <_SendPacket>
  RECORD_END();
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80050be:	4b06      	ldr	r3, [pc, #24]	; (80050d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d002      	beq.n	80050cc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80050c6:	4b04      	ldr	r3, [pc, #16]	; (80050d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ca:	4798      	blx	r3
  }
}
 80050cc:	bf00      	nop
 80050ce:	3730      	adds	r7, #48	; 0x30
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	20014350 	.word	0x20014350
 80050d8:	20014320 	.word	0x20014320

080050dc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80050dc:	b580      	push	{r7, lr}
 80050de:	b092      	sub	sp, #72	; 0x48
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80050e4:	f3ef 8311 	mrs	r3, BASEPRI
 80050e8:	f04f 0120 	mov.w	r1, #32
 80050ec:	f381 8811 	msr	BASEPRI, r1
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	486a      	ldr	r0, [pc, #424]	; (800529c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80050f4:	f7ff fb0e 	bl	8004714 <_PreparePacket>
 80050f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	647b      	str	r3, [r7, #68]	; 0x44
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	4b66      	ldr	r3, [pc, #408]	; (80052a0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	643b      	str	r3, [r7, #64]	; 0x40
 800510e:	e00b      	b.n	8005128 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005112:	b2da      	uxtb	r2, r3
 8005114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005116:	1c59      	adds	r1, r3, #1
 8005118:	6479      	str	r1, [r7, #68]	; 0x44
 800511a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800511e:	b2d2      	uxtb	r2, r2
 8005120:	701a      	strb	r2, [r3, #0]
 8005122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005124:	09db      	lsrs	r3, r3, #7
 8005126:	643b      	str	r3, [r7, #64]	; 0x40
 8005128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800512a:	2b7f      	cmp	r3, #127	; 0x7f
 800512c:	d8f0      	bhi.n	8005110 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800512e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	647a      	str	r2, [r7, #68]	; 0x44
 8005134:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005136:	b2d2      	uxtb	r2, r2
 8005138:	701a      	strb	r2, [r3, #0]
 800513a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800513c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	63bb      	str	r3, [r7, #56]	; 0x38
 8005148:	e00b      	b.n	8005162 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800514a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514c:	b2da      	uxtb	r2, r3
 800514e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005150:	1c59      	adds	r1, r3, #1
 8005152:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005154:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005158:	b2d2      	uxtb	r2, r2
 800515a:	701a      	strb	r2, [r3, #0]
 800515c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515e:	09db      	lsrs	r3, r3, #7
 8005160:	63bb      	str	r3, [r7, #56]	; 0x38
 8005162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005164:	2b7f      	cmp	r3, #127	; 0x7f
 8005166:	d8f0      	bhi.n	800514a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800516e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	701a      	strb	r2, [r3, #0]
 8005174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005176:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	2220      	movs	r2, #32
 800517e:	4619      	mov	r1, r3
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f7ff fa77 	bl	8004674 <_EncodeStr>
 8005186:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005188:	2209      	movs	r2, #9
 800518a:	68f9      	ldr	r1, [r7, #12]
 800518c:	6938      	ldr	r0, [r7, #16]
 800518e:	f7ff fbb1 	bl	80048f4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	637b      	str	r3, [r7, #52]	; 0x34
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	4b40      	ldr	r3, [pc, #256]	; (80052a0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	633b      	str	r3, [r7, #48]	; 0x30
 80051a6:	e00b      	b.n	80051c0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80051a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ae:	1c59      	adds	r1, r3, #1
 80051b0:	6379      	str	r1, [r7, #52]	; 0x34
 80051b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	701a      	strb	r2, [r3, #0]
 80051ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051bc:	09db      	lsrs	r3, r3, #7
 80051be:	633b      	str	r3, [r7, #48]	; 0x30
 80051c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c2:	2b7f      	cmp	r3, #127	; 0x7f
 80051c4:	d8f0      	bhi.n	80051a8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80051c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c8:	1c5a      	adds	r2, r3, #1
 80051ca:	637a      	str	r2, [r7, #52]	; 0x34
 80051cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	701a      	strb	r2, [r3, #0]
 80051d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	62bb      	str	r3, [r7, #40]	; 0x28
 80051e0:	e00b      	b.n	80051fa <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80051e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e8:	1c59      	adds	r1, r3, #1
 80051ea:	62f9      	str	r1, [r7, #44]	; 0x2c
 80051ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051f0:	b2d2      	uxtb	r2, r2
 80051f2:	701a      	strb	r2, [r3, #0]
 80051f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f6:	09db      	lsrs	r3, r3, #7
 80051f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80051fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fc:	2b7f      	cmp	r3, #127	; 0x7f
 80051fe:	d8f0      	bhi.n	80051e2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005208:	b2d2      	uxtb	r2, r2
 800520a:	701a      	strb	r2, [r3, #0]
 800520c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	627b      	str	r3, [r7, #36]	; 0x24
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	623b      	str	r3, [r7, #32]
 800521a:	e00b      	b.n	8005234 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800521c:	6a3b      	ldr	r3, [r7, #32]
 800521e:	b2da      	uxtb	r2, r3
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	1c59      	adds	r1, r3, #1
 8005224:	6279      	str	r1, [r7, #36]	; 0x24
 8005226:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800522a:	b2d2      	uxtb	r2, r2
 800522c:	701a      	strb	r2, [r3, #0]
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	09db      	lsrs	r3, r3, #7
 8005232:	623b      	str	r3, [r7, #32]
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	2b7f      	cmp	r3, #127	; 0x7f
 8005238:	d8f0      	bhi.n	800521c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	1c5a      	adds	r2, r3, #1
 800523e:	627a      	str	r2, [r7, #36]	; 0x24
 8005240:	6a3a      	ldr	r2, [r7, #32]
 8005242:	b2d2      	uxtb	r2, r2
 8005244:	701a      	strb	r2, [r3, #0]
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	61fb      	str	r3, [r7, #28]
 800524e:	2300      	movs	r3, #0
 8005250:	61bb      	str	r3, [r7, #24]
 8005252:	e00b      	b.n	800526c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	b2da      	uxtb	r2, r3
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	1c59      	adds	r1, r3, #1
 800525c:	61f9      	str	r1, [r7, #28]
 800525e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	701a      	strb	r2, [r3, #0]
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	09db      	lsrs	r3, r3, #7
 800526a:	61bb      	str	r3, [r7, #24]
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	2b7f      	cmp	r3, #127	; 0x7f
 8005270:	d8f0      	bhi.n	8005254 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	61fa      	str	r2, [r7, #28]
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	701a      	strb	r2, [r3, #0]
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005282:	2215      	movs	r2, #21
 8005284:	68f9      	ldr	r1, [r7, #12]
 8005286:	6938      	ldr	r0, [r7, #16]
 8005288:	f7ff fb34 	bl	80048f4 <_SendPacket>
  RECORD_END();
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f383 8811 	msr	BASEPRI, r3
}
 8005292:	bf00      	nop
 8005294:	3748      	adds	r7, #72	; 0x48
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	20014350 	.word	0x20014350
 80052a0:	20014320 	.word	0x20014320

080052a4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80052a8:	4b07      	ldr	r3, [pc, #28]	; (80052c8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d008      	beq.n	80052c2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80052b0:	4b05      	ldr	r3, [pc, #20]	; (80052c8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80052b2:	6a1b      	ldr	r3, [r3, #32]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80052ba:	4b03      	ldr	r3, [pc, #12]	; (80052c8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	4798      	blx	r3
  }
}
 80052c2:	bf00      	nop
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	20014320 	.word	0x20014320

080052cc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80052d4:	f3ef 8311 	mrs	r3, BASEPRI
 80052d8:	f04f 0120 	mov.w	r1, #32
 80052dc:	f381 8811 	msr	BASEPRI, r1
 80052e0:	617b      	str	r3, [r7, #20]
 80052e2:	480b      	ldr	r0, [pc, #44]	; (8005310 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80052e4:	f7ff fa16 	bl	8004714 <_PreparePacket>
 80052e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80052ea:	2280      	movs	r2, #128	; 0x80
 80052ec:	6879      	ldr	r1, [r7, #4]
 80052ee:	6938      	ldr	r0, [r7, #16]
 80052f0:	f7ff f9c0 	bl	8004674 <_EncodeStr>
 80052f4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80052f6:	220e      	movs	r2, #14
 80052f8:	68f9      	ldr	r1, [r7, #12]
 80052fa:	6938      	ldr	r0, [r7, #16]
 80052fc:	f7ff fafa 	bl	80048f4 <_SendPacket>
  RECORD_END();
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f383 8811 	msr	BASEPRI, r3
}
 8005306:	bf00      	nop
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	20014350 	.word	0x20014350

08005314 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005314:	b590      	push	{r4, r7, lr}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800531a:	4b15      	ldr	r3, [pc, #84]	; (8005370 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d01a      	beq.n	8005358 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005322:	4b13      	ldr	r3, [pc, #76]	; (8005370 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d015      	beq.n	8005358 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800532c:	4b10      	ldr	r3, [pc, #64]	; (8005370 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4798      	blx	r3
 8005334:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005338:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800533a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800533e:	f04f 0200 	mov.w	r2, #0
 8005342:	f04f 0300 	mov.w	r3, #0
 8005346:	000a      	movs	r2, r1
 8005348:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800534a:	4613      	mov	r3, r2
 800534c:	461a      	mov	r2, r3
 800534e:	4621      	mov	r1, r4
 8005350:	200d      	movs	r0, #13
 8005352:	f7ff fced 	bl	8004d30 <SEGGER_SYSVIEW_RecordU32x2>
 8005356:	e006      	b.n	8005366 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005358:	4b06      	ldr	r3, [pc, #24]	; (8005374 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4619      	mov	r1, r3
 800535e:	200c      	movs	r0, #12
 8005360:	f7ff fcaa 	bl	8004cb8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005364:	bf00      	nop
 8005366:	bf00      	nop
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	bd90      	pop	{r4, r7, pc}
 800536e:	bf00      	nop
 8005370:	20014320 	.word	0x20014320
 8005374:	e0001004 	.word	0xe0001004

08005378 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800537e:	f3ef 8311 	mrs	r3, BASEPRI
 8005382:	f04f 0120 	mov.w	r1, #32
 8005386:	f381 8811 	msr	BASEPRI, r1
 800538a:	60fb      	str	r3, [r7, #12]
 800538c:	4819      	ldr	r0, [pc, #100]	; (80053f4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800538e:	f7ff f9c1 	bl	8004714 <_PreparePacket>
 8005392:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005398:	4b17      	ldr	r3, [pc, #92]	; (80053f8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053a0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	617b      	str	r3, [r7, #20]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	613b      	str	r3, [r7, #16]
 80053aa:	e00b      	b.n	80053c4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	1c59      	adds	r1, r3, #1
 80053b4:	6179      	str	r1, [r7, #20]
 80053b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053ba:	b2d2      	uxtb	r2, r2
 80053bc:	701a      	strb	r2, [r3, #0]
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	09db      	lsrs	r3, r3, #7
 80053c2:	613b      	str	r3, [r7, #16]
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	2b7f      	cmp	r3, #127	; 0x7f
 80053c8:	d8f0      	bhi.n	80053ac <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	1c5a      	adds	r2, r3, #1
 80053ce:	617a      	str	r2, [r7, #20]
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	b2d2      	uxtb	r2, r2
 80053d4:	701a      	strb	r2, [r3, #0]
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80053da:	2202      	movs	r2, #2
 80053dc:	6879      	ldr	r1, [r7, #4]
 80053de:	68b8      	ldr	r0, [r7, #8]
 80053e0:	f7ff fa88 	bl	80048f4 <_SendPacket>
  RECORD_END();
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f383 8811 	msr	BASEPRI, r3
}
 80053ea:	bf00      	nop
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	20014350 	.word	0x20014350
 80053f8:	e000ed04 	.word	0xe000ed04

080053fc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005402:	f3ef 8311 	mrs	r3, BASEPRI
 8005406:	f04f 0120 	mov.w	r1, #32
 800540a:	f381 8811 	msr	BASEPRI, r1
 800540e:	607b      	str	r3, [r7, #4]
 8005410:	4807      	ldr	r0, [pc, #28]	; (8005430 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005412:	f7ff f97f 	bl	8004714 <_PreparePacket>
 8005416:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005418:	2203      	movs	r2, #3
 800541a:	6839      	ldr	r1, [r7, #0]
 800541c:	6838      	ldr	r0, [r7, #0]
 800541e:	f7ff fa69 	bl	80048f4 <_SendPacket>
  RECORD_END();
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f383 8811 	msr	BASEPRI, r3
}
 8005428:	bf00      	nop
 800542a:	3708      	adds	r7, #8
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	20014350 	.word	0x20014350

08005434 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800543a:	f3ef 8311 	mrs	r3, BASEPRI
 800543e:	f04f 0120 	mov.w	r1, #32
 8005442:	f381 8811 	msr	BASEPRI, r1
 8005446:	607b      	str	r3, [r7, #4]
 8005448:	4807      	ldr	r0, [pc, #28]	; (8005468 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800544a:	f7ff f963 	bl	8004714 <_PreparePacket>
 800544e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005450:	2212      	movs	r2, #18
 8005452:	6839      	ldr	r1, [r7, #0]
 8005454:	6838      	ldr	r0, [r7, #0]
 8005456:	f7ff fa4d 	bl	80048f4 <_SendPacket>
  RECORD_END();
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f383 8811 	msr	BASEPRI, r3
}
 8005460:	bf00      	nop
 8005462:	3708      	adds	r7, #8
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	20014350 	.word	0x20014350

0800546c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005472:	f3ef 8311 	mrs	r3, BASEPRI
 8005476:	f04f 0120 	mov.w	r1, #32
 800547a:	f381 8811 	msr	BASEPRI, r1
 800547e:	607b      	str	r3, [r7, #4]
 8005480:	4807      	ldr	r0, [pc, #28]	; (80054a0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005482:	f7ff f947 	bl	8004714 <_PreparePacket>
 8005486:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005488:	2211      	movs	r2, #17
 800548a:	6839      	ldr	r1, [r7, #0]
 800548c:	6838      	ldr	r0, [r7, #0]
 800548e:	f7ff fa31 	bl	80048f4 <_SendPacket>
  RECORD_END();
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f383 8811 	msr	BASEPRI, r3
}
 8005498:	bf00      	nop
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	20014350 	.word	0x20014350

080054a4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b088      	sub	sp, #32
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80054ac:	f3ef 8311 	mrs	r3, BASEPRI
 80054b0:	f04f 0120 	mov.w	r1, #32
 80054b4:	f381 8811 	msr	BASEPRI, r1
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	4819      	ldr	r0, [pc, #100]	; (8005520 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80054bc:	f7ff f92a 	bl	8004714 <_PreparePacket>
 80054c0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80054c6:	4b17      	ldr	r3, [pc, #92]	; (8005524 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	61fb      	str	r3, [r7, #28]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	61bb      	str	r3, [r7, #24]
 80054d8:	e00b      	b.n	80054f2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	1c59      	adds	r1, r3, #1
 80054e2:	61f9      	str	r1, [r7, #28]
 80054e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	701a      	strb	r2, [r3, #0]
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	09db      	lsrs	r3, r3, #7
 80054f0:	61bb      	str	r3, [r7, #24]
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	2b7f      	cmp	r3, #127	; 0x7f
 80054f6:	d8f0      	bhi.n	80054da <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	1c5a      	adds	r2, r3, #1
 80054fc:	61fa      	str	r2, [r7, #28]
 80054fe:	69ba      	ldr	r2, [r7, #24]
 8005500:	b2d2      	uxtb	r2, r2
 8005502:	701a      	strb	r2, [r3, #0]
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005508:	2208      	movs	r2, #8
 800550a:	68f9      	ldr	r1, [r7, #12]
 800550c:	6938      	ldr	r0, [r7, #16]
 800550e:	f7ff f9f1 	bl	80048f4 <_SendPacket>
  RECORD_END();
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f383 8811 	msr	BASEPRI, r3
}
 8005518:	bf00      	nop
 800551a:	3720      	adds	r7, #32
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	20014350 	.word	0x20014350
 8005524:	20014320 	.word	0x20014320

08005528 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005528:	b580      	push	{r7, lr}
 800552a:	b088      	sub	sp, #32
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005530:	f3ef 8311 	mrs	r3, BASEPRI
 8005534:	f04f 0120 	mov.w	r1, #32
 8005538:	f381 8811 	msr	BASEPRI, r1
 800553c:	617b      	str	r3, [r7, #20]
 800553e:	4819      	ldr	r0, [pc, #100]	; (80055a4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005540:	f7ff f8e8 	bl	8004714 <_PreparePacket>
 8005544:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800554a:	4b17      	ldr	r3, [pc, #92]	; (80055a8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	61fb      	str	r3, [r7, #28]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	61bb      	str	r3, [r7, #24]
 800555c:	e00b      	b.n	8005576 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	b2da      	uxtb	r2, r3
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	1c59      	adds	r1, r3, #1
 8005566:	61f9      	str	r1, [r7, #28]
 8005568:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800556c:	b2d2      	uxtb	r2, r2
 800556e:	701a      	strb	r2, [r3, #0]
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	09db      	lsrs	r3, r3, #7
 8005574:	61bb      	str	r3, [r7, #24]
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	2b7f      	cmp	r3, #127	; 0x7f
 800557a:	d8f0      	bhi.n	800555e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	1c5a      	adds	r2, r3, #1
 8005580:	61fa      	str	r2, [r7, #28]
 8005582:	69ba      	ldr	r2, [r7, #24]
 8005584:	b2d2      	uxtb	r2, r2
 8005586:	701a      	strb	r2, [r3, #0]
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800558c:	2204      	movs	r2, #4
 800558e:	68f9      	ldr	r1, [r7, #12]
 8005590:	6938      	ldr	r0, [r7, #16]
 8005592:	f7ff f9af 	bl	80048f4 <_SendPacket>
  RECORD_END();
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f383 8811 	msr	BASEPRI, r3
}
 800559c:	bf00      	nop
 800559e:	3720      	adds	r7, #32
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	20014350 	.word	0x20014350
 80055a8:	20014320 	.word	0x20014320

080055ac <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b088      	sub	sp, #32
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80055b4:	f3ef 8311 	mrs	r3, BASEPRI
 80055b8:	f04f 0120 	mov.w	r1, #32
 80055bc:	f381 8811 	msr	BASEPRI, r1
 80055c0:	617b      	str	r3, [r7, #20]
 80055c2:	4819      	ldr	r0, [pc, #100]	; (8005628 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80055c4:	f7ff f8a6 	bl	8004714 <_PreparePacket>
 80055c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80055ce:	4b17      	ldr	r3, [pc, #92]	; (800562c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	61fb      	str	r3, [r7, #28]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	61bb      	str	r3, [r7, #24]
 80055e0:	e00b      	b.n	80055fa <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	1c59      	adds	r1, r3, #1
 80055ea:	61f9      	str	r1, [r7, #28]
 80055ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055f0:	b2d2      	uxtb	r2, r2
 80055f2:	701a      	strb	r2, [r3, #0]
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	09db      	lsrs	r3, r3, #7
 80055f8:	61bb      	str	r3, [r7, #24]
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	2b7f      	cmp	r3, #127	; 0x7f
 80055fe:	d8f0      	bhi.n	80055e2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	1c5a      	adds	r2, r3, #1
 8005604:	61fa      	str	r2, [r7, #28]
 8005606:	69ba      	ldr	r2, [r7, #24]
 8005608:	b2d2      	uxtb	r2, r2
 800560a:	701a      	strb	r2, [r3, #0]
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005610:	2206      	movs	r2, #6
 8005612:	68f9      	ldr	r1, [r7, #12]
 8005614:	6938      	ldr	r0, [r7, #16]
 8005616:	f7ff f96d 	bl	80048f4 <_SendPacket>
  RECORD_END();
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f383 8811 	msr	BASEPRI, r3
}
 8005620:	bf00      	nop
 8005622:	3720      	adds	r7, #32
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	20014350 	.word	0x20014350
 800562c:	20014320 	.word	0x20014320

08005630 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005638:	4b04      	ldr	r3, [pc, #16]	; (800564c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	1ad3      	subs	r3, r2, r3
}
 8005640:	4618      	mov	r0, r3
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	20014320 	.word	0x20014320

08005650 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005650:	b580      	push	{r7, lr}
 8005652:	b08c      	sub	sp, #48	; 0x30
 8005654:	af00      	add	r7, sp, #0
 8005656:	4603      	mov	r3, r0
 8005658:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800565a:	4b3b      	ldr	r3, [pc, #236]	; (8005748 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d06d      	beq.n	800573e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005662:	4b39      	ldr	r3, [pc, #228]	; (8005748 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005668:	2300      	movs	r3, #0
 800566a:	62bb      	str	r3, [r7, #40]	; 0x28
 800566c:	e008      	b.n	8005680 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800566e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005676:	2b00      	cmp	r3, #0
 8005678:	d007      	beq.n	800568a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800567a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567c:	3301      	adds	r3, #1
 800567e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005680:	79fb      	ldrb	r3, [r7, #7]
 8005682:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005684:	429a      	cmp	r2, r3
 8005686:	d3f2      	bcc.n	800566e <SEGGER_SYSVIEW_SendModule+0x1e>
 8005688:	e000      	b.n	800568c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800568a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800568c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568e:	2b00      	cmp	r3, #0
 8005690:	d055      	beq.n	800573e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005692:	f3ef 8311 	mrs	r3, BASEPRI
 8005696:	f04f 0120 	mov.w	r1, #32
 800569a:	f381 8811 	msr	BASEPRI, r1
 800569e:	617b      	str	r3, [r7, #20]
 80056a0:	482a      	ldr	r0, [pc, #168]	; (800574c <SEGGER_SYSVIEW_SendModule+0xfc>)
 80056a2:	f7ff f837 	bl	8004714 <_PreparePacket>
 80056a6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	627b      	str	r3, [r7, #36]	; 0x24
 80056b0:	79fb      	ldrb	r3, [r7, #7]
 80056b2:	623b      	str	r3, [r7, #32]
 80056b4:	e00b      	b.n	80056ce <SEGGER_SYSVIEW_SendModule+0x7e>
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	1c59      	adds	r1, r3, #1
 80056be:	6279      	str	r1, [r7, #36]	; 0x24
 80056c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056c4:	b2d2      	uxtb	r2, r2
 80056c6:	701a      	strb	r2, [r3, #0]
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	09db      	lsrs	r3, r3, #7
 80056cc:	623b      	str	r3, [r7, #32]
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	2b7f      	cmp	r3, #127	; 0x7f
 80056d2:	d8f0      	bhi.n	80056b6 <SEGGER_SYSVIEW_SendModule+0x66>
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	627a      	str	r2, [r7, #36]	; 0x24
 80056da:	6a3a      	ldr	r2, [r7, #32]
 80056dc:	b2d2      	uxtb	r2, r2
 80056de:	701a      	strb	r2, [r3, #0]
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	61fb      	str	r3, [r7, #28]
 80056e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	61bb      	str	r3, [r7, #24]
 80056ee:	e00b      	b.n	8005708 <SEGGER_SYSVIEW_SendModule+0xb8>
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	1c59      	adds	r1, r3, #1
 80056f8:	61f9      	str	r1, [r7, #28]
 80056fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056fe:	b2d2      	uxtb	r2, r2
 8005700:	701a      	strb	r2, [r3, #0]
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	09db      	lsrs	r3, r3, #7
 8005706:	61bb      	str	r3, [r7, #24]
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	2b7f      	cmp	r3, #127	; 0x7f
 800570c:	d8f0      	bhi.n	80056f0 <SEGGER_SYSVIEW_SendModule+0xa0>
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	1c5a      	adds	r2, r3, #1
 8005712:	61fa      	str	r2, [r7, #28]
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	b2d2      	uxtb	r2, r2
 8005718:	701a      	strb	r2, [r3, #0]
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800571e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2280      	movs	r2, #128	; 0x80
 8005724:	4619      	mov	r1, r3
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f7fe ffa4 	bl	8004674 <_EncodeStr>
 800572c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800572e:	2216      	movs	r2, #22
 8005730:	68f9      	ldr	r1, [r7, #12]
 8005732:	6938      	ldr	r0, [r7, #16]
 8005734:	f7ff f8de 	bl	80048f4 <_SendPacket>
      RECORD_END();
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800573e:	bf00      	nop
 8005740:	3730      	adds	r7, #48	; 0x30
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	20014348 	.word	0x20014348
 800574c:	20014350 	.word	0x20014350

08005750 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005756:	4b0c      	ldr	r3, [pc, #48]	; (8005788 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00f      	beq.n	800577e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800575e:	4b0a      	ldr	r3, [pc, #40]	; (8005788 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d002      	beq.n	8005772 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1f2      	bne.n	8005764 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800577e:	bf00      	nop
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	20014348 	.word	0x20014348

0800578c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005792:	f3ef 8311 	mrs	r3, BASEPRI
 8005796:	f04f 0120 	mov.w	r1, #32
 800579a:	f381 8811 	msr	BASEPRI, r1
 800579e:	60fb      	str	r3, [r7, #12]
 80057a0:	4817      	ldr	r0, [pc, #92]	; (8005800 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80057a2:	f7fe ffb7 	bl	8004714 <_PreparePacket>
 80057a6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	617b      	str	r3, [r7, #20]
 80057b0:	4b14      	ldr	r3, [pc, #80]	; (8005804 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	613b      	str	r3, [r7, #16]
 80057b6:	e00b      	b.n	80057d0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	b2da      	uxtb	r2, r3
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	1c59      	adds	r1, r3, #1
 80057c0:	6179      	str	r1, [r7, #20]
 80057c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057c6:	b2d2      	uxtb	r2, r2
 80057c8:	701a      	strb	r2, [r3, #0]
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	09db      	lsrs	r3, r3, #7
 80057ce:	613b      	str	r3, [r7, #16]
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	2b7f      	cmp	r3, #127	; 0x7f
 80057d4:	d8f0      	bhi.n	80057b8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	1c5a      	adds	r2, r3, #1
 80057da:	617a      	str	r2, [r7, #20]
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	b2d2      	uxtb	r2, r2
 80057e0:	701a      	strb	r2, [r3, #0]
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80057e6:	221b      	movs	r2, #27
 80057e8:	6879      	ldr	r1, [r7, #4]
 80057ea:	68b8      	ldr	r0, [r7, #8]
 80057ec:	f7ff f882 	bl	80048f4 <_SendPacket>
  RECORD_END();
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f383 8811 	msr	BASEPRI, r3
}
 80057f6:	bf00      	nop
 80057f8:	3718      	adds	r7, #24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	20014350 	.word	0x20014350
 8005804:	2001434c 	.word	0x2001434c

08005808 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005808:	b580      	push	{r7, lr}
 800580a:	b08a      	sub	sp, #40	; 0x28
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005810:	f3ef 8311 	mrs	r3, BASEPRI
 8005814:	f04f 0120 	mov.w	r1, #32
 8005818:	f381 8811 	msr	BASEPRI, r1
 800581c:	617b      	str	r3, [r7, #20]
 800581e:	4827      	ldr	r0, [pc, #156]	; (80058bc <SEGGER_SYSVIEW_Warn+0xb4>)
 8005820:	f7fe ff78 	bl	8004714 <_PreparePacket>
 8005824:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005826:	2280      	movs	r2, #128	; 0x80
 8005828:	6879      	ldr	r1, [r7, #4]
 800582a:	6938      	ldr	r0, [r7, #16]
 800582c:	f7fe ff22 	bl	8004674 <_EncodeStr>
 8005830:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	627b      	str	r3, [r7, #36]	; 0x24
 8005836:	2301      	movs	r3, #1
 8005838:	623b      	str	r3, [r7, #32]
 800583a:	e00b      	b.n	8005854 <SEGGER_SYSVIEW_Warn+0x4c>
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	b2da      	uxtb	r2, r3
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	1c59      	adds	r1, r3, #1
 8005844:	6279      	str	r1, [r7, #36]	; 0x24
 8005846:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	701a      	strb	r2, [r3, #0]
 800584e:	6a3b      	ldr	r3, [r7, #32]
 8005850:	09db      	lsrs	r3, r3, #7
 8005852:	623b      	str	r3, [r7, #32]
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	2b7f      	cmp	r3, #127	; 0x7f
 8005858:	d8f0      	bhi.n	800583c <SEGGER_SYSVIEW_Warn+0x34>
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	1c5a      	adds	r2, r3, #1
 800585e:	627a      	str	r2, [r7, #36]	; 0x24
 8005860:	6a3a      	ldr	r2, [r7, #32]
 8005862:	b2d2      	uxtb	r2, r2
 8005864:	701a      	strb	r2, [r3, #0]
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	61fb      	str	r3, [r7, #28]
 800586e:	2300      	movs	r3, #0
 8005870:	61bb      	str	r3, [r7, #24]
 8005872:	e00b      	b.n	800588c <SEGGER_SYSVIEW_Warn+0x84>
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	b2da      	uxtb	r2, r3
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	1c59      	adds	r1, r3, #1
 800587c:	61f9      	str	r1, [r7, #28]
 800587e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005882:	b2d2      	uxtb	r2, r2
 8005884:	701a      	strb	r2, [r3, #0]
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	09db      	lsrs	r3, r3, #7
 800588a:	61bb      	str	r3, [r7, #24]
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	2b7f      	cmp	r3, #127	; 0x7f
 8005890:	d8f0      	bhi.n	8005874 <SEGGER_SYSVIEW_Warn+0x6c>
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	1c5a      	adds	r2, r3, #1
 8005896:	61fa      	str	r2, [r7, #28]
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	b2d2      	uxtb	r2, r2
 800589c:	701a      	strb	r2, [r3, #0]
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80058a2:	221a      	movs	r2, #26
 80058a4:	68f9      	ldr	r1, [r7, #12]
 80058a6:	6938      	ldr	r0, [r7, #16]
 80058a8:	f7ff f824 	bl	80048f4 <_SendPacket>
  RECORD_END();
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f383 8811 	msr	BASEPRI, r3
}
 80058b2:	bf00      	nop
 80058b4:	3728      	adds	r7, #40	; 0x28
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	20014350 	.word	0x20014350

080058c0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80058c4:	4b13      	ldr	r3, [pc, #76]	; (8005914 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80058c6:	7e1b      	ldrb	r3, [r3, #24]
 80058c8:	4619      	mov	r1, r3
 80058ca:	4a13      	ldr	r2, [pc, #76]	; (8005918 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80058cc:	460b      	mov	r3, r1
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	440b      	add	r3, r1
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	4413      	add	r3, r2
 80058d6:	336c      	adds	r3, #108	; 0x6c
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	4b0e      	ldr	r3, [pc, #56]	; (8005914 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80058dc:	7e1b      	ldrb	r3, [r3, #24]
 80058de:	4618      	mov	r0, r3
 80058e0:	490d      	ldr	r1, [pc, #52]	; (8005918 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80058e2:	4603      	mov	r3, r0
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	4403      	add	r3, r0
 80058e8:	00db      	lsls	r3, r3, #3
 80058ea:	440b      	add	r3, r1
 80058ec:	3370      	adds	r3, #112	; 0x70
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d00b      	beq.n	800590c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80058f4:	4b07      	ldr	r3, [pc, #28]	; (8005914 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80058f6:	789b      	ldrb	r3, [r3, #2]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d107      	bne.n	800590c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80058fc:	4b05      	ldr	r3, [pc, #20]	; (8005914 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80058fe:	2201      	movs	r2, #1
 8005900:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005902:	f7fe ff13 	bl	800472c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005906:	4b03      	ldr	r3, [pc, #12]	; (8005914 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005908:	2200      	movs	r2, #0
 800590a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 800590c:	4b01      	ldr	r3, [pc, #4]	; (8005914 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800590e:	781b      	ldrb	r3, [r3, #0]
}
 8005910:	4618      	mov	r0, r3
 8005912:	bd80      	pop	{r7, pc}
 8005914:	20014320 	.word	0x20014320
 8005918:	20012e60 	.word	0x20012e60

0800591c <__libc_init_array>:
 800591c:	b570      	push	{r4, r5, r6, lr}
 800591e:	4d0d      	ldr	r5, [pc, #52]	; (8005954 <__libc_init_array+0x38>)
 8005920:	4c0d      	ldr	r4, [pc, #52]	; (8005958 <__libc_init_array+0x3c>)
 8005922:	1b64      	subs	r4, r4, r5
 8005924:	10a4      	asrs	r4, r4, #2
 8005926:	2600      	movs	r6, #0
 8005928:	42a6      	cmp	r6, r4
 800592a:	d109      	bne.n	8005940 <__libc_init_array+0x24>
 800592c:	4d0b      	ldr	r5, [pc, #44]	; (800595c <__libc_init_array+0x40>)
 800592e:	4c0c      	ldr	r4, [pc, #48]	; (8005960 <__libc_init_array+0x44>)
 8005930:	f000 f83e 	bl	80059b0 <_init>
 8005934:	1b64      	subs	r4, r4, r5
 8005936:	10a4      	asrs	r4, r4, #2
 8005938:	2600      	movs	r6, #0
 800593a:	42a6      	cmp	r6, r4
 800593c:	d105      	bne.n	800594a <__libc_init_array+0x2e>
 800593e:	bd70      	pop	{r4, r5, r6, pc}
 8005940:	f855 3b04 	ldr.w	r3, [r5], #4
 8005944:	4798      	blx	r3
 8005946:	3601      	adds	r6, #1
 8005948:	e7ee      	b.n	8005928 <__libc_init_array+0xc>
 800594a:	f855 3b04 	ldr.w	r3, [r5], #4
 800594e:	4798      	blx	r3
 8005950:	3601      	adds	r6, #1
 8005952:	e7f2      	b.n	800593a <__libc_init_array+0x1e>
 8005954:	08005aec 	.word	0x08005aec
 8005958:	08005aec 	.word	0x08005aec
 800595c:	08005aec 	.word	0x08005aec
 8005960:	08005af0 	.word	0x08005af0

08005964 <memcmp>:
 8005964:	b510      	push	{r4, lr}
 8005966:	3901      	subs	r1, #1
 8005968:	4402      	add	r2, r0
 800596a:	4290      	cmp	r0, r2
 800596c:	d101      	bne.n	8005972 <memcmp+0xe>
 800596e:	2000      	movs	r0, #0
 8005970:	e005      	b.n	800597e <memcmp+0x1a>
 8005972:	7803      	ldrb	r3, [r0, #0]
 8005974:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005978:	42a3      	cmp	r3, r4
 800597a:	d001      	beq.n	8005980 <memcmp+0x1c>
 800597c:	1b18      	subs	r0, r3, r4
 800597e:	bd10      	pop	{r4, pc}
 8005980:	3001      	adds	r0, #1
 8005982:	e7f2      	b.n	800596a <memcmp+0x6>

08005984 <memcpy>:
 8005984:	440a      	add	r2, r1
 8005986:	4291      	cmp	r1, r2
 8005988:	f100 33ff 	add.w	r3, r0, #4294967295
 800598c:	d100      	bne.n	8005990 <memcpy+0xc>
 800598e:	4770      	bx	lr
 8005990:	b510      	push	{r4, lr}
 8005992:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005996:	f803 4f01 	strb.w	r4, [r3, #1]!
 800599a:	4291      	cmp	r1, r2
 800599c:	d1f9      	bne.n	8005992 <memcpy+0xe>
 800599e:	bd10      	pop	{r4, pc}

080059a0 <memset>:
 80059a0:	4402      	add	r2, r0
 80059a2:	4603      	mov	r3, r0
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d100      	bne.n	80059aa <memset+0xa>
 80059a8:	4770      	bx	lr
 80059aa:	f803 1b01 	strb.w	r1, [r3], #1
 80059ae:	e7f9      	b.n	80059a4 <memset+0x4>

080059b0 <_init>:
 80059b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b2:	bf00      	nop
 80059b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059b6:	bc08      	pop	{r3}
 80059b8:	469e      	mov	lr, r3
 80059ba:	4770      	bx	lr

080059bc <_fini>:
 80059bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059be:	bf00      	nop
 80059c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059c2:	bc08      	pop	{r3}
 80059c4:	469e      	mov	lr, r3
 80059c6:	4770      	bx	lr
