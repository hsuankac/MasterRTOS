
005LED_Task_Notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006548  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  080066d8  080066d8  000166d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068c4  080068c4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080068c4  080068c4  000168c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068cc  080068cc  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068cc  080068cc  000168cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068d0  080068d0  000168d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080068d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00014428  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20014444  20014444  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012473  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a0d  00000000  00000000  000324bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001138  00000000  00000000  00034ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fd0  00000000  00000000  00036008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023754  00000000  00000000  00036fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000131af  00000000  00000000  0005a72c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6cc4  00000000  00000000  0006d8db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014459f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004784  00000000  00000000  001445f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080066c0 	.word	0x080066c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	080066c0 	.word	0x080066c0

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e70 	.word	0x20012e70

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fc65 	bl	8000e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f897 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8ff 	bl	8000778 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter.
  DWT_CTRL |= ( 1 << 0);
 800057a:	4b3b      	ldr	r3, [pc, #236]	; (8000668 <main+0x100>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a3a      	ldr	r2, [pc, #232]	; (8000668 <main+0x100>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(250000);
 8000586:	4839      	ldr	r0, [pc, #228]	; (800066c <main+0x104>)
 8000588:	f003 fe02 	bl	8004190 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 800058c:	f003 fc2a 	bl	8003de4 <SEGGER_SYSVIEW_Conf>

 // SEGGER_SYSVIEW_Start();

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 3, &ledg_task_handle);
 8000590:	4b37      	ldr	r3, [pc, #220]	; (8000670 <main+0x108>)
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	2303      	movs	r3, #3
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2300      	movs	r3, #0
 800059a:	22c8      	movs	r2, #200	; 0xc8
 800059c:	4935      	ldr	r1, [pc, #212]	; (8000674 <main+0x10c>)
 800059e:	4836      	ldr	r0, [pc, #216]	; (8000678 <main+0x110>)
 80005a0:	f001 ff70 	bl	8002484 <xTaskCreate>
 80005a4:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d00a      	beq.n	80005c2 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b0:	f383 8811 	msr	BASEPRI, r3
 80005b4:	f3bf 8f6f 	isb	sy
 80005b8:	f3bf 8f4f 	dsb	sy
 80005bc:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005be:	bf00      	nop
 80005c0:	e7fe      	b.n	80005c0 <main+0x58>

  next_task_handle = ledg_task_handle;
 80005c2:	4b2b      	ldr	r3, [pc, #172]	; (8000670 <main+0x108>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a2d      	ldr	r2, [pc, #180]	; (800067c <main+0x114>)
 80005c8:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL, 2, &ledr_task_handle);
 80005ca:	4b2d      	ldr	r3, [pc, #180]	; (8000680 <main+0x118>)
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2302      	movs	r3, #2
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	22c8      	movs	r2, #200	; 0xc8
 80005d6:	492b      	ldr	r1, [pc, #172]	; (8000684 <main+0x11c>)
 80005d8:	482b      	ldr	r0, [pc, #172]	; (8000688 <main+0x120>)
 80005da:	f001 ff53 	bl	8002484 <xTaskCreate>
 80005de:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d00a      	beq.n	80005fc <main+0x94>
        __asm volatile
 80005e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ea:	f383 8811 	msr	BASEPRI, r3
 80005ee:	f3bf 8f6f 	isb	sy
 80005f2:	f3bf 8f4f 	dsb	sy
 80005f6:	60fb      	str	r3, [r7, #12]
    }
 80005f8:	bf00      	nop
 80005fa:	e7fe      	b.n	80005fa <main+0x92>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 1, &ledo_task_handle);
 80005fc:	4b23      	ldr	r3, [pc, #140]	; (800068c <main+0x124>)
 80005fe:	9301      	str	r3, [sp, #4]
 8000600:	2301      	movs	r3, #1
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2300      	movs	r3, #0
 8000606:	22c8      	movs	r2, #200	; 0xc8
 8000608:	4921      	ldr	r1, [pc, #132]	; (8000690 <main+0x128>)
 800060a:	4822      	ldr	r0, [pc, #136]	; (8000694 <main+0x12c>)
 800060c:	f001 ff3a 	bl	8002484 <xTaskCreate>
 8000610:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d00a      	beq.n	800062e <main+0xc6>
        __asm volatile
 8000618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800061c:	f383 8811 	msr	BASEPRI, r3
 8000620:	f3bf 8f6f 	isb	sy
 8000624:	f3bf 8f4f 	dsb	sy
 8000628:	60bb      	str	r3, [r7, #8]
    }
 800062a:	bf00      	nop
 800062c:	e7fe      	b.n	800062c <main+0xc4>

  status = xTaskCreate(button_handler, "Button task", 200, NULL, 4, &btn_task_handle);
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <main+0x130>)
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2304      	movs	r3, #4
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2300      	movs	r3, #0
 8000638:	22c8      	movs	r2, #200	; 0xc8
 800063a:	4918      	ldr	r1, [pc, #96]	; (800069c <main+0x134>)
 800063c:	4818      	ldr	r0, [pc, #96]	; (80006a0 <main+0x138>)
 800063e:	f001 ff21 	bl	8002484 <xTaskCreate>
 8000642:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d00a      	beq.n	8000660 <main+0xf8>
        __asm volatile
 800064a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800064e:	f383 8811 	msr	BASEPRI, r3
 8000652:	f3bf 8f6f 	isb	sy
 8000656:	f3bf 8f4f 	dsb	sy
 800065a:	607b      	str	r3, [r7, #4]
    }
 800065c:	bf00      	nop
 800065e:	e7fe      	b.n	800065e <main+0xf6>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8000660:	f002 f9f6 	bl	8002a50 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000664:	e7fe      	b.n	8000664 <main+0xfc>
 8000666:	bf00      	nop
 8000668:	e0001000 	.word	0xe0001000
 800066c:	0003d090 	.word	0x0003d090
 8000670:	20000038 	.word	0x20000038
 8000674:	080066d8 	.word	0x080066d8
 8000678:	08000a35 	.word	0x08000a35
 800067c:	20000048 	.word	0x20000048
 8000680:	20000040 	.word	0x20000040
 8000684:	080066e8 	.word	0x080066e8
 8000688:	08000b2d 	.word	0x08000b2d
 800068c:	2000003c 	.word	0x2000003c
 8000690:	080066f8 	.word	0x080066f8
 8000694:	08000ab1 	.word	0x08000ab1
 8000698:	20000044 	.word	0x20000044
 800069c:	08006708 	.word	0x08006708
 80006a0:	08000b99 	.word	0x08000b99

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	; 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	2230      	movs	r2, #48	; 0x30
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f005 fffc 	bl	80066b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	4b28      	ldr	r3, [pc, #160]	; (8000770 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	4a27      	ldr	r2, [pc, #156]	; (8000770 <SystemClock_Config+0xcc>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	; 0x40
 80006d8:	4b25      	ldr	r3, [pc, #148]	; (8000770 <SystemClock_Config+0xcc>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b22      	ldr	r3, [pc, #136]	; (8000774 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a21      	ldr	r2, [pc, #132]	; (8000774 <SystemClock_Config+0xd0>)
 80006ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <SystemClock_Config+0xd0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000700:	2302      	movs	r3, #2
 8000702:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000704:	2301      	movs	r3, #1
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000708:	2310      	movs	r3, #16
 800070a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000710:	2300      	movs	r3, #0
 8000712:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000714:	2308      	movs	r3, #8
 8000716:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000718:	23a8      	movs	r3, #168	; 0xa8
 800071a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071c:	2302      	movs	r3, #2
 800071e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000720:	2307      	movs	r3, #7
 8000722:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0320 	add.w	r3, r7, #32
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fe93 	bl	8001454 <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000734:	f000 fa7a 	bl	8000c2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2302      	movs	r3, #2
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000744:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000748:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800074a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2105      	movs	r1, #5
 8000756:	4618      	mov	r0, r3
 8000758:	f001 f8f4 	bl	8001944 <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000762:	f000 fa63 	bl	8000c2c <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3750      	adds	r7, #80	; 0x50
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08c      	sub	sp, #48	; 0x30
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
 8000792:	4ba2      	ldr	r3, [pc, #648]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4aa1      	ldr	r2, [pc, #644]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000798:	f043 0310 	orr.w	r3, r3, #16
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b9f      	ldr	r3, [pc, #636]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0310 	and.w	r3, r3, #16
 80007a6:	61bb      	str	r3, [r7, #24]
 80007a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	4b9b      	ldr	r3, [pc, #620]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a9a      	ldr	r2, [pc, #616]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b98      	ldr	r3, [pc, #608]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	4b94      	ldr	r3, [pc, #592]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a93      	ldr	r2, [pc, #588]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b91      	ldr	r3, [pc, #580]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	4b8d      	ldr	r3, [pc, #564]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a8c      	ldr	r2, [pc, #560]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b8a      	ldr	r3, [pc, #552]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	4b86      	ldr	r3, [pc, #536]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a85      	ldr	r2, [pc, #532]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b83      	ldr	r3, [pc, #524]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	4b7f      	ldr	r3, [pc, #508]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a7e      	ldr	r2, [pc, #504]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000824:	f043 0308 	orr.w	r3, r3, #8
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b7c      	ldr	r3, [pc, #496]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0308 	and.w	r3, r3, #8
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2108      	movs	r1, #8
 800083a:	4879      	ldr	r0, [pc, #484]	; (8000a20 <MX_GPIO_Init+0x2a8>)
 800083c:	f000 fdd6 	bl	80013ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000840:	2201      	movs	r2, #1
 8000842:	2101      	movs	r1, #1
 8000844:	4877      	ldr	r0, [pc, #476]	; (8000a24 <MX_GPIO_Init+0x2ac>)
 8000846:	f000 fdd1 	bl	80013ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800084a:	2200      	movs	r2, #0
 800084c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000850:	4875      	ldr	r0, [pc, #468]	; (8000a28 <MX_GPIO_Init+0x2b0>)
 8000852:	f000 fdcb 	bl	80013ec <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000856:	2308      	movs	r3, #8
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	486c      	ldr	r0, [pc, #432]	; (8000a20 <MX_GPIO_Init+0x2a8>)
 800086e:	f000 fc09 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000872:	2301      	movs	r3, #1
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	4866      	ldr	r0, [pc, #408]	; (8000a24 <MX_GPIO_Init+0x2ac>)
 800088a:	f000 fbfb 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800088e:	2308      	movs	r3, #8
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800089e:	2305      	movs	r3, #5
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	485e      	ldr	r0, [pc, #376]	; (8000a24 <MX_GPIO_Init+0x2ac>)
 80008aa:	f000 fbeb 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ae:	2301      	movs	r3, #1
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	485a      	ldr	r0, [pc, #360]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 80008c4:	f000 fbde 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008c8:	2310      	movs	r3, #16
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008d8:	2306      	movs	r3, #6
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	4852      	ldr	r0, [pc, #328]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 80008e4:	f000 fbce 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008e8:	23e0      	movs	r3, #224	; 0xe0
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008f8:	2305      	movs	r3, #5
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	484a      	ldr	r0, [pc, #296]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 8000904:	f000 fbbe 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000908:	2304      	movs	r3, #4
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4845      	ldr	r0, [pc, #276]	; (8000a30 <MX_GPIO_Init+0x2b8>)
 800091c:	f000 fbb2 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000932:	2305      	movs	r3, #5
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	483c      	ldr	r0, [pc, #240]	; (8000a30 <MX_GPIO_Init+0x2b8>)
 800093e:	f000 fba1 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000942:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000946:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	2301      	movs	r3, #1
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	4833      	ldr	r0, [pc, #204]	; (8000a28 <MX_GPIO_Init+0x2b0>)
 800095c:	f000 fb92 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000960:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000972:	2306      	movs	r3, #6
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4829      	ldr	r0, [pc, #164]	; (8000a24 <MX_GPIO_Init+0x2ac>)
 800097e:	f000 fb81 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4825      	ldr	r0, [pc, #148]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 8000998:	f000 fb74 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800099c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009ae:	230a      	movs	r3, #10
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	481c      	ldr	r0, [pc, #112]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 80009ba:	f000 fb63 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009be:	2320      	movs	r3, #32
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4815      	ldr	r0, [pc, #84]	; (8000a28 <MX_GPIO_Init+0x2b0>)
 80009d2:	f000 fb57 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009d6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009dc:	2312      	movs	r3, #18
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009e8:	2304      	movs	r3, #4
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	480f      	ldr	r0, [pc, #60]	; (8000a30 <MX_GPIO_Init+0x2b8>)
 80009f4:	f000 fb46 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009f8:	2302      	movs	r3, #2
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009fc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <MX_GPIO_Init+0x2a8>)
 8000a0e:	f000 fb39 	bl	8001084 <HAL_GPIO_Init>

}
 8000a12:	bf00      	nop
 8000a14:	3730      	adds	r7, #48	; 0x30
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40020800 	.word	0x40020800
 8000a28:	40020c00 	.word	0x40020c00
 8000a2c:	40020000 	.word	0x40020000
 8000a30:	40020400 	.word	0x40020400

08000a34 <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler(void* parameters)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af02      	add	r7, sp, #8
 8000a3a:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED!!");
 8000a3c:	4817      	ldr	r0, [pc, #92]	; (8000a9c <led_green_handler+0x68>)
 8000a3e:	f005 fd57 	bl	80064f0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a46:	4816      	ldr	r0, [pc, #88]	; (8000aa0 <led_green_handler+0x6c>)
 8000a48:	f000 fce9 	bl	800141e <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL, pdMS_TO_TICKS(1000));
 8000a4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2300      	movs	r3, #0
 8000a54:	2200      	movs	r2, #0
 8000a56:	2100      	movs	r1, #0
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f002 faed 	bl	8003038 <xTaskGenericNotifyWait>
 8000a5e:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE)
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d1ea      	bne.n	8000a3c <led_green_handler+0x8>
		{
			vTaskSuspendAll();
 8000a66:	f002 f84f 	bl	8002b08 <vTaskSuspendAll>
			next_task_handle = ledo_task_handle;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <led_green_handler+0x70>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a0e      	ldr	r2, [pc, #56]	; (8000aa8 <led_green_handler+0x74>)
 8000a70:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000a72:	f002 f857 	bl	8002b24 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_GREEN_PIN, GPIO_PIN_SET);
 8000a76:	2201      	movs	r2, #1
 8000a78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a7c:	4808      	ldr	r0, [pc, #32]	; (8000aa0 <led_green_handler+0x6c>)
 8000a7e:	f000 fcb5 	bl	80013ec <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete green task!!");
 8000a82:	480a      	ldr	r0, [pc, #40]	; (8000aac <led_green_handler+0x78>)
 8000a84:	f005 fd34 	bl	80064f0 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskResume(ledo_task_handle);
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <led_green_handler+0x70>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f001 ff75 	bl	800297c <vTaskResume>
			vTaskSuspend(NULL);
 8000a92:	2000      	movs	r0, #0
 8000a94:	f001 fe92 	bl	80027bc <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED!!");
 8000a98:	e7d0      	b.n	8000a3c <led_green_handler+0x8>
 8000a9a:	bf00      	nop
 8000a9c:	08006714 	.word	0x08006714
 8000aa0:	40020c00 	.word	0x40020c00
 8000aa4:	2000003c 	.word	0x2000003c
 8000aa8:	20000048 	.word	0x20000048
 8000aac:	0800672c 	.word	0x0800672c

08000ab0 <led_orange_handler>:
	}

}

static void led_orange_handler(void* parameters)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af02      	add	r7, sp, #8
 8000ab6:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling ORANGE LED!!");
 8000ab8:	4817      	ldr	r0, [pc, #92]	; (8000b18 <led_orange_handler+0x68>)
 8000aba:	f005 fd19 	bl	80064f0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000abe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac2:	4816      	ldr	r0, [pc, #88]	; (8000b1c <led_orange_handler+0x6c>)
 8000ac4:	f000 fcab 	bl	800141e <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL, pdMS_TO_TICKS(800));
 8000ac8:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	2300      	movs	r3, #0
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f002 faaf 	bl	8003038 <xTaskGenericNotifyWait>
 8000ada:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE)
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d1ea      	bne.n	8000ab8 <led_orange_handler+0x8>
		{
			vTaskSuspendAll();
 8000ae2:	f002 f811 	bl	8002b08 <vTaskSuspendAll>
			next_task_handle = ledr_task_handle;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <led_orange_handler+0x70>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <led_orange_handler+0x74>)
 8000aec:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000aee:	f002 f819 	bl	8002b24 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_ORANGE_PIN, GPIO_PIN_SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af8:	4808      	ldr	r0, [pc, #32]	; (8000b1c <led_orange_handler+0x6c>)
 8000afa:	f000 fc77 	bl	80013ec <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete orange task!!");
 8000afe:	480a      	ldr	r0, [pc, #40]	; (8000b28 <led_orange_handler+0x78>)
 8000b00:	f005 fcf6 	bl	80064f0 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskResume(ledr_task_handle);
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <led_orange_handler+0x70>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f001 ff37 	bl	800297c <vTaskResume>
			vTaskSuspend(NULL);
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f001 fe54 	bl	80027bc <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("Toggling ORANGE LED!!");
 8000b14:	e7d0      	b.n	8000ab8 <led_orange_handler+0x8>
 8000b16:	bf00      	nop
 8000b18:	08006740 	.word	0x08006740
 8000b1c:	40020c00 	.word	0x40020c00
 8000b20:	20000040 	.word	0x20000040
 8000b24:	20000048 	.word	0x20000048
 8000b28:	08006758 	.word	0x08006758

08000b2c <led_red_handler>:
		}
	}
}

static void led_red_handler(void* parameters)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af02      	add	r7, sp, #8
 8000b32:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling RED LED!!");
 8000b34:	4814      	ldr	r0, [pc, #80]	; (8000b88 <led_red_handler+0x5c>)
 8000b36:	f005 fcdb 	bl	80064f0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000b3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b3e:	4813      	ldr	r0, [pc, #76]	; (8000b8c <led_red_handler+0x60>)
 8000b40:	f000 fc6d 	bl	800141e <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL, pdMS_TO_TICKS(400));
 8000b44:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2100      	movs	r1, #0
 8000b50:	2000      	movs	r0, #0
 8000b52:	f002 fa71 	bl	8003038 <xTaskGenericNotifyWait>
 8000b56:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE)
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d1ea      	bne.n	8000b34 <led_red_handler+0x8>
		{
			vTaskSuspendAll();
 8000b5e:	f001 ffd3 	bl	8002b08 <vTaskSuspendAll>
			next_task_handle = NULL;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <led_red_handler+0x64>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 8000b68:	f001 ffdc 	bl	8002b24 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_RED_PIN, GPIO_PIN_SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b72:	4806      	ldr	r0, [pc, #24]	; (8000b8c <led_red_handler+0x60>)
 8000b74:	f000 fc3a 	bl	80013ec <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete red task and button task!!");
 8000b78:	4806      	ldr	r0, [pc, #24]	; (8000b94 <led_red_handler+0x68>)
 8000b7a:	f005 fcb9 	bl	80064f0 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskSuspend(NULL);
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f001 fe1c 	bl	80027bc <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("Toggling RED LED!!");
 8000b84:	e7d6      	b.n	8000b34 <led_red_handler+0x8>
 8000b86:	bf00      	nop
 8000b88:	08006770 	.word	0x08006770
 8000b8c:	40020c00 	.word	0x40020c00
 8000b90:	20000048 	.word	0x20000048
 8000b94:	08006784 	.word	0x08006784

08000b98 <button_handler>:
		}
	}
}

static void button_handler(void* parameters)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af02      	add	r7, sp, #8
 8000b9e:	6078      	str	r0, [r7, #4]
	uint8_t btn_read = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000ba8:	2101      	movs	r1, #1
 8000baa:	4814      	ldr	r0, [pc, #80]	; (8000bfc <button_handler+0x64>)
 8000bac:	f000 fc06 	bl	80013bc <HAL_GPIO_ReadPin>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	73bb      	strb	r3, [r7, #14]
		if(btn_read)
 8000bb4:	7bbb      	ldrb	r3, [r7, #14]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d019      	beq.n	8000bee <button_handler+0x56>
		{
			if(! prev_read)
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d116      	bne.n	8000bee <button_handler+0x56>
			{
				if(next_task_handle == NULL)
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <button_handler+0x68>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d109      	bne.n	8000bdc <button_handler+0x44>
				{
					vTaskResume(ledg_task_handle);
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <button_handler+0x6c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f001 fed5 	bl	800297c <vTaskResume>
					next_task_handle = ledg_task_handle;
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <button_handler+0x6c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <button_handler+0x68>)
 8000bd8:	6013      	str	r3, [r2, #0]
 8000bda:	e008      	b.n	8000bee <button_handler+0x56>
				}
				else
				{
					xTaskNotify(next_task_handle, 0, eNoAction);
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <button_handler+0x68>)
 8000bde:	6818      	ldr	r0, [r3, #0]
 8000be0:	2300      	movs	r3, #0
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	2300      	movs	r3, #0
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	f002 faad 	bl	8003148 <xTaskGenericNotify>
				}
			}
		}
		prev_read = btn_read;
 8000bee:	7bbb      	ldrb	r3, [r7, #14]
 8000bf0:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000bf2:	200a      	movs	r0, #10
 8000bf4:	f001 fdaa 	bl	800274c <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000bf8:	e7d6      	b.n	8000ba8 <button_handler+0x10>
 8000bfa:	bf00      	nop
 8000bfc:	40020000 	.word	0x40020000
 8000c00:	20000048 	.word	0x20000048
 8000c04:	20000038 	.word	0x20000038

08000c08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d101      	bne.n	8000c1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c1a:	f000 f931 	bl	8000e80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40001000 	.word	0x40001000

08000c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	4a0f      	ldr	r2, [pc, #60]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c50:	6453      	str	r3, [r2, #68]	; 0x44
 8000c52:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	603b      	str	r3, [r7, #0]
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	4a08      	ldr	r2, [pc, #32]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000c7a:	f002 fcfd 	bl	8003678 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800

08000c8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08e      	sub	sp, #56	; 0x38
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	4b33      	ldr	r3, [pc, #204]	; (8000d70 <HAL_InitTick+0xe4>)
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca4:	4a32      	ldr	r2, [pc, #200]	; (8000d70 <HAL_InitTick+0xe4>)
 8000ca6:	f043 0310 	orr.w	r3, r3, #16
 8000caa:	6413      	str	r3, [r2, #64]	; 0x40
 8000cac:	4b30      	ldr	r3, [pc, #192]	; (8000d70 <HAL_InitTick+0xe4>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb0:	f003 0310 	and.w	r3, r3, #16
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cb8:	f107 0210 	add.w	r2, r7, #16
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4611      	mov	r1, r2
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f001 f84a 	bl	8001d5c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cc8:	6a3b      	ldr	r3, [r7, #32]
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d103      	bne.n	8000cda <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cd2:	f001 f82f 	bl	8001d34 <HAL_RCC_GetPCLK1Freq>
 8000cd6:	6378      	str	r0, [r7, #52]	; 0x34
 8000cd8:	e004      	b.n	8000ce4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cda:	f001 f82b 	bl	8001d34 <HAL_RCC_GetPCLK1Freq>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ce6:	4a23      	ldr	r2, [pc, #140]	; (8000d74 <HAL_InitTick+0xe8>)
 8000ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cec:	0c9b      	lsrs	r3, r3, #18
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cf2:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <HAL_InitTick+0xec>)
 8000cf4:	4a21      	ldr	r2, [pc, #132]	; (8000d7c <HAL_InitTick+0xf0>)
 8000cf6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <HAL_InitTick+0xec>)
 8000cfa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cfe:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d00:	4a1d      	ldr	r2, [pc, #116]	; (8000d78 <HAL_InitTick+0xec>)
 8000d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d04:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d06:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <HAL_InitTick+0xec>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0c:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <HAL_InitTick+0xec>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d12:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <HAL_InitTick+0xec>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d18:	4817      	ldr	r0, [pc, #92]	; (8000d78 <HAL_InitTick+0xec>)
 8000d1a:	f001 f851 	bl	8001dc0 <HAL_TIM_Base_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d11b      	bne.n	8000d64 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d2c:	4812      	ldr	r0, [pc, #72]	; (8000d78 <HAL_InitTick+0xec>)
 8000d2e:	f001 f8a1 	bl	8001e74 <HAL_TIM_Base_Start_IT>
 8000d32:	4603      	mov	r3, r0
 8000d34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d111      	bne.n	8000d64 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d40:	2036      	movs	r0, #54	; 0x36
 8000d42:	f000 f991 	bl	8001068 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b0f      	cmp	r3, #15
 8000d4a:	d808      	bhi.n	8000d5e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	2036      	movs	r0, #54	; 0x36
 8000d52:	f000 f96d 	bl	8001030 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d56:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <HAL_InitTick+0xf4>)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6013      	str	r3, [r2, #0]
 8000d5c:	e002      	b.n	8000d64 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3738      	adds	r7, #56	; 0x38
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40023800 	.word	0x40023800
 8000d74:	431bde83 	.word	0x431bde83
 8000d78:	2000004c 	.word	0x2000004c
 8000d7c:	40001000 	.word	0x40001000
 8000d80:	20000004 	.word	0x20000004

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <NMI_Handler+0x4>

08000d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <MemManage_Handler+0x4>

08000d96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000db4:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <TIM6_DAC_IRQHandler+0x10>)
 8000db6:	f001 f8cd 	bl	8001f54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	2000004c 	.word	0x2000004c

08000dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <SystemInit+0x20>)
 8000dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <SystemInit+0x20>)
 8000dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dec:	480d      	ldr	r0, [pc, #52]	; (8000e24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dee:	490e      	ldr	r1, [pc, #56]	; (8000e28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000df0:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df4:	e002      	b.n	8000dfc <LoopCopyDataInit>

08000df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfa:	3304      	adds	r3, #4

08000dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e00:	d3f9      	bcc.n	8000df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e02:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e04:	4c0b      	ldr	r4, [pc, #44]	; (8000e34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e08:	e001      	b.n	8000e0e <LoopFillZerobss>

08000e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e0c:	3204      	adds	r2, #4

08000e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e10:	d3fb      	bcc.n	8000e0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e12:	f7ff ffd7 	bl	8000dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e16:	f005 fc09 	bl	800662c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1a:	f7ff fba5 	bl	8000568 <main>
  bx  lr    
 8000e1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e28:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000e2c:	080068d4 	.word	0x080068d4
  ldr r2, =_sbss
 8000e30:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000e34:	20014444 	.word	0x20014444

08000e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC_IRQHandler>
	...

08000e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <HAL_Init+0x40>)
 8000e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <HAL_Init+0x40>)
 8000e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <HAL_Init+0x40>)
 8000e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e64:	2003      	movs	r0, #3
 8000e66:	f000 f8d8 	bl	800101a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f7ff ff0e 	bl	8000c8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e70:	f7ff fee4 	bl	8000c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023c00 	.word	0x40023c00

08000e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x20>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	20000094 	.word	0x20000094

08000ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_GetTick+0x14>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000094 	.word	0x20000094

08000ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000edc:	4013      	ands	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef2:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	60d3      	str	r3, [r2, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <__NVIC_GetPriorityGrouping+0x18>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	f003 0307 	and.w	r3, r3, #7
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	db0b      	blt.n	8000f4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	f003 021f 	and.w	r2, r3, #31
 8000f3c:	4907      	ldr	r1, [pc, #28]	; (8000f5c <__NVIC_EnableIRQ+0x38>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	095b      	lsrs	r3, r3, #5
 8000f44:	2001      	movs	r0, #1
 8000f46:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000e100 	.word	0xe000e100

08000f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	6039      	str	r1, [r7, #0]
 8000f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	db0a      	blt.n	8000f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	490c      	ldr	r1, [pc, #48]	; (8000fac <__NVIC_SetPriority+0x4c>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	0112      	lsls	r2, r2, #4
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	440b      	add	r3, r1
 8000f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f88:	e00a      	b.n	8000fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4908      	ldr	r1, [pc, #32]	; (8000fb0 <__NVIC_SetPriority+0x50>)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	3b04      	subs	r3, #4
 8000f98:	0112      	lsls	r2, r2, #4
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	761a      	strb	r2, [r3, #24]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000e100 	.word	0xe000e100
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f1c3 0307 	rsb	r3, r3, #7
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	bf28      	it	cs
 8000fd2:	2304      	movcs	r3, #4
 8000fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	2b06      	cmp	r3, #6
 8000fdc:	d902      	bls.n	8000fe4 <NVIC_EncodePriority+0x30>
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3b03      	subs	r3, #3
 8000fe2:	e000      	b.n	8000fe6 <NVIC_EncodePriority+0x32>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa01 f303 	lsl.w	r3, r1, r3
 8001006:	43d9      	mvns	r1, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	4313      	orrs	r3, r2
         );
}
 800100e:	4618      	mov	r0, r3
 8001010:	3724      	adds	r7, #36	; 0x24
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ff4c 	bl	8000ec0 <__NVIC_SetPriorityGrouping>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
 800103c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001042:	f7ff ff61 	bl	8000f08 <__NVIC_GetPriorityGrouping>
 8001046:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	68b9      	ldr	r1, [r7, #8]
 800104c:	6978      	ldr	r0, [r7, #20]
 800104e:	f7ff ffb1 	bl	8000fb4 <NVIC_EncodePriority>
 8001052:	4602      	mov	r2, r0
 8001054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001058:	4611      	mov	r1, r2
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ff80 	bl	8000f60 <__NVIC_SetPriority>
}
 8001060:	bf00      	nop
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ff54 	bl	8000f24 <__NVIC_EnableIRQ>
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001084:	b480      	push	{r7}
 8001086:	b089      	sub	sp, #36	; 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
 800109e:	e16b      	b.n	8001378 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010a0:	2201      	movs	r2, #1
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	f040 815a 	bne.w	8001372 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d005      	beq.n	80010d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d130      	bne.n	8001138 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	2203      	movs	r2, #3
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	68da      	ldr	r2, [r3, #12]
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800110c:	2201      	movs	r2, #1
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	091b      	lsrs	r3, r3, #4
 8001122:	f003 0201 	and.w	r2, r3, #1
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b03      	cmp	r3, #3
 8001142:	d017      	beq.n	8001174 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	2203      	movs	r2, #3
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d123      	bne.n	80011c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	08da      	lsrs	r2, r3, #3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3208      	adds	r2, #8
 8001188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800118c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	220f      	movs	r2, #15
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	691a      	ldr	r2, [r3, #16]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	08da      	lsrs	r2, r3, #3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3208      	adds	r2, #8
 80011c2:	69b9      	ldr	r1, [r7, #24]
 80011c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	2203      	movs	r2, #3
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0203 	and.w	r2, r3, #3
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001204:	2b00      	cmp	r3, #0
 8001206:	f000 80b4 	beq.w	8001372 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b60      	ldr	r3, [pc, #384]	; (8001390 <HAL_GPIO_Init+0x30c>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	4a5f      	ldr	r2, [pc, #380]	; (8001390 <HAL_GPIO_Init+0x30c>)
 8001214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001218:	6453      	str	r3, [r2, #68]	; 0x44
 800121a:	4b5d      	ldr	r3, [pc, #372]	; (8001390 <HAL_GPIO_Init+0x30c>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001226:	4a5b      	ldr	r2, [pc, #364]	; (8001394 <HAL_GPIO_Init+0x310>)
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	089b      	lsrs	r3, r3, #2
 800122c:	3302      	adds	r3, #2
 800122e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	220f      	movs	r2, #15
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a52      	ldr	r2, [pc, #328]	; (8001398 <HAL_GPIO_Init+0x314>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d02b      	beq.n	80012aa <HAL_GPIO_Init+0x226>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a51      	ldr	r2, [pc, #324]	; (800139c <HAL_GPIO_Init+0x318>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d025      	beq.n	80012a6 <HAL_GPIO_Init+0x222>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a50      	ldr	r2, [pc, #320]	; (80013a0 <HAL_GPIO_Init+0x31c>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d01f      	beq.n	80012a2 <HAL_GPIO_Init+0x21e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4f      	ldr	r2, [pc, #316]	; (80013a4 <HAL_GPIO_Init+0x320>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d019      	beq.n	800129e <HAL_GPIO_Init+0x21a>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4e      	ldr	r2, [pc, #312]	; (80013a8 <HAL_GPIO_Init+0x324>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d013      	beq.n	800129a <HAL_GPIO_Init+0x216>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4d      	ldr	r2, [pc, #308]	; (80013ac <HAL_GPIO_Init+0x328>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d00d      	beq.n	8001296 <HAL_GPIO_Init+0x212>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a4c      	ldr	r2, [pc, #304]	; (80013b0 <HAL_GPIO_Init+0x32c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d007      	beq.n	8001292 <HAL_GPIO_Init+0x20e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a4b      	ldr	r2, [pc, #300]	; (80013b4 <HAL_GPIO_Init+0x330>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d101      	bne.n	800128e <HAL_GPIO_Init+0x20a>
 800128a:	2307      	movs	r3, #7
 800128c:	e00e      	b.n	80012ac <HAL_GPIO_Init+0x228>
 800128e:	2308      	movs	r3, #8
 8001290:	e00c      	b.n	80012ac <HAL_GPIO_Init+0x228>
 8001292:	2306      	movs	r3, #6
 8001294:	e00a      	b.n	80012ac <HAL_GPIO_Init+0x228>
 8001296:	2305      	movs	r3, #5
 8001298:	e008      	b.n	80012ac <HAL_GPIO_Init+0x228>
 800129a:	2304      	movs	r3, #4
 800129c:	e006      	b.n	80012ac <HAL_GPIO_Init+0x228>
 800129e:	2303      	movs	r3, #3
 80012a0:	e004      	b.n	80012ac <HAL_GPIO_Init+0x228>
 80012a2:	2302      	movs	r3, #2
 80012a4:	e002      	b.n	80012ac <HAL_GPIO_Init+0x228>
 80012a6:	2301      	movs	r3, #1
 80012a8:	e000      	b.n	80012ac <HAL_GPIO_Init+0x228>
 80012aa:	2300      	movs	r3, #0
 80012ac:	69fa      	ldr	r2, [r7, #28]
 80012ae:	f002 0203 	and.w	r2, r2, #3
 80012b2:	0092      	lsls	r2, r2, #2
 80012b4:	4093      	lsls	r3, r2
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012bc:	4935      	ldr	r1, [pc, #212]	; (8001394 <HAL_GPIO_Init+0x310>)
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	089b      	lsrs	r3, r3, #2
 80012c2:	3302      	adds	r3, #2
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ca:	4b3b      	ldr	r3, [pc, #236]	; (80013b8 <HAL_GPIO_Init+0x334>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ee:	4a32      	ldr	r2, [pc, #200]	; (80013b8 <HAL_GPIO_Init+0x334>)
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f4:	4b30      	ldr	r3, [pc, #192]	; (80013b8 <HAL_GPIO_Init+0x334>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001318:	4a27      	ldr	r2, [pc, #156]	; (80013b8 <HAL_GPIO_Init+0x334>)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800131e:	4b26      	ldr	r3, [pc, #152]	; (80013b8 <HAL_GPIO_Init+0x334>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001342:	4a1d      	ldr	r2, [pc, #116]	; (80013b8 <HAL_GPIO_Init+0x334>)
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <HAL_GPIO_Init+0x334>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800136c:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <HAL_GPIO_Init+0x334>)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3301      	adds	r3, #1
 8001376:	61fb      	str	r3, [r7, #28]
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	2b0f      	cmp	r3, #15
 800137c:	f67f ae90 	bls.w	80010a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	3724      	adds	r7, #36	; 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800
 8001394:	40013800 	.word	0x40013800
 8001398:	40020000 	.word	0x40020000
 800139c:	40020400 	.word	0x40020400
 80013a0:	40020800 	.word	0x40020800
 80013a4:	40020c00 	.word	0x40020c00
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40021400 	.word	0x40021400
 80013b0:	40021800 	.word	0x40021800
 80013b4:	40021c00 	.word	0x40021c00
 80013b8:	40013c00 	.word	0x40013c00

080013bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	691a      	ldr	r2, [r3, #16]
 80013cc:	887b      	ldrh	r3, [r7, #2]
 80013ce:	4013      	ands	r3, r2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d002      	beq.n	80013da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013d4:	2301      	movs	r3, #1
 80013d6:	73fb      	strb	r3, [r7, #15]
 80013d8:	e001      	b.n	80013de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013da:	2300      	movs	r3, #0
 80013dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013de:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	807b      	strh	r3, [r7, #2]
 80013f8:	4613      	mov	r3, r2
 80013fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013fc:	787b      	ldrb	r3, [r7, #1]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001402:	887a      	ldrh	r2, [r7, #2]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001408:	e003      	b.n	8001412 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800140a:	887b      	ldrh	r3, [r7, #2]
 800140c:	041a      	lsls	r2, r3, #16
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	619a      	str	r2, [r3, #24]
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800141e:	b480      	push	{r7}
 8001420:	b085      	sub	sp, #20
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	460b      	mov	r3, r1
 8001428:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001430:	887a      	ldrh	r2, [r7, #2]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	4013      	ands	r3, r2
 8001436:	041a      	lsls	r2, r3, #16
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	43d9      	mvns	r1, r3
 800143c:	887b      	ldrh	r3, [r7, #2]
 800143e:	400b      	ands	r3, r1
 8001440:	431a      	orrs	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	619a      	str	r2, [r3, #24]
}
 8001446:	bf00      	nop
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e267      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	2b00      	cmp	r3, #0
 8001470:	d075      	beq.n	800155e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001472:	4b88      	ldr	r3, [pc, #544]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f003 030c 	and.w	r3, r3, #12
 800147a:	2b04      	cmp	r3, #4
 800147c:	d00c      	beq.n	8001498 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800147e:	4b85      	ldr	r3, [pc, #532]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001486:	2b08      	cmp	r3, #8
 8001488:	d112      	bne.n	80014b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800148a:	4b82      	ldr	r3, [pc, #520]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001492:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001496:	d10b      	bne.n	80014b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001498:	4b7e      	ldr	r3, [pc, #504]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d05b      	beq.n	800155c <HAL_RCC_OscConfig+0x108>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d157      	bne.n	800155c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e242      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b8:	d106      	bne.n	80014c8 <HAL_RCC_OscConfig+0x74>
 80014ba:	4b76      	ldr	r3, [pc, #472]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a75      	ldr	r2, [pc, #468]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 80014c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	e01d      	b.n	8001504 <HAL_RCC_OscConfig+0xb0>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014d0:	d10c      	bne.n	80014ec <HAL_RCC_OscConfig+0x98>
 80014d2:	4b70      	ldr	r3, [pc, #448]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a6f      	ldr	r2, [pc, #444]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 80014d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	4b6d      	ldr	r3, [pc, #436]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a6c      	ldr	r2, [pc, #432]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 80014e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	e00b      	b.n	8001504 <HAL_RCC_OscConfig+0xb0>
 80014ec:	4b69      	ldr	r3, [pc, #420]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a68      	ldr	r2, [pc, #416]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 80014f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	4b66      	ldr	r3, [pc, #408]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a65      	ldr	r2, [pc, #404]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 80014fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d013      	beq.n	8001534 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150c:	f7ff fccc 	bl	8000ea8 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001514:	f7ff fcc8 	bl	8000ea8 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b64      	cmp	r3, #100	; 0x64
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e207      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001526:	4b5b      	ldr	r3, [pc, #364]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0f0      	beq.n	8001514 <HAL_RCC_OscConfig+0xc0>
 8001532:	e014      	b.n	800155e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001534:	f7ff fcb8 	bl	8000ea8 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800153c:	f7ff fcb4 	bl	8000ea8 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b64      	cmp	r3, #100	; 0x64
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e1f3      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154e:	4b51      	ldr	r3, [pc, #324]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0xe8>
 800155a:	e000      	b.n	800155e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800155c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d063      	beq.n	8001632 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800156a:	4b4a      	ldr	r3, [pc, #296]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 030c 	and.w	r3, r3, #12
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00b      	beq.n	800158e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001576:	4b47      	ldr	r3, [pc, #284]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800157e:	2b08      	cmp	r3, #8
 8001580:	d11c      	bne.n	80015bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001582:	4b44      	ldr	r3, [pc, #272]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d116      	bne.n	80015bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158e:	4b41      	ldr	r3, [pc, #260]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d005      	beq.n	80015a6 <HAL_RCC_OscConfig+0x152>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d001      	beq.n	80015a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e1c7      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a6:	4b3b      	ldr	r3, [pc, #236]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	4937      	ldr	r1, [pc, #220]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ba:	e03a      	b.n	8001632 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d020      	beq.n	8001606 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015c4:	4b34      	ldr	r3, [pc, #208]	; (8001698 <HAL_RCC_OscConfig+0x244>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ca:	f7ff fc6d 	bl	8000ea8 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015d2:	f7ff fc69 	bl	8000ea8 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e1a8      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e4:	4b2b      	ldr	r3, [pc, #172]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0f0      	beq.n	80015d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f0:	4b28      	ldr	r3, [pc, #160]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	4925      	ldr	r1, [pc, #148]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 8001600:	4313      	orrs	r3, r2
 8001602:	600b      	str	r3, [r1, #0]
 8001604:	e015      	b.n	8001632 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001606:	4b24      	ldr	r3, [pc, #144]	; (8001698 <HAL_RCC_OscConfig+0x244>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160c:	f7ff fc4c 	bl	8000ea8 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001614:	f7ff fc48 	bl	8000ea8 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e187      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001626:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0308 	and.w	r3, r3, #8
 800163a:	2b00      	cmp	r3, #0
 800163c:	d036      	beq.n	80016ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d016      	beq.n	8001674 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <HAL_RCC_OscConfig+0x248>)
 8001648:	2201      	movs	r2, #1
 800164a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164c:	f7ff fc2c 	bl	8000ea8 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001654:	f7ff fc28 	bl	8000ea8 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e167      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 8001668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0x200>
 8001672:	e01b      	b.n	80016ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <HAL_RCC_OscConfig+0x248>)
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800167a:	f7ff fc15 	bl	8000ea8 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001680:	e00e      	b.n	80016a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001682:	f7ff fc11 	bl	8000ea8 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d907      	bls.n	80016a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e150      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
 8001694:	40023800 	.word	0x40023800
 8001698:	42470000 	.word	0x42470000
 800169c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a0:	4b88      	ldr	r3, [pc, #544]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 80016a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1ea      	bne.n	8001682 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 8097 	beq.w	80017e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ba:	2300      	movs	r3, #0
 80016bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016be:	4b81      	ldr	r3, [pc, #516]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10f      	bne.n	80016ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	4b7d      	ldr	r3, [pc, #500]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	4a7c      	ldr	r2, [pc, #496]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 80016d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d8:	6413      	str	r3, [r2, #64]	; 0x40
 80016da:	4b7a      	ldr	r3, [pc, #488]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016e6:	2301      	movs	r3, #1
 80016e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ea:	4b77      	ldr	r3, [pc, #476]	; (80018c8 <HAL_RCC_OscConfig+0x474>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d118      	bne.n	8001728 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016f6:	4b74      	ldr	r3, [pc, #464]	; (80018c8 <HAL_RCC_OscConfig+0x474>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a73      	ldr	r2, [pc, #460]	; (80018c8 <HAL_RCC_OscConfig+0x474>)
 80016fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001702:	f7ff fbd1 	bl	8000ea8 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800170a:	f7ff fbcd 	bl	8000ea8 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e10c      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171c:	4b6a      	ldr	r3, [pc, #424]	; (80018c8 <HAL_RCC_OscConfig+0x474>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d106      	bne.n	800173e <HAL_RCC_OscConfig+0x2ea>
 8001730:	4b64      	ldr	r3, [pc, #400]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 8001732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001734:	4a63      	ldr	r2, [pc, #396]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	6713      	str	r3, [r2, #112]	; 0x70
 800173c:	e01c      	b.n	8001778 <HAL_RCC_OscConfig+0x324>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2b05      	cmp	r3, #5
 8001744:	d10c      	bne.n	8001760 <HAL_RCC_OscConfig+0x30c>
 8001746:	4b5f      	ldr	r3, [pc, #380]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 8001748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174a:	4a5e      	ldr	r2, [pc, #376]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 800174c:	f043 0304 	orr.w	r3, r3, #4
 8001750:	6713      	str	r3, [r2, #112]	; 0x70
 8001752:	4b5c      	ldr	r3, [pc, #368]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 8001754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001756:	4a5b      	ldr	r2, [pc, #364]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6713      	str	r3, [r2, #112]	; 0x70
 800175e:	e00b      	b.n	8001778 <HAL_RCC_OscConfig+0x324>
 8001760:	4b58      	ldr	r3, [pc, #352]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 8001762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001764:	4a57      	ldr	r2, [pc, #348]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 8001766:	f023 0301 	bic.w	r3, r3, #1
 800176a:	6713      	str	r3, [r2, #112]	; 0x70
 800176c:	4b55      	ldr	r3, [pc, #340]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 800176e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001770:	4a54      	ldr	r2, [pc, #336]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 8001772:	f023 0304 	bic.w	r3, r3, #4
 8001776:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d015      	beq.n	80017ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001780:	f7ff fb92 	bl	8000ea8 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001786:	e00a      	b.n	800179e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001788:	f7ff fb8e 	bl	8000ea8 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	f241 3288 	movw	r2, #5000	; 0x1388
 8001796:	4293      	cmp	r3, r2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e0cb      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800179e:	4b49      	ldr	r3, [pc, #292]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 80017a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0ee      	beq.n	8001788 <HAL_RCC_OscConfig+0x334>
 80017aa:	e014      	b.n	80017d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ac:	f7ff fb7c 	bl	8000ea8 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b2:	e00a      	b.n	80017ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017b4:	f7ff fb78 	bl	8000ea8 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e0b5      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ca:	4b3e      	ldr	r3, [pc, #248]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 80017cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1ee      	bne.n	80017b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017d6:	7dfb      	ldrb	r3, [r7, #23]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d105      	bne.n	80017e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017dc:	4b39      	ldr	r3, [pc, #228]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	4a38      	ldr	r2, [pc, #224]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 80017e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 80a1 	beq.w	8001934 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017f2:	4b34      	ldr	r3, [pc, #208]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 030c 	and.w	r3, r3, #12
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	d05c      	beq.n	80018b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	2b02      	cmp	r3, #2
 8001804:	d141      	bne.n	800188a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001806:	4b31      	ldr	r3, [pc, #196]	; (80018cc <HAL_RCC_OscConfig+0x478>)
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180c:	f7ff fb4c 	bl	8000ea8 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001814:	f7ff fb48 	bl	8000ea8 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e087      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001826:	4b27      	ldr	r3, [pc, #156]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69da      	ldr	r2, [r3, #28]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001840:	019b      	lsls	r3, r3, #6
 8001842:	431a      	orrs	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001848:	085b      	lsrs	r3, r3, #1
 800184a:	3b01      	subs	r3, #1
 800184c:	041b      	lsls	r3, r3, #16
 800184e:	431a      	orrs	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001854:	061b      	lsls	r3, r3, #24
 8001856:	491b      	ldr	r1, [pc, #108]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 8001858:	4313      	orrs	r3, r2
 800185a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800185c:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <HAL_RCC_OscConfig+0x478>)
 800185e:	2201      	movs	r2, #1
 8001860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001862:	f7ff fb21 	bl	8000ea8 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800186a:	f7ff fb1d 	bl	8000ea8 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e05c      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0f0      	beq.n	800186a <HAL_RCC_OscConfig+0x416>
 8001888:	e054      	b.n	8001934 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <HAL_RCC_OscConfig+0x478>)
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001890:	f7ff fb0a 	bl	8000ea8 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001898:	f7ff fb06 	bl	8000ea8 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e045      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_OscConfig+0x444>
 80018b6:	e03d      	b.n	8001934 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d107      	bne.n	80018d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e038      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40007000 	.word	0x40007000
 80018cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018d0:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <HAL_RCC_OscConfig+0x4ec>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d028      	beq.n	8001930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d121      	bne.n	8001930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d11a      	bne.n	8001930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001900:	4013      	ands	r3, r2
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001906:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001908:	4293      	cmp	r3, r2
 800190a:	d111      	bne.n	8001930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001916:	085b      	lsrs	r3, r3, #1
 8001918:	3b01      	subs	r3, #1
 800191a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800191c:	429a      	cmp	r2, r3
 800191e:	d107      	bne.n	8001930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800192c:	429a      	cmp	r2, r3
 800192e:	d001      	beq.n	8001934 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800

08001944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0cc      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001958:	4b68      	ldr	r3, [pc, #416]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d90c      	bls.n	8001980 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001966:	4b65      	ldr	r3, [pc, #404]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800196e:	4b63      	ldr	r3, [pc, #396]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d001      	beq.n	8001980 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e0b8      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d020      	beq.n	80019ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	d005      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001998:	4b59      	ldr	r3, [pc, #356]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	4a58      	ldr	r2, [pc, #352]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0308 	and.w	r3, r3, #8
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019b0:	4b53      	ldr	r3, [pc, #332]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	4a52      	ldr	r2, [pc, #328]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019bc:	4b50      	ldr	r3, [pc, #320]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	494d      	ldr	r1, [pc, #308]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d044      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e2:	4b47      	ldr	r3, [pc, #284]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d119      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e07f      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d003      	beq.n	8001a02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d107      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a02:	4b3f      	ldr	r3, [pc, #252]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d109      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e06f      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a12:	4b3b      	ldr	r3, [pc, #236]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e067      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a22:	4b37      	ldr	r3, [pc, #220]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f023 0203 	bic.w	r2, r3, #3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	4934      	ldr	r1, [pc, #208]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a34:	f7ff fa38 	bl	8000ea8 <HAL_GetTick>
 8001a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3a:	e00a      	b.n	8001a52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3c:	f7ff fa34 	bl	8000ea8 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e04f      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a52:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 020c 	and.w	r2, r3, #12
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d1eb      	bne.n	8001a3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a64:	4b25      	ldr	r3, [pc, #148]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d20c      	bcs.n	8001a8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a72:	4b22      	ldr	r3, [pc, #136]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7a:	4b20      	ldr	r3, [pc, #128]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e032      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d008      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a98:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	4916      	ldr	r1, [pc, #88]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d009      	beq.n	8001aca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ab6:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	490e      	ldr	r1, [pc, #56]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aca:	f000 f821 	bl	8001b10 <HAL_RCC_GetSysClockFreq>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	091b      	lsrs	r3, r3, #4
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	490a      	ldr	r1, [pc, #40]	; (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001adc:	5ccb      	ldrb	r3, [r1, r3]
 8001ade:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae2:	4a09      	ldr	r2, [pc, #36]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ae6:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff f8ce 	bl	8000c8c <HAL_InitTick>

  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023c00 	.word	0x40023c00
 8001b00:	40023800 	.word	0x40023800
 8001b04:	08006870 	.word	0x08006870
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	20000004 	.word	0x20000004

08001b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b14:	b094      	sub	sp, #80	; 0x50
 8001b16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	647b      	str	r3, [r7, #68]	; 0x44
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b20:	2300      	movs	r3, #0
 8001b22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b28:	4b79      	ldr	r3, [pc, #484]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 030c 	and.w	r3, r3, #12
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d00d      	beq.n	8001b50 <HAL_RCC_GetSysClockFreq+0x40>
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	f200 80e1 	bhi.w	8001cfc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d002      	beq.n	8001b44 <HAL_RCC_GetSysClockFreq+0x34>
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	d003      	beq.n	8001b4a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b42:	e0db      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b44:	4b73      	ldr	r3, [pc, #460]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b46:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b48:	e0db      	b.n	8001d02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b4a:	4b73      	ldr	r3, [pc, #460]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b4e:	e0d8      	b.n	8001d02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b50:	4b6f      	ldr	r3, [pc, #444]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b58:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b5a:	4b6d      	ldr	r3, [pc, #436]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d063      	beq.n	8001c2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b66:	4b6a      	ldr	r3, [pc, #424]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	099b      	lsrs	r3, r3, #6
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b78:	633b      	str	r3, [r7, #48]	; 0x30
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b82:	4622      	mov	r2, r4
 8001b84:	462b      	mov	r3, r5
 8001b86:	f04f 0000 	mov.w	r0, #0
 8001b8a:	f04f 0100 	mov.w	r1, #0
 8001b8e:	0159      	lsls	r1, r3, #5
 8001b90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b94:	0150      	lsls	r0, r2, #5
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4621      	mov	r1, r4
 8001b9c:	1a51      	subs	r1, r2, r1
 8001b9e:	6139      	str	r1, [r7, #16]
 8001ba0:	4629      	mov	r1, r5
 8001ba2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	f04f 0300 	mov.w	r3, #0
 8001bb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001bb4:	4659      	mov	r1, fp
 8001bb6:	018b      	lsls	r3, r1, #6
 8001bb8:	4651      	mov	r1, sl
 8001bba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bbe:	4651      	mov	r1, sl
 8001bc0:	018a      	lsls	r2, r1, #6
 8001bc2:	4651      	mov	r1, sl
 8001bc4:	ebb2 0801 	subs.w	r8, r2, r1
 8001bc8:	4659      	mov	r1, fp
 8001bca:	eb63 0901 	sbc.w	r9, r3, r1
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001be2:	4690      	mov	r8, r2
 8001be4:	4699      	mov	r9, r3
 8001be6:	4623      	mov	r3, r4
 8001be8:	eb18 0303 	adds.w	r3, r8, r3
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	462b      	mov	r3, r5
 8001bf0:	eb49 0303 	adc.w	r3, r9, r3
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c02:	4629      	mov	r1, r5
 8001c04:	024b      	lsls	r3, r1, #9
 8001c06:	4621      	mov	r1, r4
 8001c08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c0c:	4621      	mov	r1, r4
 8001c0e:	024a      	lsls	r2, r1, #9
 8001c10:	4610      	mov	r0, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c16:	2200      	movs	r2, #0
 8001c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c20:	f7fe fb20 	bl	8000264 <__aeabi_uldivmod>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4613      	mov	r3, r2
 8001c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c2c:	e058      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c2e:	4b38      	ldr	r3, [pc, #224]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	099b      	lsrs	r3, r3, #6
 8001c34:	2200      	movs	r2, #0
 8001c36:	4618      	mov	r0, r3
 8001c38:	4611      	mov	r1, r2
 8001c3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c3e:	623b      	str	r3, [r7, #32]
 8001c40:	2300      	movs	r3, #0
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
 8001c44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c48:	4642      	mov	r2, r8
 8001c4a:	464b      	mov	r3, r9
 8001c4c:	f04f 0000 	mov.w	r0, #0
 8001c50:	f04f 0100 	mov.w	r1, #0
 8001c54:	0159      	lsls	r1, r3, #5
 8001c56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c5a:	0150      	lsls	r0, r2, #5
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4641      	mov	r1, r8
 8001c62:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c66:	4649      	mov	r1, r9
 8001c68:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	f04f 0300 	mov.w	r3, #0
 8001c74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c80:	ebb2 040a 	subs.w	r4, r2, sl
 8001c84:	eb63 050b 	sbc.w	r5, r3, fp
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	00eb      	lsls	r3, r5, #3
 8001c92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c96:	00e2      	lsls	r2, r4, #3
 8001c98:	4614      	mov	r4, r2
 8001c9a:	461d      	mov	r5, r3
 8001c9c:	4643      	mov	r3, r8
 8001c9e:	18e3      	adds	r3, r4, r3
 8001ca0:	603b      	str	r3, [r7, #0]
 8001ca2:	464b      	mov	r3, r9
 8001ca4:	eb45 0303 	adc.w	r3, r5, r3
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cb6:	4629      	mov	r1, r5
 8001cb8:	028b      	lsls	r3, r1, #10
 8001cba:	4621      	mov	r1, r4
 8001cbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cc0:	4621      	mov	r1, r4
 8001cc2:	028a      	lsls	r2, r1, #10
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cca:	2200      	movs	r2, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
 8001cce:	61fa      	str	r2, [r7, #28]
 8001cd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cd4:	f7fe fac6 	bl	8000264 <__aeabi_uldivmod>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4613      	mov	r3, r2
 8001cde:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	0c1b      	lsrs	r3, r3, #16
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	3301      	adds	r3, #1
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001cf0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cfa:	e002      	b.n	8001d02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cfc:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cfe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3750      	adds	r7, #80	; 0x50
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800
 8001d14:	00f42400 	.word	0x00f42400
 8001d18:	007a1200 	.word	0x007a1200

08001d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d22:	681b      	ldr	r3, [r3, #0]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000000 	.word	0x20000000

08001d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d38:	f7ff fff0 	bl	8001d1c <HAL_RCC_GetHCLKFreq>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	0a9b      	lsrs	r3, r3, #10
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	4903      	ldr	r1, [pc, #12]	; (8001d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d4a:	5ccb      	ldrb	r3, [r1, r3]
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40023800 	.word	0x40023800
 8001d58:	08006880 	.word	0x08006880

08001d5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	220f      	movs	r2, #15
 8001d6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_RCC_GetClockConfig+0x5c>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 0203 	and.w	r2, r3, #3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d78:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <HAL_RCC_GetClockConfig+0x5c>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <HAL_RCC_GetClockConfig+0x5c>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d90:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HAL_RCC_GetClockConfig+0x5c>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	08db      	lsrs	r3, r3, #3
 8001d96:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d9e:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <HAL_RCC_GetClockConfig+0x60>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0207 	and.w	r2, r3, #7
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	601a      	str	r2, [r3, #0]
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40023c00 	.word	0x40023c00

08001dc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e041      	b.n	8001e56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d106      	bne.n	8001dec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f839 	bl	8001e5e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2202      	movs	r2, #2
 8001df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4610      	mov	r0, r2
 8001e00:	f000 f9d8 	bl	80021b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
	...

08001e74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d001      	beq.n	8001e8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e04e      	b.n	8001f2a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2202      	movs	r2, #2
 8001e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a23      	ldr	r2, [pc, #140]	; (8001f38 <HAL_TIM_Base_Start_IT+0xc4>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d022      	beq.n	8001ef4 <HAL_TIM_Base_Start_IT+0x80>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb6:	d01d      	beq.n	8001ef4 <HAL_TIM_Base_Start_IT+0x80>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a1f      	ldr	r2, [pc, #124]	; (8001f3c <HAL_TIM_Base_Start_IT+0xc8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d018      	beq.n	8001ef4 <HAL_TIM_Base_Start_IT+0x80>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a1e      	ldr	r2, [pc, #120]	; (8001f40 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d013      	beq.n	8001ef4 <HAL_TIM_Base_Start_IT+0x80>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a1c      	ldr	r2, [pc, #112]	; (8001f44 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d00e      	beq.n	8001ef4 <HAL_TIM_Base_Start_IT+0x80>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a1b      	ldr	r2, [pc, #108]	; (8001f48 <HAL_TIM_Base_Start_IT+0xd4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d009      	beq.n	8001ef4 <HAL_TIM_Base_Start_IT+0x80>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a19      	ldr	r2, [pc, #100]	; (8001f4c <HAL_TIM_Base_Start_IT+0xd8>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d004      	beq.n	8001ef4 <HAL_TIM_Base_Start_IT+0x80>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a18      	ldr	r2, [pc, #96]	; (8001f50 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d111      	bne.n	8001f18 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2b06      	cmp	r3, #6
 8001f04:	d010      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 0201 	orr.w	r2, r2, #1
 8001f14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f16:	e007      	b.n	8001f28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0201 	orr.w	r2, r2, #1
 8001f26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40010000 	.word	0x40010000
 8001f3c:	40000400 	.word	0x40000400
 8001f40:	40000800 	.word	0x40000800
 8001f44:	40000c00 	.word	0x40000c00
 8001f48:	40010400 	.word	0x40010400
 8001f4c:	40014000 	.word	0x40014000
 8001f50:	40001800 	.word	0x40001800

08001f54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d122      	bne.n	8001fb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d11b      	bne.n	8001fb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f06f 0202 	mvn.w	r2, #2
 8001f80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f8ee 	bl	8002178 <HAL_TIM_IC_CaptureCallback>
 8001f9c:	e005      	b.n	8001faa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f8e0 	bl	8002164 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f8f1 	bl	800218c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	f003 0304 	and.w	r3, r3, #4
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d122      	bne.n	8002004 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d11b      	bne.n	8002004 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f06f 0204 	mvn.w	r2, #4
 8001fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2202      	movs	r2, #2
 8001fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f8c4 	bl	8002178 <HAL_TIM_IC_CaptureCallback>
 8001ff0:	e005      	b.n	8001ffe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f8b6 	bl	8002164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f8c7 	bl	800218c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b08      	cmp	r3, #8
 8002010:	d122      	bne.n	8002058 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f003 0308 	and.w	r3, r3, #8
 800201c:	2b08      	cmp	r3, #8
 800201e:	d11b      	bne.n	8002058 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f06f 0208 	mvn.w	r2, #8
 8002028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2204      	movs	r2, #4
 800202e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f89a 	bl	8002178 <HAL_TIM_IC_CaptureCallback>
 8002044:	e005      	b.n	8002052 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f88c 	bl	8002164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f89d 	bl	800218c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f003 0310 	and.w	r3, r3, #16
 8002062:	2b10      	cmp	r3, #16
 8002064:	d122      	bne.n	80020ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f003 0310 	and.w	r3, r3, #16
 8002070:	2b10      	cmp	r3, #16
 8002072:	d11b      	bne.n	80020ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0210 	mvn.w	r2, #16
 800207c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2208      	movs	r2, #8
 8002082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f870 	bl	8002178 <HAL_TIM_IC_CaptureCallback>
 8002098:	e005      	b.n	80020a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f862 	bl	8002164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f873 	bl	800218c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d10e      	bne.n	80020d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d107      	bne.n	80020d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f06f 0201 	mvn.w	r2, #1
 80020d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7fe fd98 	bl	8000c08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e2:	2b80      	cmp	r3, #128	; 0x80
 80020e4:	d10e      	bne.n	8002104 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f0:	2b80      	cmp	r3, #128	; 0x80
 80020f2:	d107      	bne.n	8002104 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f902 	bl	8002308 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800210e:	2b40      	cmp	r3, #64	; 0x40
 8002110:	d10e      	bne.n	8002130 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211c:	2b40      	cmp	r3, #64	; 0x40
 800211e:	d107      	bne.n	8002130 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f838 	bl	80021a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	f003 0320 	and.w	r3, r3, #32
 800213a:	2b20      	cmp	r3, #32
 800213c:	d10e      	bne.n	800215c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f003 0320 	and.w	r3, r3, #32
 8002148:	2b20      	cmp	r3, #32
 800214a:	d107      	bne.n	800215c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f06f 0220 	mvn.w	r2, #32
 8002154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f8cc 	bl	80022f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a40      	ldr	r2, [pc, #256]	; (80022c8 <TIM_Base_SetConfig+0x114>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d013      	beq.n	80021f4 <TIM_Base_SetConfig+0x40>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d2:	d00f      	beq.n	80021f4 <TIM_Base_SetConfig+0x40>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a3d      	ldr	r2, [pc, #244]	; (80022cc <TIM_Base_SetConfig+0x118>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d00b      	beq.n	80021f4 <TIM_Base_SetConfig+0x40>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a3c      	ldr	r2, [pc, #240]	; (80022d0 <TIM_Base_SetConfig+0x11c>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d007      	beq.n	80021f4 <TIM_Base_SetConfig+0x40>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a3b      	ldr	r2, [pc, #236]	; (80022d4 <TIM_Base_SetConfig+0x120>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d003      	beq.n	80021f4 <TIM_Base_SetConfig+0x40>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a3a      	ldr	r2, [pc, #232]	; (80022d8 <TIM_Base_SetConfig+0x124>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d108      	bne.n	8002206 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	4313      	orrs	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a2f      	ldr	r2, [pc, #188]	; (80022c8 <TIM_Base_SetConfig+0x114>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d02b      	beq.n	8002266 <TIM_Base_SetConfig+0xb2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002214:	d027      	beq.n	8002266 <TIM_Base_SetConfig+0xb2>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a2c      	ldr	r2, [pc, #176]	; (80022cc <TIM_Base_SetConfig+0x118>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d023      	beq.n	8002266 <TIM_Base_SetConfig+0xb2>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a2b      	ldr	r2, [pc, #172]	; (80022d0 <TIM_Base_SetConfig+0x11c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d01f      	beq.n	8002266 <TIM_Base_SetConfig+0xb2>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a2a      	ldr	r2, [pc, #168]	; (80022d4 <TIM_Base_SetConfig+0x120>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d01b      	beq.n	8002266 <TIM_Base_SetConfig+0xb2>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a29      	ldr	r2, [pc, #164]	; (80022d8 <TIM_Base_SetConfig+0x124>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d017      	beq.n	8002266 <TIM_Base_SetConfig+0xb2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a28      	ldr	r2, [pc, #160]	; (80022dc <TIM_Base_SetConfig+0x128>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d013      	beq.n	8002266 <TIM_Base_SetConfig+0xb2>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a27      	ldr	r2, [pc, #156]	; (80022e0 <TIM_Base_SetConfig+0x12c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d00f      	beq.n	8002266 <TIM_Base_SetConfig+0xb2>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a26      	ldr	r2, [pc, #152]	; (80022e4 <TIM_Base_SetConfig+0x130>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d00b      	beq.n	8002266 <TIM_Base_SetConfig+0xb2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a25      	ldr	r2, [pc, #148]	; (80022e8 <TIM_Base_SetConfig+0x134>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d007      	beq.n	8002266 <TIM_Base_SetConfig+0xb2>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a24      	ldr	r2, [pc, #144]	; (80022ec <TIM_Base_SetConfig+0x138>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d003      	beq.n	8002266 <TIM_Base_SetConfig+0xb2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a23      	ldr	r2, [pc, #140]	; (80022f0 <TIM_Base_SetConfig+0x13c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d108      	bne.n	8002278 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800226c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	4313      	orrs	r3, r2
 8002276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	4313      	orrs	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a0a      	ldr	r2, [pc, #40]	; (80022c8 <TIM_Base_SetConfig+0x114>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d003      	beq.n	80022ac <TIM_Base_SetConfig+0xf8>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a0c      	ldr	r2, [pc, #48]	; (80022d8 <TIM_Base_SetConfig+0x124>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d103      	bne.n	80022b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	615a      	str	r2, [r3, #20]
}
 80022ba:	bf00      	nop
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	40010000 	.word	0x40010000
 80022cc:	40000400 	.word	0x40000400
 80022d0:	40000800 	.word	0x40000800
 80022d4:	40000c00 	.word	0x40000c00
 80022d8:	40010400 	.word	0x40010400
 80022dc:	40014000 	.word	0x40014000
 80022e0:	40014400 	.word	0x40014400
 80022e4:	40014800 	.word	0x40014800
 80022e8:	40001800 	.word	0x40001800
 80022ec:	40001c00 	.word	0x40001c00
 80022f0:	40002000 	.word	0x40002000

080022f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f103 0208 	add.w	r2, r3, #8
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f04f 32ff 	mov.w	r2, #4294967295
 8002334:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f103 0208 	add.w	r2, r3, #8
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f103 0208 	add.w	r2, r3, #8
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002376:	b480      	push	{r7}
 8002378:	b085      	sub	sp, #20
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	601a      	str	r2, [r3, #0]
}
 80023b2:	bf00      	nop
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80023be:	b480      	push	{r7}
 80023c0:	b085      	sub	sp, #20
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d4:	d103      	bne.n	80023de <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	e00c      	b.n	80023f8 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3308      	adds	r3, #8
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	e002      	b.n	80023ec <vListInsert+0x2e>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d2f6      	bcs.n	80023e6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	601a      	str	r2, [r3, #0]
}
 8002424:	bf00      	nop
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6892      	ldr	r2, [r2, #8]
 8002446:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6852      	ldr	r2, [r2, #4]
 8002450:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	429a      	cmp	r2, r3
 800245a:	d103      	bne.n	8002464 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	1e5a      	subs	r2, r3, #1
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002484:	b580      	push	{r7, lr}
 8002486:	b08c      	sub	sp, #48	; 0x30
 8002488:	af04      	add	r7, sp, #16
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	603b      	str	r3, [r7, #0]
 8002490:	4613      	mov	r3, r2
 8002492:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002494:	88fb      	ldrh	r3, [r7, #6]
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4618      	mov	r0, r3
 800249a:	f001 fa97 	bl	80039cc <pvPortMalloc>
 800249e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00e      	beq.n	80024c4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80024a6:	2058      	movs	r0, #88	; 0x58
 80024a8:	f001 fa90 	bl	80039cc <pvPortMalloc>
 80024ac:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	631a      	str	r2, [r3, #48]	; 0x30
 80024ba:	e005      	b.n	80024c8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80024bc:	6978      	ldr	r0, [r7, #20]
 80024be:	f001 fb65 	bl	8003b8c <vPortFree>
 80024c2:	e001      	b.n	80024c8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d013      	beq.n	80024f6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80024ce:	88fa      	ldrh	r2, [r7, #6]
 80024d0:	2300      	movs	r3, #0
 80024d2:	9303      	str	r3, [sp, #12]
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	9302      	str	r3, [sp, #8]
 80024d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024da:	9301      	str	r3, [sp, #4]
 80024dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	68b9      	ldr	r1, [r7, #8]
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 f80e 	bl	8002506 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80024ea:	69f8      	ldr	r0, [r7, #28]
 80024ec:	f000 f8a2 	bl	8002634 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80024f0:	2301      	movs	r3, #1
 80024f2:	61bb      	str	r3, [r7, #24]
 80024f4:	e002      	b.n	80024fc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80024f6:	f04f 33ff 	mov.w	r3, #4294967295
 80024fa:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80024fc:	69bb      	ldr	r3, [r7, #24]
    }
 80024fe:	4618      	mov	r0, r3
 8002500:	3720      	adds	r7, #32
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b088      	sub	sp, #32
 800250a:	af00      	add	r7, sp, #0
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607a      	str	r2, [r7, #4]
 8002512:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002516:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	461a      	mov	r2, r3
 800251e:	21a5      	movs	r1, #165	; 0xa5
 8002520:	f004 f8c6 	bl	80066b0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800252e:	3b01      	subs	r3, #1
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	f023 0307 	bic.w	r3, r3, #7
 800253c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00a      	beq.n	800255e <prvInitialiseNewTask+0x58>
        __asm volatile
 8002548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800254c:	f383 8811 	msr	BASEPRI, r3
 8002550:	f3bf 8f6f 	isb	sy
 8002554:	f3bf 8f4f 	dsb	sy
 8002558:	617b      	str	r3, [r7, #20]
    }
 800255a:	bf00      	nop
 800255c:	e7fe      	b.n	800255c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d01f      	beq.n	80025a4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002564:	2300      	movs	r3, #0
 8002566:	61fb      	str	r3, [r7, #28]
 8002568:	e012      	b.n	8002590 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	4413      	add	r3, r2
 8002570:	7819      	ldrb	r1, [r3, #0]
 8002572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	4413      	add	r3, r2
 8002578:	3334      	adds	r3, #52	; 0x34
 800257a:	460a      	mov	r2, r1
 800257c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	4413      	add	r3, r2
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d006      	beq.n	8002598 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	3301      	adds	r3, #1
 800258e:	61fb      	str	r3, [r7, #28]
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	2b09      	cmp	r3, #9
 8002594:	d9e9      	bls.n	800256a <prvInitialiseNewTask+0x64>
 8002596:	e000      	b.n	800259a <prvInitialiseNewTask+0x94>
            {
                break;
 8002598:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800259a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80025a2:	e003      	b.n	80025ac <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80025a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80025ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d901      	bls.n	80025b6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80025b2:	2304      	movs	r3, #4
 80025b4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80025b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025ba:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80025bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025c0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80025c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c4:	2200      	movs	r2, #0
 80025c6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80025c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ca:	3304      	adds	r3, #4
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff fec5 	bl	800235c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80025d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d4:	3318      	adds	r3, #24
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff fec0 	bl	800235c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80025dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025e0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e4:	f1c3 0205 	rsb	r2, r3, #5
 80025e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ea:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80025ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025f0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80025f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f4:	3350      	adds	r3, #80	; 0x50
 80025f6:	2204      	movs	r2, #4
 80025f8:	2100      	movs	r1, #0
 80025fa:	4618      	mov	r0, r3
 80025fc:	f004 f858 	bl	80066b0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002602:	3354      	adds	r3, #84	; 0x54
 8002604:	2201      	movs	r2, #1
 8002606:	2100      	movs	r1, #0
 8002608:	4618      	mov	r0, r3
 800260a:	f004 f851 	bl	80066b0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	68f9      	ldr	r1, [r7, #12]
 8002612:	69b8      	ldr	r0, [r7, #24]
 8002614:	f000 ff02 	bl	800341c <pxPortInitialiseStack>
 8002618:	4602      	mov	r2, r0
 800261a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800261e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002620:	2b00      	cmp	r3, #0
 8002622:	d002      	beq.n	800262a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002626:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002628:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800262a:	bf00      	nop
 800262c:	3720      	adds	r7, #32
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002634:	b5b0      	push	{r4, r5, r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af02      	add	r7, sp, #8
 800263a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800263c:	f001 f89a 	bl	8003774 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002640:	4b3b      	ldr	r3, [pc, #236]	; (8002730 <prvAddNewTaskToReadyList+0xfc>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	3301      	adds	r3, #1
 8002646:	4a3a      	ldr	r2, [pc, #232]	; (8002730 <prvAddNewTaskToReadyList+0xfc>)
 8002648:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800264a:	4b3a      	ldr	r3, [pc, #232]	; (8002734 <prvAddNewTaskToReadyList+0x100>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d109      	bne.n	8002666 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002652:	4a38      	ldr	r2, [pc, #224]	; (8002734 <prvAddNewTaskToReadyList+0x100>)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002658:	4b35      	ldr	r3, [pc, #212]	; (8002730 <prvAddNewTaskToReadyList+0xfc>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d110      	bne.n	8002682 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002660:	f000 fc50 	bl	8002f04 <prvInitialiseTaskLists>
 8002664:	e00d      	b.n	8002682 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002666:	4b34      	ldr	r3, [pc, #208]	; (8002738 <prvAddNewTaskToReadyList+0x104>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d109      	bne.n	8002682 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800266e:	4b31      	ldr	r3, [pc, #196]	; (8002734 <prvAddNewTaskToReadyList+0x100>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002678:	429a      	cmp	r2, r3
 800267a:	d802      	bhi.n	8002682 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800267c:	4a2d      	ldr	r2, [pc, #180]	; (8002734 <prvAddNewTaskToReadyList+0x100>)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002682:	4b2e      	ldr	r3, [pc, #184]	; (800273c <prvAddNewTaskToReadyList+0x108>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	3301      	adds	r3, #1
 8002688:	4a2c      	ldr	r2, [pc, #176]	; (800273c <prvAddNewTaskToReadyList+0x108>)
 800268a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800268c:	4b2b      	ldr	r3, [pc, #172]	; (800273c <prvAddNewTaskToReadyList+0x108>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d016      	beq.n	80026c8 <prvAddNewTaskToReadyList+0x94>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4618      	mov	r0, r3
 800269e:	f003 fd15 	bl	80060cc <SEGGER_SYSVIEW_OnTaskCreate>
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	461d      	mov	r5, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	461c      	mov	r4, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	1ae3      	subs	r3, r4, r3
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	462b      	mov	r3, r5
 80026c4:	f001 fc30 	bl	8003f28 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f003 fd82 	bl	80061d4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	2201      	movs	r2, #1
 80026d6:	409a      	lsls	r2, r3
 80026d8:	4b19      	ldr	r3, [pc, #100]	; (8002740 <prvAddNewTaskToReadyList+0x10c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4313      	orrs	r3, r2
 80026de:	4a18      	ldr	r2, [pc, #96]	; (8002740 <prvAddNewTaskToReadyList+0x10c>)
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e6:	4613      	mov	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4a15      	ldr	r2, [pc, #84]	; (8002744 <prvAddNewTaskToReadyList+0x110>)
 80026f0:	441a      	add	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3304      	adds	r3, #4
 80026f6:	4619      	mov	r1, r3
 80026f8:	4610      	mov	r0, r2
 80026fa:	f7ff fe3c 	bl	8002376 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80026fe:	f001 f869 	bl	80037d4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002702:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <prvAddNewTaskToReadyList+0x104>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00e      	beq.n	8002728 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800270a:	4b0a      	ldr	r3, [pc, #40]	; (8002734 <prvAddNewTaskToReadyList+0x100>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002714:	429a      	cmp	r2, r3
 8002716:	d207      	bcs.n	8002728 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002718:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <prvAddNewTaskToReadyList+0x114>)
 800271a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	f3bf 8f4f 	dsb	sy
 8002724:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002728:	bf00      	nop
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bdb0      	pop	{r4, r5, r7, pc}
 8002730:	20000170 	.word	0x20000170
 8002734:	20000098 	.word	0x20000098
 8002738:	2000017c 	.word	0x2000017c
 800273c:	2000018c 	.word	0x2000018c
 8002740:	20000178 	.word	0x20000178
 8002744:	2000009c 	.word	0x2000009c
 8002748:	e000ed04 	.word	0xe000ed04

0800274c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002754:	2300      	movs	r3, #0
 8002756:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d01b      	beq.n	8002796 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800275e:	4b15      	ldr	r3, [pc, #84]	; (80027b4 <vTaskDelay+0x68>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00a      	beq.n	800277c <vTaskDelay+0x30>
        __asm volatile
 8002766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276a:	f383 8811 	msr	BASEPRI, r3
 800276e:	f3bf 8f6f 	isb	sy
 8002772:	f3bf 8f4f 	dsb	sy
 8002776:	60bb      	str	r3, [r7, #8]
    }
 8002778:	bf00      	nop
 800277a:	e7fe      	b.n	800277a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800277c:	f000 f9c4 	bl	8002b08 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	2023      	movs	r0, #35	; 0x23
 8002784:	f003 f81a 	bl	80057bc <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002788:	2100      	movs	r1, #0
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 fdce 	bl	800332c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002790:	f000 f9c8 	bl	8002b24 <xTaskResumeAll>
 8002794:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d107      	bne.n	80027ac <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <vTaskDelay+0x6c>)
 800279e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	f3bf 8f4f 	dsb	sy
 80027a8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80027ac:	bf00      	nop
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20000198 	.word	0x20000198
 80027b8:	e000ed04 	.word	0xe000ed04

080027bc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80027c4:	f000 ffd6 	bl	8003774 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d102      	bne.n	80027d4 <vTaskSuspend+0x18>
 80027ce:	4b4a      	ldr	r3, [pc, #296]	; (80028f8 <vTaskSuspend+0x13c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	e000      	b.n	80027d6 <vTaskSuspend+0x1a>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4618      	mov	r0, r3
 80027dc:	f003 fd9c 	bl	8006318 <SEGGER_SYSVIEW_ShrinkId>
 80027e0:	4603      	mov	r3, r0
 80027e2:	4619      	mov	r1, r3
 80027e4:	2029      	movs	r0, #41	; 0x29
 80027e6:	f002 ffe9 	bl	80057bc <SEGGER_SYSVIEW_RecordU32>

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	3304      	adds	r3, #4
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff fe1e 	bl	8002430 <uxListRemove>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d115      	bne.n	8002826 <vTaskSuspend+0x6a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027fe:	493f      	ldr	r1, [pc, #252]	; (80028fc <vTaskSuspend+0x140>)
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10a      	bne.n	8002826 <vTaskSuspend+0x6a>
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002814:	2201      	movs	r2, #1
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43da      	mvns	r2, r3
 800281c:	4b38      	ldr	r3, [pc, #224]	; (8002900 <vTaskSuspend+0x144>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4013      	ands	r3, r2
 8002822:	4a37      	ldr	r2, [pc, #220]	; (8002900 <vTaskSuspend+0x144>)
 8002824:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	2b00      	cmp	r3, #0
 800282c:	d004      	beq.n	8002838 <vTaskSuspend+0x7c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	3318      	adds	r3, #24
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff fdfc 	bl	8002430 <uxListRemove>
            }
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	211b      	movs	r1, #27
 800283c:	4618      	mov	r0, r3
 800283e:	f003 fd0b 	bl	8006258 <SEGGER_SYSVIEW_OnTaskStopReady>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	3304      	adds	r3, #4
 8002846:	4619      	mov	r1, r3
 8002848:	482e      	ldr	r0, [pc, #184]	; (8002904 <vTaskSuspend+0x148>)
 800284a:	f7ff fd94 	bl	8002376 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
                {
                    BaseType_t x;

                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
 8002852:	e010      	b.n	8002876 <vTaskSuspend+0xba>
                    {
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	4413      	add	r3, r2
 800285a:	3354      	adds	r3, #84	; 0x54
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b01      	cmp	r3, #1
 8002862:	d105      	bne.n	8002870 <vTaskSuspend+0xb4>
                        {
                            /* The task was blocked to wait for a notification, but is
                             * now suspended, so no notification was received. */
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	4413      	add	r3, r2
 800286a:	3354      	adds	r3, #84	; 0x54
 800286c:	2200      	movs	r2, #0
 800286e:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	3301      	adds	r3, #1
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	2b00      	cmp	r3, #0
 800287a:	ddeb      	ble.n	8002854 <vTaskSuspend+0x98>
                        }
                    }
                }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 800287c:	f000 ffaa 	bl	80037d4 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002880:	4b21      	ldr	r3, [pc, #132]	; (8002908 <vTaskSuspend+0x14c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <vTaskSuspend+0xd8>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8002888:	f000 ff74 	bl	8003774 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 800288c:	f000 fbb8 	bl	8003000 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8002890:	f000 ffa0 	bl	80037d4 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8002894:	4b18      	ldr	r3, [pc, #96]	; (80028f8 <vTaskSuspend+0x13c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	429a      	cmp	r2, r3
 800289c:	d127      	bne.n	80028ee <vTaskSuspend+0x132>
        {
            if( xSchedulerRunning != pdFALSE )
 800289e:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <vTaskSuspend+0x14c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d017      	beq.n	80028d6 <vTaskSuspend+0x11a>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 80028a6:	4b19      	ldr	r3, [pc, #100]	; (800290c <vTaskSuspend+0x150>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00a      	beq.n	80028c4 <vTaskSuspend+0x108>
        __asm volatile
 80028ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b2:	f383 8811 	msr	BASEPRI, r3
 80028b6:	f3bf 8f6f 	isb	sy
 80028ba:	f3bf 8f4f 	dsb	sy
 80028be:	60fb      	str	r3, [r7, #12]
    }
 80028c0:	bf00      	nop
 80028c2:	e7fe      	b.n	80028c2 <vTaskSuspend+0x106>
                portYIELD_WITHIN_API();
 80028c4:	4b12      	ldr	r3, [pc, #72]	; (8002910 <vTaskSuspend+0x154>)
 80028c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	f3bf 8f4f 	dsb	sy
 80028d0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80028d4:	e00b      	b.n	80028ee <vTaskSuspend+0x132>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80028d6:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <vTaskSuspend+0x148>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <vTaskSuspend+0x158>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d103      	bne.n	80028ea <vTaskSuspend+0x12e>
                    pxCurrentTCB = NULL;
 80028e2:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <vTaskSuspend+0x13c>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
    }
 80028e8:	e001      	b.n	80028ee <vTaskSuspend+0x132>
                    vTaskSwitchContext();
 80028ea:	f000 fa89 	bl	8002e00 <vTaskSwitchContext>
    }
 80028ee:	bf00      	nop
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000098 	.word	0x20000098
 80028fc:	2000009c 	.word	0x2000009c
 8002900:	20000178 	.word	0x20000178
 8002904:	2000015c 	.word	0x2000015c
 8002908:	2000017c 	.word	0x2000017c
 800290c:	20000198 	.word	0x20000198
 8002910:	e000ed04 	.word	0xe000ed04
 8002914:	20000170 	.word	0x20000170

08002918 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10a      	bne.n	8002944 <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 800292e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002932:	f383 8811 	msr	BASEPRI, r3
 8002936:	f3bf 8f6f 	isb	sy
 800293a:	f3bf 8f4f 	dsb	sy
 800293e:	60fb      	str	r3, [r7, #12]
    }
 8002940:	bf00      	nop
 8002942:	e7fe      	b.n	8002942 <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	4a0a      	ldr	r2, [pc, #40]	; (8002974 <prvTaskIsTaskSuspended+0x5c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d10a      	bne.n	8002964 <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002952:	4a09      	ldr	r2, [pc, #36]	; (8002978 <prvTaskIsTaskSuspended+0x60>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d005      	beq.n	8002964 <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 8002960:	2301      	movs	r3, #1
 8002962:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002964:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002966:	4618      	mov	r0, r3
 8002968:	371c      	adds	r7, #28
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	2000015c 	.word	0x2000015c
 8002978:	20000130 	.word	0x20000130

0800297c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	60fb      	str	r3, [r7, #12]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10a      	bne.n	80029a4 <vTaskResume+0x28>
        __asm volatile
 800298e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002992:	f383 8811 	msr	BASEPRI, r3
 8002996:	f3bf 8f6f 	isb	sy
 800299a:	f3bf 8f4f 	dsb	sy
 800299e:	60bb      	str	r3, [r7, #8]
    }
 80029a0:	bf00      	nop
 80029a2:	e7fe      	b.n	80029a2 <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80029a4:	4b26      	ldr	r3, [pc, #152]	; (8002a40 <vTaskResume+0xc4>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d044      	beq.n	8002a38 <vTaskResume+0xbc>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d041      	beq.n	8002a38 <vTaskResume+0xbc>
        {
            taskENTER_CRITICAL();
 80029b4:	f000 fede 	bl	8003774 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f7ff ffad 	bl	8002918 <prvTaskIsTaskSuspended>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d037      	beq.n	8002a34 <vTaskResume+0xb8>
                {
                    traceTASK_RESUME( pxTCB );
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f003 fca6 	bl	8006318 <SEGGER_SYSVIEW_ShrinkId>
 80029cc:	4603      	mov	r3, r0
 80029ce:	4619      	mov	r1, r3
 80029d0:	202a      	movs	r0, #42	; 0x2a
 80029d2:	f002 fef3 	bl	80057bc <SEGGER_SYSVIEW_RecordU32>

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	3304      	adds	r3, #4
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff fd28 	bl	8002430 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f003 fbf6 	bl	80061d4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ec:	2201      	movs	r2, #1
 80029ee:	409a      	lsls	r2, r3
 80029f0:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <vTaskResume+0xc8>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	4a13      	ldr	r2, [pc, #76]	; (8002a44 <vTaskResume+0xc8>)
 80029f8:	6013      	str	r3, [r2, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4a10      	ldr	r2, [pc, #64]	; (8002a48 <vTaskResume+0xcc>)
 8002a08:	441a      	add	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4610      	mov	r0, r2
 8002a12:	f7ff fcb0 	bl	8002376 <vListInsertEnd>

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a1a:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <vTaskResume+0xc4>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d307      	bcc.n	8002a34 <vTaskResume+0xb8>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 8002a24:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <vTaskResume+0xd0>)
 8002a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	f3bf 8f4f 	dsb	sy
 8002a30:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8002a34:	f000 fece 	bl	80037d4 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002a38:	bf00      	nop
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	20000098 	.word	0x20000098
 8002a44:	20000178 	.word	0x20000178
 8002a48:	2000009c 	.word	0x2000009c
 8002a4c:	e000ed04 	.word	0xe000ed04

08002a50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002a56:	4b24      	ldr	r3, [pc, #144]	; (8002ae8 <vTaskStartScheduler+0x98>)
 8002a58:	9301      	str	r3, [sp, #4]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	2300      	movs	r3, #0
 8002a60:	2282      	movs	r2, #130	; 0x82
 8002a62:	4922      	ldr	r1, [pc, #136]	; (8002aec <vTaskStartScheduler+0x9c>)
 8002a64:	4822      	ldr	r0, [pc, #136]	; (8002af0 <vTaskStartScheduler+0xa0>)
 8002a66:	f7ff fd0d 	bl	8002484 <xTaskCreate>
 8002a6a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d124      	bne.n	8002abc <vTaskStartScheduler+0x6c>
        __asm volatile
 8002a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a76:	f383 8811 	msr	BASEPRI, r3
 8002a7a:	f3bf 8f6f 	isb	sy
 8002a7e:	f3bf 8f4f 	dsb	sy
 8002a82:	60bb      	str	r3, [r7, #8]
    }
 8002a84:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002a86:	4b1b      	ldr	r3, [pc, #108]	; (8002af4 <vTaskStartScheduler+0xa4>)
 8002a88:	f04f 32ff 	mov.w	r2, #4294967295
 8002a8c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002a8e:	4b1a      	ldr	r3, [pc, #104]	; (8002af8 <vTaskStartScheduler+0xa8>)
 8002a90:	2201      	movs	r2, #1
 8002a92:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002a94:	4b19      	ldr	r3, [pc, #100]	; (8002afc <vTaskStartScheduler+0xac>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002a9a:	4b19      	ldr	r3, [pc, #100]	; (8002b00 <vTaskStartScheduler+0xb0>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <vTaskStartScheduler+0x98>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d102      	bne.n	8002aac <vTaskStartScheduler+0x5c>
 8002aa6:	f003 faf5 	bl	8006094 <SEGGER_SYSVIEW_OnIdle>
 8002aaa:	e004      	b.n	8002ab6 <vTaskStartScheduler+0x66>
 8002aac:	4b14      	ldr	r3, [pc, #80]	; (8002b00 <vTaskStartScheduler+0xb0>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f003 fb4d 	bl	8006150 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002ab6:	f000 fd3d 	bl	8003534 <xPortStartScheduler>
 8002aba:	e00e      	b.n	8002ada <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac2:	d10a      	bne.n	8002ada <vTaskStartScheduler+0x8a>
        __asm volatile
 8002ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac8:	f383 8811 	msr	BASEPRI, r3
 8002acc:	f3bf 8f6f 	isb	sy
 8002ad0:	f3bf 8f4f 	dsb	sy
 8002ad4:	607b      	str	r3, [r7, #4]
    }
 8002ad6:	bf00      	nop
 8002ad8:	e7fe      	b.n	8002ad8 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002ada:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <vTaskStartScheduler+0xb4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
}
 8002ade:	bf00      	nop
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000194 	.word	0x20000194
 8002aec:	080067a8 	.word	0x080067a8
 8002af0:	08002ed5 	.word	0x08002ed5
 8002af4:	20000190 	.word	0x20000190
 8002af8:	2000017c 	.word	0x2000017c
 8002afc:	20000174 	.word	0x20000174
 8002b00:	20000098 	.word	0x20000098
 8002b04:	2000000c 	.word	0x2000000c

08002b08 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002b0c:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <vTaskSuspendAll+0x18>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	3301      	adds	r3, #1
 8002b12:	4a03      	ldr	r2, [pc, #12]	; (8002b20 <vTaskSuspendAll+0x18>)
 8002b14:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002b16:	bf00      	nop
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	20000198 	.word	0x20000198

08002b24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002b32:	4b43      	ldr	r3, [pc, #268]	; (8002c40 <xTaskResumeAll+0x11c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10a      	bne.n	8002b50 <xTaskResumeAll+0x2c>
        __asm volatile
 8002b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3e:	f383 8811 	msr	BASEPRI, r3
 8002b42:	f3bf 8f6f 	isb	sy
 8002b46:	f3bf 8f4f 	dsb	sy
 8002b4a:	603b      	str	r3, [r7, #0]
    }
 8002b4c:	bf00      	nop
 8002b4e:	e7fe      	b.n	8002b4e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002b50:	f000 fe10 	bl	8003774 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002b54:	4b3a      	ldr	r3, [pc, #232]	; (8002c40 <xTaskResumeAll+0x11c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	4a39      	ldr	r2, [pc, #228]	; (8002c40 <xTaskResumeAll+0x11c>)
 8002b5c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b5e:	4b38      	ldr	r3, [pc, #224]	; (8002c40 <xTaskResumeAll+0x11c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d165      	bne.n	8002c32 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b66:	4b37      	ldr	r3, [pc, #220]	; (8002c44 <xTaskResumeAll+0x120>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d061      	beq.n	8002c32 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b6e:	e032      	b.n	8002bd6 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b70:	4b35      	ldr	r3, [pc, #212]	; (8002c48 <xTaskResumeAll+0x124>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	3318      	adds	r3, #24
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff fc57 	bl	8002430 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	3304      	adds	r3, #4
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff fc52 	bl	8002430 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f003 fb20 	bl	80061d4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	2201      	movs	r2, #1
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	4b2b      	ldr	r3, [pc, #172]	; (8002c4c <xTaskResumeAll+0x128>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	4a2a      	ldr	r2, [pc, #168]	; (8002c4c <xTaskResumeAll+0x128>)
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4a27      	ldr	r2, [pc, #156]	; (8002c50 <xTaskResumeAll+0x12c>)
 8002bb4:	441a      	add	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	f7ff fbda 	bl	8002376 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc6:	4b23      	ldr	r3, [pc, #140]	; (8002c54 <xTaskResumeAll+0x130>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d302      	bcc.n	8002bd6 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002bd0:	4b21      	ldr	r3, [pc, #132]	; (8002c58 <xTaskResumeAll+0x134>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bd6:	4b1c      	ldr	r3, [pc, #112]	; (8002c48 <xTaskResumeAll+0x124>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1c8      	bne.n	8002b70 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002be4:	f000 fa0c 	bl	8003000 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002be8:	4b1c      	ldr	r3, [pc, #112]	; (8002c5c <xTaskResumeAll+0x138>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d010      	beq.n	8002c16 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002bf4:	f000 f848 	bl	8002c88 <xTaskIncrementTick>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002bfe:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <xTaskResumeAll+0x134>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1f1      	bne.n	8002bf4 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002c10:	4b12      	ldr	r3, [pc, #72]	; (8002c5c <xTaskResumeAll+0x138>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002c16:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <xTaskResumeAll+0x134>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d009      	beq.n	8002c32 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002c22:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <xTaskResumeAll+0x13c>)
 8002c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	f3bf 8f4f 	dsb	sy
 8002c2e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002c32:	f000 fdcf 	bl	80037d4 <vPortExitCritical>

    return xAlreadyYielded;
 8002c36:	68bb      	ldr	r3, [r7, #8]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	20000198 	.word	0x20000198
 8002c44:	20000170 	.word	0x20000170
 8002c48:	20000130 	.word	0x20000130
 8002c4c:	20000178 	.word	0x20000178
 8002c50:	2000009c 	.word	0x2000009c
 8002c54:	20000098 	.word	0x20000098
 8002c58:	20000184 	.word	0x20000184
 8002c5c:	20000180 	.word	0x20000180
 8002c60:	e000ed04 	.word	0xe000ed04

08002c64 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c6a:	f000 fe6f 	bl	800394c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002c72:	4b04      	ldr	r3, [pc, #16]	; (8002c84 <xTaskGetTickCountFromISR+0x20>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002c78:	683b      	ldr	r3, [r7, #0]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000174 	.word	0x20000174

08002c88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c92:	4b50      	ldr	r3, [pc, #320]	; (8002dd4 <xTaskIncrementTick+0x14c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f040 8092 	bne.w	8002dc0 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c9c:	4b4e      	ldr	r3, [pc, #312]	; (8002dd8 <xTaskIncrementTick+0x150>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002ca4:	4a4c      	ldr	r2, [pc, #304]	; (8002dd8 <xTaskIncrementTick+0x150>)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d120      	bne.n	8002cf2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002cb0:	4b4a      	ldr	r3, [pc, #296]	; (8002ddc <xTaskIncrementTick+0x154>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00a      	beq.n	8002cd0 <xTaskIncrementTick+0x48>
        __asm volatile
 8002cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cbe:	f383 8811 	msr	BASEPRI, r3
 8002cc2:	f3bf 8f6f 	isb	sy
 8002cc6:	f3bf 8f4f 	dsb	sy
 8002cca:	603b      	str	r3, [r7, #0]
    }
 8002ccc:	bf00      	nop
 8002cce:	e7fe      	b.n	8002cce <xTaskIncrementTick+0x46>
 8002cd0:	4b42      	ldr	r3, [pc, #264]	; (8002ddc <xTaskIncrementTick+0x154>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	4b42      	ldr	r3, [pc, #264]	; (8002de0 <xTaskIncrementTick+0x158>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a40      	ldr	r2, [pc, #256]	; (8002ddc <xTaskIncrementTick+0x154>)
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	4a40      	ldr	r2, [pc, #256]	; (8002de0 <xTaskIncrementTick+0x158>)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	4b3f      	ldr	r3, [pc, #252]	; (8002de4 <xTaskIncrementTick+0x15c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	4a3e      	ldr	r2, [pc, #248]	; (8002de4 <xTaskIncrementTick+0x15c>)
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	f000 f987 	bl	8003000 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002cf2:	4b3d      	ldr	r3, [pc, #244]	; (8002de8 <xTaskIncrementTick+0x160>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d34c      	bcc.n	8002d96 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cfc:	4b37      	ldr	r3, [pc, #220]	; (8002ddc <xTaskIncrementTick+0x154>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d104      	bne.n	8002d10 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d06:	4b38      	ldr	r3, [pc, #224]	; (8002de8 <xTaskIncrementTick+0x160>)
 8002d08:	f04f 32ff 	mov.w	r2, #4294967295
 8002d0c:	601a      	str	r2, [r3, #0]
                    break;
 8002d0e:	e042      	b.n	8002d96 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d10:	4b32      	ldr	r3, [pc, #200]	; (8002ddc <xTaskIncrementTick+0x154>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d203      	bcs.n	8002d30 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002d28:	4a2f      	ldr	r2, [pc, #188]	; (8002de8 <xTaskIncrementTick+0x160>)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002d2e:	e032      	b.n	8002d96 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	3304      	adds	r3, #4
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff fb7b 	bl	8002430 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d004      	beq.n	8002d4c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	3318      	adds	r3, #24
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff fb72 	bl	8002430 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f003 fa40 	bl	80061d4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d58:	2201      	movs	r2, #1
 8002d5a:	409a      	lsls	r2, r3
 8002d5c:	4b23      	ldr	r3, [pc, #140]	; (8002dec <xTaskIncrementTick+0x164>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	4a22      	ldr	r2, [pc, #136]	; (8002dec <xTaskIncrementTick+0x164>)
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4a1f      	ldr	r2, [pc, #124]	; (8002df0 <xTaskIncrementTick+0x168>)
 8002d74:	441a      	add	r2, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4610      	mov	r0, r2
 8002d7e:	f7ff fafa 	bl	8002376 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d86:	4b1b      	ldr	r3, [pc, #108]	; (8002df4 <xTaskIncrementTick+0x16c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d3b5      	bcc.n	8002cfc <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002d90:	2301      	movs	r3, #1
 8002d92:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d94:	e7b2      	b.n	8002cfc <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d96:	4b17      	ldr	r3, [pc, #92]	; (8002df4 <xTaskIncrementTick+0x16c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d9c:	4914      	ldr	r1, [pc, #80]	; (8002df0 <xTaskIncrementTick+0x168>)
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	440b      	add	r3, r1
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d901      	bls.n	8002db2 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002dae:	2301      	movs	r3, #1
 8002db0:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002db2:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <xTaskIncrementTick+0x170>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d007      	beq.n	8002dca <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	e004      	b.n	8002dca <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002dc0:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <xTaskIncrementTick+0x174>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	4a0d      	ldr	r2, [pc, #52]	; (8002dfc <xTaskIncrementTick+0x174>)
 8002dc8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002dca:	697b      	ldr	r3, [r7, #20]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	20000198 	.word	0x20000198
 8002dd8:	20000174 	.word	0x20000174
 8002ddc:	20000128 	.word	0x20000128
 8002de0:	2000012c 	.word	0x2000012c
 8002de4:	20000188 	.word	0x20000188
 8002de8:	20000190 	.word	0x20000190
 8002dec:	20000178 	.word	0x20000178
 8002df0:	2000009c 	.word	0x2000009c
 8002df4:	20000098 	.word	0x20000098
 8002df8:	20000184 	.word	0x20000184
 8002dfc:	20000180 	.word	0x20000180

08002e00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e06:	4b2d      	ldr	r3, [pc, #180]	; (8002ebc <vTaskSwitchContext+0xbc>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002e0e:	4b2c      	ldr	r3, [pc, #176]	; (8002ec0 <vTaskSwitchContext+0xc0>)
 8002e10:	2201      	movs	r2, #1
 8002e12:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002e14:	e04d      	b.n	8002eb2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002e16:	4b2a      	ldr	r3, [pc, #168]	; (8002ec0 <vTaskSwitchContext+0xc0>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e1c:	4b29      	ldr	r3, [pc, #164]	; (8002ec4 <vTaskSwitchContext+0xc4>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	fab3 f383 	clz	r3, r3
 8002e28:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002e2a:	7afb      	ldrb	r3, [r7, #11]
 8002e2c:	f1c3 031f 	rsb	r3, r3, #31
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	4925      	ldr	r1, [pc, #148]	; (8002ec8 <vTaskSwitchContext+0xc8>)
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10a      	bne.n	8002e5c <vTaskSwitchContext+0x5c>
        __asm volatile
 8002e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4a:	f383 8811 	msr	BASEPRI, r3
 8002e4e:	f3bf 8f6f 	isb	sy
 8002e52:	f3bf 8f4f 	dsb	sy
 8002e56:	607b      	str	r3, [r7, #4]
    }
 8002e58:	bf00      	nop
 8002e5a:	e7fe      	b.n	8002e5a <vTaskSwitchContext+0x5a>
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4a18      	ldr	r2, [pc, #96]	; (8002ec8 <vTaskSwitchContext+0xc8>)
 8002e68:	4413      	add	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	605a      	str	r2, [r3, #4]
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	3308      	adds	r3, #8
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d104      	bne.n	8002e8c <vTaskSwitchContext+0x8c>
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	605a      	str	r2, [r3, #4]
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	4a0e      	ldr	r2, [pc, #56]	; (8002ecc <vTaskSwitchContext+0xcc>)
 8002e94:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002e96:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <vTaskSwitchContext+0xcc>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	4b0d      	ldr	r3, [pc, #52]	; (8002ed0 <vTaskSwitchContext+0xd0>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d102      	bne.n	8002ea8 <vTaskSwitchContext+0xa8>
 8002ea2:	f003 f8f7 	bl	8006094 <SEGGER_SYSVIEW_OnIdle>
}
 8002ea6:	e004      	b.n	8002eb2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002ea8:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <vTaskSwitchContext+0xcc>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f003 f94f 	bl	8006150 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002eb2:	bf00      	nop
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000198 	.word	0x20000198
 8002ec0:	20000184 	.word	0x20000184
 8002ec4:	20000178 	.word	0x20000178
 8002ec8:	2000009c 	.word	0x2000009c
 8002ecc:	20000098 	.word	0x20000098
 8002ed0:	20000194 	.word	0x20000194

08002ed4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002edc:	f000 f852 	bl	8002f84 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002ee0:	4b06      	ldr	r3, [pc, #24]	; (8002efc <prvIdleTask+0x28>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d9f9      	bls.n	8002edc <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002ee8:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <prvIdleTask+0x2c>)
 8002eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	f3bf 8f4f 	dsb	sy
 8002ef4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002ef8:	e7f0      	b.n	8002edc <prvIdleTask+0x8>
 8002efa:	bf00      	nop
 8002efc:	2000009c 	.word	0x2000009c
 8002f00:	e000ed04 	.word	0xe000ed04

08002f04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	607b      	str	r3, [r7, #4]
 8002f0e:	e00c      	b.n	8002f2a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4a12      	ldr	r2, [pc, #72]	; (8002f64 <prvInitialiseTaskLists+0x60>)
 8002f1c:	4413      	add	r3, r2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff f9fc 	bl	800231c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3301      	adds	r3, #1
 8002f28:	607b      	str	r3, [r7, #4]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d9ef      	bls.n	8002f10 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002f30:	480d      	ldr	r0, [pc, #52]	; (8002f68 <prvInitialiseTaskLists+0x64>)
 8002f32:	f7ff f9f3 	bl	800231c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002f36:	480d      	ldr	r0, [pc, #52]	; (8002f6c <prvInitialiseTaskLists+0x68>)
 8002f38:	f7ff f9f0 	bl	800231c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002f3c:	480c      	ldr	r0, [pc, #48]	; (8002f70 <prvInitialiseTaskLists+0x6c>)
 8002f3e:	f7ff f9ed 	bl	800231c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002f42:	480c      	ldr	r0, [pc, #48]	; (8002f74 <prvInitialiseTaskLists+0x70>)
 8002f44:	f7ff f9ea 	bl	800231c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002f48:	480b      	ldr	r0, [pc, #44]	; (8002f78 <prvInitialiseTaskLists+0x74>)
 8002f4a:	f7ff f9e7 	bl	800231c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002f4e:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <prvInitialiseTaskLists+0x78>)
 8002f50:	4a05      	ldr	r2, [pc, #20]	; (8002f68 <prvInitialiseTaskLists+0x64>)
 8002f52:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002f54:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <prvInitialiseTaskLists+0x7c>)
 8002f56:	4a05      	ldr	r2, [pc, #20]	; (8002f6c <prvInitialiseTaskLists+0x68>)
 8002f58:	601a      	str	r2, [r3, #0]
}
 8002f5a:	bf00      	nop
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	2000009c 	.word	0x2000009c
 8002f68:	20000100 	.word	0x20000100
 8002f6c:	20000114 	.word	0x20000114
 8002f70:	20000130 	.word	0x20000130
 8002f74:	20000144 	.word	0x20000144
 8002f78:	2000015c 	.word	0x2000015c
 8002f7c:	20000128 	.word	0x20000128
 8002f80:	2000012c 	.word	0x2000012c

08002f84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f8a:	e019      	b.n	8002fc0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002f8c:	f000 fbf2 	bl	8003774 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f90:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <prvCheckTasksWaitingTermination+0x50>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff fa47 	bl	8002430 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002fa2:	4b0d      	ldr	r3, [pc, #52]	; (8002fd8 <prvCheckTasksWaitingTermination+0x54>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	4a0b      	ldr	r2, [pc, #44]	; (8002fd8 <prvCheckTasksWaitingTermination+0x54>)
 8002faa:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002fac:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <prvCheckTasksWaitingTermination+0x58>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	4a0a      	ldr	r2, [pc, #40]	; (8002fdc <prvCheckTasksWaitingTermination+0x58>)
 8002fb4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002fb6:	f000 fc0d 	bl	80037d4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f810 	bl	8002fe0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002fc0:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <prvCheckTasksWaitingTermination+0x58>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1e1      	bne.n	8002f8c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002fc8:	bf00      	nop
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20000144 	.word	0x20000144
 8002fd8:	20000170 	.word	0x20000170
 8002fdc:	20000158 	.word	0x20000158

08002fe0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 fdcd 	bl	8003b8c <vPortFree>
                vPortFree( pxTCB );
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 fdca 	bl	8003b8c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002ff8:	bf00      	nop
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003004:	4b0a      	ldr	r3, [pc, #40]	; (8003030 <prvResetNextTaskUnblockTime+0x30>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d104      	bne.n	8003018 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <prvResetNextTaskUnblockTime+0x34>)
 8003010:	f04f 32ff 	mov.w	r2, #4294967295
 8003014:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003016:	e005      	b.n	8003024 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003018:	4b05      	ldr	r3, [pc, #20]	; (8003030 <prvResetNextTaskUnblockTime+0x30>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a04      	ldr	r2, [pc, #16]	; (8003034 <prvResetNextTaskUnblockTime+0x34>)
 8003022:	6013      	str	r3, [r2, #0]
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	20000128 	.word	0x20000128
 8003034:	20000190 	.word	0x20000190

08003038 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003038:	b580      	push	{r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af02      	add	r7, sp, #8
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00a      	beq.n	8003062 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 800304c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003050:	f383 8811 	msr	BASEPRI, r3
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	f3bf 8f4f 	dsb	sy
 800305c:	613b      	str	r3, [r7, #16]
    }
 800305e:	bf00      	nop
 8003060:	e7fe      	b.n	8003060 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003062:	f000 fb87 	bl	8003774 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003066:	4b36      	ldr	r3, [pc, #216]	; (8003140 <xTaskGenericNotifyWait+0x108>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	4413      	add	r3, r2
 800306e:	3354      	adds	r3, #84	; 0x54
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d022      	beq.n	80030be <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003078:	4b31      	ldr	r3, [pc, #196]	; (8003140 <xTaskGenericNotifyWait+0x108>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	3214      	adds	r2, #20
 8003080:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	43d2      	mvns	r2, r2
 8003088:	4011      	ands	r1, r2
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	3214      	adds	r2, #20
 800308e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003092:	4b2b      	ldr	r3, [pc, #172]	; (8003140 <xTaskGenericNotifyWait+0x108>)
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4413      	add	r3, r2
 800309a:	3354      	adds	r3, #84	; 0x54
 800309c:	2201      	movs	r2, #1
 800309e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00b      	beq.n	80030be <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80030a6:	2101      	movs	r1, #1
 80030a8:	6a38      	ldr	r0, [r7, #32]
 80030aa:	f000 f93f 	bl	800332c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80030ae:	4b25      	ldr	r3, [pc, #148]	; (8003144 <xTaskGenericNotifyWait+0x10c>)
 80030b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80030be:	f000 fb89 	bl	80037d4 <vPortExitCritical>

        taskENTER_CRITICAL();
 80030c2:	f000 fb57 	bl	8003774 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	4613      	mov	r3, r2
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	2040      	movs	r0, #64	; 0x40
 80030d4:	f002 fc08 	bl	80058e8 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d007      	beq.n	80030ee <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80030de:	4b18      	ldr	r3, [pc, #96]	; (8003140 <xTaskGenericNotifyWait+0x108>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	3214      	adds	r2, #20
 80030e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80030ee:	4b14      	ldr	r3, [pc, #80]	; (8003140 <xTaskGenericNotifyWait+0x108>)
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4413      	add	r3, r2
 80030f6:	3354      	adds	r3, #84	; 0x54
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d002      	beq.n	8003106 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	e00e      	b.n	8003124 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003106:	4b0e      	ldr	r3, [pc, #56]	; (8003140 <xTaskGenericNotifyWait+0x108>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	3214      	adds	r2, #20
 800310e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	43d2      	mvns	r2, r2
 8003116:	4011      	ands	r1, r2
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	3214      	adds	r2, #20
 800311c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003120:	2301      	movs	r3, #1
 8003122:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003124:	4b06      	ldr	r3, [pc, #24]	; (8003140 <xTaskGenericNotifyWait+0x108>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4413      	add	r3, r2
 800312c:	3354      	adds	r3, #84	; 0x54
 800312e:	2200      	movs	r2, #0
 8003130:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003132:	f000 fb4f 	bl	80037d4 <vPortExitCritical>

        return xReturn;
 8003136:	697b      	ldr	r3, [r7, #20]
    }
 8003138:	4618      	mov	r0, r3
 800313a:	3718      	adds	r7, #24
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	20000098 	.word	0x20000098
 8003144:	e000ed04 	.word	0xe000ed04

08003148 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8003148:	b580      	push	{r7, lr}
 800314a:	b08e      	sub	sp, #56	; 0x38
 800314c:	af02      	add	r7, sp, #8
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
 8003154:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8003156:	2301      	movs	r3, #1
 8003158:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00a      	beq.n	8003176 <xTaskGenericNotify+0x2e>
        __asm volatile
 8003160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003164:	f383 8811 	msr	BASEPRI, r3
 8003168:	f3bf 8f6f 	isb	sy
 800316c:	f3bf 8f4f 	dsb	sy
 8003170:	623b      	str	r3, [r7, #32]
    }
 8003172:	bf00      	nop
 8003174:	e7fe      	b.n	8003174 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10a      	bne.n	8003192 <xTaskGenericNotify+0x4a>
        __asm volatile
 800317c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003180:	f383 8811 	msr	BASEPRI, r3
 8003184:	f3bf 8f6f 	isb	sy
 8003188:	f3bf 8f4f 	dsb	sy
 800318c:	61fb      	str	r3, [r7, #28]
    }
 800318e:	bf00      	nop
 8003190:	e7fe      	b.n	8003190 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8003196:	f000 faed 	bl	8003774 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800319a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319c:	2b00      	cmp	r3, #0
 800319e:	d006      	beq.n	80031ae <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80031a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	3214      	adds	r2, #20
 80031a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80031aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ac:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80031ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	4413      	add	r3, r2
 80031b4:	3354      	adds	r3, #84	; 0x54
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80031bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	4413      	add	r3, r2
 80031c2:	3354      	adds	r3, #84	; 0x54
 80031c4:	2202      	movs	r2, #2
 80031c6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80031c8:	78fb      	ldrb	r3, [r7, #3]
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d83b      	bhi.n	8003246 <xTaskGenericNotify+0xfe>
 80031ce:	a201      	add	r2, pc, #4	; (adr r2, 80031d4 <xTaskGenericNotify+0x8c>)
 80031d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d4:	08003265 	.word	0x08003265
 80031d8:	080031e9 	.word	0x080031e9
 80031dc:	08003205 	.word	0x08003205
 80031e0:	0800321d 	.word	0x0800321d
 80031e4:	0800322b 	.word	0x0800322b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80031e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	3214      	adds	r2, #20
 80031ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	ea42 0103 	orr.w	r1, r2, r3
 80031f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	3214      	adds	r2, #20
 80031fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003202:	e032      	b.n	800326a <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	3214      	adds	r2, #20
 800320a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800320e:	1c59      	adds	r1, r3, #1
 8003210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	3214      	adds	r2, #20
 8003216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800321a:	e026      	b.n	800326a <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800321c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	3214      	adds	r2, #20
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003228:	e01f      	b.n	800326a <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800322a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800322e:	2b02      	cmp	r3, #2
 8003230:	d006      	beq.n	8003240 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	3214      	adds	r2, #20
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800323e:	e014      	b.n	800326a <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8003240:	2300      	movs	r3, #0
 8003242:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8003244:	e011      	b.n	800326a <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003246:	4b34      	ldr	r3, [pc, #208]	; (8003318 <xTaskGenericNotify+0x1d0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00c      	beq.n	8003268 <xTaskGenericNotify+0x120>
        __asm volatile
 800324e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003252:	f383 8811 	msr	BASEPRI, r3
 8003256:	f3bf 8f6f 	isb	sy
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	61bb      	str	r3, [r7, #24]
    }
 8003260:	bf00      	nop
 8003262:	e7fe      	b.n	8003262 <xTaskGenericNotify+0x11a>
                    break;
 8003264:	bf00      	nop
 8003266:	e000      	b.n	800326a <xTaskGenericNotify+0x122>

                    break;
 8003268:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 800326a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326c:	4618      	mov	r0, r3
 800326e:	f003 f853 	bl	8006318 <SEGGER_SYSVIEW_ShrinkId>
 8003272:	4601      	mov	r1, r0
 8003274:	78fa      	ldrb	r2, [r7, #3]
 8003276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	4613      	mov	r3, r2
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	203e      	movs	r0, #62	; 0x3e
 8003280:	f002 fb32 	bl	80058e8 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003284:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003288:	2b01      	cmp	r3, #1
 800328a:	d13d      	bne.n	8003308 <xTaskGenericNotify+0x1c0>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800328c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328e:	3304      	adds	r3, #4
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff f8cd 	bl	8002430 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8003296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003298:	4618      	mov	r0, r3
 800329a:	f002 ff9b 	bl	80061d4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800329e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a2:	2201      	movs	r2, #1
 80032a4:	409a      	lsls	r2, r3
 80032a6:	4b1d      	ldr	r3, [pc, #116]	; (800331c <xTaskGenericNotify+0x1d4>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	4a1b      	ldr	r2, [pc, #108]	; (800331c <xTaskGenericNotify+0x1d4>)
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4a18      	ldr	r2, [pc, #96]	; (8003320 <xTaskGenericNotify+0x1d8>)
 80032be:	441a      	add	r2, r3
 80032c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c2:	3304      	adds	r3, #4
 80032c4:	4619      	mov	r1, r3
 80032c6:	4610      	mov	r0, r2
 80032c8:	f7ff f855 	bl	8002376 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80032cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00a      	beq.n	80032ea <xTaskGenericNotify+0x1a2>
        __asm volatile
 80032d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d8:	f383 8811 	msr	BASEPRI, r3
 80032dc:	f3bf 8f6f 	isb	sy
 80032e0:	f3bf 8f4f 	dsb	sy
 80032e4:	617b      	str	r3, [r7, #20]
    }
 80032e6:	bf00      	nop
 80032e8:	e7fe      	b.n	80032e8 <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80032ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ee:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <xTaskGenericNotify+0x1dc>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d907      	bls.n	8003308 <xTaskGenericNotify+0x1c0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80032f8:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <xTaskGenericNotify+0x1e0>)
 80032fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	f3bf 8f4f 	dsb	sy
 8003304:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003308:	f000 fa64 	bl	80037d4 <vPortExitCritical>

        return xReturn;
 800330c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800330e:	4618      	mov	r0, r3
 8003310:	3730      	adds	r7, #48	; 0x30
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000174 	.word	0x20000174
 800331c:	20000178 	.word	0x20000178
 8003320:	2000009c 	.word	0x2000009c
 8003324:	20000098 	.word	0x20000098
 8003328:	e000ed04 	.word	0xe000ed04

0800332c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003336:	4b32      	ldr	r3, [pc, #200]	; (8003400 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800333c:	4b31      	ldr	r3, [pc, #196]	; (8003404 <prvAddCurrentTaskToDelayedList+0xd8>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	3304      	adds	r3, #4
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff f874 	bl	8002430 <uxListRemove>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10b      	bne.n	8003366 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800334e:	4b2d      	ldr	r3, [pc, #180]	; (8003404 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	2201      	movs	r2, #1
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43da      	mvns	r2, r3
 800335c:	4b2a      	ldr	r3, [pc, #168]	; (8003408 <prvAddCurrentTaskToDelayedList+0xdc>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4013      	ands	r3, r2
 8003362:	4a29      	ldr	r2, [pc, #164]	; (8003408 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003364:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336c:	d110      	bne.n	8003390 <prvAddCurrentTaskToDelayedList+0x64>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00d      	beq.n	8003390 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003374:	4b23      	ldr	r3, [pc, #140]	; (8003404 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	211b      	movs	r1, #27
 800337a:	4618      	mov	r0, r3
 800337c:	f002 ff6c 	bl	8006258 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003380:	4b20      	ldr	r3, [pc, #128]	; (8003404 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	3304      	adds	r3, #4
 8003386:	4619      	mov	r1, r3
 8003388:	4820      	ldr	r0, [pc, #128]	; (800340c <prvAddCurrentTaskToDelayedList+0xe0>)
 800338a:	f7fe fff4 	bl	8002376 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800338e:	e032      	b.n	80033f6 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4413      	add	r3, r2
 8003396:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003398:	4b1a      	ldr	r3, [pc, #104]	; (8003404 <prvAddCurrentTaskToDelayedList+0xd8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d20f      	bcs.n	80033c8 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80033a8:	4b16      	ldr	r3, [pc, #88]	; (8003404 <prvAddCurrentTaskToDelayedList+0xd8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2104      	movs	r1, #4
 80033ae:	4618      	mov	r0, r3
 80033b0:	f002 ff52 	bl	8006258 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033b4:	4b16      	ldr	r3, [pc, #88]	; (8003410 <prvAddCurrentTaskToDelayedList+0xe4>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4b12      	ldr	r3, [pc, #72]	; (8003404 <prvAddCurrentTaskToDelayedList+0xd8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3304      	adds	r3, #4
 80033be:	4619      	mov	r1, r3
 80033c0:	4610      	mov	r0, r2
 80033c2:	f7fe fffc 	bl	80023be <vListInsert>
}
 80033c6:	e016      	b.n	80033f6 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80033c8:	4b0e      	ldr	r3, [pc, #56]	; (8003404 <prvAddCurrentTaskToDelayedList+0xd8>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2104      	movs	r1, #4
 80033ce:	4618      	mov	r0, r3
 80033d0:	f002 ff42 	bl	8006258 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033d4:	4b0f      	ldr	r3, [pc, #60]	; (8003414 <prvAddCurrentTaskToDelayedList+0xe8>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <prvAddCurrentTaskToDelayedList+0xd8>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	3304      	adds	r3, #4
 80033de:	4619      	mov	r1, r3
 80033e0:	4610      	mov	r0, r2
 80033e2:	f7fe ffec 	bl	80023be <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80033e6:	4b0c      	ldr	r3, [pc, #48]	; (8003418 <prvAddCurrentTaskToDelayedList+0xec>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d202      	bcs.n	80033f6 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80033f0:	4a09      	ldr	r2, [pc, #36]	; (8003418 <prvAddCurrentTaskToDelayedList+0xec>)
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	6013      	str	r3, [r2, #0]
}
 80033f6:	bf00      	nop
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	20000174 	.word	0x20000174
 8003404:	20000098 	.word	0x20000098
 8003408:	20000178 	.word	0x20000178
 800340c:	2000015c 	.word	0x2000015c
 8003410:	2000012c 	.word	0x2000012c
 8003414:	20000128 	.word	0x20000128
 8003418:	20000190 	.word	0x20000190

0800341c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	3b04      	subs	r3, #4
 800342c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003434:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	3b04      	subs	r3, #4
 800343a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	f023 0201 	bic.w	r2, r3, #1
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	3b04      	subs	r3, #4
 800344a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800344c:	4a0c      	ldr	r2, [pc, #48]	; (8003480 <pxPortInitialiseStack+0x64>)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	3b14      	subs	r3, #20
 8003456:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	3b04      	subs	r3, #4
 8003462:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f06f 0202 	mvn.w	r2, #2
 800346a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	3b20      	subs	r3, #32
 8003470:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003472:	68fb      	ldr	r3, [r7, #12]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	08003485 	.word	0x08003485

08003484 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800348a:	2300      	movs	r3, #0
 800348c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800348e:	4b12      	ldr	r3, [pc, #72]	; (80034d8 <prvTaskExitError+0x54>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003496:	d00a      	beq.n	80034ae <prvTaskExitError+0x2a>
        __asm volatile
 8003498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349c:	f383 8811 	msr	BASEPRI, r3
 80034a0:	f3bf 8f6f 	isb	sy
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	60fb      	str	r3, [r7, #12]
    }
 80034aa:	bf00      	nop
 80034ac:	e7fe      	b.n	80034ac <prvTaskExitError+0x28>
        __asm volatile
 80034ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b2:	f383 8811 	msr	BASEPRI, r3
 80034b6:	f3bf 8f6f 	isb	sy
 80034ba:	f3bf 8f4f 	dsb	sy
 80034be:	60bb      	str	r3, [r7, #8]
    }
 80034c0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80034c2:	bf00      	nop
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0fc      	beq.n	80034c4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80034ca:	bf00      	nop
 80034cc:	bf00      	nop
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	20000010 	.word	0x20000010
 80034dc:	00000000 	.word	0x00000000

080034e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80034e0:	4b07      	ldr	r3, [pc, #28]	; (8003500 <pxCurrentTCBConst2>)
 80034e2:	6819      	ldr	r1, [r3, #0]
 80034e4:	6808      	ldr	r0, [r1, #0]
 80034e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034ea:	f380 8809 	msr	PSP, r0
 80034ee:	f3bf 8f6f 	isb	sy
 80034f2:	f04f 0000 	mov.w	r0, #0
 80034f6:	f380 8811 	msr	BASEPRI, r0
 80034fa:	4770      	bx	lr
 80034fc:	f3af 8000 	nop.w

08003500 <pxCurrentTCBConst2>:
 8003500:	20000098 	.word	0x20000098
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003504:	bf00      	nop
 8003506:	bf00      	nop

08003508 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003508:	4808      	ldr	r0, [pc, #32]	; (800352c <prvPortStartFirstTask+0x24>)
 800350a:	6800      	ldr	r0, [r0, #0]
 800350c:	6800      	ldr	r0, [r0, #0]
 800350e:	f380 8808 	msr	MSP, r0
 8003512:	f04f 0000 	mov.w	r0, #0
 8003516:	f380 8814 	msr	CONTROL, r0
 800351a:	b662      	cpsie	i
 800351c:	b661      	cpsie	f
 800351e:	f3bf 8f4f 	dsb	sy
 8003522:	f3bf 8f6f 	isb	sy
 8003526:	df00      	svc	0
 8003528:	bf00      	nop
 800352a:	0000      	.short	0x0000
 800352c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003530:	bf00      	nop
 8003532:	bf00      	nop

08003534 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800353a:	4b46      	ldr	r3, [pc, #280]	; (8003654 <xPortStartScheduler+0x120>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a46      	ldr	r2, [pc, #280]	; (8003658 <xPortStartScheduler+0x124>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d10a      	bne.n	800355a <xPortStartScheduler+0x26>
        __asm volatile
 8003544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003548:	f383 8811 	msr	BASEPRI, r3
 800354c:	f3bf 8f6f 	isb	sy
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	613b      	str	r3, [r7, #16]
    }
 8003556:	bf00      	nop
 8003558:	e7fe      	b.n	8003558 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800355a:	4b3e      	ldr	r3, [pc, #248]	; (8003654 <xPortStartScheduler+0x120>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a3f      	ldr	r2, [pc, #252]	; (800365c <xPortStartScheduler+0x128>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d10a      	bne.n	800357a <xPortStartScheduler+0x46>
        __asm volatile
 8003564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003568:	f383 8811 	msr	BASEPRI, r3
 800356c:	f3bf 8f6f 	isb	sy
 8003570:	f3bf 8f4f 	dsb	sy
 8003574:	60fb      	str	r3, [r7, #12]
    }
 8003576:	bf00      	nop
 8003578:	e7fe      	b.n	8003578 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800357a:	4b39      	ldr	r3, [pc, #228]	; (8003660 <xPortStartScheduler+0x12c>)
 800357c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	b2db      	uxtb	r3, r3
 8003584:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	22ff      	movs	r2, #255	; 0xff
 800358a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	b2db      	uxtb	r3, r3
 8003592:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003594:	78fb      	ldrb	r3, [r7, #3]
 8003596:	b2db      	uxtb	r3, r3
 8003598:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800359c:	b2da      	uxtb	r2, r3
 800359e:	4b31      	ldr	r3, [pc, #196]	; (8003664 <xPortStartScheduler+0x130>)
 80035a0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80035a2:	4b31      	ldr	r3, [pc, #196]	; (8003668 <xPortStartScheduler+0x134>)
 80035a4:	2207      	movs	r2, #7
 80035a6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035a8:	e009      	b.n	80035be <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80035aa:	4b2f      	ldr	r3, [pc, #188]	; (8003668 <xPortStartScheduler+0x134>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	4a2d      	ldr	r2, [pc, #180]	; (8003668 <xPortStartScheduler+0x134>)
 80035b2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80035b4:	78fb      	ldrb	r3, [r7, #3]
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035be:	78fb      	ldrb	r3, [r7, #3]
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c6:	2b80      	cmp	r3, #128	; 0x80
 80035c8:	d0ef      	beq.n	80035aa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80035ca:	4b27      	ldr	r3, [pc, #156]	; (8003668 <xPortStartScheduler+0x134>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f1c3 0307 	rsb	r3, r3, #7
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d00a      	beq.n	80035ec <xPortStartScheduler+0xb8>
        __asm volatile
 80035d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035da:	f383 8811 	msr	BASEPRI, r3
 80035de:	f3bf 8f6f 	isb	sy
 80035e2:	f3bf 8f4f 	dsb	sy
 80035e6:	60bb      	str	r3, [r7, #8]
    }
 80035e8:	bf00      	nop
 80035ea:	e7fe      	b.n	80035ea <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80035ec:	4b1e      	ldr	r3, [pc, #120]	; (8003668 <xPortStartScheduler+0x134>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	021b      	lsls	r3, r3, #8
 80035f2:	4a1d      	ldr	r2, [pc, #116]	; (8003668 <xPortStartScheduler+0x134>)
 80035f4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80035f6:	4b1c      	ldr	r3, [pc, #112]	; (8003668 <xPortStartScheduler+0x134>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035fe:	4a1a      	ldr	r2, [pc, #104]	; (8003668 <xPortStartScheduler+0x134>)
 8003600:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	b2da      	uxtb	r2, r3
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800360a:	4b18      	ldr	r3, [pc, #96]	; (800366c <xPortStartScheduler+0x138>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a17      	ldr	r2, [pc, #92]	; (800366c <xPortStartScheduler+0x138>)
 8003610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003614:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003616:	4b15      	ldr	r3, [pc, #84]	; (800366c <xPortStartScheduler+0x138>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a14      	ldr	r2, [pc, #80]	; (800366c <xPortStartScheduler+0x138>)
 800361c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003620:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003622:	f000 f963 	bl	80038ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003626:	4b12      	ldr	r3, [pc, #72]	; (8003670 <xPortStartScheduler+0x13c>)
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800362c:	f000 f982 	bl	8003934 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003630:	4b10      	ldr	r3, [pc, #64]	; (8003674 <xPortStartScheduler+0x140>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a0f      	ldr	r2, [pc, #60]	; (8003674 <xPortStartScheduler+0x140>)
 8003636:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800363a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800363c:	f7ff ff64 	bl	8003508 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003640:	f7ff fbde 	bl	8002e00 <vTaskSwitchContext>
    prvTaskExitError();
 8003644:	f7ff ff1e 	bl	8003484 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3718      	adds	r7, #24
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	e000ed00 	.word	0xe000ed00
 8003658:	410fc271 	.word	0x410fc271
 800365c:	410fc270 	.word	0x410fc270
 8003660:	e000e400 	.word	0xe000e400
 8003664:	2000019c 	.word	0x2000019c
 8003668:	200001a0 	.word	0x200001a0
 800366c:	e000ed20 	.word	0xe000ed20
 8003670:	20000010 	.word	0x20000010
 8003674:	e000ef34 	.word	0xe000ef34

08003678 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800367e:	4b37      	ldr	r3, [pc, #220]	; (800375c <vInitPrioGroupValue+0xe4>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a37      	ldr	r2, [pc, #220]	; (8003760 <vInitPrioGroupValue+0xe8>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d10a      	bne.n	800369e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368c:	f383 8811 	msr	BASEPRI, r3
 8003690:	f3bf 8f6f 	isb	sy
 8003694:	f3bf 8f4f 	dsb	sy
 8003698:	613b      	str	r3, [r7, #16]
    }
 800369a:	bf00      	nop
 800369c:	e7fe      	b.n	800369c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800369e:	4b2f      	ldr	r3, [pc, #188]	; (800375c <vInitPrioGroupValue+0xe4>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a30      	ldr	r2, [pc, #192]	; (8003764 <vInitPrioGroupValue+0xec>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d10a      	bne.n	80036be <vInitPrioGroupValue+0x46>
        __asm volatile
 80036a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ac:	f383 8811 	msr	BASEPRI, r3
 80036b0:	f3bf 8f6f 	isb	sy
 80036b4:	f3bf 8f4f 	dsb	sy
 80036b8:	60fb      	str	r3, [r7, #12]
    }
 80036ba:	bf00      	nop
 80036bc:	e7fe      	b.n	80036bc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80036be:	4b2a      	ldr	r3, [pc, #168]	; (8003768 <vInitPrioGroupValue+0xf0>)
 80036c0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	22ff      	movs	r2, #255	; 0xff
 80036ce:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80036d8:	78fb      	ldrb	r3, [r7, #3]
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	4b22      	ldr	r3, [pc, #136]	; (800376c <vInitPrioGroupValue+0xf4>)
 80036e4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80036e6:	4b22      	ldr	r3, [pc, #136]	; (8003770 <vInitPrioGroupValue+0xf8>)
 80036e8:	2207      	movs	r2, #7
 80036ea:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80036ec:	e009      	b.n	8003702 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80036ee:	4b20      	ldr	r3, [pc, #128]	; (8003770 <vInitPrioGroupValue+0xf8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	4a1e      	ldr	r2, [pc, #120]	; (8003770 <vInitPrioGroupValue+0xf8>)
 80036f6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003702:	78fb      	ldrb	r3, [r7, #3]
 8003704:	b2db      	uxtb	r3, r3
 8003706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370a:	2b80      	cmp	r3, #128	; 0x80
 800370c:	d0ef      	beq.n	80036ee <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800370e:	4b18      	ldr	r3, [pc, #96]	; (8003770 <vInitPrioGroupValue+0xf8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f1c3 0307 	rsb	r3, r3, #7
 8003716:	2b04      	cmp	r3, #4
 8003718:	d00a      	beq.n	8003730 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800371a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371e:	f383 8811 	msr	BASEPRI, r3
 8003722:	f3bf 8f6f 	isb	sy
 8003726:	f3bf 8f4f 	dsb	sy
 800372a:	60bb      	str	r3, [r7, #8]
    }
 800372c:	bf00      	nop
 800372e:	e7fe      	b.n	800372e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003730:	4b0f      	ldr	r3, [pc, #60]	; (8003770 <vInitPrioGroupValue+0xf8>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	021b      	lsls	r3, r3, #8
 8003736:	4a0e      	ldr	r2, [pc, #56]	; (8003770 <vInitPrioGroupValue+0xf8>)
 8003738:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800373a:	4b0d      	ldr	r3, [pc, #52]	; (8003770 <vInitPrioGroupValue+0xf8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003742:	4a0b      	ldr	r2, [pc, #44]	; (8003770 <vInitPrioGroupValue+0xf8>)
 8003744:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	b2da      	uxtb	r2, r3
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800374e:	bf00      	nop
 8003750:	371c      	adds	r7, #28
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	e000ed00 	.word	0xe000ed00
 8003760:	410fc271 	.word	0x410fc271
 8003764:	410fc270 	.word	0x410fc270
 8003768:	e000e400 	.word	0xe000e400
 800376c:	2000019c 	.word	0x2000019c
 8003770:	200001a0 	.word	0x200001a0

08003774 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
        __asm volatile
 800377a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377e:	f383 8811 	msr	BASEPRI, r3
 8003782:	f3bf 8f6f 	isb	sy
 8003786:	f3bf 8f4f 	dsb	sy
 800378a:	607b      	str	r3, [r7, #4]
    }
 800378c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800378e:	4b0f      	ldr	r3, [pc, #60]	; (80037cc <vPortEnterCritical+0x58>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	3301      	adds	r3, #1
 8003794:	4a0d      	ldr	r2, [pc, #52]	; (80037cc <vPortEnterCritical+0x58>)
 8003796:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003798:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <vPortEnterCritical+0x58>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d10f      	bne.n	80037c0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80037a0:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <vPortEnterCritical+0x5c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <vPortEnterCritical+0x4c>
        __asm volatile
 80037aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ae:	f383 8811 	msr	BASEPRI, r3
 80037b2:	f3bf 8f6f 	isb	sy
 80037b6:	f3bf 8f4f 	dsb	sy
 80037ba:	603b      	str	r3, [r7, #0]
    }
 80037bc:	bf00      	nop
 80037be:	e7fe      	b.n	80037be <vPortEnterCritical+0x4a>
    }
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	20000010 	.word	0x20000010
 80037d0:	e000ed04 	.word	0xe000ed04

080037d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80037da:	4b12      	ldr	r3, [pc, #72]	; (8003824 <vPortExitCritical+0x50>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10a      	bne.n	80037f8 <vPortExitCritical+0x24>
        __asm volatile
 80037e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e6:	f383 8811 	msr	BASEPRI, r3
 80037ea:	f3bf 8f6f 	isb	sy
 80037ee:	f3bf 8f4f 	dsb	sy
 80037f2:	607b      	str	r3, [r7, #4]
    }
 80037f4:	bf00      	nop
 80037f6:	e7fe      	b.n	80037f6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80037f8:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <vPortExitCritical+0x50>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3b01      	subs	r3, #1
 80037fe:	4a09      	ldr	r2, [pc, #36]	; (8003824 <vPortExitCritical+0x50>)
 8003800:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003802:	4b08      	ldr	r3, [pc, #32]	; (8003824 <vPortExitCritical+0x50>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d105      	bne.n	8003816 <vPortExitCritical+0x42>
 800380a:	2300      	movs	r3, #0
 800380c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003814:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	20000010 	.word	0x20000010
	...

08003830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003830:	f3ef 8009 	mrs	r0, PSP
 8003834:	f3bf 8f6f 	isb	sy
 8003838:	4b15      	ldr	r3, [pc, #84]	; (8003890 <pxCurrentTCBConst>)
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	f01e 0f10 	tst.w	lr, #16
 8003840:	bf08      	it	eq
 8003842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800384a:	6010      	str	r0, [r2, #0]
 800384c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003850:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003854:	f380 8811 	msr	BASEPRI, r0
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f7ff face 	bl	8002e00 <vTaskSwitchContext>
 8003864:	f04f 0000 	mov.w	r0, #0
 8003868:	f380 8811 	msr	BASEPRI, r0
 800386c:	bc09      	pop	{r0, r3}
 800386e:	6819      	ldr	r1, [r3, #0]
 8003870:	6808      	ldr	r0, [r1, #0]
 8003872:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003876:	f01e 0f10 	tst.w	lr, #16
 800387a:	bf08      	it	eq
 800387c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003880:	f380 8809 	msr	PSP, r0
 8003884:	f3bf 8f6f 	isb	sy
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	f3af 8000 	nop.w

08003890 <pxCurrentTCBConst>:
 8003890:	20000098 	.word	0x20000098
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003894:	bf00      	nop
 8003896:	bf00      	nop

08003898 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
        __asm volatile
 800389e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a2:	f383 8811 	msr	BASEPRI, r3
 80038a6:	f3bf 8f6f 	isb	sy
 80038aa:	f3bf 8f4f 	dsb	sy
 80038ae:	607b      	str	r3, [r7, #4]
    }
 80038b0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80038b2:	f002 fb75 	bl	8005fa0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80038b6:	f7ff f9e7 	bl	8002c88 <xTaskIncrementTick>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d006      	beq.n	80038ce <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80038c0:	f002 fbcc 	bl	800605c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80038c4:	4b08      	ldr	r3, [pc, #32]	; (80038e8 <SysTick_Handler+0x50>)
 80038c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	e001      	b.n	80038d2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80038ce:	f002 fba9 	bl	8006024 <SEGGER_SYSVIEW_RecordExitISR>
 80038d2:	2300      	movs	r3, #0
 80038d4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	f383 8811 	msr	BASEPRI, r3
    }
 80038dc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80038de:	bf00      	nop
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	e000ed04 	.word	0xe000ed04

080038ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80038f0:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <vPortSetupTimerInterrupt+0x34>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80038f6:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <vPortSetupTimerInterrupt+0x38>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80038fc:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <vPortSetupTimerInterrupt+0x3c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a0a      	ldr	r2, [pc, #40]	; (800392c <vPortSetupTimerInterrupt+0x40>)
 8003902:	fba2 2303 	umull	r2, r3, r2, r3
 8003906:	099b      	lsrs	r3, r3, #6
 8003908:	4a09      	ldr	r2, [pc, #36]	; (8003930 <vPortSetupTimerInterrupt+0x44>)
 800390a:	3b01      	subs	r3, #1
 800390c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800390e:	4b04      	ldr	r3, [pc, #16]	; (8003920 <vPortSetupTimerInterrupt+0x34>)
 8003910:	2207      	movs	r2, #7
 8003912:	601a      	str	r2, [r3, #0]
}
 8003914:	bf00      	nop
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	e000e010 	.word	0xe000e010
 8003924:	e000e018 	.word	0xe000e018
 8003928:	20000000 	.word	0x20000000
 800392c:	10624dd3 	.word	0x10624dd3
 8003930:	e000e014 	.word	0xe000e014

08003934 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003934:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003944 <vPortEnableVFP+0x10>
 8003938:	6801      	ldr	r1, [r0, #0]
 800393a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800393e:	6001      	str	r1, [r0, #0]
 8003940:	4770      	bx	lr
 8003942:	0000      	.short	0x0000
 8003944:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003948:	bf00      	nop
 800394a:	bf00      	nop

0800394c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003952:	f3ef 8305 	mrs	r3, IPSR
 8003956:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2b0f      	cmp	r3, #15
 800395c:	d914      	bls.n	8003988 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800395e:	4a17      	ldr	r2, [pc, #92]	; (80039bc <vPortValidateInterruptPriority+0x70>)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4413      	add	r3, r2
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003968:	4b15      	ldr	r3, [pc, #84]	; (80039c0 <vPortValidateInterruptPriority+0x74>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	7afa      	ldrb	r2, [r7, #11]
 800396e:	429a      	cmp	r2, r3
 8003970:	d20a      	bcs.n	8003988 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003976:	f383 8811 	msr	BASEPRI, r3
 800397a:	f3bf 8f6f 	isb	sy
 800397e:	f3bf 8f4f 	dsb	sy
 8003982:	607b      	str	r3, [r7, #4]
    }
 8003984:	bf00      	nop
 8003986:	e7fe      	b.n	8003986 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003988:	4b0e      	ldr	r3, [pc, #56]	; (80039c4 <vPortValidateInterruptPriority+0x78>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003990:	4b0d      	ldr	r3, [pc, #52]	; (80039c8 <vPortValidateInterruptPriority+0x7c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d90a      	bls.n	80039ae <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	603b      	str	r3, [r7, #0]
    }
 80039aa:	bf00      	nop
 80039ac:	e7fe      	b.n	80039ac <vPortValidateInterruptPriority+0x60>
    }
 80039ae:	bf00      	nop
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	e000e3f0 	.word	0xe000e3f0
 80039c0:	2000019c 	.word	0x2000019c
 80039c4:	e000ed0c 	.word	0xe000ed0c
 80039c8:	200001a0 	.word	0x200001a0

080039cc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08a      	sub	sp, #40	; 0x28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80039d8:	f7ff f896 	bl	8002b08 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80039dc:	4b65      	ldr	r3, [pc, #404]	; (8003b74 <pvPortMalloc+0x1a8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80039e4:	f000 f934 	bl	8003c50 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80039e8:	4b63      	ldr	r3, [pc, #396]	; (8003b78 <pvPortMalloc+0x1ac>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4013      	ands	r3, r2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f040 80a7 	bne.w	8003b44 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d02d      	beq.n	8003a58 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80039fc:	2208      	movs	r2, #8
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d227      	bcs.n	8003a58 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003a08:	2208      	movs	r2, #8
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d021      	beq.n	8003a5e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f023 0307 	bic.w	r3, r3, #7
 8003a20:	3308      	adds	r3, #8
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d214      	bcs.n	8003a52 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f023 0307 	bic.w	r3, r3, #7
 8003a2e:	3308      	adds	r3, #8
 8003a30:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d010      	beq.n	8003a5e <pvPortMalloc+0x92>
        __asm volatile
 8003a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a40:	f383 8811 	msr	BASEPRI, r3
 8003a44:	f3bf 8f6f 	isb	sy
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	617b      	str	r3, [r7, #20]
    }
 8003a4e:	bf00      	nop
 8003a50:	e7fe      	b.n	8003a50 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003a52:	2300      	movs	r3, #0
 8003a54:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a56:	e002      	b.n	8003a5e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	607b      	str	r3, [r7, #4]
 8003a5c:	e000      	b.n	8003a60 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a5e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d06e      	beq.n	8003b44 <pvPortMalloc+0x178>
 8003a66:	4b45      	ldr	r3, [pc, #276]	; (8003b7c <pvPortMalloc+0x1b0>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d869      	bhi.n	8003b44 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003a70:	4b43      	ldr	r3, [pc, #268]	; (8003b80 <pvPortMalloc+0x1b4>)
 8003a72:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003a74:	4b42      	ldr	r3, [pc, #264]	; (8003b80 <pvPortMalloc+0x1b4>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a7a:	e004      	b.n	8003a86 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d903      	bls.n	8003a98 <pvPortMalloc+0xcc>
 8003a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1f1      	bne.n	8003a7c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003a98:	4b36      	ldr	r3, [pc, #216]	; (8003b74 <pvPortMalloc+0x1a8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d050      	beq.n	8003b44 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2208      	movs	r2, #8
 8003aa8:	4413      	add	r3, r2
 8003aaa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	1ad2      	subs	r2, r2, r3
 8003abc:	2308      	movs	r3, #8
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d91f      	bls.n	8003b04 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4413      	add	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00a      	beq.n	8003aec <pvPortMalloc+0x120>
        __asm volatile
 8003ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ada:	f383 8811 	msr	BASEPRI, r3
 8003ade:	f3bf 8f6f 	isb	sy
 8003ae2:	f3bf 8f4f 	dsb	sy
 8003ae6:	613b      	str	r3, [r7, #16]
    }
 8003ae8:	bf00      	nop
 8003aea:	e7fe      	b.n	8003aea <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	1ad2      	subs	r2, r2, r3
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003afe:	69b8      	ldr	r0, [r7, #24]
 8003b00:	f000 f908 	bl	8003d14 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b04:	4b1d      	ldr	r3, [pc, #116]	; (8003b7c <pvPortMalloc+0x1b0>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	4a1b      	ldr	r2, [pc, #108]	; (8003b7c <pvPortMalloc+0x1b0>)
 8003b10:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b12:	4b1a      	ldr	r3, [pc, #104]	; (8003b7c <pvPortMalloc+0x1b0>)
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	4b1b      	ldr	r3, [pc, #108]	; (8003b84 <pvPortMalloc+0x1b8>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d203      	bcs.n	8003b26 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003b1e:	4b17      	ldr	r3, [pc, #92]	; (8003b7c <pvPortMalloc+0x1b0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a18      	ldr	r2, [pc, #96]	; (8003b84 <pvPortMalloc+0x1b8>)
 8003b24:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	4b13      	ldr	r3, [pc, #76]	; (8003b78 <pvPortMalloc+0x1ac>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	2200      	movs	r2, #0
 8003b38:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003b3a:	4b13      	ldr	r3, [pc, #76]	; (8003b88 <pvPortMalloc+0x1bc>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	4a11      	ldr	r2, [pc, #68]	; (8003b88 <pvPortMalloc+0x1bc>)
 8003b42:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003b44:	f7fe ffee 	bl	8002b24 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <pvPortMalloc+0x19c>
        __asm volatile
 8003b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b56:	f383 8811 	msr	BASEPRI, r3
 8003b5a:	f3bf 8f6f 	isb	sy
 8003b5e:	f3bf 8f4f 	dsb	sy
 8003b62:	60fb      	str	r3, [r7, #12]
    }
 8003b64:	bf00      	nop
 8003b66:	e7fe      	b.n	8003b66 <pvPortMalloc+0x19a>
    return pvReturn;
 8003b68:	69fb      	ldr	r3, [r7, #28]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3728      	adds	r7, #40	; 0x28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20012dac 	.word	0x20012dac
 8003b78:	20012dc0 	.word	0x20012dc0
 8003b7c:	20012db0 	.word	0x20012db0
 8003b80:	20012da4 	.word	0x20012da4
 8003b84:	20012db4 	.word	0x20012db4
 8003b88:	20012db8 	.word	0x20012db8

08003b8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d04d      	beq.n	8003c3a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003b9e:	2308      	movs	r3, #8
 8003ba0:	425b      	negs	r3, r3
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	4b24      	ldr	r3, [pc, #144]	; (8003c44 <vPortFree+0xb8>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10a      	bne.n	8003bd0 <vPortFree+0x44>
        __asm volatile
 8003bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	60fb      	str	r3, [r7, #12]
    }
 8003bcc:	bf00      	nop
 8003bce:	e7fe      	b.n	8003bce <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00a      	beq.n	8003bee <vPortFree+0x62>
        __asm volatile
 8003bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bdc:	f383 8811 	msr	BASEPRI, r3
 8003be0:	f3bf 8f6f 	isb	sy
 8003be4:	f3bf 8f4f 	dsb	sy
 8003be8:	60bb      	str	r3, [r7, #8]
    }
 8003bea:	bf00      	nop
 8003bec:	e7fe      	b.n	8003bec <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	4b14      	ldr	r3, [pc, #80]	; (8003c44 <vPortFree+0xb8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d01e      	beq.n	8003c3a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d11a      	bne.n	8003c3a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	4b0e      	ldr	r3, [pc, #56]	; (8003c44 <vPortFree+0xb8>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	401a      	ands	r2, r3
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003c14:	f7fe ff78 	bl	8002b08 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <vPortFree+0xbc>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4413      	add	r3, r2
 8003c22:	4a09      	ldr	r2, [pc, #36]	; (8003c48 <vPortFree+0xbc>)
 8003c24:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003c26:	6938      	ldr	r0, [r7, #16]
 8003c28:	f000 f874 	bl	8003d14 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003c2c:	4b07      	ldr	r3, [pc, #28]	; (8003c4c <vPortFree+0xc0>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3301      	adds	r3, #1
 8003c32:	4a06      	ldr	r2, [pc, #24]	; (8003c4c <vPortFree+0xc0>)
 8003c34:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003c36:	f7fe ff75 	bl	8002b24 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003c3a:	bf00      	nop
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20012dc0 	.word	0x20012dc0
 8003c48:	20012db0 	.word	0x20012db0
 8003c4c:	20012dbc 	.word	0x20012dbc

08003c50 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003c56:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003c5a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003c5c:	4b27      	ldr	r3, [pc, #156]	; (8003cfc <prvHeapInit+0xac>)
 8003c5e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f003 0307 	and.w	r3, r3, #7
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00c      	beq.n	8003c84 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	3307      	adds	r3, #7
 8003c6e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f023 0307 	bic.w	r3, r3, #7
 8003c76:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	4a1f      	ldr	r2, [pc, #124]	; (8003cfc <prvHeapInit+0xac>)
 8003c80:	4413      	add	r3, r2
 8003c82:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003c88:	4a1d      	ldr	r2, [pc, #116]	; (8003d00 <prvHeapInit+0xb0>)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003c8e:	4b1c      	ldr	r3, [pc, #112]	; (8003d00 <prvHeapInit+0xb0>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	4413      	add	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003c9c:	2208      	movs	r2, #8
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	1a9b      	subs	r3, r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f023 0307 	bic.w	r3, r3, #7
 8003caa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4a15      	ldr	r2, [pc, #84]	; (8003d04 <prvHeapInit+0xb4>)
 8003cb0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003cb2:	4b14      	ldr	r3, [pc, #80]	; (8003d04 <prvHeapInit+0xb4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003cba:	4b12      	ldr	r3, [pc, #72]	; (8003d04 <prvHeapInit+0xb4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	1ad2      	subs	r2, r2, r3
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003cd0:	4b0c      	ldr	r3, [pc, #48]	; (8003d04 <prvHeapInit+0xb4>)
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	4a0a      	ldr	r2, [pc, #40]	; (8003d08 <prvHeapInit+0xb8>)
 8003cde:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	4a09      	ldr	r2, [pc, #36]	; (8003d0c <prvHeapInit+0xbc>)
 8003ce6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003ce8:	4b09      	ldr	r3, [pc, #36]	; (8003d10 <prvHeapInit+0xc0>)
 8003cea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003cee:	601a      	str	r2, [r3, #0]
}
 8003cf0:	bf00      	nop
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	200001a4 	.word	0x200001a4
 8003d00:	20012da4 	.word	0x20012da4
 8003d04:	20012dac 	.word	0x20012dac
 8003d08:	20012db4 	.word	0x20012db4
 8003d0c:	20012db0 	.word	0x20012db0
 8003d10:	20012dc0 	.word	0x20012dc0

08003d14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003d1c:	4b28      	ldr	r3, [pc, #160]	; (8003dc0 <prvInsertBlockIntoFreeList+0xac>)
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	e002      	b.n	8003d28 <prvInsertBlockIntoFreeList+0x14>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d8f7      	bhi.n	8003d22 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d108      	bne.n	8003d56 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	441a      	add	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	441a      	add	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d118      	bne.n	8003d9c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	4b15      	ldr	r3, [pc, #84]	; (8003dc4 <prvInsertBlockIntoFreeList+0xb0>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d00d      	beq.n	8003d92 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	441a      	add	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	e008      	b.n	8003da4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003d92:	4b0c      	ldr	r3, [pc, #48]	; (8003dc4 <prvInsertBlockIntoFreeList+0xb0>)
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	e003      	b.n	8003da4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d002      	beq.n	8003db2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003db2:	bf00      	nop
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	20012da4 	.word	0x20012da4
 8003dc4:	20012dac 	.word	0x20012dac

08003dc8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003dcc:	4803      	ldr	r0, [pc, #12]	; (8003ddc <_cbSendSystemDesc+0x14>)
 8003dce:	f002 f891 	bl	8005ef4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003dd2:	4803      	ldr	r0, [pc, #12]	; (8003de0 <_cbSendSystemDesc+0x18>)
 8003dd4:	f002 f88e 	bl	8005ef4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003dd8:	bf00      	nop
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	080067b0 	.word	0x080067b0
 8003de0:	080067f4 	.word	0x080067f4

08003de4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003de8:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <SEGGER_SYSVIEW_Conf+0x20>)
 8003dea:	6818      	ldr	r0, [r3, #0]
 8003dec:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <SEGGER_SYSVIEW_Conf+0x20>)
 8003dee:	6819      	ldr	r1, [r3, #0]
 8003df0:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <SEGGER_SYSVIEW_Conf+0x24>)
 8003df2:	4a06      	ldr	r2, [pc, #24]	; (8003e0c <SEGGER_SYSVIEW_Conf+0x28>)
 8003df4:	f001 fc70 	bl	80056d8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003df8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003dfc:	f001 fcb0 	bl	8005760 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003e00:	bf00      	nop
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	20000000 	.word	0x20000000
 8003e08:	08003dc9 	.word	0x08003dc9
 8003e0c:	08006888 	.word	0x08006888

08003e10 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003e16:	2300      	movs	r3, #0
 8003e18:	607b      	str	r3, [r7, #4]
 8003e1a:	e033      	b.n	8003e84 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003e1c:	491e      	ldr	r1, [pc, #120]	; (8003e98 <_cbSendTaskList+0x88>)
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	440b      	add	r3, r1
 8003e2a:	6818      	ldr	r0, [r3, #0]
 8003e2c:	491a      	ldr	r1, [pc, #104]	; (8003e98 <_cbSendTaskList+0x88>)
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	4613      	mov	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	6819      	ldr	r1, [r3, #0]
 8003e3e:	4c16      	ldr	r4, [pc, #88]	; (8003e98 <_cbSendTaskList+0x88>)
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	4613      	mov	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4413      	add	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4423      	add	r3, r4
 8003e4c:	3308      	adds	r3, #8
 8003e4e:	681c      	ldr	r4, [r3, #0]
 8003e50:	4d11      	ldr	r5, [pc, #68]	; (8003e98 <_cbSendTaskList+0x88>)
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	4613      	mov	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	442b      	add	r3, r5
 8003e5e:	330c      	adds	r3, #12
 8003e60:	681d      	ldr	r5, [r3, #0]
 8003e62:	4e0d      	ldr	r6, [pc, #52]	; (8003e98 <_cbSendTaskList+0x88>)
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	4613      	mov	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4433      	add	r3, r6
 8003e70:	3310      	adds	r3, #16
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	462b      	mov	r3, r5
 8003e78:	4622      	mov	r2, r4
 8003e7a:	f000 f8bd 	bl	8003ff8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	3301      	adds	r3, #1
 8003e82:	607b      	str	r3, [r7, #4]
 8003e84:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <_cbSendTaskList+0x8c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d3c6      	bcc.n	8003e1c <_cbSendTaskList+0xc>
  }
}
 8003e8e:	bf00      	nop
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e98:	20012dc4 	.word	0x20012dc4
 8003e9c:	20012e64 	.word	0x20012e64

08003ea0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ea4:	b082      	sub	sp, #8
 8003ea6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003ea8:	f7fe fedc 	bl	8002c64 <xTaskGetTickCountFromISR>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2200      	movs	r2, #0
 8003eb0:	469a      	mov	sl, r3
 8003eb2:	4693      	mov	fp, r2
 8003eb4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003eb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	f04f 0a00 	mov.w	sl, #0
 8003ec4:	f04f 0b00 	mov.w	fp, #0
 8003ec8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003ecc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003ed0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003ed4:	4652      	mov	r2, sl
 8003ed6:	465b      	mov	r3, fp
 8003ed8:	1a14      	subs	r4, r2, r0
 8003eda:	eb63 0501 	sbc.w	r5, r3, r1
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	00ab      	lsls	r3, r5, #2
 8003ee8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003eec:	00a2      	lsls	r2, r4, #2
 8003eee:	4614      	mov	r4, r2
 8003ef0:	461d      	mov	r5, r3
 8003ef2:	eb14 0800 	adds.w	r8, r4, r0
 8003ef6:	eb45 0901 	adc.w	r9, r5, r1
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f0e:	4690      	mov	r8, r2
 8003f10:	4699      	mov	r9, r3
 8003f12:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003f16:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003f28 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af02      	add	r7, sp, #8
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
 8003f34:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003f36:	2205      	movs	r2, #5
 8003f38:	492b      	ldr	r1, [pc, #172]	; (8003fe8 <SYSVIEW_AddTask+0xc0>)
 8003f3a:	68b8      	ldr	r0, [r7, #8]
 8003f3c:	f002 fb9a 	bl	8006674 <memcmp>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d04b      	beq.n	8003fde <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003f46:	4b29      	ldr	r3, [pc, #164]	; (8003fec <SYSVIEW_AddTask+0xc4>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b07      	cmp	r3, #7
 8003f4c:	d903      	bls.n	8003f56 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003f4e:	4828      	ldr	r0, [pc, #160]	; (8003ff0 <SYSVIEW_AddTask+0xc8>)
 8003f50:	f002 fae2 	bl	8006518 <SEGGER_SYSVIEW_Warn>
    return;
 8003f54:	e044      	b.n	8003fe0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003f56:	4b25      	ldr	r3, [pc, #148]	; (8003fec <SYSVIEW_AddTask+0xc4>)
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	4926      	ldr	r1, [pc, #152]	; (8003ff4 <SYSVIEW_AddTask+0xcc>)
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003f6a:	4b20      	ldr	r3, [pc, #128]	; (8003fec <SYSVIEW_AddTask+0xc4>)
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	4921      	ldr	r1, [pc, #132]	; (8003ff4 <SYSVIEW_AddTask+0xcc>)
 8003f70:	4613      	mov	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	440b      	add	r3, r1
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003f80:	4b1a      	ldr	r3, [pc, #104]	; (8003fec <SYSVIEW_AddTask+0xc4>)
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	491b      	ldr	r1, [pc, #108]	; (8003ff4 <SYSVIEW_AddTask+0xcc>)
 8003f86:	4613      	mov	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	440b      	add	r3, r1
 8003f90:	3308      	adds	r3, #8
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003f96:	4b15      	ldr	r3, [pc, #84]	; (8003fec <SYSVIEW_AddTask+0xc4>)
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	4916      	ldr	r1, [pc, #88]	; (8003ff4 <SYSVIEW_AddTask+0xcc>)
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4413      	add	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	330c      	adds	r3, #12
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003fac:	4b0f      	ldr	r3, [pc, #60]	; (8003fec <SYSVIEW_AddTask+0xc4>)
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	4910      	ldr	r1, [pc, #64]	; (8003ff4 <SYSVIEW_AddTask+0xcc>)
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	440b      	add	r3, r1
 8003fbc:	3310      	adds	r3, #16
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003fc2:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <SYSVIEW_AddTask+0xc4>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	4a08      	ldr	r2, [pc, #32]	; (8003fec <SYSVIEW_AddTask+0xc4>)
 8003fca:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	68b9      	ldr	r1, [r7, #8]
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 f80e 	bl	8003ff8 <SYSVIEW_SendTaskInfo>
 8003fdc:	e000      	b.n	8003fe0 <SYSVIEW_AddTask+0xb8>
    return;
 8003fde:	bf00      	nop

}
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	08006804 	.word	0x08006804
 8003fec:	20012e64 	.word	0x20012e64
 8003ff0:	0800680c 	.word	0x0800680c
 8003ff4:	20012dc4 	.word	0x20012dc4

08003ff8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b08a      	sub	sp, #40	; 0x28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004006:	f107 0314 	add.w	r3, r7, #20
 800400a:	2214      	movs	r2, #20
 800400c:	2100      	movs	r1, #0
 800400e:	4618      	mov	r0, r3
 8004010:	f002 fb4e 	bl	80066b0 <memset>
  TaskInfo.TaskID     = TaskID;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004026:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004028:	f107 0314 	add.w	r3, r7, #20
 800402c:	4618      	mov	r0, r3
 800402e:	f001 fe69 	bl	8005d04 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004032:	bf00      	nop
 8004034:	3728      	adds	r7, #40	; 0x28
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
	...

0800403c <__NVIC_EnableIRQ>:
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	4603      	mov	r3, r0
 8004044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404a:	2b00      	cmp	r3, #0
 800404c:	db0b      	blt.n	8004066 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800404e:	79fb      	ldrb	r3, [r7, #7]
 8004050:	f003 021f 	and.w	r2, r3, #31
 8004054:	4907      	ldr	r1, [pc, #28]	; (8004074 <__NVIC_EnableIRQ+0x38>)
 8004056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800405a:	095b      	lsrs	r3, r3, #5
 800405c:	2001      	movs	r0, #1
 800405e:	fa00 f202 	lsl.w	r2, r0, r2
 8004062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	e000e100 	.word	0xe000e100

08004078 <__NVIC_SetPriority>:
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	4603      	mov	r3, r0
 8004080:	6039      	str	r1, [r7, #0]
 8004082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004088:	2b00      	cmp	r3, #0
 800408a:	db0a      	blt.n	80040a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	b2da      	uxtb	r2, r3
 8004090:	490c      	ldr	r1, [pc, #48]	; (80040c4 <__NVIC_SetPriority+0x4c>)
 8004092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004096:	0112      	lsls	r2, r2, #4
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	440b      	add	r3, r1
 800409c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80040a0:	e00a      	b.n	80040b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	4908      	ldr	r1, [pc, #32]	; (80040c8 <__NVIC_SetPriority+0x50>)
 80040a8:	79fb      	ldrb	r3, [r7, #7]
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	3b04      	subs	r3, #4
 80040b0:	0112      	lsls	r2, r2, #4
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	440b      	add	r3, r1
 80040b6:	761a      	strb	r2, [r3, #24]
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	e000e100 	.word	0xe000e100
 80040c8:	e000ed00 	.word	0xe000ed00

080040cc <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80040d2:	f002 fa7d 	bl	80065d0 <SEGGER_SYSVIEW_IsStarted>
 80040d6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80040de:	f001 fc95 	bl	8005a0c <SEGGER_SYSVIEW_Start>
  }
}
 80040e2:	bf00      	nop
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
	...

080040ec <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	4603      	mov	r3, r0
 80040f4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80040f6:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <_cbOnUARTRx+0x3c>)
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	2b03      	cmp	r3, #3
 80040fc:	d806      	bhi.n	800410c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80040fe:	4b0a      	ldr	r3, [pc, #40]	; (8004128 <_cbOnUARTRx+0x3c>)
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	3301      	adds	r3, #1
 8004104:	b2da      	uxtb	r2, r3
 8004106:	4b08      	ldr	r3, [pc, #32]	; (8004128 <_cbOnUARTRx+0x3c>)
 8004108:	701a      	strb	r2, [r3, #0]
    goto Done;
 800410a:	e009      	b.n	8004120 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800410c:	f7ff ffde 	bl	80040cc <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004110:	4b05      	ldr	r3, [pc, #20]	; (8004128 <_cbOnUARTRx+0x3c>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	4618      	mov	r0, r3
 8004116:	1dfb      	adds	r3, r7, #7
 8004118:	2201      	movs	r2, #1
 800411a:	4619      	mov	r1, r3
 800411c:	f000 fb9c 	bl	8004858 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004120:	bf00      	nop
}
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	20000014 	.word	0x20000014

0800412c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004134:	4b14      	ldr	r3, [pc, #80]	; (8004188 <_cbOnUARTTx+0x5c>)
 8004136:	785b      	ldrb	r3, [r3, #1]
 8004138:	2b03      	cmp	r3, #3
 800413a:	d80f      	bhi.n	800415c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800413c:	4b12      	ldr	r3, [pc, #72]	; (8004188 <_cbOnUARTTx+0x5c>)
 800413e:	785b      	ldrb	r3, [r3, #1]
 8004140:	461a      	mov	r2, r3
 8004142:	4b12      	ldr	r3, [pc, #72]	; (800418c <_cbOnUARTTx+0x60>)
 8004144:	5c9a      	ldrb	r2, [r3, r2]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800414a:	4b0f      	ldr	r3, [pc, #60]	; (8004188 <_cbOnUARTTx+0x5c>)
 800414c:	785b      	ldrb	r3, [r3, #1]
 800414e:	3301      	adds	r3, #1
 8004150:	b2da      	uxtb	r2, r3
 8004152:	4b0d      	ldr	r3, [pc, #52]	; (8004188 <_cbOnUARTTx+0x5c>)
 8004154:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004156:	2301      	movs	r3, #1
 8004158:	60fb      	str	r3, [r7, #12]
    goto Done;
 800415a:	e00f      	b.n	800417c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800415c:	4b0a      	ldr	r3, [pc, #40]	; (8004188 <_cbOnUARTTx+0x5c>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	6879      	ldr	r1, [r7, #4]
 8004164:	4618      	mov	r0, r3
 8004166:	f000 fa1b 	bl	80045a0 <SEGGER_RTT_ReadUpBufferNoLock>
 800416a:	4603      	mov	r3, r0
 800416c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2b00      	cmp	r3, #0
 8004172:	da02      	bge.n	800417a <_cbOnUARTTx+0x4e>
    r = 0;
 8004174:	2300      	movs	r3, #0
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	e000      	b.n	800417c <_cbOnUARTTx+0x50>
  }
Done:
 800417a:	bf00      	nop
  return r;
 800417c:	68fb      	ldr	r3, [r7, #12]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	20000014 	.word	0x20000014
 800418c:	08006890 	.word	0x08006890

08004190 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004198:	4a04      	ldr	r2, [pc, #16]	; (80041ac <SEGGER_UART_init+0x1c>)
 800419a:	4905      	ldr	r1, [pc, #20]	; (80041b0 <SEGGER_UART_init+0x20>)
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f863 	bl	8004268 <HIF_UART_Init>
}
 80041a2:	bf00      	nop
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	080040ed 	.word	0x080040ed
 80041b0:	0800412d 	.word	0x0800412d

080041b4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80041ba:	4b1e      	ldr	r3, [pc, #120]	; (8004234 <USART2_IRQHandler+0x80>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f003 0320 	and.w	r3, r3, #32
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d011      	beq.n	80041ee <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80041ca:	4b1b      	ldr	r3, [pc, #108]	; (8004238 <USART2_IRQHandler+0x84>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f003 030b 	and.w	r3, r3, #11
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d108      	bne.n	80041ee <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80041dc:	4b17      	ldr	r3, [pc, #92]	; (800423c <USART2_IRQHandler+0x88>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d004      	beq.n	80041ee <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80041e4:	4b15      	ldr	r3, [pc, #84]	; (800423c <USART2_IRQHandler+0x88>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	79fa      	ldrb	r2, [r7, #7]
 80041ea:	4610      	mov	r0, r2
 80041ec:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d01a      	beq.n	800422e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80041f8:	4b11      	ldr	r3, [pc, #68]	; (8004240 <USART2_IRQHandler+0x8c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d015      	beq.n	800422c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004200:	4b0f      	ldr	r3, [pc, #60]	; (8004240 <USART2_IRQHandler+0x8c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	1dfa      	adds	r2, r7, #7
 8004206:	4610      	mov	r0, r2
 8004208:	4798      	blx	r3
 800420a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d106      	bne.n	8004220 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004212:	4b0c      	ldr	r3, [pc, #48]	; (8004244 <USART2_IRQHandler+0x90>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a0b      	ldr	r2, [pc, #44]	; (8004244 <USART2_IRQHandler+0x90>)
 8004218:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	e006      	b.n	800422e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004220:	4b04      	ldr	r3, [pc, #16]	; (8004234 <USART2_IRQHandler+0x80>)
 8004222:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004224:	79fa      	ldrb	r2, [r7, #7]
 8004226:	4b04      	ldr	r3, [pc, #16]	; (8004238 <USART2_IRQHandler+0x84>)
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	e000      	b.n	800422e <USART2_IRQHandler+0x7a>
      return;
 800422c:	bf00      	nop
    }
  }
}
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40004400 	.word	0x40004400
 8004238:	40004404 	.word	0x40004404
 800423c:	20012e68 	.word	0x20012e68
 8004240:	20012e6c 	.word	0x20012e6c
 8004244:	4000440c 	.word	0x4000440c

08004248 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a04      	ldr	r2, [pc, #16]	; (8004264 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004256:	6013      	str	r3, [r2, #0]
}
 8004258:	bf00      	nop
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	4000440c 	.word	0x4000440c

08004268 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004274:	4b2e      	ldr	r3, [pc, #184]	; (8004330 <HIF_UART_Init+0xc8>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a2d      	ldr	r2, [pc, #180]	; (8004330 <HIF_UART_Init+0xc8>)
 800427a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800427e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004280:	4b2c      	ldr	r3, [pc, #176]	; (8004334 <HIF_UART_Init+0xcc>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a2b      	ldr	r2, [pc, #172]	; (8004334 <HIF_UART_Init+0xcc>)
 8004286:	f043 0301 	orr.w	r3, r3, #1
 800428a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 800428c:	4b2a      	ldr	r3, [pc, #168]	; (8004338 <HIF_UART_Init+0xd0>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004298:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80042a0:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80042a2:	4a25      	ldr	r2, [pc, #148]	; (8004338 <HIF_UART_Init+0xd0>)
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80042a8:	4b24      	ldr	r3, [pc, #144]	; (800433c <HIF_UART_Init+0xd4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042b4:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80042bc:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80042be:	4a1f      	ldr	r2, [pc, #124]	; (800433c <HIF_UART_Init+0xd4>)
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80042c4:	4b1e      	ldr	r3, [pc, #120]	; (8004340 <HIF_UART_Init+0xd8>)
 80042c6:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80042ca:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80042cc:	4b1d      	ldr	r3, [pc, #116]	; (8004344 <HIF_UART_Init+0xdc>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80042d2:	4b1d      	ldr	r3, [pc, #116]	; (8004348 <HIF_UART_Init+0xe0>)
 80042d4:	2280      	movs	r2, #128	; 0x80
 80042d6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80042de:	4a1b      	ldr	r2, [pc, #108]	; (800434c <HIF_UART_Init+0xe4>)
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e6:	3301      	adds	r3, #1
 80042e8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	085b      	lsrs	r3, r3, #1
 80042ee:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f6:	d302      	bcc.n	80042fe <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80042f8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80042fc:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d004      	beq.n	800430e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	4a11      	ldr	r2, [pc, #68]	; (8004350 <HIF_UART_Init+0xe8>)
 800430a:	b29b      	uxth	r3, r3
 800430c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800430e:	4a11      	ldr	r2, [pc, #68]	; (8004354 <HIF_UART_Init+0xec>)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004314:	4a10      	ldr	r2, [pc, #64]	; (8004358 <HIF_UART_Init+0xf0>)
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800431a:	2106      	movs	r1, #6
 800431c:	2026      	movs	r0, #38	; 0x26
 800431e:	f7ff feab 	bl	8004078 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004322:	2026      	movs	r0, #38	; 0x26
 8004324:	f7ff fe8a 	bl	800403c <__NVIC_EnableIRQ>
}
 8004328:	bf00      	nop
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40023840 	.word	0x40023840
 8004334:	40023830 	.word	0x40023830
 8004338:	40020020 	.word	0x40020020
 800433c:	40020000 	.word	0x40020000
 8004340:	4000440c 	.word	0x4000440c
 8004344:	40004410 	.word	0x40004410
 8004348:	40004414 	.word	0x40004414
 800434c:	0501bd00 	.word	0x0501bd00
 8004350:	40004408 	.word	0x40004408
 8004354:	20012e68 	.word	0x20012e68
 8004358:	20012e6c 	.word	0x20012e6c

0800435c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004362:	4b26      	ldr	r3, [pc, #152]	; (80043fc <_DoInit+0xa0>)
 8004364:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004366:	22a8      	movs	r2, #168	; 0xa8
 8004368:	2100      	movs	r1, #0
 800436a:	6838      	ldr	r0, [r7, #0]
 800436c:	f002 f9a0 	bl	80066b0 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	2203      	movs	r2, #3
 8004374:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	2203      	movs	r2, #3
 800437a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	4a20      	ldr	r2, [pc, #128]	; (8004400 <_DoInit+0xa4>)
 8004380:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	4a1f      	ldr	r2, [pc, #124]	; (8004404 <_DoInit+0xa8>)
 8004386:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800438e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	2200      	movs	r2, #0
 8004394:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2200      	movs	r2, #0
 800439a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	2200      	movs	r2, #0
 80043a0:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	4a16      	ldr	r2, [pc, #88]	; (8004400 <_DoInit+0xa4>)
 80043a6:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	4a17      	ldr	r2, [pc, #92]	; (8004408 <_DoInit+0xac>)
 80043ac:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2210      	movs	r2, #16
 80043b2:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2200      	movs	r2, #0
 80043b8:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	2200      	movs	r2, #0
 80043be:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	2200      	movs	r2, #0
 80043c4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80043c6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80043ca:	2300      	movs	r3, #0
 80043cc:	607b      	str	r3, [r7, #4]
 80043ce:	e00c      	b.n	80043ea <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f1c3 030f 	rsb	r3, r3, #15
 80043d6:	4a0d      	ldr	r2, [pc, #52]	; (800440c <_DoInit+0xb0>)
 80043d8:	5cd1      	ldrb	r1, [r2, r3]
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4413      	add	r3, r2
 80043e0:	460a      	mov	r2, r1
 80043e2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	3301      	adds	r3, #1
 80043e8:	607b      	str	r3, [r7, #4]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b0f      	cmp	r3, #15
 80043ee:	d9ef      	bls.n	80043d0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80043f0:	f3bf 8f5f 	dmb	sy
}
 80043f4:	bf00      	nop
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	20012e70 	.word	0x20012e70
 8004400:	0800685c 	.word	0x0800685c
 8004404:	20012f18 	.word	0x20012f18
 8004408:	20013318 	.word	0x20013318
 800440c:	08006894 	.word	0x08006894

08004410 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004410:	b580      	push	{r7, lr}
 8004412:	b08a      	sub	sp, #40	; 0x28
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800441c:	2300      	movs	r3, #0
 800441e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	429a      	cmp	r2, r3
 8004432:	d905      	bls.n	8004440 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	3b01      	subs	r3, #1
 800443c:	627b      	str	r3, [r7, #36]	; 0x24
 800443e:	e007      	b.n	8004450 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	69b9      	ldr	r1, [r7, #24]
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	1acb      	subs	r3, r1, r3
 800444a:	4413      	add	r3, r2
 800444c:	3b01      	subs	r3, #1
 800444e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800445a:	4293      	cmp	r3, r2
 800445c:	bf28      	it	cs
 800445e:	4613      	movcs	r3, r2
 8004460:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4293      	cmp	r3, r2
 8004468:	bf28      	it	cs
 800446a:	4613      	movcs	r3, r2
 800446c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	4413      	add	r3, r2
 8004476:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800447a:	68b9      	ldr	r1, [r7, #8]
 800447c:	6978      	ldr	r0, [r7, #20]
 800447e:	f002 f909 	bl	8006694 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004482:	6a3a      	ldr	r2, [r7, #32]
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	4413      	add	r3, r2
 8004488:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	4413      	add	r3, r2
 8004490:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800449a:	69fa      	ldr	r2, [r7, #28]
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	4413      	add	r3, r2
 80044a0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	69fa      	ldr	r2, [r7, #28]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d101      	bne.n	80044b0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80044ac:	2300      	movs	r3, #0
 80044ae:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80044b0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	69fa      	ldr	r2, [r7, #28]
 80044b8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1b2      	bne.n	8004426 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80044c0:	6a3b      	ldr	r3, [r7, #32]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3728      	adds	r7, #40	; 0x28
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b088      	sub	sp, #32
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	60f8      	str	r0, [r7, #12]
 80044d2:	60b9      	str	r1, [r7, #8]
 80044d4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d911      	bls.n	8004512 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	4413      	add	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	68b9      	ldr	r1, [r7, #8]
 80044fc:	6938      	ldr	r0, [r7, #16]
 80044fe:	f002 f8c9 	bl	8006694 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004502:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004506:	69fa      	ldr	r2, [r7, #28]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	441a      	add	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004510:	e01f      	b.n	8004552 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	4413      	add	r3, r2
 800451e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	68b9      	ldr	r1, [r7, #8]
 8004524:	6938      	ldr	r0, [r7, #16]
 8004526:	f002 f8b5 	bl	8006694 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	4413      	add	r3, r2
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	4619      	mov	r1, r3
 8004542:	6938      	ldr	r0, [r7, #16]
 8004544:	f002 f8a6 	bl	8006694 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004548:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	60da      	str	r2, [r3, #12]
}
 8004552:	bf00      	nop
 8004554:	3720      	adds	r7, #32
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800455a:	b480      	push	{r7}
 800455c:	b087      	sub	sp, #28
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	429a      	cmp	r2, r3
 8004574:	d808      	bhi.n	8004588 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689a      	ldr	r2, [r3, #8]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	1ad2      	subs	r2, r2, r3
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	4413      	add	r3, r2
 8004582:	3b01      	subs	r3, #1
 8004584:	617b      	str	r3, [r7, #20]
 8004586:	e004      	b.n	8004592 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	3b01      	subs	r3, #1
 8004590:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004592:	697b      	ldr	r3, [r7, #20]
}
 8004594:	4618      	mov	r0, r3
 8004596:	371c      	adds	r7, #28
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08c      	sub	sp, #48	; 0x30
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80045ac:	4b3e      	ldr	r3, [pc, #248]	; (80046a8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80045ae:	623b      	str	r3, [r7, #32]
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80045ba:	f7ff fecf 	bl	800435c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	4613      	mov	r3, r2
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	4413      	add	r3, r2
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	4a37      	ldr	r2, [pc, #220]	; (80046a8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80045cc:	4413      	add	r3, r2
 80045ce:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80045e0:	2300      	movs	r3, #0
 80045e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80045e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d92b      	bls.n	8004644 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4293      	cmp	r3, r2
 80045fc:	bf28      	it	cs
 80045fe:	4613      	movcs	r3, r2
 8004600:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004608:	4413      	add	r3, r2
 800460a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	6939      	ldr	r1, [r7, #16]
 8004610:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004612:	f002 f83f 	bl	8006694 <memcpy>
    NumBytesRead += NumBytesRem;
 8004616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	4413      	add	r3, r2
 800461c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800461e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	4413      	add	r3, r2
 8004624:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800462e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	4413      	add	r3, r2
 8004634:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800463c:	429a      	cmp	r2, r3
 800463e:	d101      	bne.n	8004644 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004640:	2300      	movs	r3, #0
 8004642:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4293      	cmp	r3, r2
 8004652:	bf28      	it	cs
 8004654:	4613      	movcs	r3, r2
 8004656:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d019      	beq.n	8004692 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004664:	4413      	add	r3, r2
 8004666:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	6939      	ldr	r1, [r7, #16]
 800466c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800466e:	f002 f811 	bl	8006694 <memcpy>
    NumBytesRead += NumBytesRem;
 8004672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	4413      	add	r3, r2
 8004678:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800467a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	4413      	add	r3, r2
 8004680:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800468a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	4413      	add	r3, r2
 8004690:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800469c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800469e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3730      	adds	r7, #48	; 0x30
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	20012e70 	.word	0x20012e70

080046ac <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08c      	sub	sp, #48	; 0x30
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80046b8:	4b3e      	ldr	r3, [pc, #248]	; (80047b4 <SEGGER_RTT_ReadNoLock+0x108>)
 80046ba:	623b      	str	r3, [r7, #32]
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <SEGGER_RTT_ReadNoLock+0x1e>
 80046c6:	f7ff fe49 	bl	800435c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	4613      	mov	r3, r2
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	4413      	add	r3, r2
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	3360      	adds	r3, #96	; 0x60
 80046d6:	4a37      	ldr	r2, [pc, #220]	; (80047b4 <SEGGER_RTT_ReadNoLock+0x108>)
 80046d8:	4413      	add	r3, r2
 80046da:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80046ec:	2300      	movs	r3, #0
 80046ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80046f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d92b      	bls.n	8004750 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4293      	cmp	r3, r2
 8004708:	bf28      	it	cs
 800470a:	4613      	movcs	r3, r2
 800470c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004714:	4413      	add	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	6939      	ldr	r1, [r7, #16]
 800471c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800471e:	f001 ffb9 	bl	8006694 <memcpy>
    NumBytesRead += NumBytesRem;
 8004722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	4413      	add	r3, r2
 8004728:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800472a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	4413      	add	r3, r2
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800473a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	4413      	add	r3, r2
 8004740:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004748:	429a      	cmp	r2, r3
 800474a:	d101      	bne.n	8004750 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800474c:	2300      	movs	r3, #0
 800474e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4293      	cmp	r3, r2
 800475e:	bf28      	it	cs
 8004760:	4613      	movcs	r3, r2
 8004762:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d019      	beq.n	800479e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004770:	4413      	add	r3, r2
 8004772:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	6939      	ldr	r1, [r7, #16]
 8004778:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800477a:	f001 ff8b 	bl	8006694 <memcpy>
    NumBytesRead += NumBytesRem;
 800477e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	4413      	add	r3, r2
 8004784:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	4413      	add	r3, r2
 800478c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004796:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	4413      	add	r3, r2
 800479c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800479e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d002      	beq.n	80047aa <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047a8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80047aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3730      	adds	r7, #48	; 0x30
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	20012e70 	.word	0x20012e70

080047b8 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b088      	sub	sp, #32
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	4613      	mov	r3, r2
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	4413      	add	r3, r2
 80047d0:	00db      	lsls	r3, r3, #3
 80047d2:	3360      	adds	r3, #96	; 0x60
 80047d4:	4a1f      	ldr	r2, [pc, #124]	; (8004854 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80047d6:	4413      	add	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d029      	beq.n	8004836 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d82e      	bhi.n	8004844 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d013      	beq.n	8004816 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80047ee:	e029      	b.n	8004844 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80047f0:	6978      	ldr	r0, [r7, #20]
 80047f2:	f7ff feb2 	bl	800455a <_GetAvailWriteSpace>
 80047f6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d202      	bcs.n	8004806 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8004800:	2300      	movs	r3, #0
 8004802:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004804:	e021      	b.n	800484a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	69b9      	ldr	r1, [r7, #24]
 800480e:	6978      	ldr	r0, [r7, #20]
 8004810:	f7ff fe5b 	bl	80044ca <_WriteNoCheck>
    break;
 8004814:	e019      	b.n	800484a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004816:	6978      	ldr	r0, [r7, #20]
 8004818:	f7ff fe9f 	bl	800455a <_GetAvailWriteSpace>
 800481c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	4293      	cmp	r3, r2
 8004824:	bf28      	it	cs
 8004826:	4613      	movcs	r3, r2
 8004828:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800482a:	69fa      	ldr	r2, [r7, #28]
 800482c:	69b9      	ldr	r1, [r7, #24]
 800482e:	6978      	ldr	r0, [r7, #20]
 8004830:	f7ff fe4b 	bl	80044ca <_WriteNoCheck>
    break;
 8004834:	e009      	b.n	800484a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	69b9      	ldr	r1, [r7, #24]
 800483a:	6978      	ldr	r0, [r7, #20]
 800483c:	f7ff fde8 	bl	8004410 <_WriteBlocking>
 8004840:	61f8      	str	r0, [r7, #28]
    break;
 8004842:	e002      	b.n	800484a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8004844:	2300      	movs	r3, #0
 8004846:	61fb      	str	r3, [r7, #28]
    break;
 8004848:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800484a:	69fb      	ldr	r3, [r7, #28]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3720      	adds	r7, #32
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	20012e70 	.word	0x20012e70

08004858 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004858:	b580      	push	{r7, lr}
 800485a:	b088      	sub	sp, #32
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004864:	4b0e      	ldr	r3, [pc, #56]	; (80048a0 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8004866:	61fb      	str	r3, [r7, #28]
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8004872:	f7ff fd73 	bl	800435c <_DoInit>
  SEGGER_RTT_LOCK();
 8004876:	f3ef 8311 	mrs	r3, BASEPRI
 800487a:	f04f 0120 	mov.w	r1, #32
 800487e:	f381 8811 	msr	BASEPRI, r1
 8004882:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	68b9      	ldr	r1, [r7, #8]
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f7ff ff95 	bl	80047b8 <SEGGER_RTT_WriteDownBufferNoLock>
 800488e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004896:	697b      	ldr	r3, [r7, #20]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3720      	adds	r7, #32
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	20012e70 	.word	0x20012e70

080048a4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
 80048b0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80048b2:	4b3d      	ldr	r3, [pc, #244]	; (80049a8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80048b4:	61bb      	str	r3, [r7, #24]
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80048c0:	f7ff fd4c 	bl	800435c <_DoInit>
  SEGGER_RTT_LOCK();
 80048c4:	f3ef 8311 	mrs	r3, BASEPRI
 80048c8:	f04f 0120 	mov.w	r1, #32
 80048cc:	f381 8811 	msr	BASEPRI, r1
 80048d0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80048d2:	4b35      	ldr	r3, [pc, #212]	; (80049a8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80048d4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80048d6:	2300      	movs	r3, #0
 80048d8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80048da:	6939      	ldr	r1, [r7, #16]
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	1c5a      	adds	r2, r3, #1
 80048e0:	4613      	mov	r3, r2
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	4413      	add	r3, r2
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	440b      	add	r3, r1
 80048ea:	3304      	adds	r3, #4
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d008      	beq.n	8004904 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	3301      	adds	r3, #1
 80048f6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	69fa      	ldr	r2, [r7, #28]
 80048fe:	429a      	cmp	r2, r3
 8004900:	dbeb      	blt.n	80048da <SEGGER_RTT_AllocUpBuffer+0x36>
 8004902:	e000      	b.n	8004906 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004904:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	69fa      	ldr	r2, [r7, #28]
 800490c:	429a      	cmp	r2, r3
 800490e:	da3f      	bge.n	8004990 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004910:	6939      	ldr	r1, [r7, #16]
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	4613      	mov	r3, r2
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	4413      	add	r3, r2
 800491c:	00db      	lsls	r3, r3, #3
 800491e:	440b      	add	r3, r1
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004924:	6939      	ldr	r1, [r7, #16]
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	1c5a      	adds	r2, r3, #1
 800492a:	4613      	mov	r3, r2
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	4413      	add	r3, r2
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	440b      	add	r3, r1
 8004934:	3304      	adds	r3, #4
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800493a:	6939      	ldr	r1, [r7, #16]
 800493c:	69fa      	ldr	r2, [r7, #28]
 800493e:	4613      	mov	r3, r2
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	4413      	add	r3, r2
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	440b      	add	r3, r1
 8004948:	3320      	adds	r3, #32
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800494e:	6939      	ldr	r1, [r7, #16]
 8004950:	69fa      	ldr	r2, [r7, #28]
 8004952:	4613      	mov	r3, r2
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	4413      	add	r3, r2
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	440b      	add	r3, r1
 800495c:	3328      	adds	r3, #40	; 0x28
 800495e:	2200      	movs	r2, #0
 8004960:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004962:	6939      	ldr	r1, [r7, #16]
 8004964:	69fa      	ldr	r2, [r7, #28]
 8004966:	4613      	mov	r3, r2
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	4413      	add	r3, r2
 800496c:	00db      	lsls	r3, r3, #3
 800496e:	440b      	add	r3, r1
 8004970:	3324      	adds	r3, #36	; 0x24
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004976:	6939      	ldr	r1, [r7, #16]
 8004978:	69fa      	ldr	r2, [r7, #28]
 800497a:	4613      	mov	r3, r2
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	4413      	add	r3, r2
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	440b      	add	r3, r1
 8004984:	332c      	adds	r3, #44	; 0x2c
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800498a:	f3bf 8f5f 	dmb	sy
 800498e:	e002      	b.n	8004996 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004990:	f04f 33ff 	mov.w	r3, #4294967295
 8004994:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800499c:	69fb      	ldr	r3, [r7, #28]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3720      	adds	r7, #32
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	20012e70 	.word	0x20012e70

080049ac <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b08a      	sub	sp, #40	; 0x28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
 80049b8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80049ba:	4b21      	ldr	r3, [pc, #132]	; (8004a40 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80049bc:	623b      	str	r3, [r7, #32]
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <SEGGER_RTT_ConfigDownBuffer+0x20>
 80049c8:	f7ff fcc8 	bl	800435c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80049cc:	4b1c      	ldr	r3, [pc, #112]	; (8004a40 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80049ce:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d82c      	bhi.n	8004a30 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80049d6:	f3ef 8311 	mrs	r3, BASEPRI
 80049da:	f04f 0120 	mov.w	r1, #32
 80049de:	f381 8811 	msr	BASEPRI, r1
 80049e2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	4613      	mov	r3, r2
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	4413      	add	r3, r2
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	3360      	adds	r3, #96	; 0x60
 80049f0:	69fa      	ldr	r2, [r7, #28]
 80049f2:	4413      	add	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00e      	beq.n	8004a1a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	2200      	movs	r2, #0
 8004a12:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	2200      	movs	r2, #0
 8004a18:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a1e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004a20:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a2e:	e002      	b.n	8004a36 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004a30:	f04f 33ff 	mov.w	r3, #4294967295
 8004a34:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3728      	adds	r7, #40	; 0x28
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	20012e70 	.word	0x20012e70

08004a44 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004a44:	b480      	push	{r7}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00f      	beq.n	8004a7a <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8004a5a:	e002      	b.n	8004a62 <_EncodeStr+0x1e>
      Len++;
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	4413      	add	r3, r2
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1f6      	bne.n	8004a5c <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d901      	bls.n	8004a7a <_EncodeStr+0x36>
      Len = Limit;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	2bfe      	cmp	r3, #254	; 0xfe
 8004a7e:	d806      	bhi.n	8004a8e <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	1c5a      	adds	r2, r3, #1
 8004a84:	60fa      	str	r2, [r7, #12]
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	701a      	strb	r2, [r3, #0]
 8004a8c:	e011      	b.n	8004ab2 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	60fa      	str	r2, [r7, #12]
 8004a94:	22ff      	movs	r2, #255	; 0xff
 8004a96:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	1c5a      	adds	r2, r3, #1
 8004a9c:	60fa      	str	r2, [r7, #12]
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	b2d2      	uxtb	r2, r2
 8004aa2:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	0a19      	lsrs	r1, r3, #8
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	60fa      	str	r2, [r7, #12]
 8004aae:	b2ca      	uxtb	r2, r1
 8004ab0:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004ab6:	e00a      	b.n	8004ace <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	1c53      	adds	r3, r2, #1
 8004abc:	60bb      	str	r3, [r7, #8]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	1c59      	adds	r1, r3, #1
 8004ac2:	60f9      	str	r1, [r7, #12]
 8004ac4:	7812      	ldrb	r2, [r2, #0]
 8004ac6:	701a      	strb	r2, [r3, #0]
    n++;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	3301      	adds	r3, #1
 8004acc:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d3f0      	bcc.n	8004ab8 <_EncodeStr+0x74>
  }
  return pPayload;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	371c      	adds	r7, #28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	3307      	adds	r3, #7
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004b02:	4b35      	ldr	r3, [pc, #212]	; (8004bd8 <_HandleIncomingPacket+0xdc>)
 8004b04:	7e1b      	ldrb	r3, [r3, #24]
 8004b06:	4618      	mov	r0, r3
 8004b08:	1cfb      	adds	r3, r7, #3
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	f7ff fdcd 	bl	80046ac <SEGGER_RTT_ReadNoLock>
 8004b12:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d052      	beq.n	8004bc0 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8004b1a:	78fb      	ldrb	r3, [r7, #3]
 8004b1c:	2b80      	cmp	r3, #128	; 0x80
 8004b1e:	d031      	beq.n	8004b84 <_HandleIncomingPacket+0x88>
 8004b20:	2b80      	cmp	r3, #128	; 0x80
 8004b22:	dc40      	bgt.n	8004ba6 <_HandleIncomingPacket+0xaa>
 8004b24:	2b07      	cmp	r3, #7
 8004b26:	dc15      	bgt.n	8004b54 <_HandleIncomingPacket+0x58>
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	dd3c      	ble.n	8004ba6 <_HandleIncomingPacket+0xaa>
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	2b06      	cmp	r3, #6
 8004b30:	d839      	bhi.n	8004ba6 <_HandleIncomingPacket+0xaa>
 8004b32:	a201      	add	r2, pc, #4	; (adr r2, 8004b38 <_HandleIncomingPacket+0x3c>)
 8004b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b38:	08004b5b 	.word	0x08004b5b
 8004b3c:	08004b61 	.word	0x08004b61
 8004b40:	08004b67 	.word	0x08004b67
 8004b44:	08004b6d 	.word	0x08004b6d
 8004b48:	08004b73 	.word	0x08004b73
 8004b4c:	08004b79 	.word	0x08004b79
 8004b50:	08004b7f 	.word	0x08004b7f
 8004b54:	2b7f      	cmp	r3, #127	; 0x7f
 8004b56:	d035      	beq.n	8004bc4 <_HandleIncomingPacket+0xc8>
 8004b58:	e025      	b.n	8004ba6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004b5a:	f000 ff57 	bl	8005a0c <SEGGER_SYSVIEW_Start>
      break;
 8004b5e:	e036      	b.n	8004bce <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004b60:	f001 f810 	bl	8005b84 <SEGGER_SYSVIEW_Stop>
      break;
 8004b64:	e033      	b.n	8004bce <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004b66:	f001 f9e9 	bl	8005f3c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004b6a:	e030      	b.n	8004bce <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004b6c:	f001 f9ae 	bl	8005ecc <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004b70:	e02d      	b.n	8004bce <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004b72:	f001 f82d 	bl	8005bd0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004b76:	e02a      	b.n	8004bce <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004b78:	f001 fc7c 	bl	8006474 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004b7c:	e027      	b.n	8004bce <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004b7e:	f001 fc5b 	bl	8006438 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004b82:	e024      	b.n	8004bce <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004b84:	4b14      	ldr	r3, [pc, #80]	; (8004bd8 <_HandleIncomingPacket+0xdc>)
 8004b86:	7e1b      	ldrb	r3, [r3, #24]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	1cfb      	adds	r3, r7, #3
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	4619      	mov	r1, r3
 8004b90:	f7ff fd8c 	bl	80046ac <SEGGER_RTT_ReadNoLock>
 8004b94:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d015      	beq.n	8004bc8 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004b9c:	78fb      	ldrb	r3, [r7, #3]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f001 fbca 	bl	8006338 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004ba4:	e010      	b.n	8004bc8 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004ba6:	78fb      	ldrb	r3, [r7, #3]
 8004ba8:	b25b      	sxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	da0e      	bge.n	8004bcc <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004bae:	4b0a      	ldr	r3, [pc, #40]	; (8004bd8 <_HandleIncomingPacket+0xdc>)
 8004bb0:	7e1b      	ldrb	r3, [r3, #24]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	1cfb      	adds	r3, r7, #3
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	4619      	mov	r1, r3
 8004bba:	f7ff fd77 	bl	80046ac <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004bbe:	e005      	b.n	8004bcc <_HandleIncomingPacket+0xd0>
    }
  }
 8004bc0:	bf00      	nop
 8004bc2:	e004      	b.n	8004bce <_HandleIncomingPacket+0xd2>
      break;
 8004bc4:	bf00      	nop
 8004bc6:	e002      	b.n	8004bce <_HandleIncomingPacket+0xd2>
      break;
 8004bc8:	bf00      	nop
 8004bca:	e000      	b.n	8004bce <_HandleIncomingPacket+0xd2>
      break;
 8004bcc:	bf00      	nop
}
 8004bce:	bf00      	nop
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20014330 	.word	0x20014330

08004bdc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08c      	sub	sp, #48	; 0x30
 8004be0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004be2:	2301      	movs	r3, #1
 8004be4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004be6:	1d3b      	adds	r3, r7, #4
 8004be8:	3301      	adds	r3, #1
 8004bea:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bf0:	4b32      	ldr	r3, [pc, #200]	; (8004cbc <_TrySendOverflowPacket+0xe0>)
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bf6:	e00b      	b.n	8004c10 <_TrySendOverflowPacket+0x34>
 8004bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfe:	1c59      	adds	r1, r3, #1
 8004c00:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004c02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	701a      	strb	r2, [r3, #0]
 8004c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0c:	09db      	lsrs	r3, r3, #7
 8004c0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c12:	2b7f      	cmp	r3, #127	; 0x7f
 8004c14:	d8f0      	bhi.n	8004bf8 <_TrySendOverflowPacket+0x1c>
 8004c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c1e:	b2d2      	uxtb	r2, r2
 8004c20:	701a      	strb	r2, [r3, #0]
 8004c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c24:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004c26:	4b26      	ldr	r3, [pc, #152]	; (8004cc0 <_TrySendOverflowPacket+0xe4>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004c2c:	4b23      	ldr	r3, [pc, #140]	; (8004cbc <_TrySendOverflowPacket+0xe0>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	627b      	str	r3, [r7, #36]	; 0x24
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	623b      	str	r3, [r7, #32]
 8004c3e:	e00b      	b.n	8004c58 <_TrySendOverflowPacket+0x7c>
 8004c40:	6a3b      	ldr	r3, [r7, #32]
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	1c59      	adds	r1, r3, #1
 8004c48:	6279      	str	r1, [r7, #36]	; 0x24
 8004c4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	701a      	strb	r2, [r3, #0]
 8004c52:	6a3b      	ldr	r3, [r7, #32]
 8004c54:	09db      	lsrs	r3, r3, #7
 8004c56:	623b      	str	r3, [r7, #32]
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	2b7f      	cmp	r3, #127	; 0x7f
 8004c5c:	d8f0      	bhi.n	8004c40 <_TrySendOverflowPacket+0x64>
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	1c5a      	adds	r2, r3, #1
 8004c62:	627a      	str	r2, [r7, #36]	; 0x24
 8004c64:	6a3a      	ldr	r2, [r7, #32]
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	701a      	strb	r2, [r3, #0]
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004c6e:	4b13      	ldr	r3, [pc, #76]	; (8004cbc <_TrySendOverflowPacket+0xe0>)
 8004c70:	785b      	ldrb	r3, [r3, #1]
 8004c72:	4618      	mov	r0, r3
 8004c74:	1d3b      	adds	r3, r7, #4
 8004c76:	69fa      	ldr	r2, [r7, #28]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	1d3b      	adds	r3, r7, #4
 8004c7e:	4619      	mov	r1, r3
 8004c80:	f7fb faa6 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004c84:	4603      	mov	r3, r0
 8004c86:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004c88:	f7ff fade 	bl	8004248 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d009      	beq.n	8004ca6 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004c92:	4a0a      	ldr	r2, [pc, #40]	; (8004cbc <_TrySendOverflowPacket+0xe0>)
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004c98:	4b08      	ldr	r3, [pc, #32]	; (8004cbc <_TrySendOverflowPacket+0xe0>)
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	4b06      	ldr	r3, [pc, #24]	; (8004cbc <_TrySendOverflowPacket+0xe0>)
 8004ca2:	701a      	strb	r2, [r3, #0]
 8004ca4:	e004      	b.n	8004cb0 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004ca6:	4b05      	ldr	r3, [pc, #20]	; (8004cbc <_TrySendOverflowPacket+0xe0>)
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	3301      	adds	r3, #1
 8004cac:	4a03      	ldr	r2, [pc, #12]	; (8004cbc <_TrySendOverflowPacket+0xe0>)
 8004cae:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004cb0:	693b      	ldr	r3, [r7, #16]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3730      	adds	r7, #48	; 0x30
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	20014330 	.word	0x20014330
 8004cc0:	e0001004 	.word	0xe0001004

08004cc4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b08a      	sub	sp, #40	; 0x28
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004cd0:	4b96      	ldr	r3, [pc, #600]	; (8004f2c <_SendPacket+0x268>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d010      	beq.n	8004cfa <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004cd8:	4b94      	ldr	r3, [pc, #592]	; (8004f2c <_SendPacket+0x268>)
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 8130 	beq.w	8004f42 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004ce2:	4b92      	ldr	r3, [pc, #584]	; (8004f2c <_SendPacket+0x268>)
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d109      	bne.n	8004cfe <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004cea:	f7ff ff77 	bl	8004bdc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004cee:	4b8f      	ldr	r3, [pc, #572]	; (8004f2c <_SendPacket+0x268>)
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	f040 8127 	bne.w	8004f46 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8004cf8:	e001      	b.n	8004cfe <_SendPacket+0x3a>
    goto Send;
 8004cfa:	bf00      	nop
 8004cfc:	e000      	b.n	8004d00 <_SendPacket+0x3c>
Send:
 8004cfe:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b1f      	cmp	r3, #31
 8004d04:	d809      	bhi.n	8004d1a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004d06:	4b89      	ldr	r3, [pc, #548]	; (8004f2c <_SendPacket+0x268>)
 8004d08:	69da      	ldr	r2, [r3, #28]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f040 8118 	bne.w	8004f4a <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b17      	cmp	r3, #23
 8004d1e:	d807      	bhi.n	8004d30 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	b2da      	uxtb	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	701a      	strb	r2, [r3, #0]
 8004d2e:	e0c4      	b.n	8004eba <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	2b7f      	cmp	r3, #127	; 0x7f
 8004d3c:	d912      	bls.n	8004d64 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	09da      	lsrs	r2, r3, #7
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3b01      	subs	r3, #1
 8004d46:	60fb      	str	r3, [r7, #12]
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	3a01      	subs	r2, #1
 8004d56:	60fa      	str	r2, [r7, #12]
 8004d58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	e006      	b.n	8004d72 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	60fb      	str	r3, [r7, #12]
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b7e      	cmp	r3, #126	; 0x7e
 8004d76:	d807      	bhi.n	8004d88 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	701a      	strb	r2, [r3, #0]
 8004d86:	e098      	b.n	8004eba <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d8e:	d212      	bcs.n	8004db6 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	09da      	lsrs	r2, r3, #7
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	3b01      	subs	r3, #1
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	3a01      	subs	r2, #1
 8004da8:	60fa      	str	r2, [r7, #12]
 8004daa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	701a      	strb	r2, [r3, #0]
 8004db4:	e081      	b.n	8004eba <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dbc:	d21d      	bcs.n	8004dfa <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	0b9a      	lsrs	r2, r3, #14
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	09db      	lsrs	r3, r3, #7
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	3a01      	subs	r2, #1
 8004dd8:	60fa      	str	r2, [r7, #12]
 8004dda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	3a01      	subs	r2, #1
 8004dec:	60fa      	str	r2, [r7, #12]
 8004dee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	701a      	strb	r2, [r3, #0]
 8004df8:	e05f      	b.n	8004eba <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e00:	d228      	bcs.n	8004e54 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	0d5a      	lsrs	r2, r3, #21
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	b2d2      	uxtb	r2, r2
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	0b9b      	lsrs	r3, r3, #14
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	3a01      	subs	r2, #1
 8004e1c:	60fa      	str	r2, [r7, #12]
 8004e1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	09db      	lsrs	r3, r3, #7
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	3a01      	subs	r2, #1
 8004e32:	60fa      	str	r2, [r7, #12]
 8004e34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	3a01      	subs	r2, #1
 8004e46:	60fa      	str	r2, [r7, #12]
 8004e48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	701a      	strb	r2, [r3, #0]
 8004e52:	e032      	b.n	8004eba <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	0f1a      	lsrs	r2, r3, #28
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	0d5b      	lsrs	r3, r3, #21
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	3a01      	subs	r2, #1
 8004e6e:	60fa      	str	r2, [r7, #12]
 8004e70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e74:	b2da      	uxtb	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	0b9b      	lsrs	r3, r3, #14
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	3a01      	subs	r2, #1
 8004e84:	60fa      	str	r2, [r7, #12]
 8004e86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	09db      	lsrs	r3, r3, #7
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	3a01      	subs	r2, #1
 8004e9a:	60fa      	str	r2, [r7, #12]
 8004e9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	3a01      	subs	r2, #1
 8004eae:	60fa      	str	r2, [r7, #12]
 8004eb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004eba:	4b1d      	ldr	r3, [pc, #116]	; (8004f30 <_SendPacket+0x26c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004ec0:	4b1a      	ldr	r3, [pc, #104]	; (8004f2c <_SendPacket+0x268>)
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	623b      	str	r3, [r7, #32]
 8004ed2:	e00b      	b.n	8004eec <_SendPacket+0x228>
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	1c59      	adds	r1, r3, #1
 8004edc:	6279      	str	r1, [r7, #36]	; 0x24
 8004ede:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ee2:	b2d2      	uxtb	r2, r2
 8004ee4:	701a      	strb	r2, [r3, #0]
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	09db      	lsrs	r3, r3, #7
 8004eea:	623b      	str	r3, [r7, #32]
 8004eec:	6a3b      	ldr	r3, [r7, #32]
 8004eee:	2b7f      	cmp	r3, #127	; 0x7f
 8004ef0:	d8f0      	bhi.n	8004ed4 <_SendPacket+0x210>
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	1c5a      	adds	r2, r3, #1
 8004ef6:	627a      	str	r2, [r7, #36]	; 0x24
 8004ef8:	6a3a      	ldr	r2, [r7, #32]
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	701a      	strb	r2, [r3, #0]
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004f02:	4b0a      	ldr	r3, [pc, #40]	; (8004f2c <_SendPacket+0x268>)
 8004f04:	785b      	ldrb	r3, [r3, #1]
 8004f06:	4618      	mov	r0, r3
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	461a      	mov	r2, r3
 8004f10:	68f9      	ldr	r1, [r7, #12]
 8004f12:	f7fb f95d 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004f16:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004f18:	f7ff f996 	bl	8004248 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d008      	beq.n	8004f34 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004f22:	4a02      	ldr	r2, [pc, #8]	; (8004f2c <_SendPacket+0x268>)
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	60d3      	str	r3, [r2, #12]
 8004f28:	e010      	b.n	8004f4c <_SendPacket+0x288>
 8004f2a:	bf00      	nop
 8004f2c:	20014330 	.word	0x20014330
 8004f30:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004f34:	4b19      	ldr	r3, [pc, #100]	; (8004f9c <_SendPacket+0x2d8>)
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	4b17      	ldr	r3, [pc, #92]	; (8004f9c <_SendPacket+0x2d8>)
 8004f3e:	701a      	strb	r2, [r3, #0]
 8004f40:	e004      	b.n	8004f4c <_SendPacket+0x288>
    goto SendDone;
 8004f42:	bf00      	nop
 8004f44:	e002      	b.n	8004f4c <_SendPacket+0x288>
      goto SendDone;
 8004f46:	bf00      	nop
 8004f48:	e000      	b.n	8004f4c <_SendPacket+0x288>
      goto SendDone;
 8004f4a:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004f4c:	4b13      	ldr	r3, [pc, #76]	; (8004f9c <_SendPacket+0x2d8>)
 8004f4e:	7e1b      	ldrb	r3, [r3, #24]
 8004f50:	4619      	mov	r1, r3
 8004f52:	4a13      	ldr	r2, [pc, #76]	; (8004fa0 <_SendPacket+0x2dc>)
 8004f54:	460b      	mov	r3, r1
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	440b      	add	r3, r1
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	4413      	add	r3, r2
 8004f5e:	336c      	adds	r3, #108	; 0x6c
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	4b0e      	ldr	r3, [pc, #56]	; (8004f9c <_SendPacket+0x2d8>)
 8004f64:	7e1b      	ldrb	r3, [r3, #24]
 8004f66:	4618      	mov	r0, r3
 8004f68:	490d      	ldr	r1, [pc, #52]	; (8004fa0 <_SendPacket+0x2dc>)
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	4403      	add	r3, r0
 8004f70:	00db      	lsls	r3, r3, #3
 8004f72:	440b      	add	r3, r1
 8004f74:	3370      	adds	r3, #112	; 0x70
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d00b      	beq.n	8004f94 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004f7c:	4b07      	ldr	r3, [pc, #28]	; (8004f9c <_SendPacket+0x2d8>)
 8004f7e:	789b      	ldrb	r3, [r3, #2]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d107      	bne.n	8004f94 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004f84:	4b05      	ldr	r3, [pc, #20]	; (8004f9c <_SendPacket+0x2d8>)
 8004f86:	2201      	movs	r2, #1
 8004f88:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004f8a:	f7ff fdb7 	bl	8004afc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004f8e:	4b03      	ldr	r3, [pc, #12]	; (8004f9c <_SendPacket+0x2d8>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004f94:	bf00      	nop
 8004f96:	3728      	adds	r7, #40	; 0x28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	20014330 	.word	0x20014330
 8004fa0:	20012e70 	.word	0x20012e70

08004fa4 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b08a      	sub	sp, #40	; 0x28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	460b      	mov	r3, r1
 8004fae:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	2b80      	cmp	r3, #128	; 0x80
 8004fbc:	d80a      	bhi.n	8004fd4 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	1c59      	adds	r1, r3, #1
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6051      	str	r1, [r2, #4]
 8004fc8:	78fa      	ldrb	r2, [r7, #3]
 8004fca:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	1c5a      	adds	r2, r3, #1
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	2b80      	cmp	r3, #128	; 0x80
 8004fda:	d15a      	bne.n	8005092 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	691a      	ldr	r2, [r3, #16]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	b2d2      	uxtb	r2, r2
 8004fe6:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	623b      	str	r3, [r7, #32]
 8004ffc:	e00b      	b.n	8005016 <_StoreChar+0x72>
 8004ffe:	6a3b      	ldr	r3, [r7, #32]
 8005000:	b2da      	uxtb	r2, r3
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	1c59      	adds	r1, r3, #1
 8005006:	6279      	str	r1, [r7, #36]	; 0x24
 8005008:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800500c:	b2d2      	uxtb	r2, r2
 800500e:	701a      	strb	r2, [r3, #0]
 8005010:	6a3b      	ldr	r3, [r7, #32]
 8005012:	09db      	lsrs	r3, r3, #7
 8005014:	623b      	str	r3, [r7, #32]
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	2b7f      	cmp	r3, #127	; 0x7f
 800501a:	d8f0      	bhi.n	8004ffe <_StoreChar+0x5a>
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	1c5a      	adds	r2, r3, #1
 8005020:	627a      	str	r2, [r7, #36]	; 0x24
 8005022:	6a3a      	ldr	r2, [r7, #32]
 8005024:	b2d2      	uxtb	r2, r2
 8005026:	701a      	strb	r2, [r3, #0]
 8005028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	61fb      	str	r3, [r7, #28]
 8005030:	2300      	movs	r3, #0
 8005032:	61bb      	str	r3, [r7, #24]
 8005034:	e00b      	b.n	800504e <_StoreChar+0xaa>
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	b2da      	uxtb	r2, r3
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	1c59      	adds	r1, r3, #1
 800503e:	61f9      	str	r1, [r7, #28]
 8005040:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005044:	b2d2      	uxtb	r2, r2
 8005046:	701a      	strb	r2, [r3, #0]
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	09db      	lsrs	r3, r3, #7
 800504c:	61bb      	str	r3, [r7, #24]
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	2b7f      	cmp	r3, #127	; 0x7f
 8005052:	d8f0      	bhi.n	8005036 <_StoreChar+0x92>
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	1c5a      	adds	r2, r3, #1
 8005058:	61fa      	str	r2, [r7, #28]
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	b2d2      	uxtb	r2, r2
 800505e:	701a      	strb	r2, [r3, #0]
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	221a      	movs	r2, #26
 800506a:	6939      	ldr	r1, [r7, #16]
 800506c:	4618      	mov	r0, r3
 800506e:	f7ff fe29 	bl	8004cc4 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4618      	mov	r0, r3
 8005078:	f7ff fd34 	bl	8004ae4 <_PreparePacket>
 800507c:	4602      	mov	r2, r0
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	611a      	str	r2, [r3, #16]
  }
}
 8005092:	bf00      	nop
 8005094:	3728      	adds	r7, #40	; 0x28
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
	...

0800509c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800509c:	b580      	push	{r7, lr}
 800509e:	b08a      	sub	sp, #40	; 0x28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
 80050a8:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80050ae:	2301      	movs	r3, #1
 80050b0:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80050b2:	2301      	movs	r3, #1
 80050b4:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80050b6:	e007      	b.n	80050c8 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80050b8:	6a3a      	ldr	r2, [r7, #32]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c0:	623b      	str	r3, [r7, #32]
    Width++;
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	3301      	adds	r3, #1
 80050c6:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80050c8:	6a3a      	ldr	r2, [r7, #32]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d2f3      	bcs.n	80050b8 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d901      	bls.n	80050dc <_PrintUnsigned+0x40>
    Width = NumDigits;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80050dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d11f      	bne.n	8005126 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80050e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d01c      	beq.n	8005126 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80050ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d005      	beq.n	8005102 <_PrintUnsigned+0x66>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d102      	bne.n	8005102 <_PrintUnsigned+0x66>
        c = '0';
 80050fc:	2330      	movs	r3, #48	; 0x30
 80050fe:	76fb      	strb	r3, [r7, #27]
 8005100:	e001      	b.n	8005106 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005102:	2320      	movs	r3, #32
 8005104:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005106:	e007      	b.n	8005118 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510a:	3b01      	subs	r3, #1
 800510c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800510e:	7efb      	ldrb	r3, [r7, #27]
 8005110:	4619      	mov	r1, r3
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f7ff ff46 	bl	8004fa4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <_PrintUnsigned+0x8a>
 800511e:	69fa      	ldr	r2, [r7, #28]
 8005120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005122:	429a      	cmp	r2, r3
 8005124:	d3f0      	bcc.n	8005108 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d903      	bls.n	8005134 <_PrintUnsigned+0x98>
      NumDigits--;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	3b01      	subs	r3, #1
 8005130:	603b      	str	r3, [r7, #0]
 8005132:	e009      	b.n	8005148 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	fbb2 f3f3 	udiv	r3, r2, r3
 800513c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	429a      	cmp	r2, r3
 8005144:	d200      	bcs.n	8005148 <_PrintUnsigned+0xac>
        break;
 8005146:	e005      	b.n	8005154 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	fb02 f303 	mul.w	r3, r2, r3
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005152:	e7e8      	b.n	8005126 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	fbb2 f3f3 	udiv	r3, r2, r3
 800515c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005162:	fb02 f303 	mul.w	r3, r2, r3
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800516c:	4a15      	ldr	r2, [pc, #84]	; (80051c4 <_PrintUnsigned+0x128>)
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	4413      	add	r3, r2
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	4619      	mov	r1, r3
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f7ff ff14 	bl	8004fa4 <_StoreChar>
    Digit /= Base;
 800517c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	fbb2 f3f3 	udiv	r3, r2, r3
 8005184:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1e3      	bne.n	8005154 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800518c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d011      	beq.n	80051ba <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00e      	beq.n	80051ba <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800519c:	e006      	b.n	80051ac <_PrintUnsigned+0x110>
        FieldWidth--;
 800519e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a0:	3b01      	subs	r3, #1
 80051a2:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80051a4:	2120      	movs	r1, #32
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f7ff fefc 	bl	8004fa4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80051ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <_PrintUnsigned+0x11e>
 80051b2:	69fa      	ldr	r2, [r7, #28]
 80051b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d3f1      	bcc.n	800519e <_PrintUnsigned+0x102>
      }
    }
  }
}
 80051ba:	bf00      	nop
 80051bc:	3728      	adds	r7, #40	; 0x28
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	080068b4 	.word	0x080068b4

080051c8 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af02      	add	r7, sp, #8
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
 80051d4:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	bfb8      	it	lt
 80051dc:	425b      	neglt	r3, r3
 80051de:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80051e0:	2301      	movs	r3, #1
 80051e2:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80051e4:	e007      	b.n	80051f6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80051ee:	613b      	str	r3, [r7, #16]
    Width++;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	3301      	adds	r3, #1
 80051f4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	daf3      	bge.n	80051e6 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	429a      	cmp	r2, r3
 8005204:	d901      	bls.n	800520a <_PrintInt+0x42>
    Width = NumDigits;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <_PrintInt+0x5e>
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	db04      	blt.n	8005220 <_PrintInt+0x58>
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b00      	cmp	r3, #0
 800521e:	d002      	beq.n	8005226 <_PrintInt+0x5e>
    FieldWidth--;
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	3b01      	subs	r3, #1
 8005224:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d002      	beq.n	8005236 <_PrintInt+0x6e>
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d016      	beq.n	8005264 <_PrintInt+0x9c>
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b00      	cmp	r3, #0
 800523e:	d111      	bne.n	8005264 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00e      	beq.n	8005264 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005246:	e006      	b.n	8005256 <_PrintInt+0x8e>
        FieldWidth--;
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	3b01      	subs	r3, #1
 800524c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800524e:	2120      	movs	r1, #32
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f7ff fea7 	bl	8004fa4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d003      	beq.n	8005264 <_PrintInt+0x9c>
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	429a      	cmp	r2, r3
 8005262:	d3f1      	bcc.n	8005248 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	da07      	bge.n	800527a <_PrintInt+0xb2>
    v = -v;
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	425b      	negs	r3, r3
 800526e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005270:	212d      	movs	r1, #45	; 0x2d
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f7ff fe96 	bl	8004fa4 <_StoreChar>
 8005278:	e008      	b.n	800528c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	f003 0304 	and.w	r3, r3, #4
 8005280:	2b00      	cmp	r3, #0
 8005282:	d003      	beq.n	800528c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005284:	212b      	movs	r1, #43	; 0x2b
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f7ff fe8c 	bl	8004fa4 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d019      	beq.n	80052ca <_PrintInt+0x102>
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b00      	cmp	r3, #0
 800529e:	d114      	bne.n	80052ca <_PrintInt+0x102>
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d111      	bne.n	80052ca <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00e      	beq.n	80052ca <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80052ac:	e006      	b.n	80052bc <_PrintInt+0xf4>
        FieldWidth--;
 80052ae:	6a3b      	ldr	r3, [r7, #32]
 80052b0:	3b01      	subs	r3, #1
 80052b2:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80052b4:	2130      	movs	r1, #48	; 0x30
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f7ff fe74 	bl	8004fa4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80052bc:	6a3b      	ldr	r3, [r7, #32]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <_PrintInt+0x102>
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d3f1      	bcc.n	80052ae <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80052ca:	68b9      	ldr	r1, [r7, #8]
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	9301      	str	r3, [sp, #4]
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f7ff fedf 	bl	800509c <_PrintUnsigned>
}
 80052de:	bf00      	nop
 80052e0:	3718      	adds	r7, #24
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
	...

080052e8 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b098      	sub	sp, #96	; 0x60
 80052ec:	af02      	add	r7, sp, #8
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80052f4:	f3ef 8311 	mrs	r3, BASEPRI
 80052f8:	f04f 0120 	mov.w	r1, #32
 80052fc:	f381 8811 	msr	BASEPRI, r1
 8005300:	633b      	str	r3, [r7, #48]	; 0x30
 8005302:	48b7      	ldr	r0, [pc, #732]	; (80055e0 <_VPrintTarget+0x2f8>)
 8005304:	f7ff fbee 	bl	8004ae4 <_PreparePacket>
 8005308:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800530a:	4bb5      	ldr	r3, [pc, #724]	; (80055e0 <_VPrintTarget+0x2f8>)
 800530c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800530e:	2300      	movs	r3, #0
 8005310:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005314:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	3301      	adds	r3, #1
 800531a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	3301      	adds	r3, #1
 800532c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800532e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005332:	2b00      	cmp	r3, #0
 8005334:	f000 8183 	beq.w	800563e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005338:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800533c:	2b25      	cmp	r3, #37	; 0x25
 800533e:	f040 8170 	bne.w	8005622 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005342:	2300      	movs	r3, #0
 8005344:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005346:	2301      	movs	r3, #1
 8005348:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005352:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005356:	3b23      	subs	r3, #35	; 0x23
 8005358:	2b0d      	cmp	r3, #13
 800535a:	d83f      	bhi.n	80053dc <_VPrintTarget+0xf4>
 800535c:	a201      	add	r2, pc, #4	; (adr r2, 8005364 <_VPrintTarget+0x7c>)
 800535e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005362:	bf00      	nop
 8005364:	080053cd 	.word	0x080053cd
 8005368:	080053dd 	.word	0x080053dd
 800536c:	080053dd 	.word	0x080053dd
 8005370:	080053dd 	.word	0x080053dd
 8005374:	080053dd 	.word	0x080053dd
 8005378:	080053dd 	.word	0x080053dd
 800537c:	080053dd 	.word	0x080053dd
 8005380:	080053dd 	.word	0x080053dd
 8005384:	080053bd 	.word	0x080053bd
 8005388:	080053dd 	.word	0x080053dd
 800538c:	0800539d 	.word	0x0800539d
 8005390:	080053dd 	.word	0x080053dd
 8005394:	080053dd 	.word	0x080053dd
 8005398:	080053ad 	.word	0x080053ad
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800539c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800539e:	f043 0301 	orr.w	r3, r3, #1
 80053a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3301      	adds	r3, #1
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	e01a      	b.n	80053e2 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80053ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053ae:	f043 0302 	orr.w	r3, r3, #2
 80053b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	3301      	adds	r3, #1
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	e012      	b.n	80053e2 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80053bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053be:	f043 0304 	orr.w	r3, r3, #4
 80053c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	3301      	adds	r3, #1
 80053c8:	60fb      	str	r3, [r7, #12]
 80053ca:	e00a      	b.n	80053e2 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80053cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053ce:	f043 0308 	orr.w	r3, r3, #8
 80053d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	3301      	adds	r3, #1
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	e002      	b.n	80053e2 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80053dc:	2300      	movs	r3, #0
 80053de:	653b      	str	r3, [r7, #80]	; 0x50
 80053e0:	bf00      	nop
        }
      } while (v);
 80053e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1b0      	bne.n	800534a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80053e8:	2300      	movs	r3, #0
 80053ea:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80053f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053f8:	2b2f      	cmp	r3, #47	; 0x2f
 80053fa:	d912      	bls.n	8005422 <_VPrintTarget+0x13a>
 80053fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005400:	2b39      	cmp	r3, #57	; 0x39
 8005402:	d80e      	bhi.n	8005422 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	3301      	adds	r3, #1
 8005408:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800540a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800540c:	4613      	mov	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	005b      	lsls	r3, r3, #1
 8005414:	461a      	mov	r2, r3
 8005416:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800541a:	4413      	add	r3, r2
 800541c:	3b30      	subs	r3, #48	; 0x30
 800541e:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005420:	e7e4      	b.n	80053ec <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005422:	2300      	movs	r3, #0
 8005424:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800542e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005432:	2b2e      	cmp	r3, #46	; 0x2e
 8005434:	d11d      	bne.n	8005472 <_VPrintTarget+0x18a>
        sFormat++;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	3301      	adds	r3, #1
 800543a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005444:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005448:	2b2f      	cmp	r3, #47	; 0x2f
 800544a:	d912      	bls.n	8005472 <_VPrintTarget+0x18a>
 800544c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005450:	2b39      	cmp	r3, #57	; 0x39
 8005452:	d80e      	bhi.n	8005472 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	3301      	adds	r3, #1
 8005458:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800545a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800545c:	4613      	mov	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	461a      	mov	r2, r3
 8005466:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800546a:	4413      	add	r3, r2
 800546c:	3b30      	subs	r3, #48	; 0x30
 800546e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005470:	e7e4      	b.n	800543c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800547a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800547e:	2b6c      	cmp	r3, #108	; 0x6c
 8005480:	d003      	beq.n	800548a <_VPrintTarget+0x1a2>
 8005482:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005486:	2b68      	cmp	r3, #104	; 0x68
 8005488:	d107      	bne.n	800549a <_VPrintTarget+0x1b2>
          c = *sFormat;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	3301      	adds	r3, #1
 8005496:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005498:	e7ef      	b.n	800547a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800549a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800549e:	2b25      	cmp	r3, #37	; 0x25
 80054a0:	f000 80b3 	beq.w	800560a <_VPrintTarget+0x322>
 80054a4:	2b25      	cmp	r3, #37	; 0x25
 80054a6:	f2c0 80b7 	blt.w	8005618 <_VPrintTarget+0x330>
 80054aa:	2b78      	cmp	r3, #120	; 0x78
 80054ac:	f300 80b4 	bgt.w	8005618 <_VPrintTarget+0x330>
 80054b0:	2b58      	cmp	r3, #88	; 0x58
 80054b2:	f2c0 80b1 	blt.w	8005618 <_VPrintTarget+0x330>
 80054b6:	3b58      	subs	r3, #88	; 0x58
 80054b8:	2b20      	cmp	r3, #32
 80054ba:	f200 80ad 	bhi.w	8005618 <_VPrintTarget+0x330>
 80054be:	a201      	add	r2, pc, #4	; (adr r2, 80054c4 <_VPrintTarget+0x1dc>)
 80054c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c4:	080055bb 	.word	0x080055bb
 80054c8:	08005619 	.word	0x08005619
 80054cc:	08005619 	.word	0x08005619
 80054d0:	08005619 	.word	0x08005619
 80054d4:	08005619 	.word	0x08005619
 80054d8:	08005619 	.word	0x08005619
 80054dc:	08005619 	.word	0x08005619
 80054e0:	08005619 	.word	0x08005619
 80054e4:	08005619 	.word	0x08005619
 80054e8:	08005619 	.word	0x08005619
 80054ec:	08005619 	.word	0x08005619
 80054f0:	08005549 	.word	0x08005549
 80054f4:	0800556f 	.word	0x0800556f
 80054f8:	08005619 	.word	0x08005619
 80054fc:	08005619 	.word	0x08005619
 8005500:	08005619 	.word	0x08005619
 8005504:	08005619 	.word	0x08005619
 8005508:	08005619 	.word	0x08005619
 800550c:	08005619 	.word	0x08005619
 8005510:	08005619 	.word	0x08005619
 8005514:	08005619 	.word	0x08005619
 8005518:	08005619 	.word	0x08005619
 800551c:	08005619 	.word	0x08005619
 8005520:	08005619 	.word	0x08005619
 8005524:	080055e5 	.word	0x080055e5
 8005528:	08005619 	.word	0x08005619
 800552c:	08005619 	.word	0x08005619
 8005530:	08005619 	.word	0x08005619
 8005534:	08005619 	.word	0x08005619
 8005538:	08005595 	.word	0x08005595
 800553c:	08005619 	.word	0x08005619
 8005540:	08005619 	.word	0x08005619
 8005544:	080055bb 	.word	0x080055bb
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	1d19      	adds	r1, r3, #4
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6011      	str	r1, [r2, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005558:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 800555c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005560:	f107 0314 	add.w	r3, r7, #20
 8005564:	4611      	mov	r1, r2
 8005566:	4618      	mov	r0, r3
 8005568:	f7ff fd1c 	bl	8004fa4 <_StoreChar>
        break;
 800556c:	e055      	b.n	800561a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	1d19      	adds	r1, r3, #4
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	6011      	str	r1, [r2, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800557c:	f107 0014 	add.w	r0, r7, #20
 8005580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005582:	9301      	str	r3, [sp, #4]
 8005584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800558a:	220a      	movs	r2, #10
 800558c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800558e:	f7ff fe1b 	bl	80051c8 <_PrintInt>
        break;
 8005592:	e042      	b.n	800561a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	1d19      	adds	r1, r3, #4
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	6011      	str	r1, [r2, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80055a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80055a4:	f107 0014 	add.w	r0, r7, #20
 80055a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055aa:	9301      	str	r3, [sp, #4]
 80055ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055b2:	220a      	movs	r2, #10
 80055b4:	f7ff fd72 	bl	800509c <_PrintUnsigned>
        break;
 80055b8:	e02f      	b.n	800561a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	1d19      	adds	r1, r3, #4
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	6011      	str	r1, [r2, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80055c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80055ca:	f107 0014 	add.w	r0, r7, #20
 80055ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055d0:	9301      	str	r3, [sp, #4]
 80055d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055d8:	2210      	movs	r2, #16
 80055da:	f7ff fd5f 	bl	800509c <_PrintUnsigned>
        break;
 80055de:	e01c      	b.n	800561a <_VPrintTarget+0x332>
 80055e0:	20014360 	.word	0x20014360
      case 'p':
        v = va_arg(*pParamList, int);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	1d19      	adds	r1, r3, #4
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	6011      	str	r1, [r2, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80055f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80055f4:	f107 0014 	add.w	r0, r7, #20
 80055f8:	2300      	movs	r3, #0
 80055fa:	9301      	str	r3, [sp, #4]
 80055fc:	2308      	movs	r3, #8
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	2308      	movs	r3, #8
 8005602:	2210      	movs	r2, #16
 8005604:	f7ff fd4a 	bl	800509c <_PrintUnsigned>
        break;
 8005608:	e007      	b.n	800561a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800560a:	f107 0314 	add.w	r3, r7, #20
 800560e:	2125      	movs	r1, #37	; 0x25
 8005610:	4618      	mov	r0, r3
 8005612:	f7ff fcc7 	bl	8004fa4 <_StoreChar>
        break;
 8005616:	e000      	b.n	800561a <_VPrintTarget+0x332>
      default:
        break;
 8005618:	bf00      	nop
      }
      sFormat++;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	3301      	adds	r3, #1
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	e007      	b.n	8005632 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005622:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005626:	f107 0314 	add.w	r3, r7, #20
 800562a:	4611      	mov	r1, r2
 800562c:	4618      	mov	r0, r3
 800562e:	f7ff fcb9 	bl	8004fa4 <_StoreChar>
    }
  } while (*sFormat);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	f47f ae72 	bne.w	8005320 <_VPrintTarget+0x38>
 800563c:	e000      	b.n	8005640 <_VPrintTarget+0x358>
      break;
 800563e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	2b00      	cmp	r3, #0
 8005644:	d041      	beq.n	80056ca <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	b2d2      	uxtb	r2, r2
 800564c:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	643b      	str	r3, [r7, #64]	; 0x40
 8005652:	6a3b      	ldr	r3, [r7, #32]
 8005654:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005656:	e00b      	b.n	8005670 <_VPrintTarget+0x388>
 8005658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800565a:	b2da      	uxtb	r2, r3
 800565c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800565e:	1c59      	adds	r1, r3, #1
 8005660:	6439      	str	r1, [r7, #64]	; 0x40
 8005662:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005666:	b2d2      	uxtb	r2, r2
 8005668:	701a      	strb	r2, [r3, #0]
 800566a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800566c:	09db      	lsrs	r3, r3, #7
 800566e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005672:	2b7f      	cmp	r3, #127	; 0x7f
 8005674:	d8f0      	bhi.n	8005658 <_VPrintTarget+0x370>
 8005676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005678:	1c5a      	adds	r2, r3, #1
 800567a:	643a      	str	r2, [r7, #64]	; 0x40
 800567c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800567e:	b2d2      	uxtb	r2, r2
 8005680:	701a      	strb	r2, [r3, #0]
 8005682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005684:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	63bb      	str	r3, [r7, #56]	; 0x38
 800568a:	2300      	movs	r3, #0
 800568c:	637b      	str	r3, [r7, #52]	; 0x34
 800568e:	e00b      	b.n	80056a8 <_VPrintTarget+0x3c0>
 8005690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005692:	b2da      	uxtb	r2, r3
 8005694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005696:	1c59      	adds	r1, r3, #1
 8005698:	63b9      	str	r1, [r7, #56]	; 0x38
 800569a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800569e:	b2d2      	uxtb	r2, r2
 80056a0:	701a      	strb	r2, [r3, #0]
 80056a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a4:	09db      	lsrs	r3, r3, #7
 80056a6:	637b      	str	r3, [r7, #52]	; 0x34
 80056a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056aa:	2b7f      	cmp	r3, #127	; 0x7f
 80056ac:	d8f0      	bhi.n	8005690 <_VPrintTarget+0x3a8>
 80056ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b0:	1c5a      	adds	r2, r3, #1
 80056b2:	63ba      	str	r2, [r7, #56]	; 0x38
 80056b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056b6:	b2d2      	uxtb	r2, r2
 80056b8:	701a      	strb	r2, [r3, #0]
 80056ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056bc:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	69b9      	ldr	r1, [r7, #24]
 80056c2:	221a      	movs	r2, #26
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7ff fafd 	bl	8004cc4 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80056ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056cc:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80056d0:	bf00      	nop
 80056d2:	3758      	adds	r7, #88	; 0x58
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af02      	add	r7, sp, #8
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
 80056e4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80056e6:	2300      	movs	r3, #0
 80056e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80056ec:	4917      	ldr	r1, [pc, #92]	; (800574c <SEGGER_SYSVIEW_Init+0x74>)
 80056ee:	4818      	ldr	r0, [pc, #96]	; (8005750 <SEGGER_SYSVIEW_Init+0x78>)
 80056f0:	f7ff f8d8 	bl	80048a4 <SEGGER_RTT_AllocUpBuffer>
 80056f4:	4603      	mov	r3, r0
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	4b16      	ldr	r3, [pc, #88]	; (8005754 <SEGGER_SYSVIEW_Init+0x7c>)
 80056fa:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80056fc:	4b15      	ldr	r3, [pc, #84]	; (8005754 <SEGGER_SYSVIEW_Init+0x7c>)
 80056fe:	785a      	ldrb	r2, [r3, #1]
 8005700:	4b14      	ldr	r3, [pc, #80]	; (8005754 <SEGGER_SYSVIEW_Init+0x7c>)
 8005702:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005704:	4b13      	ldr	r3, [pc, #76]	; (8005754 <SEGGER_SYSVIEW_Init+0x7c>)
 8005706:	7e1b      	ldrb	r3, [r3, #24]
 8005708:	4618      	mov	r0, r3
 800570a:	2300      	movs	r3, #0
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	2308      	movs	r3, #8
 8005710:	4a11      	ldr	r2, [pc, #68]	; (8005758 <SEGGER_SYSVIEW_Init+0x80>)
 8005712:	490f      	ldr	r1, [pc, #60]	; (8005750 <SEGGER_SYSVIEW_Init+0x78>)
 8005714:	f7ff f94a 	bl	80049ac <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005718:	4b0e      	ldr	r3, [pc, #56]	; (8005754 <SEGGER_SYSVIEW_Init+0x7c>)
 800571a:	2200      	movs	r2, #0
 800571c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800571e:	4b0f      	ldr	r3, [pc, #60]	; (800575c <SEGGER_SYSVIEW_Init+0x84>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a0c      	ldr	r2, [pc, #48]	; (8005754 <SEGGER_SYSVIEW_Init+0x7c>)
 8005724:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005726:	4a0b      	ldr	r2, [pc, #44]	; (8005754 <SEGGER_SYSVIEW_Init+0x7c>)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800572c:	4a09      	ldr	r2, [pc, #36]	; (8005754 <SEGGER_SYSVIEW_Init+0x7c>)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005732:	4a08      	ldr	r2, [pc, #32]	; (8005754 <SEGGER_SYSVIEW_Init+0x7c>)
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005738:	4a06      	ldr	r2, [pc, #24]	; (8005754 <SEGGER_SYSVIEW_Init+0x7c>)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800573e:	4b05      	ldr	r3, [pc, #20]	; (8005754 <SEGGER_SYSVIEW_Init+0x7c>)
 8005740:	2200      	movs	r2, #0
 8005742:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005744:	bf00      	nop
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	20013328 	.word	0x20013328
 8005750:	08006868 	.word	0x08006868
 8005754:	20014330 	.word	0x20014330
 8005758:	20014328 	.word	0x20014328
 800575c:	e0001004 	.word	0xe0001004

08005760 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005768:	4a04      	ldr	r2, [pc, #16]	; (800577c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6113      	str	r3, [r2, #16]
}
 800576e:	bf00      	nop
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	20014330 	.word	0x20014330

08005780 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005788:	f3ef 8311 	mrs	r3, BASEPRI
 800578c:	f04f 0120 	mov.w	r1, #32
 8005790:	f381 8811 	msr	BASEPRI, r1
 8005794:	60fb      	str	r3, [r7, #12]
 8005796:	4808      	ldr	r0, [pc, #32]	; (80057b8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005798:	f7ff f9a4 	bl	8004ae4 <_PreparePacket>
 800579c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	68b9      	ldr	r1, [r7, #8]
 80057a2:	68b8      	ldr	r0, [r7, #8]
 80057a4:	f7ff fa8e 	bl	8004cc4 <_SendPacket>
  RECORD_END();
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f383 8811 	msr	BASEPRI, r3
}
 80057ae:	bf00      	nop
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	20014360 	.word	0x20014360

080057bc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80057bc:	b580      	push	{r7, lr}
 80057be:	b088      	sub	sp, #32
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80057c6:	f3ef 8311 	mrs	r3, BASEPRI
 80057ca:	f04f 0120 	mov.w	r1, #32
 80057ce:	f381 8811 	msr	BASEPRI, r1
 80057d2:	617b      	str	r3, [r7, #20]
 80057d4:	4816      	ldr	r0, [pc, #88]	; (8005830 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80057d6:	f7ff f985 	bl	8004ae4 <_PreparePacket>
 80057da:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	61fb      	str	r3, [r7, #28]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	61bb      	str	r3, [r7, #24]
 80057e8:	e00b      	b.n	8005802 <SEGGER_SYSVIEW_RecordU32+0x46>
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	1c59      	adds	r1, r3, #1
 80057f2:	61f9      	str	r1, [r7, #28]
 80057f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057f8:	b2d2      	uxtb	r2, r2
 80057fa:	701a      	strb	r2, [r3, #0]
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	09db      	lsrs	r3, r3, #7
 8005800:	61bb      	str	r3, [r7, #24]
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	2b7f      	cmp	r3, #127	; 0x7f
 8005806:	d8f0      	bhi.n	80057ea <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	1c5a      	adds	r2, r3, #1
 800580c:	61fa      	str	r2, [r7, #28]
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	b2d2      	uxtb	r2, r2
 8005812:	701a      	strb	r2, [r3, #0]
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	68f9      	ldr	r1, [r7, #12]
 800581c:	6938      	ldr	r0, [r7, #16]
 800581e:	f7ff fa51 	bl	8004cc4 <_SendPacket>
  RECORD_END();
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f383 8811 	msr	BASEPRI, r3
}
 8005828:	bf00      	nop
 800582a:	3720      	adds	r7, #32
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	20014360 	.word	0x20014360

08005834 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005834:	b580      	push	{r7, lr}
 8005836:	b08c      	sub	sp, #48	; 0x30
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005840:	f3ef 8311 	mrs	r3, BASEPRI
 8005844:	f04f 0120 	mov.w	r1, #32
 8005848:	f381 8811 	msr	BASEPRI, r1
 800584c:	61fb      	str	r3, [r7, #28]
 800584e:	4825      	ldr	r0, [pc, #148]	; (80058e4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005850:	f7ff f948 	bl	8004ae4 <_PreparePacket>
 8005854:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	62bb      	str	r3, [r7, #40]	; 0x28
 8005862:	e00b      	b.n	800587c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005866:	b2da      	uxtb	r2, r3
 8005868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586a:	1c59      	adds	r1, r3, #1
 800586c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800586e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005872:	b2d2      	uxtb	r2, r2
 8005874:	701a      	strb	r2, [r3, #0]
 8005876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005878:	09db      	lsrs	r3, r3, #7
 800587a:	62bb      	str	r3, [r7, #40]	; 0x28
 800587c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587e:	2b7f      	cmp	r3, #127	; 0x7f
 8005880:	d8f0      	bhi.n	8005864 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005884:	1c5a      	adds	r2, r3, #1
 8005886:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005888:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	701a      	strb	r2, [r3, #0]
 800588e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005890:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	627b      	str	r3, [r7, #36]	; 0x24
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	623b      	str	r3, [r7, #32]
 800589a:	e00b      	b.n	80058b4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	b2da      	uxtb	r2, r3
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	1c59      	adds	r1, r3, #1
 80058a4:	6279      	str	r1, [r7, #36]	; 0x24
 80058a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058aa:	b2d2      	uxtb	r2, r2
 80058ac:	701a      	strb	r2, [r3, #0]
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	09db      	lsrs	r3, r3, #7
 80058b2:	623b      	str	r3, [r7, #32]
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	2b7f      	cmp	r3, #127	; 0x7f
 80058b8:	d8f0      	bhi.n	800589c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80058ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	627a      	str	r2, [r7, #36]	; 0x24
 80058c0:	6a3a      	ldr	r2, [r7, #32]
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	701a      	strb	r2, [r3, #0]
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	6979      	ldr	r1, [r7, #20]
 80058ce:	69b8      	ldr	r0, [r7, #24]
 80058d0:	f7ff f9f8 	bl	8004cc4 <_SendPacket>
  RECORD_END();
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	f383 8811 	msr	BASEPRI, r3
}
 80058da:	bf00      	nop
 80058dc:	3730      	adds	r7, #48	; 0x30
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	20014360 	.word	0x20014360

080058e8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b090      	sub	sp, #64	; 0x40
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
 80058f4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80058f6:	f3ef 8311 	mrs	r3, BASEPRI
 80058fa:	f04f 0120 	mov.w	r1, #32
 80058fe:	f381 8811 	msr	BASEPRI, r1
 8005902:	61fb      	str	r3, [r7, #28]
 8005904:	4840      	ldr	r0, [pc, #256]	; (8005a08 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005906:	f7ff f8ed 	bl	8004ae4 <_PreparePacket>
 800590a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	63bb      	str	r3, [r7, #56]	; 0x38
 8005918:	e00b      	b.n	8005932 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800591a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591c:	b2da      	uxtb	r2, r3
 800591e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005920:	1c59      	adds	r1, r3, #1
 8005922:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005924:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005928:	b2d2      	uxtb	r2, r2
 800592a:	701a      	strb	r2, [r3, #0]
 800592c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592e:	09db      	lsrs	r3, r3, #7
 8005930:	63bb      	str	r3, [r7, #56]	; 0x38
 8005932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005934:	2b7f      	cmp	r3, #127	; 0x7f
 8005936:	d8f0      	bhi.n	800591a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800593a:	1c5a      	adds	r2, r3, #1
 800593c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800593e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005940:	b2d2      	uxtb	r2, r2
 8005942:	701a      	strb	r2, [r3, #0]
 8005944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005946:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	637b      	str	r3, [r7, #52]	; 0x34
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	633b      	str	r3, [r7, #48]	; 0x30
 8005950:	e00b      	b.n	800596a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005954:	b2da      	uxtb	r2, r3
 8005956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005958:	1c59      	adds	r1, r3, #1
 800595a:	6379      	str	r1, [r7, #52]	; 0x34
 800595c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005960:	b2d2      	uxtb	r2, r2
 8005962:	701a      	strb	r2, [r3, #0]
 8005964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005966:	09db      	lsrs	r3, r3, #7
 8005968:	633b      	str	r3, [r7, #48]	; 0x30
 800596a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596c:	2b7f      	cmp	r3, #127	; 0x7f
 800596e:	d8f0      	bhi.n	8005952 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005972:	1c5a      	adds	r2, r3, #1
 8005974:	637a      	str	r2, [r7, #52]	; 0x34
 8005976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005978:	b2d2      	uxtb	r2, r2
 800597a:	701a      	strb	r2, [r3, #0]
 800597c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	62bb      	str	r3, [r7, #40]	; 0x28
 8005988:	e00b      	b.n	80059a2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800598a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598c:	b2da      	uxtb	r2, r3
 800598e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005990:	1c59      	adds	r1, r3, #1
 8005992:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005994:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005998:	b2d2      	uxtb	r2, r2
 800599a:	701a      	strb	r2, [r3, #0]
 800599c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599e:	09db      	lsrs	r3, r3, #7
 80059a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80059a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a4:	2b7f      	cmp	r3, #127	; 0x7f
 80059a6:	d8f0      	bhi.n	800598a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80059a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059aa:	1c5a      	adds	r2, r3, #1
 80059ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059b0:	b2d2      	uxtb	r2, r2
 80059b2:	701a      	strb	r2, [r3, #0]
 80059b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	627b      	str	r3, [r7, #36]	; 0x24
 80059bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059be:	623b      	str	r3, [r7, #32]
 80059c0:	e00b      	b.n	80059da <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	b2da      	uxtb	r2, r3
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	1c59      	adds	r1, r3, #1
 80059ca:	6279      	str	r1, [r7, #36]	; 0x24
 80059cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059d0:	b2d2      	uxtb	r2, r2
 80059d2:	701a      	strb	r2, [r3, #0]
 80059d4:	6a3b      	ldr	r3, [r7, #32]
 80059d6:	09db      	lsrs	r3, r3, #7
 80059d8:	623b      	str	r3, [r7, #32]
 80059da:	6a3b      	ldr	r3, [r7, #32]
 80059dc:	2b7f      	cmp	r3, #127	; 0x7f
 80059de:	d8f0      	bhi.n	80059c2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	1c5a      	adds	r2, r3, #1
 80059e4:	627a      	str	r2, [r7, #36]	; 0x24
 80059e6:	6a3a      	ldr	r2, [r7, #32]
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	701a      	strb	r2, [r3, #0]
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	6979      	ldr	r1, [r7, #20]
 80059f4:	69b8      	ldr	r0, [r7, #24]
 80059f6:	f7ff f965 	bl	8004cc4 <_SendPacket>
  RECORD_END();
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	f383 8811 	msr	BASEPRI, r3
}
 8005a00:	bf00      	nop
 8005a02:	3740      	adds	r7, #64	; 0x40
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	20014360 	.word	0x20014360

08005a0c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b08c      	sub	sp, #48	; 0x30
 8005a10:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005a12:	4b59      	ldr	r3, [pc, #356]	; (8005b78 <SEGGER_SYSVIEW_Start+0x16c>)
 8005a14:	2201      	movs	r2, #1
 8005a16:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005a18:	f3ef 8311 	mrs	r3, BASEPRI
 8005a1c:	f04f 0120 	mov.w	r1, #32
 8005a20:	f381 8811 	msr	BASEPRI, r1
 8005a24:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005a26:	4b54      	ldr	r3, [pc, #336]	; (8005b78 <SEGGER_SYSVIEW_Start+0x16c>)
 8005a28:	785b      	ldrb	r3, [r3, #1]
 8005a2a:	220a      	movs	r2, #10
 8005a2c:	4953      	ldr	r1, [pc, #332]	; (8005b7c <SEGGER_SYSVIEW_Start+0x170>)
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fa fbce 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005a3a:	f7fe fc05 	bl	8004248 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005a3e:	200a      	movs	r0, #10
 8005a40:	f7ff fe9e 	bl	8005780 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005a44:	f3ef 8311 	mrs	r3, BASEPRI
 8005a48:	f04f 0120 	mov.w	r1, #32
 8005a4c:	f381 8811 	msr	BASEPRI, r1
 8005a50:	60bb      	str	r3, [r7, #8]
 8005a52:	484b      	ldr	r0, [pc, #300]	; (8005b80 <SEGGER_SYSVIEW_Start+0x174>)
 8005a54:	f7ff f846 	bl	8004ae4 <_PreparePacket>
 8005a58:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a62:	4b45      	ldr	r3, [pc, #276]	; (8005b78 <SEGGER_SYSVIEW_Start+0x16c>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a68:	e00b      	b.n	8005a82 <SEGGER_SYSVIEW_Start+0x76>
 8005a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a70:	1c59      	adds	r1, r3, #1
 8005a72:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a78:	b2d2      	uxtb	r2, r2
 8005a7a:	701a      	strb	r2, [r3, #0]
 8005a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7e:	09db      	lsrs	r3, r3, #7
 8005a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a84:	2b7f      	cmp	r3, #127	; 0x7f
 8005a86:	d8f0      	bhi.n	8005a6a <SEGGER_SYSVIEW_Start+0x5e>
 8005a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a90:	b2d2      	uxtb	r2, r2
 8005a92:	701a      	strb	r2, [r3, #0]
 8005a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a96:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a9c:	4b36      	ldr	r3, [pc, #216]	; (8005b78 <SEGGER_SYSVIEW_Start+0x16c>)
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	623b      	str	r3, [r7, #32]
 8005aa2:	e00b      	b.n	8005abc <SEGGER_SYSVIEW_Start+0xb0>
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	1c59      	adds	r1, r3, #1
 8005aac:	6279      	str	r1, [r7, #36]	; 0x24
 8005aae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ab2:	b2d2      	uxtb	r2, r2
 8005ab4:	701a      	strb	r2, [r3, #0]
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	09db      	lsrs	r3, r3, #7
 8005aba:	623b      	str	r3, [r7, #32]
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	2b7f      	cmp	r3, #127	; 0x7f
 8005ac0:	d8f0      	bhi.n	8005aa4 <SEGGER_SYSVIEW_Start+0x98>
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	1c5a      	adds	r2, r3, #1
 8005ac6:	627a      	str	r2, [r7, #36]	; 0x24
 8005ac8:	6a3a      	ldr	r2, [r7, #32]
 8005aca:	b2d2      	uxtb	r2, r2
 8005acc:	701a      	strb	r2, [r3, #0]
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	61fb      	str	r3, [r7, #28]
 8005ad6:	4b28      	ldr	r3, [pc, #160]	; (8005b78 <SEGGER_SYSVIEW_Start+0x16c>)
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	61bb      	str	r3, [r7, #24]
 8005adc:	e00b      	b.n	8005af6 <SEGGER_SYSVIEW_Start+0xea>
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	1c59      	adds	r1, r3, #1
 8005ae6:	61f9      	str	r1, [r7, #28]
 8005ae8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aec:	b2d2      	uxtb	r2, r2
 8005aee:	701a      	strb	r2, [r3, #0]
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	09db      	lsrs	r3, r3, #7
 8005af4:	61bb      	str	r3, [r7, #24]
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	2b7f      	cmp	r3, #127	; 0x7f
 8005afa:	d8f0      	bhi.n	8005ade <SEGGER_SYSVIEW_Start+0xd2>
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	61fa      	str	r2, [r7, #28]
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	701a      	strb	r2, [r3, #0]
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	617b      	str	r3, [r7, #20]
 8005b10:	2300      	movs	r3, #0
 8005b12:	613b      	str	r3, [r7, #16]
 8005b14:	e00b      	b.n	8005b2e <SEGGER_SYSVIEW_Start+0x122>
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	1c59      	adds	r1, r3, #1
 8005b1e:	6179      	str	r1, [r7, #20]
 8005b20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b24:	b2d2      	uxtb	r2, r2
 8005b26:	701a      	strb	r2, [r3, #0]
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	09db      	lsrs	r3, r3, #7
 8005b2c:	613b      	str	r3, [r7, #16]
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	2b7f      	cmp	r3, #127	; 0x7f
 8005b32:	d8f0      	bhi.n	8005b16 <SEGGER_SYSVIEW_Start+0x10a>
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	617a      	str	r2, [r7, #20]
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	b2d2      	uxtb	r2, r2
 8005b3e:	701a      	strb	r2, [r3, #0]
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005b44:	2218      	movs	r2, #24
 8005b46:	6839      	ldr	r1, [r7, #0]
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f7ff f8bb 	bl	8004cc4 <_SendPacket>
      RECORD_END();
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005b54:	4b08      	ldr	r3, [pc, #32]	; (8005b78 <SEGGER_SYSVIEW_Start+0x16c>)
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005b5c:	4b06      	ldr	r3, [pc, #24]	; (8005b78 <SEGGER_SYSVIEW_Start+0x16c>)
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005b62:	f000 f9eb 	bl	8005f3c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005b66:	f000 f9b1 	bl	8005ecc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005b6a:	f000 fc83 	bl	8006474 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005b6e:	bf00      	nop
 8005b70:	3730      	adds	r7, #48	; 0x30
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	20014330 	.word	0x20014330
 8005b7c:	080068a8 	.word	0x080068a8
 8005b80:	20014360 	.word	0x20014360

08005b84 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005b8a:	f3ef 8311 	mrs	r3, BASEPRI
 8005b8e:	f04f 0120 	mov.w	r1, #32
 8005b92:	f381 8811 	msr	BASEPRI, r1
 8005b96:	607b      	str	r3, [r7, #4]
 8005b98:	480b      	ldr	r0, [pc, #44]	; (8005bc8 <SEGGER_SYSVIEW_Stop+0x44>)
 8005b9a:	f7fe ffa3 	bl	8004ae4 <_PreparePacket>
 8005b9e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005ba0:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <SEGGER_SYSVIEW_Stop+0x48>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d007      	beq.n	8005bb8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005ba8:	220b      	movs	r2, #11
 8005baa:	6839      	ldr	r1, [r7, #0]
 8005bac:	6838      	ldr	r0, [r7, #0]
 8005bae:	f7ff f889 	bl	8004cc4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005bb2:	4b06      	ldr	r3, [pc, #24]	; (8005bcc <SEGGER_SYSVIEW_Stop+0x48>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f383 8811 	msr	BASEPRI, r3
}
 8005bbe:	bf00      	nop
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	20014360 	.word	0x20014360
 8005bcc:	20014330 	.word	0x20014330

08005bd0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b08c      	sub	sp, #48	; 0x30
 8005bd4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005bd6:	f3ef 8311 	mrs	r3, BASEPRI
 8005bda:	f04f 0120 	mov.w	r1, #32
 8005bde:	f381 8811 	msr	BASEPRI, r1
 8005be2:	60fb      	str	r3, [r7, #12]
 8005be4:	4845      	ldr	r0, [pc, #276]	; (8005cfc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005be6:	f7fe ff7d 	bl	8004ae4 <_PreparePacket>
 8005bea:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bf4:	4b42      	ldr	r3, [pc, #264]	; (8005d00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bfa:	e00b      	b.n	8005c14 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c02:	1c59      	adds	r1, r3, #1
 8005c04:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c0a:	b2d2      	uxtb	r2, r2
 8005c0c:	701a      	strb	r2, [r3, #0]
 8005c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c10:	09db      	lsrs	r3, r3, #7
 8005c12:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c16:	2b7f      	cmp	r3, #127	; 0x7f
 8005c18:	d8f0      	bhi.n	8005bfc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1c:	1c5a      	adds	r2, r3, #1
 8005c1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	701a      	strb	r2, [r3, #0]
 8005c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c28:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c2e:	4b34      	ldr	r3, [pc, #208]	; (8005d00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	623b      	str	r3, [r7, #32]
 8005c34:	e00b      	b.n	8005c4e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	1c59      	adds	r1, r3, #1
 8005c3e:	6279      	str	r1, [r7, #36]	; 0x24
 8005c40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c44:	b2d2      	uxtb	r2, r2
 8005c46:	701a      	strb	r2, [r3, #0]
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	09db      	lsrs	r3, r3, #7
 8005c4c:	623b      	str	r3, [r7, #32]
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	2b7f      	cmp	r3, #127	; 0x7f
 8005c52:	d8f0      	bhi.n	8005c36 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	627a      	str	r2, [r7, #36]	; 0x24
 8005c5a:	6a3a      	ldr	r2, [r7, #32]
 8005c5c:	b2d2      	uxtb	r2, r2
 8005c5e:	701a      	strb	r2, [r3, #0]
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	61fb      	str	r3, [r7, #28]
 8005c68:	4b25      	ldr	r3, [pc, #148]	; (8005d00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	61bb      	str	r3, [r7, #24]
 8005c6e:	e00b      	b.n	8005c88 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	b2da      	uxtb	r2, r3
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	1c59      	adds	r1, r3, #1
 8005c78:	61f9      	str	r1, [r7, #28]
 8005c7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c7e:	b2d2      	uxtb	r2, r2
 8005c80:	701a      	strb	r2, [r3, #0]
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	09db      	lsrs	r3, r3, #7
 8005c86:	61bb      	str	r3, [r7, #24]
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	2b7f      	cmp	r3, #127	; 0x7f
 8005c8c:	d8f0      	bhi.n	8005c70 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	1c5a      	adds	r2, r3, #1
 8005c92:	61fa      	str	r2, [r7, #28]
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	b2d2      	uxtb	r2, r2
 8005c98:	701a      	strb	r2, [r3, #0]
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	617b      	str	r3, [r7, #20]
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	613b      	str	r3, [r7, #16]
 8005ca6:	e00b      	b.n	8005cc0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	b2da      	uxtb	r2, r3
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	1c59      	adds	r1, r3, #1
 8005cb0:	6179      	str	r1, [r7, #20]
 8005cb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cb6:	b2d2      	uxtb	r2, r2
 8005cb8:	701a      	strb	r2, [r3, #0]
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	09db      	lsrs	r3, r3, #7
 8005cbe:	613b      	str	r3, [r7, #16]
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	2b7f      	cmp	r3, #127	; 0x7f
 8005cc4:	d8f0      	bhi.n	8005ca8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	1c5a      	adds	r2, r3, #1
 8005cca:	617a      	str	r2, [r7, #20]
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	b2d2      	uxtb	r2, r2
 8005cd0:	701a      	strb	r2, [r3, #0]
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005cd6:	2218      	movs	r2, #24
 8005cd8:	6879      	ldr	r1, [r7, #4]
 8005cda:	68b8      	ldr	r0, [r7, #8]
 8005cdc:	f7fe fff2 	bl	8004cc4 <_SendPacket>
  RECORD_END();
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005ce6:	4b06      	ldr	r3, [pc, #24]	; (8005d00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d002      	beq.n	8005cf4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005cee:	4b04      	ldr	r3, [pc, #16]	; (8005d00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	4798      	blx	r3
  }
}
 8005cf4:	bf00      	nop
 8005cf6:	3730      	adds	r7, #48	; 0x30
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	20014360 	.word	0x20014360
 8005d00:	20014330 	.word	0x20014330

08005d04 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b092      	sub	sp, #72	; 0x48
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005d0c:	f3ef 8311 	mrs	r3, BASEPRI
 8005d10:	f04f 0120 	mov.w	r1, #32
 8005d14:	f381 8811 	msr	BASEPRI, r1
 8005d18:	617b      	str	r3, [r7, #20]
 8005d1a:	486a      	ldr	r0, [pc, #424]	; (8005ec4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005d1c:	f7fe fee2 	bl	8004ae4 <_PreparePacket>
 8005d20:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	647b      	str	r3, [r7, #68]	; 0x44
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	4b66      	ldr	r3, [pc, #408]	; (8005ec8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	643b      	str	r3, [r7, #64]	; 0x40
 8005d36:	e00b      	b.n	8005d50 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d3e:	1c59      	adds	r1, r3, #1
 8005d40:	6479      	str	r1, [r7, #68]	; 0x44
 8005d42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d46:	b2d2      	uxtb	r2, r2
 8005d48:	701a      	strb	r2, [r3, #0]
 8005d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d4c:	09db      	lsrs	r3, r3, #7
 8005d4e:	643b      	str	r3, [r7, #64]	; 0x40
 8005d50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d52:	2b7f      	cmp	r3, #127	; 0x7f
 8005d54:	d8f0      	bhi.n	8005d38 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005d56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d58:	1c5a      	adds	r2, r3, #1
 8005d5a:	647a      	str	r2, [r7, #68]	; 0x44
 8005d5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d5e:	b2d2      	uxtb	r2, r2
 8005d60:	701a      	strb	r2, [r3, #0]
 8005d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d64:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d70:	e00b      	b.n	8005d8a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d78:	1c59      	adds	r1, r3, #1
 8005d7a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005d7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d80:	b2d2      	uxtb	r2, r2
 8005d82:	701a      	strb	r2, [r3, #0]
 8005d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d86:	09db      	lsrs	r3, r3, #7
 8005d88:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8c:	2b7f      	cmp	r3, #127	; 0x7f
 8005d8e:	d8f0      	bhi.n	8005d72 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d92:	1c5a      	adds	r2, r3, #1
 8005d94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d98:	b2d2      	uxtb	r2, r2
 8005d9a:	701a      	strb	r2, [r3, #0]
 8005d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d9e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	2220      	movs	r2, #32
 8005da6:	4619      	mov	r1, r3
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f7fe fe4b 	bl	8004a44 <_EncodeStr>
 8005dae:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005db0:	2209      	movs	r2, #9
 8005db2:	68f9      	ldr	r1, [r7, #12]
 8005db4:	6938      	ldr	r0, [r7, #16]
 8005db6:	f7fe ff85 	bl	8004cc4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	4b40      	ldr	r3, [pc, #256]	; (8005ec8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	633b      	str	r3, [r7, #48]	; 0x30
 8005dce:	e00b      	b.n	8005de8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd6:	1c59      	adds	r1, r3, #1
 8005dd8:	6379      	str	r1, [r7, #52]	; 0x34
 8005dda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dde:	b2d2      	uxtb	r2, r2
 8005de0:	701a      	strb	r2, [r3, #0]
 8005de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de4:	09db      	lsrs	r3, r3, #7
 8005de6:	633b      	str	r3, [r7, #48]	; 0x30
 8005de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dea:	2b7f      	cmp	r3, #127	; 0x7f
 8005dec:	d8f0      	bhi.n	8005dd0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df0:	1c5a      	adds	r2, r3, #1
 8005df2:	637a      	str	r2, [r7, #52]	; 0x34
 8005df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005df6:	b2d2      	uxtb	r2, r2
 8005df8:	701a      	strb	r2, [r3, #0]
 8005dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dfc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e08:	e00b      	b.n	8005e22 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e10:	1c59      	adds	r1, r3, #1
 8005e12:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005e14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e18:	b2d2      	uxtb	r2, r2
 8005e1a:	701a      	strb	r2, [r3, #0]
 8005e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1e:	09db      	lsrs	r3, r3, #7
 8005e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e24:	2b7f      	cmp	r3, #127	; 0x7f
 8005e26:	d8f0      	bhi.n	8005e0a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e30:	b2d2      	uxtb	r2, r2
 8005e32:	701a      	strb	r2, [r3, #0]
 8005e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e36:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	623b      	str	r3, [r7, #32]
 8005e42:	e00b      	b.n	8005e5c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005e44:	6a3b      	ldr	r3, [r7, #32]
 8005e46:	b2da      	uxtb	r2, r3
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	1c59      	adds	r1, r3, #1
 8005e4c:	6279      	str	r1, [r7, #36]	; 0x24
 8005e4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e52:	b2d2      	uxtb	r2, r2
 8005e54:	701a      	strb	r2, [r3, #0]
 8005e56:	6a3b      	ldr	r3, [r7, #32]
 8005e58:	09db      	lsrs	r3, r3, #7
 8005e5a:	623b      	str	r3, [r7, #32]
 8005e5c:	6a3b      	ldr	r3, [r7, #32]
 8005e5e:	2b7f      	cmp	r3, #127	; 0x7f
 8005e60:	d8f0      	bhi.n	8005e44 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e64:	1c5a      	adds	r2, r3, #1
 8005e66:	627a      	str	r2, [r7, #36]	; 0x24
 8005e68:	6a3a      	ldr	r2, [r7, #32]
 8005e6a:	b2d2      	uxtb	r2, r2
 8005e6c:	701a      	strb	r2, [r3, #0]
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	61fb      	str	r3, [r7, #28]
 8005e76:	2300      	movs	r3, #0
 8005e78:	61bb      	str	r3, [r7, #24]
 8005e7a:	e00b      	b.n	8005e94 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	1c59      	adds	r1, r3, #1
 8005e84:	61f9      	str	r1, [r7, #28]
 8005e86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e8a:	b2d2      	uxtb	r2, r2
 8005e8c:	701a      	strb	r2, [r3, #0]
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	09db      	lsrs	r3, r3, #7
 8005e92:	61bb      	str	r3, [r7, #24]
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	2b7f      	cmp	r3, #127	; 0x7f
 8005e98:	d8f0      	bhi.n	8005e7c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	61fa      	str	r2, [r7, #28]
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	b2d2      	uxtb	r2, r2
 8005ea4:	701a      	strb	r2, [r3, #0]
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005eaa:	2215      	movs	r2, #21
 8005eac:	68f9      	ldr	r1, [r7, #12]
 8005eae:	6938      	ldr	r0, [r7, #16]
 8005eb0:	f7fe ff08 	bl	8004cc4 <_SendPacket>
  RECORD_END();
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f383 8811 	msr	BASEPRI, r3
}
 8005eba:	bf00      	nop
 8005ebc:	3748      	adds	r7, #72	; 0x48
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	20014360 	.word	0x20014360
 8005ec8:	20014330 	.word	0x20014330

08005ecc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005ed0:	4b07      	ldr	r3, [pc, #28]	; (8005ef0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005ed2:	6a1b      	ldr	r3, [r3, #32]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d008      	beq.n	8005eea <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005ed8:	4b05      	ldr	r3, [pc, #20]	; (8005ef0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005eda:	6a1b      	ldr	r3, [r3, #32]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005ee2:	4b03      	ldr	r3, [pc, #12]	; (8005ef0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	4798      	blx	r3
  }
}
 8005eea:	bf00      	nop
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	20014330 	.word	0x20014330

08005ef4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005efc:	f3ef 8311 	mrs	r3, BASEPRI
 8005f00:	f04f 0120 	mov.w	r1, #32
 8005f04:	f381 8811 	msr	BASEPRI, r1
 8005f08:	617b      	str	r3, [r7, #20]
 8005f0a:	480b      	ldr	r0, [pc, #44]	; (8005f38 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005f0c:	f7fe fdea 	bl	8004ae4 <_PreparePacket>
 8005f10:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005f12:	2280      	movs	r2, #128	; 0x80
 8005f14:	6879      	ldr	r1, [r7, #4]
 8005f16:	6938      	ldr	r0, [r7, #16]
 8005f18:	f7fe fd94 	bl	8004a44 <_EncodeStr>
 8005f1c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005f1e:	220e      	movs	r2, #14
 8005f20:	68f9      	ldr	r1, [r7, #12]
 8005f22:	6938      	ldr	r0, [r7, #16]
 8005f24:	f7fe fece 	bl	8004cc4 <_SendPacket>
  RECORD_END();
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f383 8811 	msr	BASEPRI, r3
}
 8005f2e:	bf00      	nop
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	20014360 	.word	0x20014360

08005f3c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005f3c:	b590      	push	{r4, r7, lr}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005f42:	4b15      	ldr	r3, [pc, #84]	; (8005f98 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d01a      	beq.n	8005f80 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005f4a:	4b13      	ldr	r3, [pc, #76]	; (8005f98 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d015      	beq.n	8005f80 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005f54:	4b10      	ldr	r3, [pc, #64]	; (8005f98 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4798      	blx	r3
 8005f5c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005f60:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005f62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f66:	f04f 0200 	mov.w	r2, #0
 8005f6a:	f04f 0300 	mov.w	r3, #0
 8005f6e:	000a      	movs	r2, r1
 8005f70:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005f72:	4613      	mov	r3, r2
 8005f74:	461a      	mov	r2, r3
 8005f76:	4621      	mov	r1, r4
 8005f78:	200d      	movs	r0, #13
 8005f7a:	f7ff fc5b 	bl	8005834 <SEGGER_SYSVIEW_RecordU32x2>
 8005f7e:	e006      	b.n	8005f8e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005f80:	4b06      	ldr	r3, [pc, #24]	; (8005f9c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4619      	mov	r1, r3
 8005f86:	200c      	movs	r0, #12
 8005f88:	f7ff fc18 	bl	80057bc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005f8c:	bf00      	nop
 8005f8e:	bf00      	nop
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd90      	pop	{r4, r7, pc}
 8005f96:	bf00      	nop
 8005f98:	20014330 	.word	0x20014330
 8005f9c:	e0001004 	.word	0xe0001004

08005fa0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005fa6:	f3ef 8311 	mrs	r3, BASEPRI
 8005faa:	f04f 0120 	mov.w	r1, #32
 8005fae:	f381 8811 	msr	BASEPRI, r1
 8005fb2:	60fb      	str	r3, [r7, #12]
 8005fb4:	4819      	ldr	r0, [pc, #100]	; (800601c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005fb6:	f7fe fd95 	bl	8004ae4 <_PreparePacket>
 8005fba:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005fc0:	4b17      	ldr	r3, [pc, #92]	; (8006020 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	617b      	str	r3, [r7, #20]
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	613b      	str	r3, [r7, #16]
 8005fd2:	e00b      	b.n	8005fec <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	1c59      	adds	r1, r3, #1
 8005fdc:	6179      	str	r1, [r7, #20]
 8005fde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fe2:	b2d2      	uxtb	r2, r2
 8005fe4:	701a      	strb	r2, [r3, #0]
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	09db      	lsrs	r3, r3, #7
 8005fea:	613b      	str	r3, [r7, #16]
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	2b7f      	cmp	r3, #127	; 0x7f
 8005ff0:	d8f0      	bhi.n	8005fd4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	1c5a      	adds	r2, r3, #1
 8005ff6:	617a      	str	r2, [r7, #20]
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	b2d2      	uxtb	r2, r2
 8005ffc:	701a      	strb	r2, [r3, #0]
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006002:	2202      	movs	r2, #2
 8006004:	6879      	ldr	r1, [r7, #4]
 8006006:	68b8      	ldr	r0, [r7, #8]
 8006008:	f7fe fe5c 	bl	8004cc4 <_SendPacket>
  RECORD_END();
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f383 8811 	msr	BASEPRI, r3
}
 8006012:	bf00      	nop
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	20014360 	.word	0x20014360
 8006020:	e000ed04 	.word	0xe000ed04

08006024 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800602a:	f3ef 8311 	mrs	r3, BASEPRI
 800602e:	f04f 0120 	mov.w	r1, #32
 8006032:	f381 8811 	msr	BASEPRI, r1
 8006036:	607b      	str	r3, [r7, #4]
 8006038:	4807      	ldr	r0, [pc, #28]	; (8006058 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800603a:	f7fe fd53 	bl	8004ae4 <_PreparePacket>
 800603e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006040:	2203      	movs	r2, #3
 8006042:	6839      	ldr	r1, [r7, #0]
 8006044:	6838      	ldr	r0, [r7, #0]
 8006046:	f7fe fe3d 	bl	8004cc4 <_SendPacket>
  RECORD_END();
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f383 8811 	msr	BASEPRI, r3
}
 8006050:	bf00      	nop
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	20014360 	.word	0x20014360

0800605c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006062:	f3ef 8311 	mrs	r3, BASEPRI
 8006066:	f04f 0120 	mov.w	r1, #32
 800606a:	f381 8811 	msr	BASEPRI, r1
 800606e:	607b      	str	r3, [r7, #4]
 8006070:	4807      	ldr	r0, [pc, #28]	; (8006090 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006072:	f7fe fd37 	bl	8004ae4 <_PreparePacket>
 8006076:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006078:	2212      	movs	r2, #18
 800607a:	6839      	ldr	r1, [r7, #0]
 800607c:	6838      	ldr	r0, [r7, #0]
 800607e:	f7fe fe21 	bl	8004cc4 <_SendPacket>
  RECORD_END();
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f383 8811 	msr	BASEPRI, r3
}
 8006088:	bf00      	nop
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	20014360 	.word	0x20014360

08006094 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800609a:	f3ef 8311 	mrs	r3, BASEPRI
 800609e:	f04f 0120 	mov.w	r1, #32
 80060a2:	f381 8811 	msr	BASEPRI, r1
 80060a6:	607b      	str	r3, [r7, #4]
 80060a8:	4807      	ldr	r0, [pc, #28]	; (80060c8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80060aa:	f7fe fd1b 	bl	8004ae4 <_PreparePacket>
 80060ae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80060b0:	2211      	movs	r2, #17
 80060b2:	6839      	ldr	r1, [r7, #0]
 80060b4:	6838      	ldr	r0, [r7, #0]
 80060b6:	f7fe fe05 	bl	8004cc4 <_SendPacket>
  RECORD_END();
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f383 8811 	msr	BASEPRI, r3
}
 80060c0:	bf00      	nop
 80060c2:	3708      	adds	r7, #8
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	20014360 	.word	0x20014360

080060cc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b088      	sub	sp, #32
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80060d4:	f3ef 8311 	mrs	r3, BASEPRI
 80060d8:	f04f 0120 	mov.w	r1, #32
 80060dc:	f381 8811 	msr	BASEPRI, r1
 80060e0:	617b      	str	r3, [r7, #20]
 80060e2:	4819      	ldr	r0, [pc, #100]	; (8006148 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80060e4:	f7fe fcfe 	bl	8004ae4 <_PreparePacket>
 80060e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80060ee:	4b17      	ldr	r3, [pc, #92]	; (800614c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	61fb      	str	r3, [r7, #28]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	61bb      	str	r3, [r7, #24]
 8006100:	e00b      	b.n	800611a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	b2da      	uxtb	r2, r3
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	1c59      	adds	r1, r3, #1
 800610a:	61f9      	str	r1, [r7, #28]
 800610c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006110:	b2d2      	uxtb	r2, r2
 8006112:	701a      	strb	r2, [r3, #0]
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	09db      	lsrs	r3, r3, #7
 8006118:	61bb      	str	r3, [r7, #24]
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	2b7f      	cmp	r3, #127	; 0x7f
 800611e:	d8f0      	bhi.n	8006102 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	1c5a      	adds	r2, r3, #1
 8006124:	61fa      	str	r2, [r7, #28]
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	b2d2      	uxtb	r2, r2
 800612a:	701a      	strb	r2, [r3, #0]
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006130:	2208      	movs	r2, #8
 8006132:	68f9      	ldr	r1, [r7, #12]
 8006134:	6938      	ldr	r0, [r7, #16]
 8006136:	f7fe fdc5 	bl	8004cc4 <_SendPacket>
  RECORD_END();
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f383 8811 	msr	BASEPRI, r3
}
 8006140:	bf00      	nop
 8006142:	3720      	adds	r7, #32
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	20014360 	.word	0x20014360
 800614c:	20014330 	.word	0x20014330

08006150 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006150:	b580      	push	{r7, lr}
 8006152:	b088      	sub	sp, #32
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006158:	f3ef 8311 	mrs	r3, BASEPRI
 800615c:	f04f 0120 	mov.w	r1, #32
 8006160:	f381 8811 	msr	BASEPRI, r1
 8006164:	617b      	str	r3, [r7, #20]
 8006166:	4819      	ldr	r0, [pc, #100]	; (80061cc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006168:	f7fe fcbc 	bl	8004ae4 <_PreparePacket>
 800616c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006172:	4b17      	ldr	r3, [pc, #92]	; (80061d0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	61fb      	str	r3, [r7, #28]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	61bb      	str	r3, [r7, #24]
 8006184:	e00b      	b.n	800619e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	b2da      	uxtb	r2, r3
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	1c59      	adds	r1, r3, #1
 800618e:	61f9      	str	r1, [r7, #28]
 8006190:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006194:	b2d2      	uxtb	r2, r2
 8006196:	701a      	strb	r2, [r3, #0]
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	09db      	lsrs	r3, r3, #7
 800619c:	61bb      	str	r3, [r7, #24]
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	2b7f      	cmp	r3, #127	; 0x7f
 80061a2:	d8f0      	bhi.n	8006186 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	1c5a      	adds	r2, r3, #1
 80061a8:	61fa      	str	r2, [r7, #28]
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	b2d2      	uxtb	r2, r2
 80061ae:	701a      	strb	r2, [r3, #0]
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80061b4:	2204      	movs	r2, #4
 80061b6:	68f9      	ldr	r1, [r7, #12]
 80061b8:	6938      	ldr	r0, [r7, #16]
 80061ba:	f7fe fd83 	bl	8004cc4 <_SendPacket>
  RECORD_END();
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f383 8811 	msr	BASEPRI, r3
}
 80061c4:	bf00      	nop
 80061c6:	3720      	adds	r7, #32
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	20014360 	.word	0x20014360
 80061d0:	20014330 	.word	0x20014330

080061d4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b088      	sub	sp, #32
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80061dc:	f3ef 8311 	mrs	r3, BASEPRI
 80061e0:	f04f 0120 	mov.w	r1, #32
 80061e4:	f381 8811 	msr	BASEPRI, r1
 80061e8:	617b      	str	r3, [r7, #20]
 80061ea:	4819      	ldr	r0, [pc, #100]	; (8006250 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80061ec:	f7fe fc7a 	bl	8004ae4 <_PreparePacket>
 80061f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80061f6:	4b17      	ldr	r3, [pc, #92]	; (8006254 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	61fb      	str	r3, [r7, #28]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	61bb      	str	r3, [r7, #24]
 8006208:	e00b      	b.n	8006222 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	b2da      	uxtb	r2, r3
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	1c59      	adds	r1, r3, #1
 8006212:	61f9      	str	r1, [r7, #28]
 8006214:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006218:	b2d2      	uxtb	r2, r2
 800621a:	701a      	strb	r2, [r3, #0]
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	09db      	lsrs	r3, r3, #7
 8006220:	61bb      	str	r3, [r7, #24]
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	2b7f      	cmp	r3, #127	; 0x7f
 8006226:	d8f0      	bhi.n	800620a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	1c5a      	adds	r2, r3, #1
 800622c:	61fa      	str	r2, [r7, #28]
 800622e:	69ba      	ldr	r2, [r7, #24]
 8006230:	b2d2      	uxtb	r2, r2
 8006232:	701a      	strb	r2, [r3, #0]
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006238:	2206      	movs	r2, #6
 800623a:	68f9      	ldr	r1, [r7, #12]
 800623c:	6938      	ldr	r0, [r7, #16]
 800623e:	f7fe fd41 	bl	8004cc4 <_SendPacket>
  RECORD_END();
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f383 8811 	msr	BASEPRI, r3
}
 8006248:	bf00      	nop
 800624a:	3720      	adds	r7, #32
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	20014360 	.word	0x20014360
 8006254:	20014330 	.word	0x20014330

08006258 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006258:	b580      	push	{r7, lr}
 800625a:	b08a      	sub	sp, #40	; 0x28
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006262:	f3ef 8311 	mrs	r3, BASEPRI
 8006266:	f04f 0120 	mov.w	r1, #32
 800626a:	f381 8811 	msr	BASEPRI, r1
 800626e:	617b      	str	r3, [r7, #20]
 8006270:	4827      	ldr	r0, [pc, #156]	; (8006310 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006272:	f7fe fc37 	bl	8004ae4 <_PreparePacket>
 8006276:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800627c:	4b25      	ldr	r3, [pc, #148]	; (8006314 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	627b      	str	r3, [r7, #36]	; 0x24
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	623b      	str	r3, [r7, #32]
 800628e:	e00b      	b.n	80062a8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	b2da      	uxtb	r2, r3
 8006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006296:	1c59      	adds	r1, r3, #1
 8006298:	6279      	str	r1, [r7, #36]	; 0x24
 800629a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800629e:	b2d2      	uxtb	r2, r2
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	6a3b      	ldr	r3, [r7, #32]
 80062a4:	09db      	lsrs	r3, r3, #7
 80062a6:	623b      	str	r3, [r7, #32]
 80062a8:	6a3b      	ldr	r3, [r7, #32]
 80062aa:	2b7f      	cmp	r3, #127	; 0x7f
 80062ac:	d8f0      	bhi.n	8006290 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	1c5a      	adds	r2, r3, #1
 80062b2:	627a      	str	r2, [r7, #36]	; 0x24
 80062b4:	6a3a      	ldr	r2, [r7, #32]
 80062b6:	b2d2      	uxtb	r2, r2
 80062b8:	701a      	strb	r2, [r3, #0]
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	61fb      	str	r3, [r7, #28]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	61bb      	str	r3, [r7, #24]
 80062c6:	e00b      	b.n	80062e0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	1c59      	adds	r1, r3, #1
 80062d0:	61f9      	str	r1, [r7, #28]
 80062d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062d6:	b2d2      	uxtb	r2, r2
 80062d8:	701a      	strb	r2, [r3, #0]
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	09db      	lsrs	r3, r3, #7
 80062de:	61bb      	str	r3, [r7, #24]
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	2b7f      	cmp	r3, #127	; 0x7f
 80062e4:	d8f0      	bhi.n	80062c8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	61fa      	str	r2, [r7, #28]
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	b2d2      	uxtb	r2, r2
 80062f0:	701a      	strb	r2, [r3, #0]
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80062f6:	2207      	movs	r2, #7
 80062f8:	68f9      	ldr	r1, [r7, #12]
 80062fa:	6938      	ldr	r0, [r7, #16]
 80062fc:	f7fe fce2 	bl	8004cc4 <_SendPacket>
  RECORD_END();
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f383 8811 	msr	BASEPRI, r3
}
 8006306:	bf00      	nop
 8006308:	3728      	adds	r7, #40	; 0x28
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	20014360 	.word	0x20014360
 8006314:	20014330 	.word	0x20014330

08006318 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006320:	4b04      	ldr	r3, [pc, #16]	; (8006334 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	1ad3      	subs	r3, r2, r3
}
 8006328:	4618      	mov	r0, r3
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	20014330 	.word	0x20014330

08006338 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006338:	b580      	push	{r7, lr}
 800633a:	b08c      	sub	sp, #48	; 0x30
 800633c:	af00      	add	r7, sp, #0
 800633e:	4603      	mov	r3, r0
 8006340:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006342:	4b3b      	ldr	r3, [pc, #236]	; (8006430 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d06d      	beq.n	8006426 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800634a:	4b39      	ldr	r3, [pc, #228]	; (8006430 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006350:	2300      	movs	r3, #0
 8006352:	62bb      	str	r3, [r7, #40]	; 0x28
 8006354:	e008      	b.n	8006368 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800635c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635e:	2b00      	cmp	r3, #0
 8006360:	d007      	beq.n	8006372 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006364:	3301      	adds	r3, #1
 8006366:	62bb      	str	r3, [r7, #40]	; 0x28
 8006368:	79fb      	ldrb	r3, [r7, #7]
 800636a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800636c:	429a      	cmp	r2, r3
 800636e:	d3f2      	bcc.n	8006356 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006370:	e000      	b.n	8006374 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006372:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006376:	2b00      	cmp	r3, #0
 8006378:	d055      	beq.n	8006426 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800637a:	f3ef 8311 	mrs	r3, BASEPRI
 800637e:	f04f 0120 	mov.w	r1, #32
 8006382:	f381 8811 	msr	BASEPRI, r1
 8006386:	617b      	str	r3, [r7, #20]
 8006388:	482a      	ldr	r0, [pc, #168]	; (8006434 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800638a:	f7fe fbab 	bl	8004ae4 <_PreparePacket>
 800638e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	627b      	str	r3, [r7, #36]	; 0x24
 8006398:	79fb      	ldrb	r3, [r7, #7]
 800639a:	623b      	str	r3, [r7, #32]
 800639c:	e00b      	b.n	80063b6 <SEGGER_SYSVIEW_SendModule+0x7e>
 800639e:	6a3b      	ldr	r3, [r7, #32]
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	1c59      	adds	r1, r3, #1
 80063a6:	6279      	str	r1, [r7, #36]	; 0x24
 80063a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063ac:	b2d2      	uxtb	r2, r2
 80063ae:	701a      	strb	r2, [r3, #0]
 80063b0:	6a3b      	ldr	r3, [r7, #32]
 80063b2:	09db      	lsrs	r3, r3, #7
 80063b4:	623b      	str	r3, [r7, #32]
 80063b6:	6a3b      	ldr	r3, [r7, #32]
 80063b8:	2b7f      	cmp	r3, #127	; 0x7f
 80063ba:	d8f0      	bhi.n	800639e <SEGGER_SYSVIEW_SendModule+0x66>
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	1c5a      	adds	r2, r3, #1
 80063c0:	627a      	str	r2, [r7, #36]	; 0x24
 80063c2:	6a3a      	ldr	r2, [r7, #32]
 80063c4:	b2d2      	uxtb	r2, r2
 80063c6:	701a      	strb	r2, [r3, #0]
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	61fb      	str	r3, [r7, #28]
 80063d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	61bb      	str	r3, [r7, #24]
 80063d6:	e00b      	b.n	80063f0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	1c59      	adds	r1, r3, #1
 80063e0:	61f9      	str	r1, [r7, #28]
 80063e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063e6:	b2d2      	uxtb	r2, r2
 80063e8:	701a      	strb	r2, [r3, #0]
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	09db      	lsrs	r3, r3, #7
 80063ee:	61bb      	str	r3, [r7, #24]
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	2b7f      	cmp	r3, #127	; 0x7f
 80063f4:	d8f0      	bhi.n	80063d8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	1c5a      	adds	r2, r3, #1
 80063fa:	61fa      	str	r2, [r7, #28]
 80063fc:	69ba      	ldr	r2, [r7, #24]
 80063fe:	b2d2      	uxtb	r2, r2
 8006400:	701a      	strb	r2, [r3, #0]
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2280      	movs	r2, #128	; 0x80
 800640c:	4619      	mov	r1, r3
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f7fe fb18 	bl	8004a44 <_EncodeStr>
 8006414:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006416:	2216      	movs	r2, #22
 8006418:	68f9      	ldr	r1, [r7, #12]
 800641a:	6938      	ldr	r0, [r7, #16]
 800641c:	f7fe fc52 	bl	8004cc4 <_SendPacket>
      RECORD_END();
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006426:	bf00      	nop
 8006428:	3730      	adds	r7, #48	; 0x30
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	20014358 	.word	0x20014358
 8006434:	20014360 	.word	0x20014360

08006438 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800643e:	4b0c      	ldr	r3, [pc, #48]	; (8006470 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00f      	beq.n	8006466 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006446:	4b0a      	ldr	r3, [pc, #40]	; (8006470 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1f2      	bne.n	800644c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006466:	bf00      	nop
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	20014358 	.word	0x20014358

08006474 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800647a:	f3ef 8311 	mrs	r3, BASEPRI
 800647e:	f04f 0120 	mov.w	r1, #32
 8006482:	f381 8811 	msr	BASEPRI, r1
 8006486:	60fb      	str	r3, [r7, #12]
 8006488:	4817      	ldr	r0, [pc, #92]	; (80064e8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800648a:	f7fe fb2b 	bl	8004ae4 <_PreparePacket>
 800648e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	617b      	str	r3, [r7, #20]
 8006498:	4b14      	ldr	r3, [pc, #80]	; (80064ec <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	613b      	str	r3, [r7, #16]
 800649e:	e00b      	b.n	80064b8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	1c59      	adds	r1, r3, #1
 80064a8:	6179      	str	r1, [r7, #20]
 80064aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064ae:	b2d2      	uxtb	r2, r2
 80064b0:	701a      	strb	r2, [r3, #0]
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	09db      	lsrs	r3, r3, #7
 80064b6:	613b      	str	r3, [r7, #16]
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	2b7f      	cmp	r3, #127	; 0x7f
 80064bc:	d8f0      	bhi.n	80064a0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	1c5a      	adds	r2, r3, #1
 80064c2:	617a      	str	r2, [r7, #20]
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	b2d2      	uxtb	r2, r2
 80064c8:	701a      	strb	r2, [r3, #0]
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80064ce:	221b      	movs	r2, #27
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	68b8      	ldr	r0, [r7, #8]
 80064d4:	f7fe fbf6 	bl	8004cc4 <_SendPacket>
  RECORD_END();
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f383 8811 	msr	BASEPRI, r3
}
 80064de:	bf00      	nop
 80064e0:	3718      	adds	r7, #24
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	20014360 	.word	0x20014360
 80064ec:	2001435c 	.word	0x2001435c

080064f0 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80064f0:	b40f      	push	{r0, r1, r2, r3}
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b082      	sub	sp, #8
 80064f6:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80064f8:	f107 0314 	add.w	r3, r7, #20
 80064fc:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80064fe:	1d3b      	adds	r3, r7, #4
 8006500:	461a      	mov	r2, r3
 8006502:	2100      	movs	r1, #0
 8006504:	6938      	ldr	r0, [r7, #16]
 8006506:	f7fe feef 	bl	80052e8 <_VPrintTarget>
  va_end(ParamList);
}
 800650a:	bf00      	nop
 800650c:	3708      	adds	r7, #8
 800650e:	46bd      	mov	sp, r7
 8006510:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006514:	b004      	add	sp, #16
 8006516:	4770      	bx	lr

08006518 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006518:	b580      	push	{r7, lr}
 800651a:	b08a      	sub	sp, #40	; 0x28
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006520:	f3ef 8311 	mrs	r3, BASEPRI
 8006524:	f04f 0120 	mov.w	r1, #32
 8006528:	f381 8811 	msr	BASEPRI, r1
 800652c:	617b      	str	r3, [r7, #20]
 800652e:	4827      	ldr	r0, [pc, #156]	; (80065cc <SEGGER_SYSVIEW_Warn+0xb4>)
 8006530:	f7fe fad8 	bl	8004ae4 <_PreparePacket>
 8006534:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006536:	2280      	movs	r2, #128	; 0x80
 8006538:	6879      	ldr	r1, [r7, #4]
 800653a:	6938      	ldr	r0, [r7, #16]
 800653c:	f7fe fa82 	bl	8004a44 <_EncodeStr>
 8006540:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	627b      	str	r3, [r7, #36]	; 0x24
 8006546:	2301      	movs	r3, #1
 8006548:	623b      	str	r3, [r7, #32]
 800654a:	e00b      	b.n	8006564 <SEGGER_SYSVIEW_Warn+0x4c>
 800654c:	6a3b      	ldr	r3, [r7, #32]
 800654e:	b2da      	uxtb	r2, r3
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	1c59      	adds	r1, r3, #1
 8006554:	6279      	str	r1, [r7, #36]	; 0x24
 8006556:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800655a:	b2d2      	uxtb	r2, r2
 800655c:	701a      	strb	r2, [r3, #0]
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	09db      	lsrs	r3, r3, #7
 8006562:	623b      	str	r3, [r7, #32]
 8006564:	6a3b      	ldr	r3, [r7, #32]
 8006566:	2b7f      	cmp	r3, #127	; 0x7f
 8006568:	d8f0      	bhi.n	800654c <SEGGER_SYSVIEW_Warn+0x34>
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	1c5a      	adds	r2, r3, #1
 800656e:	627a      	str	r2, [r7, #36]	; 0x24
 8006570:	6a3a      	ldr	r2, [r7, #32]
 8006572:	b2d2      	uxtb	r2, r2
 8006574:	701a      	strb	r2, [r3, #0]
 8006576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006578:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	61fb      	str	r3, [r7, #28]
 800657e:	2300      	movs	r3, #0
 8006580:	61bb      	str	r3, [r7, #24]
 8006582:	e00b      	b.n	800659c <SEGGER_SYSVIEW_Warn+0x84>
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	b2da      	uxtb	r2, r3
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	1c59      	adds	r1, r3, #1
 800658c:	61f9      	str	r1, [r7, #28]
 800658e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006592:	b2d2      	uxtb	r2, r2
 8006594:	701a      	strb	r2, [r3, #0]
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	09db      	lsrs	r3, r3, #7
 800659a:	61bb      	str	r3, [r7, #24]
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	2b7f      	cmp	r3, #127	; 0x7f
 80065a0:	d8f0      	bhi.n	8006584 <SEGGER_SYSVIEW_Warn+0x6c>
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	1c5a      	adds	r2, r3, #1
 80065a6:	61fa      	str	r2, [r7, #28]
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	b2d2      	uxtb	r2, r2
 80065ac:	701a      	strb	r2, [r3, #0]
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80065b2:	221a      	movs	r2, #26
 80065b4:	68f9      	ldr	r1, [r7, #12]
 80065b6:	6938      	ldr	r0, [r7, #16]
 80065b8:	f7fe fb84 	bl	8004cc4 <_SendPacket>
  RECORD_END();
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f383 8811 	msr	BASEPRI, r3
}
 80065c2:	bf00      	nop
 80065c4:	3728      	adds	r7, #40	; 0x28
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	20014360 	.word	0x20014360

080065d0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80065d0:	b580      	push	{r7, lr}
 80065d2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80065d4:	4b13      	ldr	r3, [pc, #76]	; (8006624 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80065d6:	7e1b      	ldrb	r3, [r3, #24]
 80065d8:	4619      	mov	r1, r3
 80065da:	4a13      	ldr	r2, [pc, #76]	; (8006628 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80065dc:	460b      	mov	r3, r1
 80065de:	005b      	lsls	r3, r3, #1
 80065e0:	440b      	add	r3, r1
 80065e2:	00db      	lsls	r3, r3, #3
 80065e4:	4413      	add	r3, r2
 80065e6:	336c      	adds	r3, #108	; 0x6c
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	4b0e      	ldr	r3, [pc, #56]	; (8006624 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80065ec:	7e1b      	ldrb	r3, [r3, #24]
 80065ee:	4618      	mov	r0, r3
 80065f0:	490d      	ldr	r1, [pc, #52]	; (8006628 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80065f2:	4603      	mov	r3, r0
 80065f4:	005b      	lsls	r3, r3, #1
 80065f6:	4403      	add	r3, r0
 80065f8:	00db      	lsls	r3, r3, #3
 80065fa:	440b      	add	r3, r1
 80065fc:	3370      	adds	r3, #112	; 0x70
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	429a      	cmp	r2, r3
 8006602:	d00b      	beq.n	800661c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006604:	4b07      	ldr	r3, [pc, #28]	; (8006624 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006606:	789b      	ldrb	r3, [r3, #2]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d107      	bne.n	800661c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800660c:	4b05      	ldr	r3, [pc, #20]	; (8006624 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800660e:	2201      	movs	r2, #1
 8006610:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006612:	f7fe fa73 	bl	8004afc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006616:	4b03      	ldr	r3, [pc, #12]	; (8006624 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006618:	2200      	movs	r2, #0
 800661a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 800661c:	4b01      	ldr	r3, [pc, #4]	; (8006624 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800661e:	781b      	ldrb	r3, [r3, #0]
}
 8006620:	4618      	mov	r0, r3
 8006622:	bd80      	pop	{r7, pc}
 8006624:	20014330 	.word	0x20014330
 8006628:	20012e70 	.word	0x20012e70

0800662c <__libc_init_array>:
 800662c:	b570      	push	{r4, r5, r6, lr}
 800662e:	4d0d      	ldr	r5, [pc, #52]	; (8006664 <__libc_init_array+0x38>)
 8006630:	4c0d      	ldr	r4, [pc, #52]	; (8006668 <__libc_init_array+0x3c>)
 8006632:	1b64      	subs	r4, r4, r5
 8006634:	10a4      	asrs	r4, r4, #2
 8006636:	2600      	movs	r6, #0
 8006638:	42a6      	cmp	r6, r4
 800663a:	d109      	bne.n	8006650 <__libc_init_array+0x24>
 800663c:	4d0b      	ldr	r5, [pc, #44]	; (800666c <__libc_init_array+0x40>)
 800663e:	4c0c      	ldr	r4, [pc, #48]	; (8006670 <__libc_init_array+0x44>)
 8006640:	f000 f83e 	bl	80066c0 <_init>
 8006644:	1b64      	subs	r4, r4, r5
 8006646:	10a4      	asrs	r4, r4, #2
 8006648:	2600      	movs	r6, #0
 800664a:	42a6      	cmp	r6, r4
 800664c:	d105      	bne.n	800665a <__libc_init_array+0x2e>
 800664e:	bd70      	pop	{r4, r5, r6, pc}
 8006650:	f855 3b04 	ldr.w	r3, [r5], #4
 8006654:	4798      	blx	r3
 8006656:	3601      	adds	r6, #1
 8006658:	e7ee      	b.n	8006638 <__libc_init_array+0xc>
 800665a:	f855 3b04 	ldr.w	r3, [r5], #4
 800665e:	4798      	blx	r3
 8006660:	3601      	adds	r6, #1
 8006662:	e7f2      	b.n	800664a <__libc_init_array+0x1e>
 8006664:	080068cc 	.word	0x080068cc
 8006668:	080068cc 	.word	0x080068cc
 800666c:	080068cc 	.word	0x080068cc
 8006670:	080068d0 	.word	0x080068d0

08006674 <memcmp>:
 8006674:	b510      	push	{r4, lr}
 8006676:	3901      	subs	r1, #1
 8006678:	4402      	add	r2, r0
 800667a:	4290      	cmp	r0, r2
 800667c:	d101      	bne.n	8006682 <memcmp+0xe>
 800667e:	2000      	movs	r0, #0
 8006680:	e005      	b.n	800668e <memcmp+0x1a>
 8006682:	7803      	ldrb	r3, [r0, #0]
 8006684:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006688:	42a3      	cmp	r3, r4
 800668a:	d001      	beq.n	8006690 <memcmp+0x1c>
 800668c:	1b18      	subs	r0, r3, r4
 800668e:	bd10      	pop	{r4, pc}
 8006690:	3001      	adds	r0, #1
 8006692:	e7f2      	b.n	800667a <memcmp+0x6>

08006694 <memcpy>:
 8006694:	440a      	add	r2, r1
 8006696:	4291      	cmp	r1, r2
 8006698:	f100 33ff 	add.w	r3, r0, #4294967295
 800669c:	d100      	bne.n	80066a0 <memcpy+0xc>
 800669e:	4770      	bx	lr
 80066a0:	b510      	push	{r4, lr}
 80066a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066aa:	4291      	cmp	r1, r2
 80066ac:	d1f9      	bne.n	80066a2 <memcpy+0xe>
 80066ae:	bd10      	pop	{r4, pc}

080066b0 <memset>:
 80066b0:	4402      	add	r2, r0
 80066b2:	4603      	mov	r3, r0
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d100      	bne.n	80066ba <memset+0xa>
 80066b8:	4770      	bx	lr
 80066ba:	f803 1b01 	strb.w	r1, [r3], #1
 80066be:	e7f9      	b.n	80066b4 <memset+0x4>

080066c0 <_init>:
 80066c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c2:	bf00      	nop
 80066c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066c6:	bc08      	pop	{r3}
 80066c8:	469e      	mov	lr, r3
 80066ca:	4770      	bx	lr

080066cc <_fini>:
 80066cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ce:	bf00      	nop
 80066d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066d2:	bc08      	pop	{r3}
 80066d4:	469e      	mov	lr, r3
 80066d6:	4770      	bx	lr
