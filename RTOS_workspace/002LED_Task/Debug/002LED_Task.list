
002LED_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08005bf4  08005bf4  00015bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d84  08005d84  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d84  08005d84  00015d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d8c  08005d8c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d8c  08005d8c  00015d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d90  08005d90  00015d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00014414  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20014430  20014430  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000122ae  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029bd  00000000  00000000  000322fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001130  00000000  00000000  00034cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fc8  00000000  00000000  00035de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023754  00000000  00000000  00036db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013145  00000000  00000000  0005a504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6c6e  00000000  00000000  0006d649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001442b7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004764  00000000  00000000  00144308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005bdc 	.word	0x08005bdc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08005bdc 	.word	0x08005bdc

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e5c 	.word	0x20012e5c

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fb93 	bl	8000c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f86d 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8d5 	bl	8000724 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter.
  DWT_CTRL |= ( 1 << 0);
 800057a:	4b2d      	ldr	r3, [pc, #180]	; (8000630 <main+0xc8>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a2c      	ldr	r2, [pc, #176]	; (8000630 <main+0xc8>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(250000);
 8000586:	482b      	ldr	r0, [pc, #172]	; (8000634 <main+0xcc>)
 8000588:	f003 f992 	bl	80038b0 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 800058c:	f002 ffba 	bl	8003504 <SEGGER_SYSVIEW_Conf>

 // SEGGER_SYSVIEW_Start();

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	2302      	movs	r3, #2
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2300      	movs	r3, #0
 800059c:	22c8      	movs	r2, #200	; 0xc8
 800059e:	4926      	ldr	r1, [pc, #152]	; (8000638 <main+0xd0>)
 80005a0:	4826      	ldr	r0, [pc, #152]	; (800063c <main+0xd4>)
 80005a2:	f001 fe70 	bl	8002286 <xTaskCreate>
 80005a6:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005a8:	69fb      	ldr	r3, [r7, #28]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d00a      	beq.n	80005c4 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b2:	f383 8811 	msr	BASEPRI, r3
 80005b6:	f3bf 8f6f 	isb	sy
 80005ba:	f3bf 8f4f 	dsb	sy
 80005be:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005c0:	bf00      	nop
 80005c2:	e7fe      	b.n	80005c2 <main+0x5a>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL, 2, &task2_handle);
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2302      	movs	r3, #2
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	22c8      	movs	r2, #200	; 0xc8
 80005d2:	491b      	ldr	r1, [pc, #108]	; (8000640 <main+0xd8>)
 80005d4:	481b      	ldr	r0, [pc, #108]	; (8000644 <main+0xdc>)
 80005d6:	f001 fe56 	bl	8002286 <xTaskCreate>
 80005da:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d00a      	beq.n	80005f8 <main+0x90>
        __asm volatile
 80005e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e6:	f383 8811 	msr	BASEPRI, r3
 80005ea:	f3bf 8f6f 	isb	sy
 80005ee:	f3bf 8f4f 	dsb	sy
 80005f2:	617b      	str	r3, [r7, #20]
    }
 80005f4:	bf00      	nop
 80005f6:	e7fe      	b.n	80005f6 <main+0x8e>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &task3_handle);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	2302      	movs	r3, #2
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2300      	movs	r3, #0
 8000602:	22c8      	movs	r2, #200	; 0xc8
 8000604:	4910      	ldr	r1, [pc, #64]	; (8000648 <main+0xe0>)
 8000606:	4811      	ldr	r0, [pc, #68]	; (800064c <main+0xe4>)
 8000608:	f001 fe3d 	bl	8002286 <xTaskCreate>
 800060c:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d00a      	beq.n	800062a <main+0xc2>
        __asm volatile
 8000614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000618:	f383 8811 	msr	BASEPRI, r3
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f3bf 8f4f 	dsb	sy
 8000624:	613b      	str	r3, [r7, #16]
    }
 8000626:	bf00      	nop
 8000628:	e7fe      	b.n	8000628 <main+0xc0>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800062a:	f001 ff8f 	bl	800254c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062e:	e7fe      	b.n	800062e <main+0xc6>
 8000630:	e0001000 	.word	0xe0001000
 8000634:	0003d090 	.word	0x0003d090
 8000638:	08005bf4 	.word	0x08005bf4
 800063c:	080009e1 	.word	0x080009e1
 8000640:	08005c04 	.word	0x08005c04
 8000644:	08000a0d 	.word	0x08000a0d
 8000648:	08005c14 	.word	0x08005c14
 800064c:	08000a39 	.word	0x08000a39

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	; 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f005 fab4 	bl	8005bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b28      	ldr	r3, [pc, #160]	; (800071c <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	; (800071c <SystemClock_Config+0xcc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	; (800071c <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <SystemClock_Config+0xd0>)
 800069a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c0:	2308      	movs	r3, #8
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006c4:	23a8      	movs	r3, #168	; 0xa8
 80006c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006cc:	2307      	movs	r3, #7
 80006ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fdf7 	bl	80012c8 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e0:	f000 f9d2 	bl	8000a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2105      	movs	r1, #5
 8000702:	4618      	mov	r0, r3
 8000704:	f001 f858 	bl	80017b8 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800070e:	f000 f9bb 	bl	8000a88 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	; 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	; 0x30
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
 800073e:	4ba2      	ldr	r3, [pc, #648]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4aa1      	ldr	r2, [pc, #644]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000744:	f043 0310 	orr.w	r3, r3, #16
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b9f      	ldr	r3, [pc, #636]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0310 	and.w	r3, r3, #16
 8000752:	61bb      	str	r3, [r7, #24]
 8000754:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	4b9b      	ldr	r3, [pc, #620]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a9a      	ldr	r2, [pc, #616]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b98      	ldr	r3, [pc, #608]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b94      	ldr	r3, [pc, #592]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a93      	ldr	r2, [pc, #588]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b91      	ldr	r3, [pc, #580]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b8d      	ldr	r3, [pc, #564]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a8c      	ldr	r2, [pc, #560]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b8a      	ldr	r3, [pc, #552]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b86      	ldr	r3, [pc, #536]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a85      	ldr	r2, [pc, #532]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b83      	ldr	r3, [pc, #524]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b7f      	ldr	r3, [pc, #508]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a7e      	ldr	r2, [pc, #504]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007d0:	f043 0308 	orr.w	r3, r3, #8
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b7c      	ldr	r3, [pc, #496]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0308 	and.w	r3, r3, #8
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2108      	movs	r1, #8
 80007e6:	4879      	ldr	r0, [pc, #484]	; (80009cc <MX_GPIO_Init+0x2a8>)
 80007e8:	f000 fd3a 	bl	8001260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	2101      	movs	r1, #1
 80007f0:	4877      	ldr	r0, [pc, #476]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 80007f2:	f000 fd35 	bl	8001260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007f6:	2200      	movs	r2, #0
 80007f8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007fc:	4875      	ldr	r0, [pc, #468]	; (80009d4 <MX_GPIO_Init+0x2b0>)
 80007fe:	f000 fd2f 	bl	8001260 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000802:	2308      	movs	r3, #8
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	486c      	ldr	r0, [pc, #432]	; (80009cc <MX_GPIO_Init+0x2a8>)
 800081a:	f000 fb85 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800081e:	2301      	movs	r3, #1
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4866      	ldr	r0, [pc, #408]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 8000836:	f000 fb77 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800083a:	2308      	movs	r3, #8
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800084a:	2305      	movs	r3, #5
 800084c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	485e      	ldr	r0, [pc, #376]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 8000856:	f000 fb67 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800085a:	2301      	movs	r3, #1
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	485a      	ldr	r0, [pc, #360]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 8000870:	f000 fb5a 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000874:	2310      	movs	r3, #16
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000884:	2306      	movs	r3, #6
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4852      	ldr	r0, [pc, #328]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 8000890:	f000 fb4a 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000894:	23e0      	movs	r3, #224	; 0xe0
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008a4:	2305      	movs	r3, #5
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	484a      	ldr	r0, [pc, #296]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 80008b0:	f000 fb3a 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008b4:	2304      	movs	r3, #4
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b8:	2300      	movs	r3, #0
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	4845      	ldr	r0, [pc, #276]	; (80009dc <MX_GPIO_Init+0x2b8>)
 80008c8:	f000 fb2e 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008de:	2305      	movs	r3, #5
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	483c      	ldr	r0, [pc, #240]	; (80009dc <MX_GPIO_Init+0x2b8>)
 80008ea:	f000 fb1d 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ee:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008f2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	4833      	ldr	r0, [pc, #204]	; (80009d4 <MX_GPIO_Init+0x2b0>)
 8000908:	f000 fb0e 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800090c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800091e:	2306      	movs	r3, #6
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4829      	ldr	r0, [pc, #164]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 800092a:	f000 fafd 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800092e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4825      	ldr	r0, [pc, #148]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 8000944:	f000 faf0 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000948:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800095a:	230a      	movs	r3, #10
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	481c      	ldr	r0, [pc, #112]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 8000966:	f000 fadf 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800096a:	2320      	movs	r3, #32
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4815      	ldr	r0, [pc, #84]	; (80009d4 <MX_GPIO_Init+0x2b0>)
 800097e:	f000 fad3 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000982:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000988:	2312      	movs	r3, #18
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000994:	2304      	movs	r3, #4
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	480f      	ldr	r0, [pc, #60]	; (80009dc <MX_GPIO_Init+0x2b8>)
 80009a0:	f000 fac2 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009a4:	2302      	movs	r3, #2
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009a8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_GPIO_Init+0x2a8>)
 80009ba:	f000 fab5 	bl	8000f28 <HAL_GPIO_Init>

}
 80009be:	bf00      	nop
 80009c0:	3730      	adds	r7, #48	; 0x30
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40020800 	.word	0x40020800
 80009d4:	40020c00 	.word	0x40020c00
 80009d8:	40020000 	.word	0x40020000
 80009dc:	40020400 	.word	0x40020400

080009e0 <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler(void* parameters)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED!!");
 80009e8:	4806      	ldr	r0, [pc, #24]	; (8000a04 <led_green_handler+0x24>)
 80009ea:	f005 f80f 	bl	8005a0c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80009ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <led_green_handler+0x28>)
 80009f4:	f000 fc4d 	bl	8001292 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80009f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009fc:	f000 f98e 	bl	8000d1c <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED!!");
 8000a00:	e7f2      	b.n	80009e8 <led_green_handler+0x8>
 8000a02:	bf00      	nop
 8000a04:	08005c24 	.word	0x08005c24
 8000a08:	40020c00 	.word	0x40020c00

08000a0c <led_red_handler>:
	}

}

static void led_red_handler(void* parameters)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling RED LED!!");
 8000a14:	4806      	ldr	r0, [pc, #24]	; (8000a30 <led_red_handler+0x24>)
 8000a16:	f004 fff9 	bl	8005a0c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <led_red_handler+0x28>)
 8000a20:	f000 fc37 	bl	8001292 <HAL_GPIO_TogglePin>
		HAL_Delay(400);
 8000a24:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a28:	f000 f978 	bl	8000d1c <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling RED LED!!");
 8000a2c:	e7f2      	b.n	8000a14 <led_red_handler+0x8>
 8000a2e:	bf00      	nop
 8000a30:	08005c3c 	.word	0x08005c3c
 8000a34:	40020c00 	.word	0x40020c00

08000a38 <led_orange_handler>:
	}
}

static void led_orange_handler(void* parameters)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling ORANGE LED!!");
 8000a40:	4806      	ldr	r0, [pc, #24]	; (8000a5c <led_orange_handler+0x24>)
 8000a42:	f004 ffe3 	bl	8005a0c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000a46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <led_orange_handler+0x28>)
 8000a4c:	f000 fc21 	bl	8001292 <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 8000a50:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000a54:	f000 f962 	bl	8000d1c <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling ORANGE LED!!");
 8000a58:	e7f2      	b.n	8000a40 <led_orange_handler+0x8>
 8000a5a:	bf00      	nop
 8000a5c:	08005c50 	.word	0x08005c50
 8000a60:	40020c00 	.word	0x40020c00

08000a64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d101      	bne.n	8000a7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a76:	f000 f931 	bl	8000cdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40001000 	.word	0x40001000

08000a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
	...

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	4a0f      	ldr	r2, [pc, #60]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aac:	6453      	str	r3, [r2, #68]	; 0x44
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000ad6:	f002 f95f 	bl	8002d98 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08e      	sub	sp, #56	; 0x38
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	4b33      	ldr	r3, [pc, #204]	; (8000bcc <HAL_InitTick+0xe4>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	4a32      	ldr	r2, [pc, #200]	; (8000bcc <HAL_InitTick+0xe4>)
 8000b02:	f043 0310 	orr.w	r3, r3, #16
 8000b06:	6413      	str	r3, [r2, #64]	; 0x40
 8000b08:	4b30      	ldr	r3, [pc, #192]	; (8000bcc <HAL_InitTick+0xe4>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	f003 0310 	and.w	r3, r3, #16
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b14:	f107 0210 	add.w	r2, r7, #16
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f001 f856 	bl	8001bd0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b24:	6a3b      	ldr	r3, [r7, #32]
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d103      	bne.n	8000b36 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b2e:	f001 f83b 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 8000b32:	6378      	str	r0, [r7, #52]	; 0x34
 8000b34:	e004      	b.n	8000b40 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b36:	f001 f837 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b42:	4a23      	ldr	r2, [pc, #140]	; (8000bd0 <HAL_InitTick+0xe8>)
 8000b44:	fba2 2303 	umull	r2, r3, r2, r3
 8000b48:	0c9b      	lsrs	r3, r3, #18
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b4e:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <HAL_InitTick+0xec>)
 8000b50:	4a21      	ldr	r2, [pc, #132]	; (8000bd8 <HAL_InitTick+0xf0>)
 8000b52:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b54:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <HAL_InitTick+0xec>)
 8000b56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b5a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b5c:	4a1d      	ldr	r2, [pc, #116]	; (8000bd4 <HAL_InitTick+0xec>)
 8000b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b60:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <HAL_InitTick+0xec>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b68:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <HAL_InitTick+0xec>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6e:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <HAL_InitTick+0xec>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b74:	4817      	ldr	r0, [pc, #92]	; (8000bd4 <HAL_InitTick+0xec>)
 8000b76:	f001 f85d 	bl	8001c34 <HAL_TIM_Base_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d11b      	bne.n	8000bc0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b88:	4812      	ldr	r0, [pc, #72]	; (8000bd4 <HAL_InitTick+0xec>)
 8000b8a:	f001 f8ad 	bl	8001ce8 <HAL_TIM_Base_Start_IT>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d111      	bne.n	8000bc0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b9c:	2036      	movs	r0, #54	; 0x36
 8000b9e:	f000 f9b5 	bl	8000f0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b0f      	cmp	r3, #15
 8000ba6:	d808      	bhi.n	8000bba <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	2036      	movs	r0, #54	; 0x36
 8000bae:	f000 f991 	bl	8000ed4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <HAL_InitTick+0xf4>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	e002      	b.n	8000bc0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3738      	adds	r7, #56	; 0x38
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	431bde83 	.word	0x431bde83
 8000bd4:	20000038 	.word	0x20000038
 8000bd8:	40001000 	.word	0x40001000
 8000bdc:	20000004 	.word	0x20000004

08000be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <NMI_Handler+0x4>

08000be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <HardFault_Handler+0x4>

08000bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <MemManage_Handler+0x4>

08000bf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <BusFault_Handler+0x4>

08000bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <UsageFault_Handler+0x4>

08000bfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <TIM6_DAC_IRQHandler+0x10>)
 8000c12:	f001 f8d9 	bl	8001dc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000038 	.word	0x20000038

08000c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <SystemInit+0x20>)
 8000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <SystemInit+0x20>)
 8000c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c48:	480d      	ldr	r0, [pc, #52]	; (8000c80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c4a:	490e      	ldr	r1, [pc, #56]	; (8000c84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c4c:	4a0e      	ldr	r2, [pc, #56]	; (8000c88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c50:	e002      	b.n	8000c58 <LoopCopyDataInit>

08000c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c56:	3304      	adds	r3, #4

08000c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c5c:	d3f9      	bcc.n	8000c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5e:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c60:	4c0b      	ldr	r4, [pc, #44]	; (8000c90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c64:	e001      	b.n	8000c6a <LoopFillZerobss>

08000c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c68:	3204      	adds	r2, #4

08000c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c6c:	d3fb      	bcc.n	8000c66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c6e:	f7ff ffd7 	bl	8000c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c72:	f004 ff69 	bl	8005b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c76:	f7ff fc77 	bl	8000568 <main>
  bx  lr    
 8000c7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c84:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000c88:	08005d94 	.word	0x08005d94
  ldr r2, =_sbss
 8000c8c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c90:	20014430 	.word	0x20014430

08000c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c94:	e7fe      	b.n	8000c94 <ADC_IRQHandler>
	...

08000c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	; (8000cd8 <HAL_Init+0x40>)
 8000ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <HAL_Init+0x40>)
 8000cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <HAL_Init+0x40>)
 8000cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f000 f8fc 	bl	8000ebe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f7ff ff0e 	bl	8000ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ccc:	f7ff fee4 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023c00 	.word	0x40023c00

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	20000080 	.word	0x20000080

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000080 	.word	0x20000080

08000d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d24:	f7ff ffee 	bl	8000d04 <HAL_GetTick>
 8000d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d34:	d005      	beq.n	8000d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <HAL_Delay+0x44>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4413      	add	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d42:	bf00      	nop
 8000d44:	f7ff ffde 	bl	8000d04 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d8f7      	bhi.n	8000d44 <HAL_Delay+0x28>
  {
  }
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000008 	.word	0x20000008

08000d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d96:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	60d3      	str	r3, [r2, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	f003 0307 	and.w	r3, r3, #7
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	db0b      	blt.n	8000df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 021f 	and.w	r2, r3, #31
 8000de0:	4907      	ldr	r1, [pc, #28]	; (8000e00 <__NVIC_EnableIRQ+0x38>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	2001      	movs	r0, #1
 8000dea:	fa00 f202 	lsl.w	r2, r0, r2
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000e100 	.word	0xe000e100

08000e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	6039      	str	r1, [r7, #0]
 8000e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	db0a      	blt.n	8000e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	490c      	ldr	r1, [pc, #48]	; (8000e50 <__NVIC_SetPriority+0x4c>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	0112      	lsls	r2, r2, #4
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	440b      	add	r3, r1
 8000e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e2c:	e00a      	b.n	8000e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4908      	ldr	r1, [pc, #32]	; (8000e54 <__NVIC_SetPriority+0x50>)
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	f003 030f 	and.w	r3, r3, #15
 8000e3a:	3b04      	subs	r3, #4
 8000e3c:	0112      	lsls	r2, r2, #4
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	440b      	add	r3, r1
 8000e42:	761a      	strb	r2, [r3, #24]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000e100 	.word	0xe000e100
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f1c3 0307 	rsb	r3, r3, #7
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	bf28      	it	cs
 8000e76:	2304      	movcs	r3, #4
 8000e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	2b06      	cmp	r3, #6
 8000e80:	d902      	bls.n	8000e88 <NVIC_EncodePriority+0x30>
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3b03      	subs	r3, #3
 8000e86:	e000      	b.n	8000e8a <NVIC_EncodePriority+0x32>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43da      	mvns	r2, r3
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eaa:	43d9      	mvns	r1, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	4313      	orrs	r3, r2
         );
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3724      	adds	r7, #36	; 0x24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ff4c 	bl	8000d64 <__NVIC_SetPriorityGrouping>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee6:	f7ff ff61 	bl	8000dac <__NVIC_GetPriorityGrouping>
 8000eea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	68b9      	ldr	r1, [r7, #8]
 8000ef0:	6978      	ldr	r0, [r7, #20]
 8000ef2:	f7ff ffb1 	bl	8000e58 <NVIC_EncodePriority>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efc:	4611      	mov	r1, r2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff80 	bl	8000e04 <__NVIC_SetPriority>
}
 8000f04:	bf00      	nop
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff ff54 	bl	8000dc8 <__NVIC_EnableIRQ>
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
 8000f42:	e16b      	b.n	800121c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f44:	2201      	movs	r2, #1
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	697a      	ldr	r2, [r7, #20]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	f040 815a 	bne.w	8001216 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 0303 	and.w	r3, r3, #3
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d005      	beq.n	8000f7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d130      	bne.n	8000fdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	2203      	movs	r2, #3
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	68da      	ldr	r2, [r3, #12]
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	091b      	lsrs	r3, r3, #4
 8000fc6:	f003 0201 	and.w	r2, r3, #1
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	2b03      	cmp	r3, #3
 8000fe6:	d017      	beq.n	8001018 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d123      	bne.n	800106c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	08da      	lsrs	r2, r3, #3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3208      	adds	r2, #8
 800102c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001030:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	f003 0307 	and.w	r3, r3, #7
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	220f      	movs	r2, #15
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	691a      	ldr	r2, [r3, #16]
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	08da      	lsrs	r2, r3, #3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3208      	adds	r2, #8
 8001066:	69b9      	ldr	r1, [r7, #24]
 8001068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	2203      	movs	r2, #3
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0203 	and.w	r2, r3, #3
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	f000 80b4 	beq.w	8001216 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	4b60      	ldr	r3, [pc, #384]	; (8001234 <HAL_GPIO_Init+0x30c>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	4a5f      	ldr	r2, [pc, #380]	; (8001234 <HAL_GPIO_Init+0x30c>)
 80010b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010bc:	6453      	str	r3, [r2, #68]	; 0x44
 80010be:	4b5d      	ldr	r3, [pc, #372]	; (8001234 <HAL_GPIO_Init+0x30c>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ca:	4a5b      	ldr	r2, [pc, #364]	; (8001238 <HAL_GPIO_Init+0x310>)
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	089b      	lsrs	r3, r3, #2
 80010d0:	3302      	adds	r3, #2
 80010d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f003 0303 	and.w	r3, r3, #3
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	220f      	movs	r2, #15
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a52      	ldr	r2, [pc, #328]	; (800123c <HAL_GPIO_Init+0x314>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d02b      	beq.n	800114e <HAL_GPIO_Init+0x226>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a51      	ldr	r2, [pc, #324]	; (8001240 <HAL_GPIO_Init+0x318>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d025      	beq.n	800114a <HAL_GPIO_Init+0x222>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a50      	ldr	r2, [pc, #320]	; (8001244 <HAL_GPIO_Init+0x31c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d01f      	beq.n	8001146 <HAL_GPIO_Init+0x21e>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4f      	ldr	r2, [pc, #316]	; (8001248 <HAL_GPIO_Init+0x320>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d019      	beq.n	8001142 <HAL_GPIO_Init+0x21a>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4e      	ldr	r2, [pc, #312]	; (800124c <HAL_GPIO_Init+0x324>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d013      	beq.n	800113e <HAL_GPIO_Init+0x216>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a4d      	ldr	r2, [pc, #308]	; (8001250 <HAL_GPIO_Init+0x328>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d00d      	beq.n	800113a <HAL_GPIO_Init+0x212>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4c      	ldr	r2, [pc, #304]	; (8001254 <HAL_GPIO_Init+0x32c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d007      	beq.n	8001136 <HAL_GPIO_Init+0x20e>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4b      	ldr	r2, [pc, #300]	; (8001258 <HAL_GPIO_Init+0x330>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d101      	bne.n	8001132 <HAL_GPIO_Init+0x20a>
 800112e:	2307      	movs	r3, #7
 8001130:	e00e      	b.n	8001150 <HAL_GPIO_Init+0x228>
 8001132:	2308      	movs	r3, #8
 8001134:	e00c      	b.n	8001150 <HAL_GPIO_Init+0x228>
 8001136:	2306      	movs	r3, #6
 8001138:	e00a      	b.n	8001150 <HAL_GPIO_Init+0x228>
 800113a:	2305      	movs	r3, #5
 800113c:	e008      	b.n	8001150 <HAL_GPIO_Init+0x228>
 800113e:	2304      	movs	r3, #4
 8001140:	e006      	b.n	8001150 <HAL_GPIO_Init+0x228>
 8001142:	2303      	movs	r3, #3
 8001144:	e004      	b.n	8001150 <HAL_GPIO_Init+0x228>
 8001146:	2302      	movs	r3, #2
 8001148:	e002      	b.n	8001150 <HAL_GPIO_Init+0x228>
 800114a:	2301      	movs	r3, #1
 800114c:	e000      	b.n	8001150 <HAL_GPIO_Init+0x228>
 800114e:	2300      	movs	r3, #0
 8001150:	69fa      	ldr	r2, [r7, #28]
 8001152:	f002 0203 	and.w	r2, r2, #3
 8001156:	0092      	lsls	r2, r2, #2
 8001158:	4093      	lsls	r3, r2
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001160:	4935      	ldr	r1, [pc, #212]	; (8001238 <HAL_GPIO_Init+0x310>)
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	089b      	lsrs	r3, r3, #2
 8001166:	3302      	adds	r3, #2
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800116e:	4b3b      	ldr	r3, [pc, #236]	; (800125c <HAL_GPIO_Init+0x334>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001192:	4a32      	ldr	r2, [pc, #200]	; (800125c <HAL_GPIO_Init+0x334>)
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001198:	4b30      	ldr	r3, [pc, #192]	; (800125c <HAL_GPIO_Init+0x334>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011bc:	4a27      	ldr	r2, [pc, #156]	; (800125c <HAL_GPIO_Init+0x334>)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011c2:	4b26      	ldr	r3, [pc, #152]	; (800125c <HAL_GPIO_Init+0x334>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011e6:	4a1d      	ldr	r2, [pc, #116]	; (800125c <HAL_GPIO_Init+0x334>)
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ec:	4b1b      	ldr	r3, [pc, #108]	; (800125c <HAL_GPIO_Init+0x334>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001210:	4a12      	ldr	r2, [pc, #72]	; (800125c <HAL_GPIO_Init+0x334>)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3301      	adds	r3, #1
 800121a:	61fb      	str	r3, [r7, #28]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	2b0f      	cmp	r3, #15
 8001220:	f67f ae90 	bls.w	8000f44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	3724      	adds	r7, #36	; 0x24
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800
 8001238:	40013800 	.word	0x40013800
 800123c:	40020000 	.word	0x40020000
 8001240:	40020400 	.word	0x40020400
 8001244:	40020800 	.word	0x40020800
 8001248:	40020c00 	.word	0x40020c00
 800124c:	40021000 	.word	0x40021000
 8001250:	40021400 	.word	0x40021400
 8001254:	40021800 	.word	0x40021800
 8001258:	40021c00 	.word	0x40021c00
 800125c:	40013c00 	.word	0x40013c00

08001260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	807b      	strh	r3, [r7, #2]
 800126c:	4613      	mov	r3, r2
 800126e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001270:	787b      	ldrb	r3, [r7, #1]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001276:	887a      	ldrh	r2, [r7, #2]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800127c:	e003      	b.n	8001286 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800127e:	887b      	ldrh	r3, [r7, #2]
 8001280:	041a      	lsls	r2, r3, #16
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	619a      	str	r2, [r3, #24]
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001292:	b480      	push	{r7}
 8001294:	b085      	sub	sp, #20
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	460b      	mov	r3, r1
 800129c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012a4:	887a      	ldrh	r2, [r7, #2]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4013      	ands	r3, r2
 80012aa:	041a      	lsls	r2, r3, #16
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	43d9      	mvns	r1, r3
 80012b0:	887b      	ldrh	r3, [r7, #2]
 80012b2:	400b      	ands	r3, r1
 80012b4:	431a      	orrs	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	619a      	str	r2, [r3, #24]
}
 80012ba:	bf00      	nop
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e267      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d075      	beq.n	80013d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012e6:	4b88      	ldr	r3, [pc, #544]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	d00c      	beq.n	800130c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012f2:	4b85      	ldr	r3, [pc, #532]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012fa:	2b08      	cmp	r3, #8
 80012fc:	d112      	bne.n	8001324 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012fe:	4b82      	ldr	r3, [pc, #520]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001306:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800130a:	d10b      	bne.n	8001324 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130c:	4b7e      	ldr	r3, [pc, #504]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d05b      	beq.n	80013d0 <HAL_RCC_OscConfig+0x108>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d157      	bne.n	80013d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e242      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800132c:	d106      	bne.n	800133c <HAL_RCC_OscConfig+0x74>
 800132e:	4b76      	ldr	r3, [pc, #472]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a75      	ldr	r2, [pc, #468]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	e01d      	b.n	8001378 <HAL_RCC_OscConfig+0xb0>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001344:	d10c      	bne.n	8001360 <HAL_RCC_OscConfig+0x98>
 8001346:	4b70      	ldr	r3, [pc, #448]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a6f      	ldr	r2, [pc, #444]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800134c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	4b6d      	ldr	r3, [pc, #436]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a6c      	ldr	r2, [pc, #432]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	e00b      	b.n	8001378 <HAL_RCC_OscConfig+0xb0>
 8001360:	4b69      	ldr	r3, [pc, #420]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a68      	ldr	r2, [pc, #416]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b66      	ldr	r3, [pc, #408]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a65      	ldr	r2, [pc, #404]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001376:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d013      	beq.n	80013a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001380:	f7ff fcc0 	bl	8000d04 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001388:	f7ff fcbc 	bl	8000d04 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b64      	cmp	r3, #100	; 0x64
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e207      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139a:	4b5b      	ldr	r3, [pc, #364]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0xc0>
 80013a6:	e014      	b.n	80013d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff fcac 	bl	8000d04 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b0:	f7ff fca8 	bl	8000d04 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b64      	cmp	r3, #100	; 0x64
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e1f3      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c2:	4b51      	ldr	r3, [pc, #324]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0xe8>
 80013ce:	e000      	b.n	80013d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d063      	beq.n	80014a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013de:	4b4a      	ldr	r3, [pc, #296]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 030c 	and.w	r3, r3, #12
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00b      	beq.n	8001402 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ea:	4b47      	ldr	r3, [pc, #284]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d11c      	bne.n	8001430 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013f6:	4b44      	ldr	r3, [pc, #272]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d116      	bne.n	8001430 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001402:	4b41      	ldr	r3, [pc, #260]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d005      	beq.n	800141a <HAL_RCC_OscConfig+0x152>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d001      	beq.n	800141a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e1c7      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141a:	4b3b      	ldr	r3, [pc, #236]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	4937      	ldr	r1, [pc, #220]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800142a:	4313      	orrs	r3, r2
 800142c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142e:	e03a      	b.n	80014a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d020      	beq.n	800147a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001438:	4b34      	ldr	r3, [pc, #208]	; (800150c <HAL_RCC_OscConfig+0x244>)
 800143a:	2201      	movs	r2, #1
 800143c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143e:	f7ff fc61 	bl	8000d04 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001446:	f7ff fc5d 	bl	8000d04 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e1a8      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001458:	4b2b      	ldr	r3, [pc, #172]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0f0      	beq.n	8001446 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001464:	4b28      	ldr	r3, [pc, #160]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	4925      	ldr	r1, [pc, #148]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001474:	4313      	orrs	r3, r2
 8001476:	600b      	str	r3, [r1, #0]
 8001478:	e015      	b.n	80014a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800147a:	4b24      	ldr	r3, [pc, #144]	; (800150c <HAL_RCC_OscConfig+0x244>)
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001480:	f7ff fc40 	bl	8000d04 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001488:	f7ff fc3c 	bl	8000d04 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e187      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149a:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f0      	bne.n	8001488 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d036      	beq.n	8001520 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d016      	beq.n	80014e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <HAL_RCC_OscConfig+0x248>)
 80014bc:	2201      	movs	r2, #1
 80014be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c0:	f7ff fc20 	bl	8000d04 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c8:	f7ff fc1c 	bl	8000d04 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e167      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80014dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0x200>
 80014e6:	e01b      	b.n	8001520 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_RCC_OscConfig+0x248>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ee:	f7ff fc09 	bl	8000d04 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f4:	e00e      	b.n	8001514 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f6:	f7ff fc05 	bl	8000d04 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d907      	bls.n	8001514 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e150      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
 8001508:	40023800 	.word	0x40023800
 800150c:	42470000 	.word	0x42470000
 8001510:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001514:	4b88      	ldr	r3, [pc, #544]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1ea      	bne.n	80014f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 8097 	beq.w	800165c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001532:	4b81      	ldr	r3, [pc, #516]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10f      	bne.n	800155e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	4b7d      	ldr	r3, [pc, #500]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a7c      	ldr	r2, [pc, #496]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154c:	6413      	str	r3, [r2, #64]	; 0x40
 800154e:	4b7a      	ldr	r3, [pc, #488]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800155a:	2301      	movs	r3, #1
 800155c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155e:	4b77      	ldr	r3, [pc, #476]	; (800173c <HAL_RCC_OscConfig+0x474>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001566:	2b00      	cmp	r3, #0
 8001568:	d118      	bne.n	800159c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800156a:	4b74      	ldr	r3, [pc, #464]	; (800173c <HAL_RCC_OscConfig+0x474>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a73      	ldr	r2, [pc, #460]	; (800173c <HAL_RCC_OscConfig+0x474>)
 8001570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001576:	f7ff fbc5 	bl	8000d04 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800157e:	f7ff fbc1 	bl	8000d04 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e10c      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001590:	4b6a      	ldr	r3, [pc, #424]	; (800173c <HAL_RCC_OscConfig+0x474>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0f0      	beq.n	800157e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d106      	bne.n	80015b2 <HAL_RCC_OscConfig+0x2ea>
 80015a4:	4b64      	ldr	r3, [pc, #400]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a8:	4a63      	ldr	r2, [pc, #396]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6713      	str	r3, [r2, #112]	; 0x70
 80015b0:	e01c      	b.n	80015ec <HAL_RCC_OscConfig+0x324>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2b05      	cmp	r3, #5
 80015b8:	d10c      	bne.n	80015d4 <HAL_RCC_OscConfig+0x30c>
 80015ba:	4b5f      	ldr	r3, [pc, #380]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015be:	4a5e      	ldr	r2, [pc, #376]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015c0:	f043 0304 	orr.w	r3, r3, #4
 80015c4:	6713      	str	r3, [r2, #112]	; 0x70
 80015c6:	4b5c      	ldr	r3, [pc, #368]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ca:	4a5b      	ldr	r2, [pc, #364]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6713      	str	r3, [r2, #112]	; 0x70
 80015d2:	e00b      	b.n	80015ec <HAL_RCC_OscConfig+0x324>
 80015d4:	4b58      	ldr	r3, [pc, #352]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d8:	4a57      	ldr	r2, [pc, #348]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015da:	f023 0301 	bic.w	r3, r3, #1
 80015de:	6713      	str	r3, [r2, #112]	; 0x70
 80015e0:	4b55      	ldr	r3, [pc, #340]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e4:	4a54      	ldr	r2, [pc, #336]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015e6:	f023 0304 	bic.w	r3, r3, #4
 80015ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d015      	beq.n	8001620 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f4:	f7ff fb86 	bl	8000d04 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015fa:	e00a      	b.n	8001612 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015fc:	f7ff fb82 	bl	8000d04 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	f241 3288 	movw	r2, #5000	; 0x1388
 800160a:	4293      	cmp	r3, r2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e0cb      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001612:	4b49      	ldr	r3, [pc, #292]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0ee      	beq.n	80015fc <HAL_RCC_OscConfig+0x334>
 800161e:	e014      	b.n	800164a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001620:	f7ff fb70 	bl	8000d04 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001626:	e00a      	b.n	800163e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001628:	f7ff fb6c 	bl	8000d04 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	f241 3288 	movw	r2, #5000	; 0x1388
 8001636:	4293      	cmp	r3, r2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e0b5      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800163e:	4b3e      	ldr	r3, [pc, #248]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1ee      	bne.n	8001628 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800164a:	7dfb      	ldrb	r3, [r7, #23]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d105      	bne.n	800165c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001650:	4b39      	ldr	r3, [pc, #228]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	4a38      	ldr	r2, [pc, #224]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001656:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800165a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 80a1 	beq.w	80017a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001666:	4b34      	ldr	r3, [pc, #208]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 030c 	and.w	r3, r3, #12
 800166e:	2b08      	cmp	r3, #8
 8001670:	d05c      	beq.n	800172c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d141      	bne.n	80016fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167a:	4b31      	ldr	r3, [pc, #196]	; (8001740 <HAL_RCC_OscConfig+0x478>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff fb40 	bl	8000d04 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001688:	f7ff fb3c 	bl	8000d04 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e087      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169a:	4b27      	ldr	r3, [pc, #156]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69da      	ldr	r2, [r3, #28]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	019b      	lsls	r3, r3, #6
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016bc:	085b      	lsrs	r3, r3, #1
 80016be:	3b01      	subs	r3, #1
 80016c0:	041b      	lsls	r3, r3, #16
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c8:	061b      	lsls	r3, r3, #24
 80016ca:	491b      	ldr	r1, [pc, #108]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <HAL_RCC_OscConfig+0x478>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d6:	f7ff fb15 	bl	8000d04 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016de:	f7ff fb11 	bl	8000d04 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e05c      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x416>
 80016fc:	e054      	b.n	80017a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <HAL_RCC_OscConfig+0x478>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff fafe 	bl	8000d04 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170c:	f7ff fafa 	bl	8000d04 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e045      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x444>
 800172a:	e03d      	b.n	80017a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d107      	bne.n	8001744 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e038      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
 8001738:	40023800 	.word	0x40023800
 800173c:	40007000 	.word	0x40007000
 8001740:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <HAL_RCC_OscConfig+0x4ec>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d028      	beq.n	80017a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800175c:	429a      	cmp	r2, r3
 800175e:	d121      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176a:	429a      	cmp	r2, r3
 800176c:	d11a      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001774:	4013      	ands	r3, r2
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800177a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800177c:	4293      	cmp	r3, r2
 800177e:	d111      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178a:	085b      	lsrs	r3, r3, #1
 800178c:	3b01      	subs	r3, #1
 800178e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001790:	429a      	cmp	r2, r3
 8001792:	d107      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e000      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800

080017b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d101      	bne.n	80017cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e0cc      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017cc:	4b68      	ldr	r3, [pc, #416]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d90c      	bls.n	80017f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017da:	4b65      	ldr	r3, [pc, #404]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e2:	4b63      	ldr	r3, [pc, #396]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d001      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0b8      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d020      	beq.n	8001842 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	d005      	beq.n	8001818 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800180c:	4b59      	ldr	r3, [pc, #356]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	4a58      	ldr	r2, [pc, #352]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001816:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0308 	and.w	r3, r3, #8
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001824:	4b53      	ldr	r3, [pc, #332]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	4a52      	ldr	r2, [pc, #328]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800182e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001830:	4b50      	ldr	r3, [pc, #320]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	494d      	ldr	r1, [pc, #308]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	4313      	orrs	r3, r2
 8001840:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	d044      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d107      	bne.n	8001866 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001856:	4b47      	ldr	r3, [pc, #284]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d119      	bne.n	8001896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e07f      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d003      	beq.n	8001876 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001872:	2b03      	cmp	r3, #3
 8001874:	d107      	bne.n	8001886 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001876:	4b3f      	ldr	r3, [pc, #252]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d109      	bne.n	8001896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e06f      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001886:	4b3b      	ldr	r3, [pc, #236]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e067      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001896:	4b37      	ldr	r3, [pc, #220]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f023 0203 	bic.w	r2, r3, #3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	4934      	ldr	r1, [pc, #208]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018a8:	f7ff fa2c 	bl	8000d04 <HAL_GetTick>
 80018ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ae:	e00a      	b.n	80018c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b0:	f7ff fa28 	bl	8000d04 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80018be:	4293      	cmp	r3, r2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e04f      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c6:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 020c 	and.w	r2, r3, #12
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d1eb      	bne.n	80018b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018d8:	4b25      	ldr	r3, [pc, #148]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d20c      	bcs.n	8001900 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e6:	4b22      	ldr	r3, [pc, #136]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e032      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	2b00      	cmp	r3, #0
 800190a:	d008      	beq.n	800191e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800190c:	4b19      	ldr	r3, [pc, #100]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	4916      	ldr	r1, [pc, #88]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	4313      	orrs	r3, r2
 800191c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d009      	beq.n	800193e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800192a:	4b12      	ldr	r3, [pc, #72]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	490e      	ldr	r1, [pc, #56]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	4313      	orrs	r3, r2
 800193c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800193e:	f000 f821 	bl	8001984 <HAL_RCC_GetSysClockFreq>
 8001942:	4602      	mov	r2, r0
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	091b      	lsrs	r3, r3, #4
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	490a      	ldr	r1, [pc, #40]	; (8001978 <HAL_RCC_ClockConfig+0x1c0>)
 8001950:	5ccb      	ldrb	r3, [r1, r3]
 8001952:	fa22 f303 	lsr.w	r3, r2, r3
 8001956:	4a09      	ldr	r2, [pc, #36]	; (800197c <HAL_RCC_ClockConfig+0x1c4>)
 8001958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_RCC_ClockConfig+0x1c8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff f8c2 	bl	8000ae8 <HAL_InitTick>

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40023c00 	.word	0x40023c00
 8001974:	40023800 	.word	0x40023800
 8001978:	08005d30 	.word	0x08005d30
 800197c:	20000000 	.word	0x20000000
 8001980:	20000004 	.word	0x20000004

08001984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001988:	b094      	sub	sp, #80	; 0x50
 800198a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	647b      	str	r3, [r7, #68]	; 0x44
 8001990:	2300      	movs	r3, #0
 8001992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001994:	2300      	movs	r3, #0
 8001996:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800199c:	4b79      	ldr	r3, [pc, #484]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 030c 	and.w	r3, r3, #12
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d00d      	beq.n	80019c4 <HAL_RCC_GetSysClockFreq+0x40>
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	f200 80e1 	bhi.w	8001b70 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d002      	beq.n	80019b8 <HAL_RCC_GetSysClockFreq+0x34>
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d003      	beq.n	80019be <HAL_RCC_GetSysClockFreq+0x3a>
 80019b6:	e0db      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019b8:	4b73      	ldr	r3, [pc, #460]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x204>)
 80019ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019bc:	e0db      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019be:	4b73      	ldr	r3, [pc, #460]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x208>)
 80019c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019c2:	e0d8      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019c4:	4b6f      	ldr	r3, [pc, #444]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ce:	4b6d      	ldr	r3, [pc, #436]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d063      	beq.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019da:	4b6a      	ldr	r3, [pc, #424]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	099b      	lsrs	r3, r3, #6
 80019e0:	2200      	movs	r2, #0
 80019e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80019e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ec:	633b      	str	r3, [r7, #48]	; 0x30
 80019ee:	2300      	movs	r3, #0
 80019f0:	637b      	str	r3, [r7, #52]	; 0x34
 80019f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019f6:	4622      	mov	r2, r4
 80019f8:	462b      	mov	r3, r5
 80019fa:	f04f 0000 	mov.w	r0, #0
 80019fe:	f04f 0100 	mov.w	r1, #0
 8001a02:	0159      	lsls	r1, r3, #5
 8001a04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a08:	0150      	lsls	r0, r2, #5
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4621      	mov	r1, r4
 8001a10:	1a51      	subs	r1, r2, r1
 8001a12:	6139      	str	r1, [r7, #16]
 8001a14:	4629      	mov	r1, r5
 8001a16:	eb63 0301 	sbc.w	r3, r3, r1
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a28:	4659      	mov	r1, fp
 8001a2a:	018b      	lsls	r3, r1, #6
 8001a2c:	4651      	mov	r1, sl
 8001a2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a32:	4651      	mov	r1, sl
 8001a34:	018a      	lsls	r2, r1, #6
 8001a36:	4651      	mov	r1, sl
 8001a38:	ebb2 0801 	subs.w	r8, r2, r1
 8001a3c:	4659      	mov	r1, fp
 8001a3e:	eb63 0901 	sbc.w	r9, r3, r1
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a56:	4690      	mov	r8, r2
 8001a58:	4699      	mov	r9, r3
 8001a5a:	4623      	mov	r3, r4
 8001a5c:	eb18 0303 	adds.w	r3, r8, r3
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	462b      	mov	r3, r5
 8001a64:	eb49 0303 	adc.w	r3, r9, r3
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a76:	4629      	mov	r1, r5
 8001a78:	024b      	lsls	r3, r1, #9
 8001a7a:	4621      	mov	r1, r4
 8001a7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a80:	4621      	mov	r1, r4
 8001a82:	024a      	lsls	r2, r1, #9
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a94:	f7fe fbe6 	bl	8000264 <__aeabi_uldivmod>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001aa0:	e058      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aa2:	4b38      	ldr	r3, [pc, #224]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	099b      	lsrs	r3, r3, #6
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	4611      	mov	r1, r2
 8001aae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ab2:	623b      	str	r3, [r7, #32]
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001abc:	4642      	mov	r2, r8
 8001abe:	464b      	mov	r3, r9
 8001ac0:	f04f 0000 	mov.w	r0, #0
 8001ac4:	f04f 0100 	mov.w	r1, #0
 8001ac8:	0159      	lsls	r1, r3, #5
 8001aca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ace:	0150      	lsls	r0, r2, #5
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4641      	mov	r1, r8
 8001ad6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ada:	4649      	mov	r1, r9
 8001adc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001aec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001af0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001af4:	ebb2 040a 	subs.w	r4, r2, sl
 8001af8:	eb63 050b 	sbc.w	r5, r3, fp
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	00eb      	lsls	r3, r5, #3
 8001b06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b0a:	00e2      	lsls	r2, r4, #3
 8001b0c:	4614      	mov	r4, r2
 8001b0e:	461d      	mov	r5, r3
 8001b10:	4643      	mov	r3, r8
 8001b12:	18e3      	adds	r3, r4, r3
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	464b      	mov	r3, r9
 8001b18:	eb45 0303 	adc.w	r3, r5, r3
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b2a:	4629      	mov	r1, r5
 8001b2c:	028b      	lsls	r3, r1, #10
 8001b2e:	4621      	mov	r1, r4
 8001b30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b34:	4621      	mov	r1, r4
 8001b36:	028a      	lsls	r2, r1, #10
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b3e:	2200      	movs	r2, #0
 8001b40:	61bb      	str	r3, [r7, #24]
 8001b42:	61fa      	str	r2, [r7, #28]
 8001b44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b48:	f7fe fb8c 	bl	8000264 <__aeabi_uldivmod>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4613      	mov	r3, r2
 8001b52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	0c1b      	lsrs	r3, r3, #16
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	3301      	adds	r3, #1
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b6e:	e002      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3750      	adds	r7, #80	; 0x50
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800
 8001b88:	00f42400 	.word	0x00f42400
 8001b8c:	007a1200 	.word	0x007a1200

08001b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b96:	681b      	ldr	r3, [r3, #0]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000000 	.word	0x20000000

08001ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bac:	f7ff fff0 	bl	8001b90 <HAL_RCC_GetHCLKFreq>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	0a9b      	lsrs	r3, r3, #10
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	4903      	ldr	r1, [pc, #12]	; (8001bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bbe:	5ccb      	ldrb	r3, [r1, r3]
 8001bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	08005d40 	.word	0x08005d40

08001bd0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	220f      	movs	r2, #15
 8001bde:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001be0:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <HAL_RCC_GetClockConfig+0x5c>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 0203 	and.w	r2, r3, #3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bec:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <HAL_RCC_GetClockConfig+0x5c>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <HAL_RCC_GetClockConfig+0x5c>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c04:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <HAL_RCC_GetClockConfig+0x5c>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	08db      	lsrs	r3, r3, #3
 8001c0a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c12:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <HAL_RCC_GetClockConfig+0x60>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0207 	and.w	r2, r3, #7
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	601a      	str	r2, [r3, #0]
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40023c00 	.word	0x40023c00

08001c34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e041      	b.n	8001cca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d106      	bne.n	8001c60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f839 	bl	8001cd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2202      	movs	r2, #2
 8001c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3304      	adds	r3, #4
 8001c70:	4619      	mov	r1, r3
 8001c72:	4610      	mov	r0, r2
 8001c74:	f000 f9d8 	bl	8002028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
	...

08001ce8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d001      	beq.n	8001d00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e04e      	b.n	8001d9e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2202      	movs	r2, #2
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0201 	orr.w	r2, r2, #1
 8001d16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a23      	ldr	r2, [pc, #140]	; (8001dac <HAL_TIM_Base_Start_IT+0xc4>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d022      	beq.n	8001d68 <HAL_TIM_Base_Start_IT+0x80>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d2a:	d01d      	beq.n	8001d68 <HAL_TIM_Base_Start_IT+0x80>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a1f      	ldr	r2, [pc, #124]	; (8001db0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d018      	beq.n	8001d68 <HAL_TIM_Base_Start_IT+0x80>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a1e      	ldr	r2, [pc, #120]	; (8001db4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d013      	beq.n	8001d68 <HAL_TIM_Base_Start_IT+0x80>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a1c      	ldr	r2, [pc, #112]	; (8001db8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d00e      	beq.n	8001d68 <HAL_TIM_Base_Start_IT+0x80>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a1b      	ldr	r2, [pc, #108]	; (8001dbc <HAL_TIM_Base_Start_IT+0xd4>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d009      	beq.n	8001d68 <HAL_TIM_Base_Start_IT+0x80>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a19      	ldr	r2, [pc, #100]	; (8001dc0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d004      	beq.n	8001d68 <HAL_TIM_Base_Start_IT+0x80>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a18      	ldr	r2, [pc, #96]	; (8001dc4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d111      	bne.n	8001d8c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2b06      	cmp	r3, #6
 8001d78:	d010      	beq.n	8001d9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f042 0201 	orr.w	r2, r2, #1
 8001d88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d8a:	e007      	b.n	8001d9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0201 	orr.w	r2, r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40010000 	.word	0x40010000
 8001db0:	40000400 	.word	0x40000400
 8001db4:	40000800 	.word	0x40000800
 8001db8:	40000c00 	.word	0x40000c00
 8001dbc:	40010400 	.word	0x40010400
 8001dc0:	40014000 	.word	0x40014000
 8001dc4:	40001800 	.word	0x40001800

08001dc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d122      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d11b      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f06f 0202 	mvn.w	r2, #2
 8001df4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f8ee 	bl	8001fec <HAL_TIM_IC_CaptureCallback>
 8001e10:	e005      	b.n	8001e1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f8e0 	bl	8001fd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f8f1 	bl	8002000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	d122      	bne.n	8001e78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	d11b      	bne.n	8001e78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f06f 0204 	mvn.w	r2, #4
 8001e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f8c4 	bl	8001fec <HAL_TIM_IC_CaptureCallback>
 8001e64:	e005      	b.n	8001e72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f8b6 	bl	8001fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f8c7 	bl	8002000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d122      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f003 0308 	and.w	r3, r3, #8
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d11b      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f06f 0208 	mvn.w	r2, #8
 8001e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2204      	movs	r2, #4
 8001ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f89a 	bl	8001fec <HAL_TIM_IC_CaptureCallback>
 8001eb8:	e005      	b.n	8001ec6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f88c 	bl	8001fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f89d 	bl	8002000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f003 0310 	and.w	r3, r3, #16
 8001ed6:	2b10      	cmp	r3, #16
 8001ed8:	d122      	bne.n	8001f20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f003 0310 	and.w	r3, r3, #16
 8001ee4:	2b10      	cmp	r3, #16
 8001ee6:	d11b      	bne.n	8001f20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f06f 0210 	mvn.w	r2, #16
 8001ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2208      	movs	r2, #8
 8001ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f870 	bl	8001fec <HAL_TIM_IC_CaptureCallback>
 8001f0c:	e005      	b.n	8001f1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f862 	bl	8001fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f873 	bl	8002000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d10e      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d107      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f06f 0201 	mvn.w	r2, #1
 8001f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7fe fd8c 	bl	8000a64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f56:	2b80      	cmp	r3, #128	; 0x80
 8001f58:	d10e      	bne.n	8001f78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f64:	2b80      	cmp	r3, #128	; 0x80
 8001f66:	d107      	bne.n	8001f78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f902 	bl	800217c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f82:	2b40      	cmp	r3, #64	; 0x40
 8001f84:	d10e      	bne.n	8001fa4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f90:	2b40      	cmp	r3, #64	; 0x40
 8001f92:	d107      	bne.n	8001fa4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f838 	bl	8002014 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	f003 0320 	and.w	r3, r3, #32
 8001fae:	2b20      	cmp	r3, #32
 8001fb0:	d10e      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f003 0320 	and.w	r3, r3, #32
 8001fbc:	2b20      	cmp	r3, #32
 8001fbe:	d107      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f06f 0220 	mvn.w	r2, #32
 8001fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f8cc 	bl	8002168 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a40      	ldr	r2, [pc, #256]	; (800213c <TIM_Base_SetConfig+0x114>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d013      	beq.n	8002068 <TIM_Base_SetConfig+0x40>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002046:	d00f      	beq.n	8002068 <TIM_Base_SetConfig+0x40>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a3d      	ldr	r2, [pc, #244]	; (8002140 <TIM_Base_SetConfig+0x118>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d00b      	beq.n	8002068 <TIM_Base_SetConfig+0x40>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a3c      	ldr	r2, [pc, #240]	; (8002144 <TIM_Base_SetConfig+0x11c>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d007      	beq.n	8002068 <TIM_Base_SetConfig+0x40>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a3b      	ldr	r2, [pc, #236]	; (8002148 <TIM_Base_SetConfig+0x120>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d003      	beq.n	8002068 <TIM_Base_SetConfig+0x40>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a3a      	ldr	r2, [pc, #232]	; (800214c <TIM_Base_SetConfig+0x124>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d108      	bne.n	800207a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800206e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a2f      	ldr	r2, [pc, #188]	; (800213c <TIM_Base_SetConfig+0x114>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d02b      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002088:	d027      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a2c      	ldr	r2, [pc, #176]	; (8002140 <TIM_Base_SetConfig+0x118>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d023      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a2b      	ldr	r2, [pc, #172]	; (8002144 <TIM_Base_SetConfig+0x11c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d01f      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a2a      	ldr	r2, [pc, #168]	; (8002148 <TIM_Base_SetConfig+0x120>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d01b      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a29      	ldr	r2, [pc, #164]	; (800214c <TIM_Base_SetConfig+0x124>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d017      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a28      	ldr	r2, [pc, #160]	; (8002150 <TIM_Base_SetConfig+0x128>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d013      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a27      	ldr	r2, [pc, #156]	; (8002154 <TIM_Base_SetConfig+0x12c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d00f      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a26      	ldr	r2, [pc, #152]	; (8002158 <TIM_Base_SetConfig+0x130>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d00b      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a25      	ldr	r2, [pc, #148]	; (800215c <TIM_Base_SetConfig+0x134>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d007      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a24      	ldr	r2, [pc, #144]	; (8002160 <TIM_Base_SetConfig+0x138>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d003      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a23      	ldr	r2, [pc, #140]	; (8002164 <TIM_Base_SetConfig+0x13c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d108      	bne.n	80020ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a0a      	ldr	r2, [pc, #40]	; (800213c <TIM_Base_SetConfig+0x114>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d003      	beq.n	8002120 <TIM_Base_SetConfig+0xf8>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a0c      	ldr	r2, [pc, #48]	; (800214c <TIM_Base_SetConfig+0x124>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d103      	bne.n	8002128 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	691a      	ldr	r2, [r3, #16]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	615a      	str	r2, [r3, #20]
}
 800212e:	bf00      	nop
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40010000 	.word	0x40010000
 8002140:	40000400 	.word	0x40000400
 8002144:	40000800 	.word	0x40000800
 8002148:	40000c00 	.word	0x40000c00
 800214c:	40010400 	.word	0x40010400
 8002150:	40014000 	.word	0x40014000
 8002154:	40014400 	.word	0x40014400
 8002158:	40014800 	.word	0x40014800
 800215c:	40001800 	.word	0x40001800
 8002160:	40001c00 	.word	0x40001c00
 8002164:	40002000 	.word	0x40002000

08002168 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f103 0208 	add.w	r2, r3, #8
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f04f 32ff 	mov.w	r2, #4294967295
 80021a8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f103 0208 	add.w	r2, r3, #8
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f103 0208 	add.w	r2, r3, #8
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80021ea:	b480      	push	{r7}
 80021ec:	b085      	sub	sp, #20
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	601a      	str	r2, [r3, #0]
}
 8002226:	bf00      	nop
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002232:	b480      	push	{r7}
 8002234:	b085      	sub	sp, #20
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6892      	ldr	r2, [r2, #8]
 8002248:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6852      	ldr	r2, [r2, #4]
 8002252:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	429a      	cmp	r2, r3
 800225c:	d103      	bne.n	8002266 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	1e5a      	subs	r2, r3, #1
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002286:	b580      	push	{r7, lr}
 8002288:	b08c      	sub	sp, #48	; 0x30
 800228a:	af04      	add	r7, sp, #16
 800228c:	60f8      	str	r0, [r7, #12]
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	603b      	str	r3, [r7, #0]
 8002292:	4613      	mov	r3, r2
 8002294:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002296:	88fb      	ldrh	r3, [r7, #6]
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4618      	mov	r0, r3
 800229c:	f000 ff26 	bl	80030ec <pvPortMalloc>
 80022a0:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00e      	beq.n	80022c6 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80022a8:	2058      	movs	r0, #88	; 0x58
 80022aa:	f000 ff1f 	bl	80030ec <pvPortMalloc>
 80022ae:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	631a      	str	r2, [r3, #48]	; 0x30
 80022bc:	e005      	b.n	80022ca <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80022be:	6978      	ldr	r0, [r7, #20]
 80022c0:	f000 fff4 	bl	80032ac <vPortFree>
 80022c4:	e001      	b.n	80022ca <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d013      	beq.n	80022f8 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80022d0:	88fa      	ldrh	r2, [r7, #6]
 80022d2:	2300      	movs	r3, #0
 80022d4:	9303      	str	r3, [sp, #12]
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	9302      	str	r3, [sp, #8]
 80022da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022dc:	9301      	str	r3, [sp, #4]
 80022de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 f80e 	bl	8002308 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80022ec:	69f8      	ldr	r0, [r7, #28]
 80022ee:	f000 f8a1 	bl	8002434 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80022f2:	2301      	movs	r3, #1
 80022f4:	61bb      	str	r3, [r7, #24]
 80022f6:	e002      	b.n	80022fe <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80022f8:	f04f 33ff 	mov.w	r3, #4294967295
 80022fc:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80022fe:	69bb      	ldr	r3, [r7, #24]
    }
 8002300:	4618      	mov	r0, r3
 8002302:	3720      	adds	r7, #32
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
 8002314:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002318:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	461a      	mov	r2, r3
 8002320:	21a5      	movs	r1, #165	; 0xa5
 8002322:	f003 fc53 	bl	8005bcc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002328:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002330:	3b01      	subs	r3, #1
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	f023 0307 	bic.w	r3, r3, #7
 800233e:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00a      	beq.n	8002360 <prvInitialiseNewTask+0x58>
        __asm volatile
 800234a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800234e:	f383 8811 	msr	BASEPRI, r3
 8002352:	f3bf 8f6f 	isb	sy
 8002356:	f3bf 8f4f 	dsb	sy
 800235a:	617b      	str	r3, [r7, #20]
    }
 800235c:	bf00      	nop
 800235e:	e7fe      	b.n	800235e <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d01f      	beq.n	80023a6 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
 800236a:	e012      	b.n	8002392 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	4413      	add	r3, r2
 8002372:	7819      	ldrb	r1, [r3, #0]
 8002374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	4413      	add	r3, r2
 800237a:	3334      	adds	r3, #52	; 0x34
 800237c:	460a      	mov	r2, r1
 800237e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	4413      	add	r3, r2
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d006      	beq.n	800239a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	3301      	adds	r3, #1
 8002390:	61fb      	str	r3, [r7, #28]
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	2b09      	cmp	r3, #9
 8002396:	d9e9      	bls.n	800236c <prvInitialiseNewTask+0x64>
 8002398:	e000      	b.n	800239c <prvInitialiseNewTask+0x94>
            {
                break;
 800239a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800239c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80023a4:	e003      	b.n	80023ae <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80023a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80023ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d901      	bls.n	80023b8 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80023b4:	2304      	movs	r3, #4
 80023b6:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80023b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023bc:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80023be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023c2:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80023c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c6:	2200      	movs	r2, #0
 80023c8:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80023ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023cc:	3304      	adds	r3, #4
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fefe 	bl	80021d0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80023d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d6:	3318      	adds	r3, #24
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fef9 	bl	80021d0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80023de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023e2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e6:	f1c3 0205 	rsb	r2, r3, #5
 80023ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ec:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80023ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023f2:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80023f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f6:	3350      	adds	r3, #80	; 0x50
 80023f8:	2204      	movs	r2, #4
 80023fa:	2100      	movs	r1, #0
 80023fc:	4618      	mov	r0, r3
 80023fe:	f003 fbe5 	bl	8005bcc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002404:	3354      	adds	r3, #84	; 0x54
 8002406:	2201      	movs	r2, #1
 8002408:	2100      	movs	r1, #0
 800240a:	4618      	mov	r0, r3
 800240c:	f003 fbde 	bl	8005bcc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	68f9      	ldr	r1, [r7, #12]
 8002414:	69b8      	ldr	r0, [r7, #24]
 8002416:	f000 fb8d 	bl	8002b34 <pxPortInitialiseStack>
 800241a:	4602      	mov	r2, r0
 800241c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800242a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800242c:	bf00      	nop
 800242e:	3720      	adds	r7, #32
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002434:	b5b0      	push	{r4, r5, r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af02      	add	r7, sp, #8
 800243a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800243c:	f000 fd2a 	bl	8002e94 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002440:	4b3b      	ldr	r3, [pc, #236]	; (8002530 <prvAddNewTaskToReadyList+0xfc>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	3301      	adds	r3, #1
 8002446:	4a3a      	ldr	r2, [pc, #232]	; (8002530 <prvAddNewTaskToReadyList+0xfc>)
 8002448:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800244a:	4b3a      	ldr	r3, [pc, #232]	; (8002534 <prvAddNewTaskToReadyList+0x100>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d109      	bne.n	8002466 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002452:	4a38      	ldr	r2, [pc, #224]	; (8002534 <prvAddNewTaskToReadyList+0x100>)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002458:	4b35      	ldr	r3, [pc, #212]	; (8002530 <prvAddNewTaskToReadyList+0xfc>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d110      	bne.n	8002482 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002460:	f000 face 	bl	8002a00 <prvInitialiseTaskLists>
 8002464:	e00d      	b.n	8002482 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002466:	4b34      	ldr	r3, [pc, #208]	; (8002538 <prvAddNewTaskToReadyList+0x104>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d109      	bne.n	8002482 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800246e:	4b31      	ldr	r3, [pc, #196]	; (8002534 <prvAddNewTaskToReadyList+0x100>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	429a      	cmp	r2, r3
 800247a:	d802      	bhi.n	8002482 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800247c:	4a2d      	ldr	r2, [pc, #180]	; (8002534 <prvAddNewTaskToReadyList+0x100>)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002482:	4b2e      	ldr	r3, [pc, #184]	; (800253c <prvAddNewTaskToReadyList+0x108>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	3301      	adds	r3, #1
 8002488:	4a2c      	ldr	r2, [pc, #176]	; (800253c <prvAddNewTaskToReadyList+0x108>)
 800248a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800248c:	4b2b      	ldr	r3, [pc, #172]	; (800253c <prvAddNewTaskToReadyList+0x108>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d016      	beq.n	80024c8 <prvAddNewTaskToReadyList+0x94>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4618      	mov	r0, r3
 800249e:	f003 f913 	bl	80056c8 <SEGGER_SYSVIEW_OnTaskCreate>
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	461d      	mov	r5, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	461c      	mov	r4, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	1ae3      	subs	r3, r4, r3
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	462b      	mov	r3, r5
 80024c4:	f001 f8c0 	bl	8003648 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f003 f980 	bl	80057d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d4:	2201      	movs	r2, #1
 80024d6:	409a      	lsls	r2, r3
 80024d8:	4b19      	ldr	r3, [pc, #100]	; (8002540 <prvAddNewTaskToReadyList+0x10c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4313      	orrs	r3, r2
 80024de:	4a18      	ldr	r2, [pc, #96]	; (8002540 <prvAddNewTaskToReadyList+0x10c>)
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4a15      	ldr	r2, [pc, #84]	; (8002544 <prvAddNewTaskToReadyList+0x110>)
 80024f0:	441a      	add	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3304      	adds	r3, #4
 80024f6:	4619      	mov	r1, r3
 80024f8:	4610      	mov	r0, r2
 80024fa:	f7ff fe76 	bl	80021ea <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80024fe:	f000 fcf9 	bl	8002ef4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002502:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <prvAddNewTaskToReadyList+0x104>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00e      	beq.n	8002528 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800250a:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <prvAddNewTaskToReadyList+0x100>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	429a      	cmp	r2, r3
 8002516:	d207      	bcs.n	8002528 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <prvAddNewTaskToReadyList+0x114>)
 800251a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	f3bf 8f4f 	dsb	sy
 8002524:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002528:	bf00      	nop
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bdb0      	pop	{r4, r5, r7, pc}
 8002530:	2000015c 	.word	0x2000015c
 8002534:	20000084 	.word	0x20000084
 8002538:	20000168 	.word	0x20000168
 800253c:	20000178 	.word	0x20000178
 8002540:	20000164 	.word	0x20000164
 8002544:	20000088 	.word	0x20000088
 8002548:	e000ed04 	.word	0xe000ed04

0800254c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002552:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <vTaskStartScheduler+0x98>)
 8002554:	9301      	str	r3, [sp, #4]
 8002556:	2300      	movs	r3, #0
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	2300      	movs	r3, #0
 800255c:	2282      	movs	r2, #130	; 0x82
 800255e:	4922      	ldr	r1, [pc, #136]	; (80025e8 <vTaskStartScheduler+0x9c>)
 8002560:	4822      	ldr	r0, [pc, #136]	; (80025ec <vTaskStartScheduler+0xa0>)
 8002562:	f7ff fe90 	bl	8002286 <xTaskCreate>
 8002566:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d124      	bne.n	80025b8 <vTaskStartScheduler+0x6c>
        __asm volatile
 800256e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002572:	f383 8811 	msr	BASEPRI, r3
 8002576:	f3bf 8f6f 	isb	sy
 800257a:	f3bf 8f4f 	dsb	sy
 800257e:	60bb      	str	r3, [r7, #8]
    }
 8002580:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002582:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <vTaskStartScheduler+0xa4>)
 8002584:	f04f 32ff 	mov.w	r2, #4294967295
 8002588:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800258a:	4b1a      	ldr	r3, [pc, #104]	; (80025f4 <vTaskStartScheduler+0xa8>)
 800258c:	2201      	movs	r2, #1
 800258e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002590:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <vTaskStartScheduler+0xac>)
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002596:	4b19      	ldr	r3, [pc, #100]	; (80025fc <vTaskStartScheduler+0xb0>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <vTaskStartScheduler+0x98>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d102      	bne.n	80025a8 <vTaskStartScheduler+0x5c>
 80025a2:	f003 f875 	bl	8005690 <SEGGER_SYSVIEW_OnIdle>
 80025a6:	e004      	b.n	80025b2 <vTaskStartScheduler+0x66>
 80025a8:	4b14      	ldr	r3, [pc, #80]	; (80025fc <vTaskStartScheduler+0xb0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f003 f8cd 	bl	800574c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80025b2:	f000 fb4f 	bl	8002c54 <xPortStartScheduler>
 80025b6:	e00e      	b.n	80025d6 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025be:	d10a      	bne.n	80025d6 <vTaskStartScheduler+0x8a>
        __asm volatile
 80025c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c4:	f383 8811 	msr	BASEPRI, r3
 80025c8:	f3bf 8f6f 	isb	sy
 80025cc:	f3bf 8f4f 	dsb	sy
 80025d0:	607b      	str	r3, [r7, #4]
    }
 80025d2:	bf00      	nop
 80025d4:	e7fe      	b.n	80025d4 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80025d6:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <vTaskStartScheduler+0xb4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
}
 80025da:	bf00      	nop
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000180 	.word	0x20000180
 80025e8:	08005c68 	.word	0x08005c68
 80025ec:	080029d1 	.word	0x080029d1
 80025f0:	2000017c 	.word	0x2000017c
 80025f4:	20000168 	.word	0x20000168
 80025f8:	20000160 	.word	0x20000160
 80025fc:	20000084 	.word	0x20000084
 8002600:	2000000c 	.word	0x2000000c

08002604 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002608:	4b04      	ldr	r3, [pc, #16]	; (800261c <vTaskSuspendAll+0x18>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	3301      	adds	r3, #1
 800260e:	4a03      	ldr	r2, [pc, #12]	; (800261c <vTaskSuspendAll+0x18>)
 8002610:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002612:	bf00      	nop
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	20000184 	.word	0x20000184

08002620 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800262a:	2300      	movs	r3, #0
 800262c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800262e:	4b43      	ldr	r3, [pc, #268]	; (800273c <xTaskResumeAll+0x11c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10a      	bne.n	800264c <xTaskResumeAll+0x2c>
        __asm volatile
 8002636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800263a:	f383 8811 	msr	BASEPRI, r3
 800263e:	f3bf 8f6f 	isb	sy
 8002642:	f3bf 8f4f 	dsb	sy
 8002646:	603b      	str	r3, [r7, #0]
    }
 8002648:	bf00      	nop
 800264a:	e7fe      	b.n	800264a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800264c:	f000 fc22 	bl	8002e94 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002650:	4b3a      	ldr	r3, [pc, #232]	; (800273c <xTaskResumeAll+0x11c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	3b01      	subs	r3, #1
 8002656:	4a39      	ldr	r2, [pc, #228]	; (800273c <xTaskResumeAll+0x11c>)
 8002658:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800265a:	4b38      	ldr	r3, [pc, #224]	; (800273c <xTaskResumeAll+0x11c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d165      	bne.n	800272e <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002662:	4b37      	ldr	r3, [pc, #220]	; (8002740 <xTaskResumeAll+0x120>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d061      	beq.n	800272e <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800266a:	e032      	b.n	80026d2 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800266c:	4b35      	ldr	r3, [pc, #212]	; (8002744 <xTaskResumeAll+0x124>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	3318      	adds	r3, #24
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fdda 	bl	8002232 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	3304      	adds	r3, #4
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fdd5 	bl	8002232 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4618      	mov	r0, r3
 800268c:	f003 f8a0 	bl	80057d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002694:	2201      	movs	r2, #1
 8002696:	409a      	lsls	r2, r3
 8002698:	4b2b      	ldr	r3, [pc, #172]	; (8002748 <xTaskResumeAll+0x128>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4313      	orrs	r3, r2
 800269e:	4a2a      	ldr	r2, [pc, #168]	; (8002748 <xTaskResumeAll+0x128>)
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4a27      	ldr	r2, [pc, #156]	; (800274c <xTaskResumeAll+0x12c>)
 80026b0:	441a      	add	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	3304      	adds	r3, #4
 80026b6:	4619      	mov	r1, r3
 80026b8:	4610      	mov	r0, r2
 80026ba:	f7ff fd96 	bl	80021ea <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c2:	4b23      	ldr	r3, [pc, #140]	; (8002750 <xTaskResumeAll+0x130>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d302      	bcc.n	80026d2 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80026cc:	4b21      	ldr	r3, [pc, #132]	; (8002754 <xTaskResumeAll+0x134>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026d2:	4b1c      	ldr	r3, [pc, #112]	; (8002744 <xTaskResumeAll+0x124>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1c8      	bne.n	800266c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80026e0:	f000 fa0c 	bl	8002afc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80026e4:	4b1c      	ldr	r3, [pc, #112]	; (8002758 <xTaskResumeAll+0x138>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d010      	beq.n	8002712 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80026f0:	f000 f848 	bl	8002784 <xTaskIncrementTick>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80026fa:	4b16      	ldr	r3, [pc, #88]	; (8002754 <xTaskResumeAll+0x134>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3b01      	subs	r3, #1
 8002704:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1f1      	bne.n	80026f0 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800270c:	4b12      	ldr	r3, [pc, #72]	; (8002758 <xTaskResumeAll+0x138>)
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002712:	4b10      	ldr	r3, [pc, #64]	; (8002754 <xTaskResumeAll+0x134>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d009      	beq.n	800272e <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800271a:	2301      	movs	r3, #1
 800271c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800271e:	4b0f      	ldr	r3, [pc, #60]	; (800275c <xTaskResumeAll+0x13c>)
 8002720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	f3bf 8f4f 	dsb	sy
 800272a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800272e:	f000 fbe1 	bl	8002ef4 <vPortExitCritical>

    return xAlreadyYielded;
 8002732:	68bb      	ldr	r3, [r7, #8]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	20000184 	.word	0x20000184
 8002740:	2000015c 	.word	0x2000015c
 8002744:	2000011c 	.word	0x2000011c
 8002748:	20000164 	.word	0x20000164
 800274c:	20000088 	.word	0x20000088
 8002750:	20000084 	.word	0x20000084
 8002754:	20000170 	.word	0x20000170
 8002758:	2000016c 	.word	0x2000016c
 800275c:	e000ed04 	.word	0xe000ed04

08002760 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002766:	f000 fc81 	bl	800306c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800276a:	2300      	movs	r3, #0
 800276c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800276e:	4b04      	ldr	r3, [pc, #16]	; (8002780 <xTaskGetTickCountFromISR+0x20>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002774:	683b      	ldr	r3, [r7, #0]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20000160 	.word	0x20000160

08002784 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800278e:	4b50      	ldr	r3, [pc, #320]	; (80028d0 <xTaskIncrementTick+0x14c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	f040 8092 	bne.w	80028bc <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002798:	4b4e      	ldr	r3, [pc, #312]	; (80028d4 <xTaskIncrementTick+0x150>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	3301      	adds	r3, #1
 800279e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80027a0:	4a4c      	ldr	r2, [pc, #304]	; (80028d4 <xTaskIncrementTick+0x150>)
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d120      	bne.n	80027ee <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80027ac:	4b4a      	ldr	r3, [pc, #296]	; (80028d8 <xTaskIncrementTick+0x154>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00a      	beq.n	80027cc <xTaskIncrementTick+0x48>
        __asm volatile
 80027b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ba:	f383 8811 	msr	BASEPRI, r3
 80027be:	f3bf 8f6f 	isb	sy
 80027c2:	f3bf 8f4f 	dsb	sy
 80027c6:	603b      	str	r3, [r7, #0]
    }
 80027c8:	bf00      	nop
 80027ca:	e7fe      	b.n	80027ca <xTaskIncrementTick+0x46>
 80027cc:	4b42      	ldr	r3, [pc, #264]	; (80028d8 <xTaskIncrementTick+0x154>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	4b42      	ldr	r3, [pc, #264]	; (80028dc <xTaskIncrementTick+0x158>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a40      	ldr	r2, [pc, #256]	; (80028d8 <xTaskIncrementTick+0x154>)
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	4a40      	ldr	r2, [pc, #256]	; (80028dc <xTaskIncrementTick+0x158>)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6013      	str	r3, [r2, #0]
 80027e0:	4b3f      	ldr	r3, [pc, #252]	; (80028e0 <xTaskIncrementTick+0x15c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	3301      	adds	r3, #1
 80027e6:	4a3e      	ldr	r2, [pc, #248]	; (80028e0 <xTaskIncrementTick+0x15c>)
 80027e8:	6013      	str	r3, [r2, #0]
 80027ea:	f000 f987 	bl	8002afc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80027ee:	4b3d      	ldr	r3, [pc, #244]	; (80028e4 <xTaskIncrementTick+0x160>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d34c      	bcc.n	8002892 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027f8:	4b37      	ldr	r3, [pc, #220]	; (80028d8 <xTaskIncrementTick+0x154>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d104      	bne.n	800280c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002802:	4b38      	ldr	r3, [pc, #224]	; (80028e4 <xTaskIncrementTick+0x160>)
 8002804:	f04f 32ff 	mov.w	r2, #4294967295
 8002808:	601a      	str	r2, [r3, #0]
                    break;
 800280a:	e042      	b.n	8002892 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800280c:	4b32      	ldr	r3, [pc, #200]	; (80028d8 <xTaskIncrementTick+0x154>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	429a      	cmp	r2, r3
 8002822:	d203      	bcs.n	800282c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002824:	4a2f      	ldr	r2, [pc, #188]	; (80028e4 <xTaskIncrementTick+0x160>)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800282a:	e032      	b.n	8002892 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	3304      	adds	r3, #4
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff fcfe 	bl	8002232 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283a:	2b00      	cmp	r3, #0
 800283c:	d004      	beq.n	8002848 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	3318      	adds	r3, #24
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fcf5 	bl	8002232 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	4618      	mov	r0, r3
 800284c:	f002 ffc0 	bl	80057d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	2201      	movs	r2, #1
 8002856:	409a      	lsls	r2, r3
 8002858:	4b23      	ldr	r3, [pc, #140]	; (80028e8 <xTaskIncrementTick+0x164>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4313      	orrs	r3, r2
 800285e:	4a22      	ldr	r2, [pc, #136]	; (80028e8 <xTaskIncrementTick+0x164>)
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4a1f      	ldr	r2, [pc, #124]	; (80028ec <xTaskIncrementTick+0x168>)
 8002870:	441a      	add	r2, r3
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	3304      	adds	r3, #4
 8002876:	4619      	mov	r1, r3
 8002878:	4610      	mov	r0, r2
 800287a:	f7ff fcb6 	bl	80021ea <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002882:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <xTaskIncrementTick+0x16c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002888:	429a      	cmp	r2, r3
 800288a:	d3b5      	bcc.n	80027f8 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800288c:	2301      	movs	r3, #1
 800288e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002890:	e7b2      	b.n	80027f8 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002892:	4b17      	ldr	r3, [pc, #92]	; (80028f0 <xTaskIncrementTick+0x16c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002898:	4914      	ldr	r1, [pc, #80]	; (80028ec <xTaskIncrementTick+0x168>)
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d901      	bls.n	80028ae <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80028aa:	2301      	movs	r3, #1
 80028ac:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80028ae:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <xTaskIncrementTick+0x170>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d007      	beq.n	80028c6 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80028b6:	2301      	movs	r3, #1
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	e004      	b.n	80028c6 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80028bc:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <xTaskIncrementTick+0x174>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	3301      	adds	r3, #1
 80028c2:	4a0d      	ldr	r2, [pc, #52]	; (80028f8 <xTaskIncrementTick+0x174>)
 80028c4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80028c6:	697b      	ldr	r3, [r7, #20]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20000184 	.word	0x20000184
 80028d4:	20000160 	.word	0x20000160
 80028d8:	20000114 	.word	0x20000114
 80028dc:	20000118 	.word	0x20000118
 80028e0:	20000174 	.word	0x20000174
 80028e4:	2000017c 	.word	0x2000017c
 80028e8:	20000164 	.word	0x20000164
 80028ec:	20000088 	.word	0x20000088
 80028f0:	20000084 	.word	0x20000084
 80028f4:	20000170 	.word	0x20000170
 80028f8:	2000016c 	.word	0x2000016c

080028fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002902:	4b2d      	ldr	r3, [pc, #180]	; (80029b8 <vTaskSwitchContext+0xbc>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800290a:	4b2c      	ldr	r3, [pc, #176]	; (80029bc <vTaskSwitchContext+0xc0>)
 800290c:	2201      	movs	r2, #1
 800290e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002910:	e04d      	b.n	80029ae <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002912:	4b2a      	ldr	r3, [pc, #168]	; (80029bc <vTaskSwitchContext+0xc0>)
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002918:	4b29      	ldr	r3, [pc, #164]	; (80029c0 <vTaskSwitchContext+0xc4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	fab3 f383 	clz	r3, r3
 8002924:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002926:	7afb      	ldrb	r3, [r7, #11]
 8002928:	f1c3 031f 	rsb	r3, r3, #31
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	4925      	ldr	r1, [pc, #148]	; (80029c4 <vTaskSwitchContext+0xc8>)
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10a      	bne.n	8002958 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002946:	f383 8811 	msr	BASEPRI, r3
 800294a:	f3bf 8f6f 	isb	sy
 800294e:	f3bf 8f4f 	dsb	sy
 8002952:	607b      	str	r3, [r7, #4]
    }
 8002954:	bf00      	nop
 8002956:	e7fe      	b.n	8002956 <vTaskSwitchContext+0x5a>
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4a18      	ldr	r2, [pc, #96]	; (80029c4 <vTaskSwitchContext+0xc8>)
 8002964:	4413      	add	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	3308      	adds	r3, #8
 800297a:	429a      	cmp	r2, r3
 800297c:	d104      	bne.n	8002988 <vTaskSwitchContext+0x8c>
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	605a      	str	r2, [r3, #4]
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	4a0e      	ldr	r2, [pc, #56]	; (80029c8 <vTaskSwitchContext+0xcc>)
 8002990:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002992:	4b0d      	ldr	r3, [pc, #52]	; (80029c8 <vTaskSwitchContext+0xcc>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	4b0d      	ldr	r3, [pc, #52]	; (80029cc <vTaskSwitchContext+0xd0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d102      	bne.n	80029a4 <vTaskSwitchContext+0xa8>
 800299e:	f002 fe77 	bl	8005690 <SEGGER_SYSVIEW_OnIdle>
}
 80029a2:	e004      	b.n	80029ae <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80029a4:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <vTaskSwitchContext+0xcc>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f002 fecf 	bl	800574c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80029ae:	bf00      	nop
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20000184 	.word	0x20000184
 80029bc:	20000170 	.word	0x20000170
 80029c0:	20000164 	.word	0x20000164
 80029c4:	20000088 	.word	0x20000088
 80029c8:	20000084 	.word	0x20000084
 80029cc:	20000180 	.word	0x20000180

080029d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80029d8:	f000 f852 	bl	8002a80 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <prvIdleTask+0x28>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d9f9      	bls.n	80029d8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <prvIdleTask+0x2c>)
 80029e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	f3bf 8f4f 	dsb	sy
 80029f0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80029f4:	e7f0      	b.n	80029d8 <prvIdleTask+0x8>
 80029f6:	bf00      	nop
 80029f8:	20000088 	.word	0x20000088
 80029fc:	e000ed04 	.word	0xe000ed04

08002a00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a06:	2300      	movs	r3, #0
 8002a08:	607b      	str	r3, [r7, #4]
 8002a0a:	e00c      	b.n	8002a26 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4a12      	ldr	r2, [pc, #72]	; (8002a60 <prvInitialiseTaskLists+0x60>)
 8002a18:	4413      	add	r3, r2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fbb8 	bl	8002190 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3301      	adds	r3, #1
 8002a24:	607b      	str	r3, [r7, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d9ef      	bls.n	8002a0c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002a2c:	480d      	ldr	r0, [pc, #52]	; (8002a64 <prvInitialiseTaskLists+0x64>)
 8002a2e:	f7ff fbaf 	bl	8002190 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002a32:	480d      	ldr	r0, [pc, #52]	; (8002a68 <prvInitialiseTaskLists+0x68>)
 8002a34:	f7ff fbac 	bl	8002190 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002a38:	480c      	ldr	r0, [pc, #48]	; (8002a6c <prvInitialiseTaskLists+0x6c>)
 8002a3a:	f7ff fba9 	bl	8002190 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002a3e:	480c      	ldr	r0, [pc, #48]	; (8002a70 <prvInitialiseTaskLists+0x70>)
 8002a40:	f7ff fba6 	bl	8002190 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002a44:	480b      	ldr	r0, [pc, #44]	; (8002a74 <prvInitialiseTaskLists+0x74>)
 8002a46:	f7ff fba3 	bl	8002190 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002a4a:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <prvInitialiseTaskLists+0x78>)
 8002a4c:	4a05      	ldr	r2, [pc, #20]	; (8002a64 <prvInitialiseTaskLists+0x64>)
 8002a4e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002a50:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <prvInitialiseTaskLists+0x7c>)
 8002a52:	4a05      	ldr	r2, [pc, #20]	; (8002a68 <prvInitialiseTaskLists+0x68>)
 8002a54:	601a      	str	r2, [r3, #0]
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20000088 	.word	0x20000088
 8002a64:	200000ec 	.word	0x200000ec
 8002a68:	20000100 	.word	0x20000100
 8002a6c:	2000011c 	.word	0x2000011c
 8002a70:	20000130 	.word	0x20000130
 8002a74:	20000148 	.word	0x20000148
 8002a78:	20000114 	.word	0x20000114
 8002a7c:	20000118 	.word	0x20000118

08002a80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a86:	e019      	b.n	8002abc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002a88:	f000 fa04 	bl	8002e94 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a8c:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <prvCheckTasksWaitingTermination+0x50>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3304      	adds	r3, #4
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff fbca 	bl	8002232 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002a9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ad4 <prvCheckTasksWaitingTermination+0x54>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	4a0b      	ldr	r2, [pc, #44]	; (8002ad4 <prvCheckTasksWaitingTermination+0x54>)
 8002aa6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <prvCheckTasksWaitingTermination+0x58>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	3b01      	subs	r3, #1
 8002aae:	4a0a      	ldr	r2, [pc, #40]	; (8002ad8 <prvCheckTasksWaitingTermination+0x58>)
 8002ab0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002ab2:	f000 fa1f 	bl	8002ef4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f810 	bl	8002adc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002abc:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <prvCheckTasksWaitingTermination+0x58>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1e1      	bne.n	8002a88 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002ac4:	bf00      	nop
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000130 	.word	0x20000130
 8002ad4:	2000015c 	.word	0x2000015c
 8002ad8:	20000144 	.word	0x20000144

08002adc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 fbdf 	bl	80032ac <vPortFree>
                vPortFree( pxTCB );
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 fbdc 	bl	80032ac <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002af4:	bf00      	nop
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b00:	4b0a      	ldr	r3, [pc, #40]	; (8002b2c <prvResetNextTaskUnblockTime+0x30>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d104      	bne.n	8002b14 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002b0a:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <prvResetNextTaskUnblockTime+0x34>)
 8002b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b10:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002b12:	e005      	b.n	8002b20 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002b14:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <prvResetNextTaskUnblockTime+0x30>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a04      	ldr	r2, [pc, #16]	; (8002b30 <prvResetNextTaskUnblockTime+0x34>)
 8002b1e:	6013      	str	r3, [r2, #0]
}
 8002b20:	bf00      	nop
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	20000114 	.word	0x20000114
 8002b30:	2000017c 	.word	0x2000017c

08002b34 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	3b04      	subs	r3, #4
 8002b44:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b4c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	3b04      	subs	r3, #4
 8002b52:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f023 0201 	bic.w	r2, r3, #1
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	3b04      	subs	r3, #4
 8002b62:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002b64:	4a0c      	ldr	r2, [pc, #48]	; (8002b98 <pxPortInitialiseStack+0x64>)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	3b14      	subs	r3, #20
 8002b6e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	3b04      	subs	r3, #4
 8002b7a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f06f 0202 	mvn.w	r2, #2
 8002b82:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	3b20      	subs	r3, #32
 8002b88:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	08002b9d 	.word	0x08002b9d

08002b9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002ba6:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <prvTaskExitError+0x54>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bae:	d00a      	beq.n	8002bc6 <prvTaskExitError+0x2a>
        __asm volatile
 8002bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	60fb      	str	r3, [r7, #12]
    }
 8002bc2:	bf00      	nop
 8002bc4:	e7fe      	b.n	8002bc4 <prvTaskExitError+0x28>
        __asm volatile
 8002bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bca:	f383 8811 	msr	BASEPRI, r3
 8002bce:	f3bf 8f6f 	isb	sy
 8002bd2:	f3bf 8f4f 	dsb	sy
 8002bd6:	60bb      	str	r3, [r7, #8]
    }
 8002bd8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002bda:	bf00      	nop
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0fc      	beq.n	8002bdc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002be2:	bf00      	nop
 8002be4:	bf00      	nop
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	20000010 	.word	0x20000010
	...

08002c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002c00:	4b07      	ldr	r3, [pc, #28]	; (8002c20 <pxCurrentTCBConst2>)
 8002c02:	6819      	ldr	r1, [r3, #0]
 8002c04:	6808      	ldr	r0, [r1, #0]
 8002c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c0a:	f380 8809 	msr	PSP, r0
 8002c0e:	f3bf 8f6f 	isb	sy
 8002c12:	f04f 0000 	mov.w	r0, #0
 8002c16:	f380 8811 	msr	BASEPRI, r0
 8002c1a:	4770      	bx	lr
 8002c1c:	f3af 8000 	nop.w

08002c20 <pxCurrentTCBConst2>:
 8002c20:	20000084 	.word	0x20000084
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002c24:	bf00      	nop
 8002c26:	bf00      	nop

08002c28 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002c28:	4808      	ldr	r0, [pc, #32]	; (8002c4c <prvPortStartFirstTask+0x24>)
 8002c2a:	6800      	ldr	r0, [r0, #0]
 8002c2c:	6800      	ldr	r0, [r0, #0]
 8002c2e:	f380 8808 	msr	MSP, r0
 8002c32:	f04f 0000 	mov.w	r0, #0
 8002c36:	f380 8814 	msr	CONTROL, r0
 8002c3a:	b662      	cpsie	i
 8002c3c:	b661      	cpsie	f
 8002c3e:	f3bf 8f4f 	dsb	sy
 8002c42:	f3bf 8f6f 	isb	sy
 8002c46:	df00      	svc	0
 8002c48:	bf00      	nop
 8002c4a:	0000      	.short	0x0000
 8002c4c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002c50:	bf00      	nop
 8002c52:	bf00      	nop

08002c54 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002c5a:	4b46      	ldr	r3, [pc, #280]	; (8002d74 <xPortStartScheduler+0x120>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a46      	ldr	r2, [pc, #280]	; (8002d78 <xPortStartScheduler+0x124>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d10a      	bne.n	8002c7a <xPortStartScheduler+0x26>
        __asm volatile
 8002c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c68:	f383 8811 	msr	BASEPRI, r3
 8002c6c:	f3bf 8f6f 	isb	sy
 8002c70:	f3bf 8f4f 	dsb	sy
 8002c74:	613b      	str	r3, [r7, #16]
    }
 8002c76:	bf00      	nop
 8002c78:	e7fe      	b.n	8002c78 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002c7a:	4b3e      	ldr	r3, [pc, #248]	; (8002d74 <xPortStartScheduler+0x120>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a3f      	ldr	r2, [pc, #252]	; (8002d7c <xPortStartScheduler+0x128>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d10a      	bne.n	8002c9a <xPortStartScheduler+0x46>
        __asm volatile
 8002c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c88:	f383 8811 	msr	BASEPRI, r3
 8002c8c:	f3bf 8f6f 	isb	sy
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	60fb      	str	r3, [r7, #12]
    }
 8002c96:	bf00      	nop
 8002c98:	e7fe      	b.n	8002c98 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002c9a:	4b39      	ldr	r3, [pc, #228]	; (8002d80 <xPortStartScheduler+0x12c>)
 8002c9c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	22ff      	movs	r2, #255	; 0xff
 8002caa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002cb4:	78fb      	ldrb	r3, [r7, #3]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	4b31      	ldr	r3, [pc, #196]	; (8002d84 <xPortStartScheduler+0x130>)
 8002cc0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002cc2:	4b31      	ldr	r3, [pc, #196]	; (8002d88 <xPortStartScheduler+0x134>)
 8002cc4:	2207      	movs	r2, #7
 8002cc6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002cc8:	e009      	b.n	8002cde <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002cca:	4b2f      	ldr	r3, [pc, #188]	; (8002d88 <xPortStartScheduler+0x134>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	4a2d      	ldr	r2, [pc, #180]	; (8002d88 <xPortStartScheduler+0x134>)
 8002cd2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002cde:	78fb      	ldrb	r3, [r7, #3]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce6:	2b80      	cmp	r3, #128	; 0x80
 8002ce8:	d0ef      	beq.n	8002cca <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002cea:	4b27      	ldr	r3, [pc, #156]	; (8002d88 <xPortStartScheduler+0x134>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f1c3 0307 	rsb	r3, r3, #7
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d00a      	beq.n	8002d0c <xPortStartScheduler+0xb8>
        __asm volatile
 8002cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfa:	f383 8811 	msr	BASEPRI, r3
 8002cfe:	f3bf 8f6f 	isb	sy
 8002d02:	f3bf 8f4f 	dsb	sy
 8002d06:	60bb      	str	r3, [r7, #8]
    }
 8002d08:	bf00      	nop
 8002d0a:	e7fe      	b.n	8002d0a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002d0c:	4b1e      	ldr	r3, [pc, #120]	; (8002d88 <xPortStartScheduler+0x134>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	021b      	lsls	r3, r3, #8
 8002d12:	4a1d      	ldr	r2, [pc, #116]	; (8002d88 <xPortStartScheduler+0x134>)
 8002d14:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002d16:	4b1c      	ldr	r3, [pc, #112]	; (8002d88 <xPortStartScheduler+0x134>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d1e:	4a1a      	ldr	r2, [pc, #104]	; (8002d88 <xPortStartScheduler+0x134>)
 8002d20:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002d2a:	4b18      	ldr	r3, [pc, #96]	; (8002d8c <xPortStartScheduler+0x138>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a17      	ldr	r2, [pc, #92]	; (8002d8c <xPortStartScheduler+0x138>)
 8002d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d34:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002d36:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <xPortStartScheduler+0x138>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a14      	ldr	r2, [pc, #80]	; (8002d8c <xPortStartScheduler+0x138>)
 8002d3c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002d40:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002d42:	f000 f963 	bl	800300c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002d46:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <xPortStartScheduler+0x13c>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002d4c:	f000 f982 	bl	8003054 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002d50:	4b10      	ldr	r3, [pc, #64]	; (8002d94 <xPortStartScheduler+0x140>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a0f      	ldr	r2, [pc, #60]	; (8002d94 <xPortStartScheduler+0x140>)
 8002d56:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002d5a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002d5c:	f7ff ff64 	bl	8002c28 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002d60:	f7ff fdcc 	bl	80028fc <vTaskSwitchContext>
    prvTaskExitError();
 8002d64:	f7ff ff1a 	bl	8002b9c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	e000ed00 	.word	0xe000ed00
 8002d78:	410fc271 	.word	0x410fc271
 8002d7c:	410fc270 	.word	0x410fc270
 8002d80:	e000e400 	.word	0xe000e400
 8002d84:	20000188 	.word	0x20000188
 8002d88:	2000018c 	.word	0x2000018c
 8002d8c:	e000ed20 	.word	0xe000ed20
 8002d90:	20000010 	.word	0x20000010
 8002d94:	e000ef34 	.word	0xe000ef34

08002d98 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002d9e:	4b37      	ldr	r3, [pc, #220]	; (8002e7c <vInitPrioGroupValue+0xe4>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a37      	ldr	r2, [pc, #220]	; (8002e80 <vInitPrioGroupValue+0xe8>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d10a      	bne.n	8002dbe <vInitPrioGroupValue+0x26>
        __asm volatile
 8002da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dac:	f383 8811 	msr	BASEPRI, r3
 8002db0:	f3bf 8f6f 	isb	sy
 8002db4:	f3bf 8f4f 	dsb	sy
 8002db8:	613b      	str	r3, [r7, #16]
    }
 8002dba:	bf00      	nop
 8002dbc:	e7fe      	b.n	8002dbc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002dbe:	4b2f      	ldr	r3, [pc, #188]	; (8002e7c <vInitPrioGroupValue+0xe4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a30      	ldr	r2, [pc, #192]	; (8002e84 <vInitPrioGroupValue+0xec>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d10a      	bne.n	8002dde <vInitPrioGroupValue+0x46>
        __asm volatile
 8002dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dcc:	f383 8811 	msr	BASEPRI, r3
 8002dd0:	f3bf 8f6f 	isb	sy
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	60fb      	str	r3, [r7, #12]
    }
 8002dda:	bf00      	nop
 8002ddc:	e7fe      	b.n	8002ddc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002dde:	4b2a      	ldr	r3, [pc, #168]	; (8002e88 <vInitPrioGroupValue+0xf0>)
 8002de0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	22ff      	movs	r2, #255	; 0xff
 8002dee:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002df8:	78fb      	ldrb	r3, [r7, #3]
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	4b22      	ldr	r3, [pc, #136]	; (8002e8c <vInitPrioGroupValue+0xf4>)
 8002e04:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002e06:	4b22      	ldr	r3, [pc, #136]	; (8002e90 <vInitPrioGroupValue+0xf8>)
 8002e08:	2207      	movs	r2, #7
 8002e0a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e0c:	e009      	b.n	8002e22 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002e0e:	4b20      	ldr	r3, [pc, #128]	; (8002e90 <vInitPrioGroupValue+0xf8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	4a1e      	ldr	r2, [pc, #120]	; (8002e90 <vInitPrioGroupValue+0xf8>)
 8002e16:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002e18:	78fb      	ldrb	r3, [r7, #3]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e22:	78fb      	ldrb	r3, [r7, #3]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2a:	2b80      	cmp	r3, #128	; 0x80
 8002e2c:	d0ef      	beq.n	8002e0e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002e2e:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <vInitPrioGroupValue+0xf8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f1c3 0307 	rsb	r3, r3, #7
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d00a      	beq.n	8002e50 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3e:	f383 8811 	msr	BASEPRI, r3
 8002e42:	f3bf 8f6f 	isb	sy
 8002e46:	f3bf 8f4f 	dsb	sy
 8002e4a:	60bb      	str	r3, [r7, #8]
    }
 8002e4c:	bf00      	nop
 8002e4e:	e7fe      	b.n	8002e4e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002e50:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <vInitPrioGroupValue+0xf8>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	021b      	lsls	r3, r3, #8
 8002e56:	4a0e      	ldr	r2, [pc, #56]	; (8002e90 <vInitPrioGroupValue+0xf8>)
 8002e58:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <vInitPrioGroupValue+0xf8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e62:	4a0b      	ldr	r2, [pc, #44]	; (8002e90 <vInitPrioGroupValue+0xf8>)
 8002e64:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002e6e:	bf00      	nop
 8002e70:	371c      	adds	r7, #28
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	e000ed00 	.word	0xe000ed00
 8002e80:	410fc271 	.word	0x410fc271
 8002e84:	410fc270 	.word	0x410fc270
 8002e88:	e000e400 	.word	0xe000e400
 8002e8c:	20000188 	.word	0x20000188
 8002e90:	2000018c 	.word	0x2000018c

08002e94 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
        __asm volatile
 8002e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9e:	f383 8811 	msr	BASEPRI, r3
 8002ea2:	f3bf 8f6f 	isb	sy
 8002ea6:	f3bf 8f4f 	dsb	sy
 8002eaa:	607b      	str	r3, [r7, #4]
    }
 8002eac:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002eae:	4b0f      	ldr	r3, [pc, #60]	; (8002eec <vPortEnterCritical+0x58>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	4a0d      	ldr	r2, [pc, #52]	; (8002eec <vPortEnterCritical+0x58>)
 8002eb6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <vPortEnterCritical+0x58>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d10f      	bne.n	8002ee0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <vPortEnterCritical+0x5c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00a      	beq.n	8002ee0 <vPortEnterCritical+0x4c>
        __asm volatile
 8002eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ece:	f383 8811 	msr	BASEPRI, r3
 8002ed2:	f3bf 8f6f 	isb	sy
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	603b      	str	r3, [r7, #0]
    }
 8002edc:	bf00      	nop
 8002ede:	e7fe      	b.n	8002ede <vPortEnterCritical+0x4a>
    }
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	20000010 	.word	0x20000010
 8002ef0:	e000ed04 	.word	0xe000ed04

08002ef4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002efa:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <vPortExitCritical+0x50>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10a      	bne.n	8002f18 <vPortExitCritical+0x24>
        __asm volatile
 8002f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f06:	f383 8811 	msr	BASEPRI, r3
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	607b      	str	r3, [r7, #4]
    }
 8002f14:	bf00      	nop
 8002f16:	e7fe      	b.n	8002f16 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002f18:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <vPortExitCritical+0x50>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	4a09      	ldr	r2, [pc, #36]	; (8002f44 <vPortExitCritical+0x50>)
 8002f20:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002f22:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <vPortExitCritical+0x50>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d105      	bne.n	8002f36 <vPortExitCritical+0x42>
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002f34:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	20000010 	.word	0x20000010
	...

08002f50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002f50:	f3ef 8009 	mrs	r0, PSP
 8002f54:	f3bf 8f6f 	isb	sy
 8002f58:	4b15      	ldr	r3, [pc, #84]	; (8002fb0 <pxCurrentTCBConst>)
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	f01e 0f10 	tst.w	lr, #16
 8002f60:	bf08      	it	eq
 8002f62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002f66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f6a:	6010      	str	r0, [r2, #0]
 8002f6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002f70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002f74:	f380 8811 	msr	BASEPRI, r0
 8002f78:	f3bf 8f4f 	dsb	sy
 8002f7c:	f3bf 8f6f 	isb	sy
 8002f80:	f7ff fcbc 	bl	80028fc <vTaskSwitchContext>
 8002f84:	f04f 0000 	mov.w	r0, #0
 8002f88:	f380 8811 	msr	BASEPRI, r0
 8002f8c:	bc09      	pop	{r0, r3}
 8002f8e:	6819      	ldr	r1, [r3, #0]
 8002f90:	6808      	ldr	r0, [r1, #0]
 8002f92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f96:	f01e 0f10 	tst.w	lr, #16
 8002f9a:	bf08      	it	eq
 8002f9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002fa0:	f380 8809 	msr	PSP, r0
 8002fa4:	f3bf 8f6f 	isb	sy
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	f3af 8000 	nop.w

08002fb0 <pxCurrentTCBConst>:
 8002fb0:	20000084 	.word	0x20000084
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002fb4:	bf00      	nop
 8002fb6:	bf00      	nop

08002fb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
        __asm volatile
 8002fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc2:	f383 8811 	msr	BASEPRI, r3
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	607b      	str	r3, [r7, #4]
    }
 8002fd0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002fd2:	f002 fae3 	bl	800559c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002fd6:	f7ff fbd5 	bl	8002784 <xTaskIncrementTick>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d006      	beq.n	8002fee <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002fe0:	f002 fb3a 	bl	8005658 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002fe4:	4b08      	ldr	r3, [pc, #32]	; (8003008 <SysTick_Handler+0x50>)
 8002fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	e001      	b.n	8002ff2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002fee:	f002 fb17 	bl	8005620 <SEGGER_SYSVIEW_RecordExitISR>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	f383 8811 	msr	BASEPRI, r3
    }
 8002ffc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	e000ed04 	.word	0xe000ed04

0800300c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003010:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <vPortSetupTimerInterrupt+0x34>)
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003016:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <vPortSetupTimerInterrupt+0x38>)
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800301c:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <vPortSetupTimerInterrupt+0x3c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a0a      	ldr	r2, [pc, #40]	; (800304c <vPortSetupTimerInterrupt+0x40>)
 8003022:	fba2 2303 	umull	r2, r3, r2, r3
 8003026:	099b      	lsrs	r3, r3, #6
 8003028:	4a09      	ldr	r2, [pc, #36]	; (8003050 <vPortSetupTimerInterrupt+0x44>)
 800302a:	3b01      	subs	r3, #1
 800302c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800302e:	4b04      	ldr	r3, [pc, #16]	; (8003040 <vPortSetupTimerInterrupt+0x34>)
 8003030:	2207      	movs	r2, #7
 8003032:	601a      	str	r2, [r3, #0]
}
 8003034:	bf00      	nop
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	e000e010 	.word	0xe000e010
 8003044:	e000e018 	.word	0xe000e018
 8003048:	20000000 	.word	0x20000000
 800304c:	10624dd3 	.word	0x10624dd3
 8003050:	e000e014 	.word	0xe000e014

08003054 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003054:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003064 <vPortEnableVFP+0x10>
 8003058:	6801      	ldr	r1, [r0, #0]
 800305a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800305e:	6001      	str	r1, [r0, #0]
 8003060:	4770      	bx	lr
 8003062:	0000      	.short	0x0000
 8003064:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003068:	bf00      	nop
 800306a:	bf00      	nop

0800306c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003072:	f3ef 8305 	mrs	r3, IPSR
 8003076:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2b0f      	cmp	r3, #15
 800307c:	d914      	bls.n	80030a8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800307e:	4a17      	ldr	r2, [pc, #92]	; (80030dc <vPortValidateInterruptPriority+0x70>)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4413      	add	r3, r2
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003088:	4b15      	ldr	r3, [pc, #84]	; (80030e0 <vPortValidateInterruptPriority+0x74>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	7afa      	ldrb	r2, [r7, #11]
 800308e:	429a      	cmp	r2, r3
 8003090:	d20a      	bcs.n	80030a8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003096:	f383 8811 	msr	BASEPRI, r3
 800309a:	f3bf 8f6f 	isb	sy
 800309e:	f3bf 8f4f 	dsb	sy
 80030a2:	607b      	str	r3, [r7, #4]
    }
 80030a4:	bf00      	nop
 80030a6:	e7fe      	b.n	80030a6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80030a8:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <vPortValidateInterruptPriority+0x78>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80030b0:	4b0d      	ldr	r3, [pc, #52]	; (80030e8 <vPortValidateInterruptPriority+0x7c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d90a      	bls.n	80030ce <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80030b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030bc:	f383 8811 	msr	BASEPRI, r3
 80030c0:	f3bf 8f6f 	isb	sy
 80030c4:	f3bf 8f4f 	dsb	sy
 80030c8:	603b      	str	r3, [r7, #0]
    }
 80030ca:	bf00      	nop
 80030cc:	e7fe      	b.n	80030cc <vPortValidateInterruptPriority+0x60>
    }
 80030ce:	bf00      	nop
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	e000e3f0 	.word	0xe000e3f0
 80030e0:	20000188 	.word	0x20000188
 80030e4:	e000ed0c 	.word	0xe000ed0c
 80030e8:	2000018c 	.word	0x2000018c

080030ec <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08a      	sub	sp, #40	; 0x28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80030f8:	f7ff fa84 	bl	8002604 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80030fc:	4b65      	ldr	r3, [pc, #404]	; (8003294 <pvPortMalloc+0x1a8>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003104:	f000 f934 	bl	8003370 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003108:	4b63      	ldr	r3, [pc, #396]	; (8003298 <pvPortMalloc+0x1ac>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4013      	ands	r3, r2
 8003110:	2b00      	cmp	r3, #0
 8003112:	f040 80a7 	bne.w	8003264 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d02d      	beq.n	8003178 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800311c:	2208      	movs	r2, #8
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	429a      	cmp	r2, r3
 8003126:	d227      	bcs.n	8003178 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003128:	2208      	movs	r2, #8
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4413      	add	r3, r2
 800312e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	2b00      	cmp	r3, #0
 8003138:	d021      	beq.n	800317e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f023 0307 	bic.w	r3, r3, #7
 8003140:	3308      	adds	r3, #8
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	429a      	cmp	r2, r3
 8003146:	d214      	bcs.n	8003172 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f023 0307 	bic.w	r3, r3, #7
 800314e:	3308      	adds	r3, #8
 8003150:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	2b00      	cmp	r3, #0
 800315a:	d010      	beq.n	800317e <pvPortMalloc+0x92>
        __asm volatile
 800315c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003160:	f383 8811 	msr	BASEPRI, r3
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	f3bf 8f4f 	dsb	sy
 800316c:	617b      	str	r3, [r7, #20]
    }
 800316e:	bf00      	nop
 8003170:	e7fe      	b.n	8003170 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003172:	2300      	movs	r3, #0
 8003174:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003176:	e002      	b.n	800317e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003178:	2300      	movs	r3, #0
 800317a:	607b      	str	r3, [r7, #4]
 800317c:	e000      	b.n	8003180 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800317e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d06e      	beq.n	8003264 <pvPortMalloc+0x178>
 8003186:	4b45      	ldr	r3, [pc, #276]	; (800329c <pvPortMalloc+0x1b0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	429a      	cmp	r2, r3
 800318e:	d869      	bhi.n	8003264 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003190:	4b43      	ldr	r3, [pc, #268]	; (80032a0 <pvPortMalloc+0x1b4>)
 8003192:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003194:	4b42      	ldr	r3, [pc, #264]	; (80032a0 <pvPortMalloc+0x1b4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800319a:	e004      	b.n	80031a6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d903      	bls.n	80031b8 <pvPortMalloc+0xcc>
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1f1      	bne.n	800319c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80031b8:	4b36      	ldr	r3, [pc, #216]	; (8003294 <pvPortMalloc+0x1a8>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031be:	429a      	cmp	r2, r3
 80031c0:	d050      	beq.n	8003264 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2208      	movs	r2, #8
 80031c8:	4413      	add	r3, r2
 80031ca:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	1ad2      	subs	r2, r2, r3
 80031dc:	2308      	movs	r3, #8
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d91f      	bls.n	8003224 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80031e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4413      	add	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <pvPortMalloc+0x120>
        __asm volatile
 80031f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fa:	f383 8811 	msr	BASEPRI, r3
 80031fe:	f3bf 8f6f 	isb	sy
 8003202:	f3bf 8f4f 	dsb	sy
 8003206:	613b      	str	r3, [r7, #16]
    }
 8003208:	bf00      	nop
 800320a:	e7fe      	b.n	800320a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	1ad2      	subs	r2, r2, r3
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800321e:	69b8      	ldr	r0, [r7, #24]
 8003220:	f000 f908 	bl	8003434 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003224:	4b1d      	ldr	r3, [pc, #116]	; (800329c <pvPortMalloc+0x1b0>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	4a1b      	ldr	r2, [pc, #108]	; (800329c <pvPortMalloc+0x1b0>)
 8003230:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003232:	4b1a      	ldr	r3, [pc, #104]	; (800329c <pvPortMalloc+0x1b0>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	4b1b      	ldr	r3, [pc, #108]	; (80032a4 <pvPortMalloc+0x1b8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d203      	bcs.n	8003246 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800323e:	4b17      	ldr	r3, [pc, #92]	; (800329c <pvPortMalloc+0x1b0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a18      	ldr	r2, [pc, #96]	; (80032a4 <pvPortMalloc+0x1b8>)
 8003244:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	4b13      	ldr	r3, [pc, #76]	; (8003298 <pvPortMalloc+0x1ac>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	431a      	orrs	r2, r3
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800325a:	4b13      	ldr	r3, [pc, #76]	; (80032a8 <pvPortMalloc+0x1bc>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	3301      	adds	r3, #1
 8003260:	4a11      	ldr	r2, [pc, #68]	; (80032a8 <pvPortMalloc+0x1bc>)
 8003262:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003264:	f7ff f9dc 	bl	8002620 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <pvPortMalloc+0x19c>
        __asm volatile
 8003272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003276:	f383 8811 	msr	BASEPRI, r3
 800327a:	f3bf 8f6f 	isb	sy
 800327e:	f3bf 8f4f 	dsb	sy
 8003282:	60fb      	str	r3, [r7, #12]
    }
 8003284:	bf00      	nop
 8003286:	e7fe      	b.n	8003286 <pvPortMalloc+0x19a>
    return pvReturn;
 8003288:	69fb      	ldr	r3, [r7, #28]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3728      	adds	r7, #40	; 0x28
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	20012d98 	.word	0x20012d98
 8003298:	20012dac 	.word	0x20012dac
 800329c:	20012d9c 	.word	0x20012d9c
 80032a0:	20012d90 	.word	0x20012d90
 80032a4:	20012da0 	.word	0x20012da0
 80032a8:	20012da4 	.word	0x20012da4

080032ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d04d      	beq.n	800335a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80032be:	2308      	movs	r3, #8
 80032c0:	425b      	negs	r3, r3
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4413      	add	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	4b24      	ldr	r3, [pc, #144]	; (8003364 <vPortFree+0xb8>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4013      	ands	r3, r2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10a      	bne.n	80032f0 <vPortFree+0x44>
        __asm volatile
 80032da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032de:	f383 8811 	msr	BASEPRI, r3
 80032e2:	f3bf 8f6f 	isb	sy
 80032e6:	f3bf 8f4f 	dsb	sy
 80032ea:	60fb      	str	r3, [r7, #12]
    }
 80032ec:	bf00      	nop
 80032ee:	e7fe      	b.n	80032ee <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00a      	beq.n	800330e <vPortFree+0x62>
        __asm volatile
 80032f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fc:	f383 8811 	msr	BASEPRI, r3
 8003300:	f3bf 8f6f 	isb	sy
 8003304:	f3bf 8f4f 	dsb	sy
 8003308:	60bb      	str	r3, [r7, #8]
    }
 800330a:	bf00      	nop
 800330c:	e7fe      	b.n	800330c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	4b14      	ldr	r3, [pc, #80]	; (8003364 <vPortFree+0xb8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4013      	ands	r3, r2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d01e      	beq.n	800335a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d11a      	bne.n	800335a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	4b0e      	ldr	r3, [pc, #56]	; (8003364 <vPortFree+0xb8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	43db      	mvns	r3, r3
 800332e:	401a      	ands	r2, r3
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003334:	f7ff f966 	bl	8002604 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <vPortFree+0xbc>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4413      	add	r3, r2
 8003342:	4a09      	ldr	r2, [pc, #36]	; (8003368 <vPortFree+0xbc>)
 8003344:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003346:	6938      	ldr	r0, [r7, #16]
 8003348:	f000 f874 	bl	8003434 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800334c:	4b07      	ldr	r3, [pc, #28]	; (800336c <vPortFree+0xc0>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	3301      	adds	r3, #1
 8003352:	4a06      	ldr	r2, [pc, #24]	; (800336c <vPortFree+0xc0>)
 8003354:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003356:	f7ff f963 	bl	8002620 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800335a:	bf00      	nop
 800335c:	3718      	adds	r7, #24
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20012dac 	.word	0x20012dac
 8003368:	20012d9c 	.word	0x20012d9c
 800336c:	20012da8 	.word	0x20012da8

08003370 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003376:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800337a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800337c:	4b27      	ldr	r3, [pc, #156]	; (800341c <prvHeapInit+0xac>)
 800337e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00c      	beq.n	80033a4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	3307      	adds	r3, #7
 800338e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f023 0307 	bic.w	r3, r3, #7
 8003396:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	4a1f      	ldr	r2, [pc, #124]	; (800341c <prvHeapInit+0xac>)
 80033a0:	4413      	add	r3, r2
 80033a2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80033a8:	4a1d      	ldr	r2, [pc, #116]	; (8003420 <prvHeapInit+0xb0>)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80033ae:	4b1c      	ldr	r3, [pc, #112]	; (8003420 <prvHeapInit+0xb0>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	4413      	add	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80033bc:	2208      	movs	r2, #8
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	1a9b      	subs	r3, r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f023 0307 	bic.w	r3, r3, #7
 80033ca:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4a15      	ldr	r2, [pc, #84]	; (8003424 <prvHeapInit+0xb4>)
 80033d0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80033d2:	4b14      	ldr	r3, [pc, #80]	; (8003424 <prvHeapInit+0xb4>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2200      	movs	r2, #0
 80033d8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80033da:	4b12      	ldr	r3, [pc, #72]	; (8003424 <prvHeapInit+0xb4>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	1ad2      	subs	r2, r2, r3
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80033f0:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <prvHeapInit+0xb4>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	4a0a      	ldr	r2, [pc, #40]	; (8003428 <prvHeapInit+0xb8>)
 80033fe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	4a09      	ldr	r2, [pc, #36]	; (800342c <prvHeapInit+0xbc>)
 8003406:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003408:	4b09      	ldr	r3, [pc, #36]	; (8003430 <prvHeapInit+0xc0>)
 800340a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800340e:	601a      	str	r2, [r3, #0]
}
 8003410:	bf00      	nop
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	20000190 	.word	0x20000190
 8003420:	20012d90 	.word	0x20012d90
 8003424:	20012d98 	.word	0x20012d98
 8003428:	20012da0 	.word	0x20012da0
 800342c:	20012d9c 	.word	0x20012d9c
 8003430:	20012dac 	.word	0x20012dac

08003434 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800343c:	4b28      	ldr	r3, [pc, #160]	; (80034e0 <prvInsertBlockIntoFreeList+0xac>)
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	e002      	b.n	8003448 <prvInsertBlockIntoFreeList+0x14>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	429a      	cmp	r2, r3
 8003450:	d8f7      	bhi.n	8003442 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	4413      	add	r3, r2
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	429a      	cmp	r2, r3
 8003462:	d108      	bne.n	8003476 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	441a      	add	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	441a      	add	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	429a      	cmp	r2, r3
 8003488:	d118      	bne.n	80034bc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	4b15      	ldr	r3, [pc, #84]	; (80034e4 <prvInsertBlockIntoFreeList+0xb0>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d00d      	beq.n	80034b2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	441a      	add	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	e008      	b.n	80034c4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80034b2:	4b0c      	ldr	r3, [pc, #48]	; (80034e4 <prvInsertBlockIntoFreeList+0xb0>)
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	e003      	b.n	80034c4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d002      	beq.n	80034d2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80034d2:	bf00      	nop
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	20012d90 	.word	0x20012d90
 80034e4:	20012d98 	.word	0x20012d98

080034e8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80034ec:	4803      	ldr	r0, [pc, #12]	; (80034fc <_cbSendSystemDesc+0x14>)
 80034ee:	f001 ffff 	bl	80054f0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80034f2:	4803      	ldr	r0, [pc, #12]	; (8003500 <_cbSendSystemDesc+0x18>)
 80034f4:	f001 fffc 	bl	80054f0 <SEGGER_SYSVIEW_SendSysDesc>
}
 80034f8:	bf00      	nop
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	08005c70 	.word	0x08005c70
 8003500:	08005cb4 	.word	0x08005cb4

08003504 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003508:	4b06      	ldr	r3, [pc, #24]	; (8003524 <SEGGER_SYSVIEW_Conf+0x20>)
 800350a:	6818      	ldr	r0, [r3, #0]
 800350c:	4b05      	ldr	r3, [pc, #20]	; (8003524 <SEGGER_SYSVIEW_Conf+0x20>)
 800350e:	6819      	ldr	r1, [r3, #0]
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <SEGGER_SYSVIEW_Conf+0x24>)
 8003512:	4a06      	ldr	r2, [pc, #24]	; (800352c <SEGGER_SYSVIEW_Conf+0x28>)
 8003514:	f001 fc70 	bl	8004df8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003518:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800351c:	f001 fcb0 	bl	8004e80 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003520:	bf00      	nop
 8003522:	bd80      	pop	{r7, pc}
 8003524:	20000000 	.word	0x20000000
 8003528:	080034e9 	.word	0x080034e9
 800352c:	08005d48 	.word	0x08005d48

08003530 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003532:	b085      	sub	sp, #20
 8003534:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003536:	2300      	movs	r3, #0
 8003538:	607b      	str	r3, [r7, #4]
 800353a:	e033      	b.n	80035a4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800353c:	491e      	ldr	r1, [pc, #120]	; (80035b8 <_cbSendTaskList+0x88>)
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	6818      	ldr	r0, [r3, #0]
 800354c:	491a      	ldr	r1, [pc, #104]	; (80035b8 <_cbSendTaskList+0x88>)
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	3304      	adds	r3, #4
 800355c:	6819      	ldr	r1, [r3, #0]
 800355e:	4c16      	ldr	r4, [pc, #88]	; (80035b8 <_cbSendTaskList+0x88>)
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4423      	add	r3, r4
 800356c:	3308      	adds	r3, #8
 800356e:	681c      	ldr	r4, [r3, #0]
 8003570:	4d11      	ldr	r5, [pc, #68]	; (80035b8 <_cbSendTaskList+0x88>)
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	442b      	add	r3, r5
 800357e:	330c      	adds	r3, #12
 8003580:	681d      	ldr	r5, [r3, #0]
 8003582:	4e0d      	ldr	r6, [pc, #52]	; (80035b8 <_cbSendTaskList+0x88>)
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	4613      	mov	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4433      	add	r3, r6
 8003590:	3310      	adds	r3, #16
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	462b      	mov	r3, r5
 8003598:	4622      	mov	r2, r4
 800359a:	f000 f8bd 	bl	8003718 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3301      	adds	r3, #1
 80035a2:	607b      	str	r3, [r7, #4]
 80035a4:	4b05      	ldr	r3, [pc, #20]	; (80035bc <_cbSendTaskList+0x8c>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d3c6      	bcc.n	800353c <_cbSendTaskList+0xc>
  }
}
 80035ae:	bf00      	nop
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035b8:	20012db0 	.word	0x20012db0
 80035bc:	20012e50 	.word	0x20012e50

080035c0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80035c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035c4:	b082      	sub	sp, #8
 80035c6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80035c8:	f7ff f8ca 	bl	8002760 <xTaskGetTickCountFromISR>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2200      	movs	r2, #0
 80035d0:	469a      	mov	sl, r3
 80035d2:	4693      	mov	fp, r2
 80035d4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80035d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	f04f 0a00 	mov.w	sl, #0
 80035e4:	f04f 0b00 	mov.w	fp, #0
 80035e8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80035ec:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80035f0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80035f4:	4652      	mov	r2, sl
 80035f6:	465b      	mov	r3, fp
 80035f8:	1a14      	subs	r4, r2, r0
 80035fa:	eb63 0501 	sbc.w	r5, r3, r1
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	f04f 0300 	mov.w	r3, #0
 8003606:	00ab      	lsls	r3, r5, #2
 8003608:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800360c:	00a2      	lsls	r2, r4, #2
 800360e:	4614      	mov	r4, r2
 8003610:	461d      	mov	r5, r3
 8003612:	eb14 0800 	adds.w	r8, r4, r0
 8003616:	eb45 0901 	adc.w	r9, r5, r1
 800361a:	f04f 0200 	mov.w	r2, #0
 800361e:	f04f 0300 	mov.w	r3, #0
 8003622:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003626:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800362a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800362e:	4690      	mov	r8, r2
 8003630:	4699      	mov	r9, r3
 8003632:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003636:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800363a:	4610      	mov	r0, r2
 800363c:	4619      	mov	r1, r3
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003648 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af02      	add	r7, sp, #8
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
 8003654:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003656:	2205      	movs	r2, #5
 8003658:	492b      	ldr	r1, [pc, #172]	; (8003708 <SYSVIEW_AddTask+0xc0>)
 800365a:	68b8      	ldr	r0, [r7, #8]
 800365c:	f002 fa98 	bl	8005b90 <memcmp>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d04b      	beq.n	80036fe <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003666:	4b29      	ldr	r3, [pc, #164]	; (800370c <SYSVIEW_AddTask+0xc4>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b07      	cmp	r3, #7
 800366c:	d903      	bls.n	8003676 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800366e:	4828      	ldr	r0, [pc, #160]	; (8003710 <SYSVIEW_AddTask+0xc8>)
 8003670:	f002 f9e0 	bl	8005a34 <SEGGER_SYSVIEW_Warn>
    return;
 8003674:	e044      	b.n	8003700 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003676:	4b25      	ldr	r3, [pc, #148]	; (800370c <SYSVIEW_AddTask+0xc4>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	4926      	ldr	r1, [pc, #152]	; (8003714 <SYSVIEW_AddTask+0xcc>)
 800367c:	4613      	mov	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800368a:	4b20      	ldr	r3, [pc, #128]	; (800370c <SYSVIEW_AddTask+0xc4>)
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	4921      	ldr	r1, [pc, #132]	; (8003714 <SYSVIEW_AddTask+0xcc>)
 8003690:	4613      	mov	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	3304      	adds	r3, #4
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80036a0:	4b1a      	ldr	r3, [pc, #104]	; (800370c <SYSVIEW_AddTask+0xc4>)
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	491b      	ldr	r1, [pc, #108]	; (8003714 <SYSVIEW_AddTask+0xcc>)
 80036a6:	4613      	mov	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	440b      	add	r3, r1
 80036b0:	3308      	adds	r3, #8
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80036b6:	4b15      	ldr	r3, [pc, #84]	; (800370c <SYSVIEW_AddTask+0xc4>)
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	4916      	ldr	r1, [pc, #88]	; (8003714 <SYSVIEW_AddTask+0xcc>)
 80036bc:	4613      	mov	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	330c      	adds	r3, #12
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80036cc:	4b0f      	ldr	r3, [pc, #60]	; (800370c <SYSVIEW_AddTask+0xc4>)
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	4910      	ldr	r1, [pc, #64]	; (8003714 <SYSVIEW_AddTask+0xcc>)
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	440b      	add	r3, r1
 80036dc:	3310      	adds	r3, #16
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80036e2:	4b0a      	ldr	r3, [pc, #40]	; (800370c <SYSVIEW_AddTask+0xc4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3301      	adds	r3, #1
 80036e8:	4a08      	ldr	r2, [pc, #32]	; (800370c <SYSVIEW_AddTask+0xc4>)
 80036ea:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	68b9      	ldr	r1, [r7, #8]
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 f80e 	bl	8003718 <SYSVIEW_SendTaskInfo>
 80036fc:	e000      	b.n	8003700 <SYSVIEW_AddTask+0xb8>
    return;
 80036fe:	bf00      	nop

}
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	08005cc4 	.word	0x08005cc4
 800370c:	20012e50 	.word	0x20012e50
 8003710:	08005ccc 	.word	0x08005ccc
 8003714:	20012db0 	.word	0x20012db0

08003718 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003718:	b580      	push	{r7, lr}
 800371a:	b08a      	sub	sp, #40	; 0x28
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
 8003724:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003726:	f107 0314 	add.w	r3, r7, #20
 800372a:	2214      	movs	r2, #20
 800372c:	2100      	movs	r1, #0
 800372e:	4618      	mov	r0, r3
 8003730:	f002 fa4c 	bl	8005bcc <memset>
  TaskInfo.TaskID     = TaskID;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003746:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003748:	f107 0314 	add.w	r3, r7, #20
 800374c:	4618      	mov	r0, r3
 800374e:	f001 fdd7 	bl	8005300 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003752:	bf00      	nop
 8003754:	3728      	adds	r7, #40	; 0x28
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <__NVIC_EnableIRQ>:
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	4603      	mov	r3, r0
 8003764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376a:	2b00      	cmp	r3, #0
 800376c:	db0b      	blt.n	8003786 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800376e:	79fb      	ldrb	r3, [r7, #7]
 8003770:	f003 021f 	and.w	r2, r3, #31
 8003774:	4907      	ldr	r1, [pc, #28]	; (8003794 <__NVIC_EnableIRQ+0x38>)
 8003776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	2001      	movs	r0, #1
 800377e:	fa00 f202 	lsl.w	r2, r0, r2
 8003782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	e000e100 	.word	0xe000e100

08003798 <__NVIC_SetPriority>:
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	4603      	mov	r3, r0
 80037a0:	6039      	str	r1, [r7, #0]
 80037a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	db0a      	blt.n	80037c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	490c      	ldr	r1, [pc, #48]	; (80037e4 <__NVIC_SetPriority+0x4c>)
 80037b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b6:	0112      	lsls	r2, r2, #4
 80037b8:	b2d2      	uxtb	r2, r2
 80037ba:	440b      	add	r3, r1
 80037bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80037c0:	e00a      	b.n	80037d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	4908      	ldr	r1, [pc, #32]	; (80037e8 <__NVIC_SetPriority+0x50>)
 80037c8:	79fb      	ldrb	r3, [r7, #7]
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	3b04      	subs	r3, #4
 80037d0:	0112      	lsls	r2, r2, #4
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	440b      	add	r3, r1
 80037d6:	761a      	strb	r2, [r3, #24]
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	e000e100 	.word	0xe000e100
 80037e8:	e000ed00 	.word	0xe000ed00

080037ec <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80037f2:	f002 f97b 	bl	8005aec <SEGGER_SYSVIEW_IsStarted>
 80037f6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80037fe:	f001 fc03 	bl	8005008 <SEGGER_SYSVIEW_Start>
  }
}
 8003802:	bf00      	nop
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003816:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <_cbOnUARTRx+0x3c>)
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	2b03      	cmp	r3, #3
 800381c:	d806      	bhi.n	800382c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800381e:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <_cbOnUARTRx+0x3c>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	3301      	adds	r3, #1
 8003824:	b2da      	uxtb	r2, r3
 8003826:	4b08      	ldr	r3, [pc, #32]	; (8003848 <_cbOnUARTRx+0x3c>)
 8003828:	701a      	strb	r2, [r3, #0]
    goto Done;
 800382a:	e009      	b.n	8003840 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800382c:	f7ff ffde 	bl	80037ec <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003830:	4b05      	ldr	r3, [pc, #20]	; (8003848 <_cbOnUARTRx+0x3c>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	4618      	mov	r0, r3
 8003836:	1dfb      	adds	r3, r7, #7
 8003838:	2201      	movs	r2, #1
 800383a:	4619      	mov	r1, r3
 800383c:	f000 fb9c 	bl	8003f78 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003840:	bf00      	nop
}
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	20000014 	.word	0x20000014

0800384c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003854:	4b14      	ldr	r3, [pc, #80]	; (80038a8 <_cbOnUARTTx+0x5c>)
 8003856:	785b      	ldrb	r3, [r3, #1]
 8003858:	2b03      	cmp	r3, #3
 800385a:	d80f      	bhi.n	800387c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800385c:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <_cbOnUARTTx+0x5c>)
 800385e:	785b      	ldrb	r3, [r3, #1]
 8003860:	461a      	mov	r2, r3
 8003862:	4b12      	ldr	r3, [pc, #72]	; (80038ac <_cbOnUARTTx+0x60>)
 8003864:	5c9a      	ldrb	r2, [r3, r2]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800386a:	4b0f      	ldr	r3, [pc, #60]	; (80038a8 <_cbOnUARTTx+0x5c>)
 800386c:	785b      	ldrb	r3, [r3, #1]
 800386e:	3301      	adds	r3, #1
 8003870:	b2da      	uxtb	r2, r3
 8003872:	4b0d      	ldr	r3, [pc, #52]	; (80038a8 <_cbOnUARTTx+0x5c>)
 8003874:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003876:	2301      	movs	r3, #1
 8003878:	60fb      	str	r3, [r7, #12]
    goto Done;
 800387a:	e00f      	b.n	800389c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800387c:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <_cbOnUARTTx+0x5c>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	4618      	mov	r0, r3
 8003886:	f000 fa1b 	bl	8003cc0 <SEGGER_RTT_ReadUpBufferNoLock>
 800388a:	4603      	mov	r3, r0
 800388c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	da02      	bge.n	800389a <_cbOnUARTTx+0x4e>
    r = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	e000      	b.n	800389c <_cbOnUARTTx+0x50>
  }
Done:
 800389a:	bf00      	nop
  return r;
 800389c:	68fb      	ldr	r3, [r7, #12]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000014 	.word	0x20000014
 80038ac:	08005d50 	.word	0x08005d50

080038b0 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80038b8:	4a04      	ldr	r2, [pc, #16]	; (80038cc <SEGGER_UART_init+0x1c>)
 80038ba:	4905      	ldr	r1, [pc, #20]	; (80038d0 <SEGGER_UART_init+0x20>)
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f863 	bl	8003988 <HIF_UART_Init>
}
 80038c2:	bf00      	nop
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	0800380d 	.word	0x0800380d
 80038d0:	0800384d 	.word	0x0800384d

080038d4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80038da:	4b1e      	ldr	r3, [pc, #120]	; (8003954 <USART2_IRQHandler+0x80>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f003 0320 	and.w	r3, r3, #32
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d011      	beq.n	800390e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80038ea:	4b1b      	ldr	r3, [pc, #108]	; (8003958 <USART2_IRQHandler+0x84>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f003 030b 	and.w	r3, r3, #11
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d108      	bne.n	800390e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80038fc:	4b17      	ldr	r3, [pc, #92]	; (800395c <USART2_IRQHandler+0x88>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d004      	beq.n	800390e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003904:	4b15      	ldr	r3, [pc, #84]	; (800395c <USART2_IRQHandler+0x88>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	79fa      	ldrb	r2, [r7, #7]
 800390a:	4610      	mov	r0, r2
 800390c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003914:	2b00      	cmp	r3, #0
 8003916:	d01a      	beq.n	800394e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003918:	4b11      	ldr	r3, [pc, #68]	; (8003960 <USART2_IRQHandler+0x8c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d015      	beq.n	800394c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003920:	4b0f      	ldr	r3, [pc, #60]	; (8003960 <USART2_IRQHandler+0x8c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	1dfa      	adds	r2, r7, #7
 8003926:	4610      	mov	r0, r2
 8003928:	4798      	blx	r3
 800392a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d106      	bne.n	8003940 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003932:	4b0c      	ldr	r3, [pc, #48]	; (8003964 <USART2_IRQHandler+0x90>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a0b      	ldr	r2, [pc, #44]	; (8003964 <USART2_IRQHandler+0x90>)
 8003938:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	e006      	b.n	800394e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003940:	4b04      	ldr	r3, [pc, #16]	; (8003954 <USART2_IRQHandler+0x80>)
 8003942:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003944:	79fa      	ldrb	r2, [r7, #7]
 8003946:	4b04      	ldr	r3, [pc, #16]	; (8003958 <USART2_IRQHandler+0x84>)
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	e000      	b.n	800394e <USART2_IRQHandler+0x7a>
      return;
 800394c:	bf00      	nop
    }
  }
}
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40004400 	.word	0x40004400
 8003958:	40004404 	.word	0x40004404
 800395c:	20012e54 	.word	0x20012e54
 8003960:	20012e58 	.word	0x20012e58
 8003964:	4000440c 	.word	0x4000440c

08003968 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800396c:	4b05      	ldr	r3, [pc, #20]	; (8003984 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a04      	ldr	r2, [pc, #16]	; (8003984 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003976:	6013      	str	r3, [r2, #0]
}
 8003978:	bf00      	nop
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	4000440c 	.word	0x4000440c

08003988 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003994:	4b2e      	ldr	r3, [pc, #184]	; (8003a50 <HIF_UART_Init+0xc8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a2d      	ldr	r2, [pc, #180]	; (8003a50 <HIF_UART_Init+0xc8>)
 800399a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800399e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80039a0:	4b2c      	ldr	r3, [pc, #176]	; (8003a54 <HIF_UART_Init+0xcc>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a2b      	ldr	r2, [pc, #172]	; (8003a54 <HIF_UART_Init+0xcc>)
 80039a6:	f043 0301 	orr.w	r3, r3, #1
 80039aa:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80039ac:	4b2a      	ldr	r3, [pc, #168]	; (8003a58 <HIF_UART_Init+0xd0>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039b8:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80039c0:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80039c2:	4a25      	ldr	r2, [pc, #148]	; (8003a58 <HIF_UART_Init+0xd0>)
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80039c8:	4b24      	ldr	r3, [pc, #144]	; (8003a5c <HIF_UART_Init+0xd4>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039d4:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80039dc:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80039de:	4a1f      	ldr	r2, [pc, #124]	; (8003a5c <HIF_UART_Init+0xd4>)
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80039e4:	4b1e      	ldr	r3, [pc, #120]	; (8003a60 <HIF_UART_Init+0xd8>)
 80039e6:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80039ea:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80039ec:	4b1d      	ldr	r3, [pc, #116]	; (8003a64 <HIF_UART_Init+0xdc>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80039f2:	4b1d      	ldr	r3, [pc, #116]	; (8003a68 <HIF_UART_Init+0xe0>)
 80039f4:	2280      	movs	r2, #128	; 0x80
 80039f6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80039fe:	4a1b      	ldr	r2, [pc, #108]	; (8003a6c <HIF_UART_Init+0xe4>)
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a06:	3301      	adds	r3, #1
 8003a08:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	085b      	lsrs	r3, r3, #1
 8003a0e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a16:	d302      	bcc.n	8003a1e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003a18:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003a1c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d004      	beq.n	8003a2e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	4a11      	ldr	r2, [pc, #68]	; (8003a70 <HIF_UART_Init+0xe8>)
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8003a2e:	4a11      	ldr	r2, [pc, #68]	; (8003a74 <HIF_UART_Init+0xec>)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003a34:	4a10      	ldr	r2, [pc, #64]	; (8003a78 <HIF_UART_Init+0xf0>)
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003a3a:	2106      	movs	r1, #6
 8003a3c:	2026      	movs	r0, #38	; 0x26
 8003a3e:	f7ff feab 	bl	8003798 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003a42:	2026      	movs	r0, #38	; 0x26
 8003a44:	f7ff fe8a 	bl	800375c <__NVIC_EnableIRQ>
}
 8003a48:	bf00      	nop
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40023840 	.word	0x40023840
 8003a54:	40023830 	.word	0x40023830
 8003a58:	40020020 	.word	0x40020020
 8003a5c:	40020000 	.word	0x40020000
 8003a60:	4000440c 	.word	0x4000440c
 8003a64:	40004410 	.word	0x40004410
 8003a68:	40004414 	.word	0x40004414
 8003a6c:	0501bd00 	.word	0x0501bd00
 8003a70:	40004408 	.word	0x40004408
 8003a74:	20012e54 	.word	0x20012e54
 8003a78:	20012e58 	.word	0x20012e58

08003a7c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003a82:	4b26      	ldr	r3, [pc, #152]	; (8003b1c <_DoInit+0xa0>)
 8003a84:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003a86:	22a8      	movs	r2, #168	; 0xa8
 8003a88:	2100      	movs	r1, #0
 8003a8a:	6838      	ldr	r0, [r7, #0]
 8003a8c:	f002 f89e 	bl	8005bcc <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	2203      	movs	r2, #3
 8003a94:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2203      	movs	r2, #3
 8003a9a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	4a20      	ldr	r2, [pc, #128]	; (8003b20 <_DoInit+0xa4>)
 8003aa0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	4a1f      	ldr	r2, [pc, #124]	; (8003b24 <_DoInit+0xa8>)
 8003aa6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003aae:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	4a16      	ldr	r2, [pc, #88]	; (8003b20 <_DoInit+0xa4>)
 8003ac6:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	4a17      	ldr	r2, [pc, #92]	; (8003b28 <_DoInit+0xac>)
 8003acc:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2210      	movs	r2, #16
 8003ad2:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2200      	movs	r2, #0
 8003ade:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003ae6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003aea:	2300      	movs	r3, #0
 8003aec:	607b      	str	r3, [r7, #4]
 8003aee:	e00c      	b.n	8003b0a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f1c3 030f 	rsb	r3, r3, #15
 8003af6:	4a0d      	ldr	r2, [pc, #52]	; (8003b2c <_DoInit+0xb0>)
 8003af8:	5cd1      	ldrb	r1, [r2, r3]
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4413      	add	r3, r2
 8003b00:	460a      	mov	r2, r1
 8003b02:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3301      	adds	r3, #1
 8003b08:	607b      	str	r3, [r7, #4]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b0f      	cmp	r3, #15
 8003b0e:	d9ef      	bls.n	8003af0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003b10:	f3bf 8f5f 	dmb	sy
}
 8003b14:	bf00      	nop
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	20012e5c 	.word	0x20012e5c
 8003b20:	08005d1c 	.word	0x08005d1c
 8003b24:	20012f04 	.word	0x20012f04
 8003b28:	20013304 	.word	0x20013304
 8003b2c:	08005d54 	.word	0x08005d54

08003b30 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b08a      	sub	sp, #40	; 0x28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d905      	bls.n	8003b60 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b5e:	e007      	b.n	8003b70 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	69b9      	ldr	r1, [r7, #24]
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	1acb      	subs	r3, r1, r3
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	bf28      	it	cs
 8003b7e:	4613      	movcs	r3, r2
 8003b80:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4293      	cmp	r3, r2
 8003b88:	bf28      	it	cs
 8003b8a:	4613      	movcs	r3, r2
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	4413      	add	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b9a:	68b9      	ldr	r1, [r7, #8]
 8003b9c:	6978      	ldr	r0, [r7, #20]
 8003b9e:	f002 f807 	bl	8005bb0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003ba2:	6a3a      	ldr	r2, [r7, #32]
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	4413      	add	r3, r2
 8003ba8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	4413      	add	r3, r2
 8003bb0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003bba:	69fa      	ldr	r2, [r7, #28]
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	4413      	add	r3, r2
 8003bc0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	69fa      	ldr	r2, [r7, #28]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d101      	bne.n	8003bd0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003bd0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	69fa      	ldr	r2, [r7, #28]
 8003bd8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1b2      	bne.n	8003b46 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003be0:	6a3b      	ldr	r3, [r7, #32]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3728      	adds	r7, #40	; 0x28
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b088      	sub	sp, #32
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	60f8      	str	r0, [r7, #12]
 8003bf2:	60b9      	str	r1, [r7, #8]
 8003bf4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d911      	bls.n	8003c32 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	4413      	add	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	68b9      	ldr	r1, [r7, #8]
 8003c1c:	6938      	ldr	r0, [r7, #16]
 8003c1e:	f001 ffc7 	bl	8005bb0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003c22:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003c26:	69fa      	ldr	r2, [r7, #28]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	441a      	add	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003c30:	e01f      	b.n	8003c72 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	68b9      	ldr	r1, [r7, #8]
 8003c44:	6938      	ldr	r0, [r7, #16]
 8003c46:	f001 ffb3 	bl	8005bb0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	4619      	mov	r1, r3
 8003c62:	6938      	ldr	r0, [r7, #16]
 8003c64:	f001 ffa4 	bl	8005bb0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003c68:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	60da      	str	r2, [r3, #12]
}
 8003c72:	bf00      	nop
 8003c74:	3720      	adds	r7, #32
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003c7a:	b480      	push	{r7}
 8003c7c:	b087      	sub	sp, #28
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d808      	bhi.n	8003ca8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	1ad2      	subs	r2, r2, r3
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	617b      	str	r3, [r7, #20]
 8003ca6:	e004      	b.n	8003cb2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003cb2:	697b      	ldr	r3, [r7, #20]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	371c      	adds	r7, #28
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08c      	sub	sp, #48	; 0x30
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003ccc:	4b3e      	ldr	r3, [pc, #248]	; (8003dc8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003cce:	623b      	str	r3, [r7, #32]
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003cda:	f7ff fecf 	bl	8003a7c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	4413      	add	r3, r2
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	4a37      	ldr	r2, [pc, #220]	; (8003dc8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003cec:	4413      	add	r3, r2
 8003cee:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003d00:	2300      	movs	r3, #0
 8003d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003d04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d92b      	bls.n	8003d64 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	bf28      	it	cs
 8003d1e:	4613      	movcs	r3, r2
 8003d20:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d28:	4413      	add	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	6939      	ldr	r1, [r7, #16]
 8003d30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d32:	f001 ff3d 	bl	8005bb0 <memcpy>
    NumBytesRead += NumBytesRem;
 8003d36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	4413      	add	r3, r2
 8003d44:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003d4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	4413      	add	r3, r2
 8003d54:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d101      	bne.n	8003d64 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003d60:	2300      	movs	r3, #0
 8003d62:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4293      	cmp	r3, r2
 8003d72:	bf28      	it	cs
 8003d74:	4613      	movcs	r3, r2
 8003d76:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d019      	beq.n	8003db2 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d84:	4413      	add	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	6939      	ldr	r1, [r7, #16]
 8003d8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d8e:	f001 ff0f 	bl	8005bb0 <memcpy>
    NumBytesRead += NumBytesRem;
 8003d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	4413      	add	r3, r2
 8003d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	4413      	add	r3, r2
 8003da0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003daa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	4413      	add	r3, r2
 8003db0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dbc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3730      	adds	r7, #48	; 0x30
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	20012e5c 	.word	0x20012e5c

08003dcc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b08c      	sub	sp, #48	; 0x30
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003dd8:	4b3e      	ldr	r3, [pc, #248]	; (8003ed4 <SEGGER_RTT_ReadNoLock+0x108>)
 8003dda:	623b      	str	r3, [r7, #32]
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <SEGGER_RTT_ReadNoLock+0x1e>
 8003de6:	f7ff fe49 	bl	8003a7c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	4613      	mov	r3, r2
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	4413      	add	r3, r2
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	3360      	adds	r3, #96	; 0x60
 8003df6:	4a37      	ldr	r2, [pc, #220]	; (8003ed4 <SEGGER_RTT_ReadNoLock+0x108>)
 8003df8:	4413      	add	r3, r2
 8003dfa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003e10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d92b      	bls.n	8003e70 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4293      	cmp	r3, r2
 8003e28:	bf28      	it	cs
 8003e2a:	4613      	movcs	r3, r2
 8003e2c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e34:	4413      	add	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	6939      	ldr	r1, [r7, #16]
 8003e3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e3e:	f001 feb7 	bl	8005bb0 <memcpy>
    NumBytesRead += NumBytesRem;
 8003e42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	4413      	add	r3, r2
 8003e48:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	4413      	add	r3, r2
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003e5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	4413      	add	r3, r2
 8003e60:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d101      	bne.n	8003e70 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	bf28      	it	cs
 8003e80:	4613      	movcs	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d019      	beq.n	8003ebe <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e90:	4413      	add	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	6939      	ldr	r1, [r7, #16]
 8003e98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e9a:	f001 fe89 	bl	8005bb0 <memcpy>
    NumBytesRead += NumBytesRem;
 8003e9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	4413      	add	r3, r2
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003eb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	4413      	add	r3, r2
 8003ebc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ec8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3730      	adds	r7, #48	; 0x30
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	20012e5c 	.word	0x20012e5c

08003ed8 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b088      	sub	sp, #32
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	4613      	mov	r3, r2
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	4413      	add	r3, r2
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	3360      	adds	r3, #96	; 0x60
 8003ef4:	4a1f      	ldr	r2, [pc, #124]	; (8003f74 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8003ef6:	4413      	add	r3, r2
 8003ef8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d029      	beq.n	8003f56 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d82e      	bhi.n	8003f64 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d002      	beq.n	8003f10 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d013      	beq.n	8003f36 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8003f0e:	e029      	b.n	8003f64 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003f10:	6978      	ldr	r0, [r7, #20]
 8003f12:	f7ff feb2 	bl	8003c7a <_GetAvailWriteSpace>
 8003f16:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d202      	bcs.n	8003f26 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8003f20:	2300      	movs	r3, #0
 8003f22:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003f24:	e021      	b.n	8003f6a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	69b9      	ldr	r1, [r7, #24]
 8003f2e:	6978      	ldr	r0, [r7, #20]
 8003f30:	f7ff fe5b 	bl	8003bea <_WriteNoCheck>
    break;
 8003f34:	e019      	b.n	8003f6a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003f36:	6978      	ldr	r0, [r7, #20]
 8003f38:	f7ff fe9f 	bl	8003c7a <_GetAvailWriteSpace>
 8003f3c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	4293      	cmp	r3, r2
 8003f44:	bf28      	it	cs
 8003f46:	4613      	movcs	r3, r2
 8003f48:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003f4a:	69fa      	ldr	r2, [r7, #28]
 8003f4c:	69b9      	ldr	r1, [r7, #24]
 8003f4e:	6978      	ldr	r0, [r7, #20]
 8003f50:	f7ff fe4b 	bl	8003bea <_WriteNoCheck>
    break;
 8003f54:	e009      	b.n	8003f6a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	69b9      	ldr	r1, [r7, #24]
 8003f5a:	6978      	ldr	r0, [r7, #20]
 8003f5c:	f7ff fde8 	bl	8003b30 <_WriteBlocking>
 8003f60:	61f8      	str	r0, [r7, #28]
    break;
 8003f62:	e002      	b.n	8003f6a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8003f64:	2300      	movs	r3, #0
 8003f66:	61fb      	str	r3, [r7, #28]
    break;
 8003f68:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003f6a:	69fb      	ldr	r3, [r7, #28]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3720      	adds	r7, #32
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	20012e5c 	.word	0x20012e5c

08003f78 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b088      	sub	sp, #32
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003f84:	4b0e      	ldr	r3, [pc, #56]	; (8003fc0 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003f86:	61fb      	str	r3, [r7, #28]
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8003f92:	f7ff fd73 	bl	8003a7c <_DoInit>
  SEGGER_RTT_LOCK();
 8003f96:	f3ef 8311 	mrs	r3, BASEPRI
 8003f9a:	f04f 0120 	mov.w	r1, #32
 8003f9e:	f381 8811 	msr	BASEPRI, r1
 8003fa2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	68b9      	ldr	r1, [r7, #8]
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f7ff ff95 	bl	8003ed8 <SEGGER_RTT_WriteDownBufferNoLock>
 8003fae:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003fb6:	697b      	ldr	r3, [r7, #20]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3720      	adds	r7, #32
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	20012e5c 	.word	0x20012e5c

08003fc4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b088      	sub	sp, #32
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
 8003fd0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003fd2:	4b3d      	ldr	r3, [pc, #244]	; (80040c8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003fd4:	61bb      	str	r3, [r7, #24]
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003fe0:	f7ff fd4c 	bl	8003a7c <_DoInit>
  SEGGER_RTT_LOCK();
 8003fe4:	f3ef 8311 	mrs	r3, BASEPRI
 8003fe8:	f04f 0120 	mov.w	r1, #32
 8003fec:	f381 8811 	msr	BASEPRI, r1
 8003ff0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003ff2:	4b35      	ldr	r3, [pc, #212]	; (80040c8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003ff4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003ffa:	6939      	ldr	r1, [r7, #16]
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	4613      	mov	r3, r2
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	4413      	add	r3, r2
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	440b      	add	r3, r1
 800400a:	3304      	adds	r3, #4
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d008      	beq.n	8004024 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	3301      	adds	r3, #1
 8004016:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	429a      	cmp	r2, r3
 8004020:	dbeb      	blt.n	8003ffa <SEGGER_RTT_AllocUpBuffer+0x36>
 8004022:	e000      	b.n	8004026 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004024:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	69fa      	ldr	r2, [r7, #28]
 800402c:	429a      	cmp	r2, r3
 800402e:	da3f      	bge.n	80040b0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004030:	6939      	ldr	r1, [r7, #16]
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	4613      	mov	r3, r2
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	4413      	add	r3, r2
 800403c:	00db      	lsls	r3, r3, #3
 800403e:	440b      	add	r3, r1
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004044:	6939      	ldr	r1, [r7, #16]
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	4613      	mov	r3, r2
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	4413      	add	r3, r2
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	440b      	add	r3, r1
 8004054:	3304      	adds	r3, #4
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800405a:	6939      	ldr	r1, [r7, #16]
 800405c:	69fa      	ldr	r2, [r7, #28]
 800405e:	4613      	mov	r3, r2
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	4413      	add	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	440b      	add	r3, r1
 8004068:	3320      	adds	r3, #32
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800406e:	6939      	ldr	r1, [r7, #16]
 8004070:	69fa      	ldr	r2, [r7, #28]
 8004072:	4613      	mov	r3, r2
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	4413      	add	r3, r2
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	440b      	add	r3, r1
 800407c:	3328      	adds	r3, #40	; 0x28
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004082:	6939      	ldr	r1, [r7, #16]
 8004084:	69fa      	ldr	r2, [r7, #28]
 8004086:	4613      	mov	r3, r2
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	4413      	add	r3, r2
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	440b      	add	r3, r1
 8004090:	3324      	adds	r3, #36	; 0x24
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004096:	6939      	ldr	r1, [r7, #16]
 8004098:	69fa      	ldr	r2, [r7, #28]
 800409a:	4613      	mov	r3, r2
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	4413      	add	r3, r2
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	440b      	add	r3, r1
 80040a4:	332c      	adds	r3, #44	; 0x2c
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80040aa:	f3bf 8f5f 	dmb	sy
 80040ae:	e002      	b.n	80040b6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80040b0:	f04f 33ff 	mov.w	r3, #4294967295
 80040b4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80040bc:	69fb      	ldr	r3, [r7, #28]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3720      	adds	r7, #32
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	20012e5c 	.word	0x20012e5c

080040cc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b08a      	sub	sp, #40	; 0x28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80040da:	4b21      	ldr	r3, [pc, #132]	; (8004160 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80040dc:	623b      	str	r3, [r7, #32]
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <SEGGER_RTT_ConfigDownBuffer+0x20>
 80040e8:	f7ff fcc8 	bl	8003a7c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80040ec:	4b1c      	ldr	r3, [pc, #112]	; (8004160 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80040ee:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d82c      	bhi.n	8004150 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80040f6:	f3ef 8311 	mrs	r3, BASEPRI
 80040fa:	f04f 0120 	mov.w	r1, #32
 80040fe:	f381 8811 	msr	BASEPRI, r1
 8004102:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	4613      	mov	r3, r2
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	4413      	add	r3, r2
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	3360      	adds	r3, #96	; 0x60
 8004110:	69fa      	ldr	r2, [r7, #28]
 8004112:	4413      	add	r3, r2
 8004114:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00e      	beq.n	800413a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2200      	movs	r2, #0
 8004132:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	2200      	movs	r2, #0
 8004138:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800413e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004140:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800414a:	2300      	movs	r3, #0
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
 800414e:	e002      	b.n	8004156 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004150:	f04f 33ff 	mov.w	r3, #4294967295
 8004154:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004158:	4618      	mov	r0, r3
 800415a:	3728      	adds	r7, #40	; 0x28
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	20012e5c 	.word	0x20012e5c

08004164 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004170:	2300      	movs	r3, #0
 8004172:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00f      	beq.n	800419a <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800417a:	e002      	b.n	8004182 <_EncodeStr+0x1e>
      Len++;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	3301      	adds	r3, #1
 8004180:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	4413      	add	r3, r2
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f6      	bne.n	800417c <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	429a      	cmp	r2, r3
 8004194:	d901      	bls.n	800419a <_EncodeStr+0x36>
      Len = Limit;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	2bfe      	cmp	r3, #254	; 0xfe
 800419e:	d806      	bhi.n	80041ae <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	1c5a      	adds	r2, r3, #1
 80041a4:	60fa      	str	r2, [r7, #12]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	b2d2      	uxtb	r2, r2
 80041aa:	701a      	strb	r2, [r3, #0]
 80041ac:	e011      	b.n	80041d2 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	1c5a      	adds	r2, r3, #1
 80041b2:	60fa      	str	r2, [r7, #12]
 80041b4:	22ff      	movs	r2, #255	; 0xff
 80041b6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	60fa      	str	r2, [r7, #12]
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	b2d2      	uxtb	r2, r2
 80041c2:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	0a19      	lsrs	r1, r3, #8
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	60fa      	str	r2, [r7, #12]
 80041ce:	b2ca      	uxtb	r2, r1
 80041d0:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80041d2:	2300      	movs	r3, #0
 80041d4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80041d6:	e00a      	b.n	80041ee <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	1c53      	adds	r3, r2, #1
 80041dc:	60bb      	str	r3, [r7, #8]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	1c59      	adds	r1, r3, #1
 80041e2:	60f9      	str	r1, [r7, #12]
 80041e4:	7812      	ldrb	r2, [r2, #0]
 80041e6:	701a      	strb	r2, [r3, #0]
    n++;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	3301      	adds	r3, #1
 80041ec:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d3f0      	bcc.n	80041d8 <_EncodeStr+0x74>
  }
  return pPayload;
 80041f6:	68fb      	ldr	r3, [r7, #12]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	371c      	adds	r7, #28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3307      	adds	r3, #7
}
 8004210:	4618      	mov	r0, r3
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004222:	4b35      	ldr	r3, [pc, #212]	; (80042f8 <_HandleIncomingPacket+0xdc>)
 8004224:	7e1b      	ldrb	r3, [r3, #24]
 8004226:	4618      	mov	r0, r3
 8004228:	1cfb      	adds	r3, r7, #3
 800422a:	2201      	movs	r2, #1
 800422c:	4619      	mov	r1, r3
 800422e:	f7ff fdcd 	bl	8003dcc <SEGGER_RTT_ReadNoLock>
 8004232:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d052      	beq.n	80042e0 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800423a:	78fb      	ldrb	r3, [r7, #3]
 800423c:	2b80      	cmp	r3, #128	; 0x80
 800423e:	d031      	beq.n	80042a4 <_HandleIncomingPacket+0x88>
 8004240:	2b80      	cmp	r3, #128	; 0x80
 8004242:	dc40      	bgt.n	80042c6 <_HandleIncomingPacket+0xaa>
 8004244:	2b07      	cmp	r3, #7
 8004246:	dc15      	bgt.n	8004274 <_HandleIncomingPacket+0x58>
 8004248:	2b00      	cmp	r3, #0
 800424a:	dd3c      	ble.n	80042c6 <_HandleIncomingPacket+0xaa>
 800424c:	3b01      	subs	r3, #1
 800424e:	2b06      	cmp	r3, #6
 8004250:	d839      	bhi.n	80042c6 <_HandleIncomingPacket+0xaa>
 8004252:	a201      	add	r2, pc, #4	; (adr r2, 8004258 <_HandleIncomingPacket+0x3c>)
 8004254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004258:	0800427b 	.word	0x0800427b
 800425c:	08004281 	.word	0x08004281
 8004260:	08004287 	.word	0x08004287
 8004264:	0800428d 	.word	0x0800428d
 8004268:	08004293 	.word	0x08004293
 800426c:	08004299 	.word	0x08004299
 8004270:	0800429f 	.word	0x0800429f
 8004274:	2b7f      	cmp	r3, #127	; 0x7f
 8004276:	d035      	beq.n	80042e4 <_HandleIncomingPacket+0xc8>
 8004278:	e025      	b.n	80042c6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800427a:	f000 fec5 	bl	8005008 <SEGGER_SYSVIEW_Start>
      break;
 800427e:	e036      	b.n	80042ee <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004280:	f000 ff7e 	bl	8005180 <SEGGER_SYSVIEW_Stop>
      break;
 8004284:	e033      	b.n	80042ee <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004286:	f001 f957 	bl	8005538 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800428a:	e030      	b.n	80042ee <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800428c:	f001 f91c 	bl	80054c8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004290:	e02d      	b.n	80042ee <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004292:	f000 ff9b 	bl	80051cc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004296:	e02a      	b.n	80042ee <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004298:	f001 fb7a 	bl	8005990 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800429c:	e027      	b.n	80042ee <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800429e:	f001 fb59 	bl	8005954 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80042a2:	e024      	b.n	80042ee <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80042a4:	4b14      	ldr	r3, [pc, #80]	; (80042f8 <_HandleIncomingPacket+0xdc>)
 80042a6:	7e1b      	ldrb	r3, [r3, #24]
 80042a8:	4618      	mov	r0, r3
 80042aa:	1cfb      	adds	r3, r7, #3
 80042ac:	2201      	movs	r2, #1
 80042ae:	4619      	mov	r1, r3
 80042b0:	f7ff fd8c 	bl	8003dcc <SEGGER_RTT_ReadNoLock>
 80042b4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d015      	beq.n	80042e8 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	4618      	mov	r0, r3
 80042c0:	f001 fac8 	bl	8005854 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80042c4:	e010      	b.n	80042e8 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80042c6:	78fb      	ldrb	r3, [r7, #3]
 80042c8:	b25b      	sxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	da0e      	bge.n	80042ec <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80042ce:	4b0a      	ldr	r3, [pc, #40]	; (80042f8 <_HandleIncomingPacket+0xdc>)
 80042d0:	7e1b      	ldrb	r3, [r3, #24]
 80042d2:	4618      	mov	r0, r3
 80042d4:	1cfb      	adds	r3, r7, #3
 80042d6:	2201      	movs	r2, #1
 80042d8:	4619      	mov	r1, r3
 80042da:	f7ff fd77 	bl	8003dcc <SEGGER_RTT_ReadNoLock>
      }
      break;
 80042de:	e005      	b.n	80042ec <_HandleIncomingPacket+0xd0>
    }
  }
 80042e0:	bf00      	nop
 80042e2:	e004      	b.n	80042ee <_HandleIncomingPacket+0xd2>
      break;
 80042e4:	bf00      	nop
 80042e6:	e002      	b.n	80042ee <_HandleIncomingPacket+0xd2>
      break;
 80042e8:	bf00      	nop
 80042ea:	e000      	b.n	80042ee <_HandleIncomingPacket+0xd2>
      break;
 80042ec:	bf00      	nop
}
 80042ee:	bf00      	nop
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	2001431c 	.word	0x2001431c

080042fc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08c      	sub	sp, #48	; 0x30
 8004300:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004302:	2301      	movs	r3, #1
 8004304:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004306:	1d3b      	adds	r3, r7, #4
 8004308:	3301      	adds	r3, #1
 800430a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004310:	4b32      	ldr	r3, [pc, #200]	; (80043dc <_TrySendOverflowPacket+0xe0>)
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	62bb      	str	r3, [r7, #40]	; 0x28
 8004316:	e00b      	b.n	8004330 <_TrySendOverflowPacket+0x34>
 8004318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431a:	b2da      	uxtb	r2, r3
 800431c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431e:	1c59      	adds	r1, r3, #1
 8004320:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004322:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	701a      	strb	r2, [r3, #0]
 800432a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432c:	09db      	lsrs	r3, r3, #7
 800432e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004332:	2b7f      	cmp	r3, #127	; 0x7f
 8004334:	d8f0      	bhi.n	8004318 <_TrySendOverflowPacket+0x1c>
 8004336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800433c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	701a      	strb	r2, [r3, #0]
 8004342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004344:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004346:	4b26      	ldr	r3, [pc, #152]	; (80043e0 <_TrySendOverflowPacket+0xe4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800434c:	4b23      	ldr	r3, [pc, #140]	; (80043dc <_TrySendOverflowPacket+0xe0>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	627b      	str	r3, [r7, #36]	; 0x24
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	623b      	str	r3, [r7, #32]
 800435e:	e00b      	b.n	8004378 <_TrySendOverflowPacket+0x7c>
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	b2da      	uxtb	r2, r3
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	1c59      	adds	r1, r3, #1
 8004368:	6279      	str	r1, [r7, #36]	; 0x24
 800436a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800436e:	b2d2      	uxtb	r2, r2
 8004370:	701a      	strb	r2, [r3, #0]
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	09db      	lsrs	r3, r3, #7
 8004376:	623b      	str	r3, [r7, #32]
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	2b7f      	cmp	r3, #127	; 0x7f
 800437c:	d8f0      	bhi.n	8004360 <_TrySendOverflowPacket+0x64>
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	627a      	str	r2, [r7, #36]	; 0x24
 8004384:	6a3a      	ldr	r2, [r7, #32]
 8004386:	b2d2      	uxtb	r2, r2
 8004388:	701a      	strb	r2, [r3, #0]
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800438e:	4b13      	ldr	r3, [pc, #76]	; (80043dc <_TrySendOverflowPacket+0xe0>)
 8004390:	785b      	ldrb	r3, [r3, #1]
 8004392:	4618      	mov	r0, r3
 8004394:	1d3b      	adds	r3, r7, #4
 8004396:	69fa      	ldr	r2, [r7, #28]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	461a      	mov	r2, r3
 800439c:	1d3b      	adds	r3, r7, #4
 800439e:	4619      	mov	r1, r3
 80043a0:	f7fb ff16 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80043a4:	4603      	mov	r3, r0
 80043a6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80043a8:	f7ff fade 	bl	8003968 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d009      	beq.n	80043c6 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80043b2:	4a0a      	ldr	r2, [pc, #40]	; (80043dc <_TrySendOverflowPacket+0xe0>)
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80043b8:	4b08      	ldr	r3, [pc, #32]	; (80043dc <_TrySendOverflowPacket+0xe0>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	3b01      	subs	r3, #1
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	4b06      	ldr	r3, [pc, #24]	; (80043dc <_TrySendOverflowPacket+0xe0>)
 80043c2:	701a      	strb	r2, [r3, #0]
 80043c4:	e004      	b.n	80043d0 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80043c6:	4b05      	ldr	r3, [pc, #20]	; (80043dc <_TrySendOverflowPacket+0xe0>)
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	3301      	adds	r3, #1
 80043cc:	4a03      	ldr	r2, [pc, #12]	; (80043dc <_TrySendOverflowPacket+0xe0>)
 80043ce:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80043d0:	693b      	ldr	r3, [r7, #16]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3730      	adds	r7, #48	; 0x30
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	2001431c 	.word	0x2001431c
 80043e0:	e0001004 	.word	0xe0001004

080043e4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08a      	sub	sp, #40	; 0x28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80043f0:	4b96      	ldr	r3, [pc, #600]	; (800464c <_SendPacket+0x268>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d010      	beq.n	800441a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80043f8:	4b94      	ldr	r3, [pc, #592]	; (800464c <_SendPacket+0x268>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 8130 	beq.w	8004662 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004402:	4b92      	ldr	r3, [pc, #584]	; (800464c <_SendPacket+0x268>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	2b02      	cmp	r3, #2
 8004408:	d109      	bne.n	800441e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800440a:	f7ff ff77 	bl	80042fc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800440e:	4b8f      	ldr	r3, [pc, #572]	; (800464c <_SendPacket+0x268>)
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	2b01      	cmp	r3, #1
 8004414:	f040 8127 	bne.w	8004666 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8004418:	e001      	b.n	800441e <_SendPacket+0x3a>
    goto Send;
 800441a:	bf00      	nop
 800441c:	e000      	b.n	8004420 <_SendPacket+0x3c>
Send:
 800441e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b1f      	cmp	r3, #31
 8004424:	d809      	bhi.n	800443a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004426:	4b89      	ldr	r3, [pc, #548]	; (800464c <_SendPacket+0x268>)
 8004428:	69da      	ldr	r2, [r3, #28]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	fa22 f303 	lsr.w	r3, r2, r3
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b00      	cmp	r3, #0
 8004436:	f040 8118 	bne.w	800466a <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b17      	cmp	r3, #23
 800443e:	d807      	bhi.n	8004450 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	3b01      	subs	r3, #1
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	b2da      	uxtb	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	701a      	strb	r2, [r3, #0]
 800444e:	e0c4      	b.n	80045da <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	2b7f      	cmp	r3, #127	; 0x7f
 800445c:	d912      	bls.n	8004484 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	09da      	lsrs	r2, r3, #7
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	3b01      	subs	r3, #1
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	b2db      	uxtb	r3, r3
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	3a01      	subs	r2, #1
 8004476:	60fa      	str	r2, [r7, #12]
 8004478:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800447c:	b2da      	uxtb	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	701a      	strb	r2, [r3, #0]
 8004482:	e006      	b.n	8004492 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	3b01      	subs	r3, #1
 8004488:	60fb      	str	r3, [r7, #12]
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	b2da      	uxtb	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b7e      	cmp	r3, #126	; 0x7e
 8004496:	d807      	bhi.n	80044a8 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	3b01      	subs	r3, #1
 800449c:	60fb      	str	r3, [r7, #12]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	701a      	strb	r2, [r3, #0]
 80044a6:	e098      	b.n	80045da <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044ae:	d212      	bcs.n	80044d6 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	09da      	lsrs	r2, r3, #7
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	3a01      	subs	r2, #1
 80044c8:	60fa      	str	r2, [r7, #12]
 80044ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	701a      	strb	r2, [r3, #0]
 80044d4:	e081      	b.n	80045da <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044dc:	d21d      	bcs.n	800451a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	0b9a      	lsrs	r2, r3, #14
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	3b01      	subs	r3, #1
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	b2d2      	uxtb	r2, r2
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	09db      	lsrs	r3, r3, #7
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	3a01      	subs	r2, #1
 80044f8:	60fa      	str	r2, [r7, #12]
 80044fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	b2db      	uxtb	r3, r3
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	3a01      	subs	r2, #1
 800450c:	60fa      	str	r2, [r7, #12]
 800450e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004512:	b2da      	uxtb	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	701a      	strb	r2, [r3, #0]
 8004518:	e05f      	b.n	80045da <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004520:	d228      	bcs.n	8004574 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	0d5a      	lsrs	r2, r3, #21
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3b01      	subs	r3, #1
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	b2d2      	uxtb	r2, r2
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	0b9b      	lsrs	r3, r3, #14
 8004536:	b2db      	uxtb	r3, r3
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	3a01      	subs	r2, #1
 800453c:	60fa      	str	r2, [r7, #12]
 800453e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004542:	b2da      	uxtb	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	09db      	lsrs	r3, r3, #7
 800454c:	b2db      	uxtb	r3, r3
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	3a01      	subs	r2, #1
 8004552:	60fa      	str	r2, [r7, #12]
 8004554:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004558:	b2da      	uxtb	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	b2db      	uxtb	r3, r3
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	3a01      	subs	r2, #1
 8004566:	60fa      	str	r2, [r7, #12]
 8004568:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800456c:	b2da      	uxtb	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	701a      	strb	r2, [r3, #0]
 8004572:	e032      	b.n	80045da <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	0f1a      	lsrs	r2, r3, #28
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	3b01      	subs	r3, #1
 800457c:	60fb      	str	r3, [r7, #12]
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	0d5b      	lsrs	r3, r3, #21
 8004588:	b2db      	uxtb	r3, r3
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	3a01      	subs	r2, #1
 800458e:	60fa      	str	r2, [r7, #12]
 8004590:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004594:	b2da      	uxtb	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	0b9b      	lsrs	r3, r3, #14
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	3a01      	subs	r2, #1
 80045a4:	60fa      	str	r2, [r7, #12]
 80045a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	09db      	lsrs	r3, r3, #7
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	3a01      	subs	r2, #1
 80045ba:	60fa      	str	r2, [r7, #12]
 80045bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	3a01      	subs	r2, #1
 80045ce:	60fa      	str	r2, [r7, #12]
 80045d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80045da:	4b1d      	ldr	r3, [pc, #116]	; (8004650 <_SendPacket+0x26c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80045e0:	4b1a      	ldr	r3, [pc, #104]	; (800464c <_SendPacket+0x268>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	627b      	str	r3, [r7, #36]	; 0x24
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	623b      	str	r3, [r7, #32]
 80045f2:	e00b      	b.n	800460c <_SendPacket+0x228>
 80045f4:	6a3b      	ldr	r3, [r7, #32]
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	1c59      	adds	r1, r3, #1
 80045fc:	6279      	str	r1, [r7, #36]	; 0x24
 80045fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004602:	b2d2      	uxtb	r2, r2
 8004604:	701a      	strb	r2, [r3, #0]
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	09db      	lsrs	r3, r3, #7
 800460a:	623b      	str	r3, [r7, #32]
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	2b7f      	cmp	r3, #127	; 0x7f
 8004610:	d8f0      	bhi.n	80045f4 <_SendPacket+0x210>
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	627a      	str	r2, [r7, #36]	; 0x24
 8004618:	6a3a      	ldr	r2, [r7, #32]
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	701a      	strb	r2, [r3, #0]
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004622:	4b0a      	ldr	r3, [pc, #40]	; (800464c <_SendPacket+0x268>)
 8004624:	785b      	ldrb	r3, [r3, #1]
 8004626:	4618      	mov	r0, r3
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	461a      	mov	r2, r3
 8004630:	68f9      	ldr	r1, [r7, #12]
 8004632:	f7fb fdcd 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004636:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004638:	f7ff f996 	bl	8003968 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d008      	beq.n	8004654 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004642:	4a02      	ldr	r2, [pc, #8]	; (800464c <_SendPacket+0x268>)
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	60d3      	str	r3, [r2, #12]
 8004648:	e010      	b.n	800466c <_SendPacket+0x288>
 800464a:	bf00      	nop
 800464c:	2001431c 	.word	0x2001431c
 8004650:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004654:	4b19      	ldr	r3, [pc, #100]	; (80046bc <_SendPacket+0x2d8>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	3301      	adds	r3, #1
 800465a:	b2da      	uxtb	r2, r3
 800465c:	4b17      	ldr	r3, [pc, #92]	; (80046bc <_SendPacket+0x2d8>)
 800465e:	701a      	strb	r2, [r3, #0]
 8004660:	e004      	b.n	800466c <_SendPacket+0x288>
    goto SendDone;
 8004662:	bf00      	nop
 8004664:	e002      	b.n	800466c <_SendPacket+0x288>
      goto SendDone;
 8004666:	bf00      	nop
 8004668:	e000      	b.n	800466c <_SendPacket+0x288>
      goto SendDone;
 800466a:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800466c:	4b13      	ldr	r3, [pc, #76]	; (80046bc <_SendPacket+0x2d8>)
 800466e:	7e1b      	ldrb	r3, [r3, #24]
 8004670:	4619      	mov	r1, r3
 8004672:	4a13      	ldr	r2, [pc, #76]	; (80046c0 <_SendPacket+0x2dc>)
 8004674:	460b      	mov	r3, r1
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	440b      	add	r3, r1
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	4413      	add	r3, r2
 800467e:	336c      	adds	r3, #108	; 0x6c
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	4b0e      	ldr	r3, [pc, #56]	; (80046bc <_SendPacket+0x2d8>)
 8004684:	7e1b      	ldrb	r3, [r3, #24]
 8004686:	4618      	mov	r0, r3
 8004688:	490d      	ldr	r1, [pc, #52]	; (80046c0 <_SendPacket+0x2dc>)
 800468a:	4603      	mov	r3, r0
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	4403      	add	r3, r0
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	440b      	add	r3, r1
 8004694:	3370      	adds	r3, #112	; 0x70
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d00b      	beq.n	80046b4 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800469c:	4b07      	ldr	r3, [pc, #28]	; (80046bc <_SendPacket+0x2d8>)
 800469e:	789b      	ldrb	r3, [r3, #2]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d107      	bne.n	80046b4 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80046a4:	4b05      	ldr	r3, [pc, #20]	; (80046bc <_SendPacket+0x2d8>)
 80046a6:	2201      	movs	r2, #1
 80046a8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80046aa:	f7ff fdb7 	bl	800421c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80046ae:	4b03      	ldr	r3, [pc, #12]	; (80046bc <_SendPacket+0x2d8>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80046b4:	bf00      	nop
 80046b6:	3728      	adds	r7, #40	; 0x28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	2001431c 	.word	0x2001431c
 80046c0:	20012e5c 	.word	0x20012e5c

080046c4 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b08a      	sub	sp, #40	; 0x28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	460b      	mov	r3, r1
 80046ce:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	3301      	adds	r3, #1
 80046da:	2b80      	cmp	r3, #128	; 0x80
 80046dc:	d80a      	bhi.n	80046f4 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	1c59      	adds	r1, r3, #1
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6051      	str	r1, [r2, #4]
 80046e8:	78fa      	ldrb	r2, [r7, #3]
 80046ea:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	2b80      	cmp	r3, #128	; 0x80
 80046fa:	d15a      	bne.n	80047b2 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691a      	ldr	r2, [r3, #16]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	b2d2      	uxtb	r2, r2
 8004706:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	627b      	str	r3, [r7, #36]	; 0x24
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	623b      	str	r3, [r7, #32]
 800471c:	e00b      	b.n	8004736 <_StoreChar+0x72>
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	b2da      	uxtb	r2, r3
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	1c59      	adds	r1, r3, #1
 8004726:	6279      	str	r1, [r7, #36]	; 0x24
 8004728:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800472c:	b2d2      	uxtb	r2, r2
 800472e:	701a      	strb	r2, [r3, #0]
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	09db      	lsrs	r3, r3, #7
 8004734:	623b      	str	r3, [r7, #32]
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	2b7f      	cmp	r3, #127	; 0x7f
 800473a:	d8f0      	bhi.n	800471e <_StoreChar+0x5a>
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	1c5a      	adds	r2, r3, #1
 8004740:	627a      	str	r2, [r7, #36]	; 0x24
 8004742:	6a3a      	ldr	r2, [r7, #32]
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	701a      	strb	r2, [r3, #0]
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	61fb      	str	r3, [r7, #28]
 8004750:	2300      	movs	r3, #0
 8004752:	61bb      	str	r3, [r7, #24]
 8004754:	e00b      	b.n	800476e <_StoreChar+0xaa>
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	b2da      	uxtb	r2, r3
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	1c59      	adds	r1, r3, #1
 800475e:	61f9      	str	r1, [r7, #28]
 8004760:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	701a      	strb	r2, [r3, #0]
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	09db      	lsrs	r3, r3, #7
 800476c:	61bb      	str	r3, [r7, #24]
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	2b7f      	cmp	r3, #127	; 0x7f
 8004772:	d8f0      	bhi.n	8004756 <_StoreChar+0x92>
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	1c5a      	adds	r2, r3, #1
 8004778:	61fa      	str	r2, [r7, #28]
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	b2d2      	uxtb	r2, r2
 800477e:	701a      	strb	r2, [r3, #0]
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	221a      	movs	r2, #26
 800478a:	6939      	ldr	r1, [r7, #16]
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff fe29 	bl	80043e4 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	f7ff fd34 	bl	8004204 <_PreparePacket>
 800479c:	4602      	mov	r2, r0
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	611a      	str	r2, [r3, #16]
  }
}
 80047b2:	bf00      	nop
 80047b4:	3728      	adds	r7, #40	; 0x28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
	...

080047bc <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80047bc:	b580      	push	{r7, lr}
 80047be:	b08a      	sub	sp, #40	; 0x28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
 80047c8:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80047ce:	2301      	movs	r3, #1
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80047d2:	2301      	movs	r3, #1
 80047d4:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80047d6:	e007      	b.n	80047e8 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80047d8:	6a3a      	ldr	r2, [r7, #32]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e0:	623b      	str	r3, [r7, #32]
    Width++;
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	3301      	adds	r3, #1
 80047e6:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80047e8:	6a3a      	ldr	r2, [r7, #32]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d2f3      	bcs.n	80047d8 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d901      	bls.n	80047fc <_PrintUnsigned+0x40>
    Width = NumDigits;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80047fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d11f      	bne.n	8004846 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8004806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01c      	beq.n	8004846 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800480c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d005      	beq.n	8004822 <_PrintUnsigned+0x66>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d102      	bne.n	8004822 <_PrintUnsigned+0x66>
        c = '0';
 800481c:	2330      	movs	r3, #48	; 0x30
 800481e:	76fb      	strb	r3, [r7, #27]
 8004820:	e001      	b.n	8004826 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004822:	2320      	movs	r3, #32
 8004824:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004826:	e007      	b.n	8004838 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8004828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482a:	3b01      	subs	r3, #1
 800482c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800482e:	7efb      	ldrb	r3, [r7, #27]
 8004830:	4619      	mov	r1, r3
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f7ff ff46 	bl	80046c4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <_PrintUnsigned+0x8a>
 800483e:	69fa      	ldr	r2, [r7, #28]
 8004840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004842:	429a      	cmp	r2, r3
 8004844:	d3f0      	bcc.n	8004828 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d903      	bls.n	8004854 <_PrintUnsigned+0x98>
      NumDigits--;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	3b01      	subs	r3, #1
 8004850:	603b      	str	r3, [r7, #0]
 8004852:	e009      	b.n	8004868 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	fbb2 f3f3 	udiv	r3, r2, r3
 800485c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	429a      	cmp	r2, r3
 8004864:	d200      	bcs.n	8004868 <_PrintUnsigned+0xac>
        break;
 8004866:	e005      	b.n	8004874 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	fb02 f303 	mul.w	r3, r2, r3
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004872:	e7e8      	b.n	8004846 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	fbb2 f3f3 	udiv	r3, r2, r3
 800487c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004882:	fb02 f303 	mul.w	r3, r2, r3
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800488c:	4a15      	ldr	r2, [pc, #84]	; (80048e4 <_PrintUnsigned+0x128>)
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	4413      	add	r3, r2
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	4619      	mov	r1, r3
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f7ff ff14 	bl	80046c4 <_StoreChar>
    Digit /= Base;
 800489c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1e3      	bne.n	8004874 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80048ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d011      	beq.n	80048da <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80048b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00e      	beq.n	80048da <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80048bc:	e006      	b.n	80048cc <_PrintUnsigned+0x110>
        FieldWidth--;
 80048be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c0:	3b01      	subs	r3, #1
 80048c2:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80048c4:	2120      	movs	r1, #32
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f7ff fefc 	bl	80046c4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80048cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <_PrintUnsigned+0x11e>
 80048d2:	69fa      	ldr	r2, [r7, #28]
 80048d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d3f1      	bcc.n	80048be <_PrintUnsigned+0x102>
      }
    }
  }
}
 80048da:	bf00      	nop
 80048dc:	3728      	adds	r7, #40	; 0x28
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	08005d74 	.word	0x08005d74

080048e8 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b088      	sub	sp, #32
 80048ec:	af02      	add	r7, sp, #8
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	bfb8      	it	lt
 80048fc:	425b      	neglt	r3, r3
 80048fe:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004900:	2301      	movs	r3, #1
 8004902:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004904:	e007      	b.n	8004916 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	fb92 f3f3 	sdiv	r3, r2, r3
 800490e:	613b      	str	r3, [r7, #16]
    Width++;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	3301      	adds	r3, #1
 8004914:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	429a      	cmp	r2, r3
 800491c:	daf3      	bge.n	8004906 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	429a      	cmp	r2, r3
 8004924:	d901      	bls.n	800492a <_PrintInt+0x42>
    Width = NumDigits;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00a      	beq.n	8004946 <_PrintInt+0x5e>
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2b00      	cmp	r3, #0
 8004934:	db04      	blt.n	8004940 <_PrintInt+0x58>
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	d002      	beq.n	8004946 <_PrintInt+0x5e>
    FieldWidth--;
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	3b01      	subs	r3, #1
 8004944:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d002      	beq.n	8004956 <_PrintInt+0x6e>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d016      	beq.n	8004984 <_PrintInt+0x9c>
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	d111      	bne.n	8004984 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00e      	beq.n	8004984 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004966:	e006      	b.n	8004976 <_PrintInt+0x8e>
        FieldWidth--;
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	3b01      	subs	r3, #1
 800496c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800496e:	2120      	movs	r1, #32
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f7ff fea7 	bl	80046c4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004976:	6a3b      	ldr	r3, [r7, #32]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d003      	beq.n	8004984 <_PrintInt+0x9c>
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	429a      	cmp	r2, r3
 8004982:	d3f1      	bcc.n	8004968 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	da07      	bge.n	800499a <_PrintInt+0xb2>
    v = -v;
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	425b      	negs	r3, r3
 800498e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004990:	212d      	movs	r1, #45	; 0x2d
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f7ff fe96 	bl	80046c4 <_StoreChar>
 8004998:	e008      	b.n	80049ac <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80049a4:	212b      	movs	r1, #43	; 0x2b
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f7ff fe8c 	bl	80046c4 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d019      	beq.n	80049ea <_PrintInt+0x102>
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d114      	bne.n	80049ea <_PrintInt+0x102>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d111      	bne.n	80049ea <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00e      	beq.n	80049ea <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80049cc:	e006      	b.n	80049dc <_PrintInt+0xf4>
        FieldWidth--;
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	3b01      	subs	r3, #1
 80049d2:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80049d4:	2130      	movs	r1, #48	; 0x30
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f7ff fe74 	bl	80046c4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <_PrintInt+0x102>
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d3f1      	bcc.n	80049ce <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80049ea:	68b9      	ldr	r1, [r7, #8]
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	9301      	str	r3, [sp, #4]
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f7ff fedf 	bl	80047bc <_PrintUnsigned>
}
 80049fe:	bf00      	nop
 8004a00:	3718      	adds	r7, #24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
	...

08004a08 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b098      	sub	sp, #96	; 0x60
 8004a0c:	af02      	add	r7, sp, #8
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004a14:	f3ef 8311 	mrs	r3, BASEPRI
 8004a18:	f04f 0120 	mov.w	r1, #32
 8004a1c:	f381 8811 	msr	BASEPRI, r1
 8004a20:	633b      	str	r3, [r7, #48]	; 0x30
 8004a22:	48b7      	ldr	r0, [pc, #732]	; (8004d00 <_VPrintTarget+0x2f8>)
 8004a24:	f7ff fbee 	bl	8004204 <_PreparePacket>
 8004a28:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004a2a:	4bb5      	ldr	r3, [pc, #724]	; (8004d00 <_VPrintTarget+0x2f8>)
 8004a2c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a34:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004a4e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f000 8183 	beq.w	8004d5e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8004a58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a5c:	2b25      	cmp	r3, #37	; 0x25
 8004a5e:	f040 8170 	bne.w	8004d42 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004a62:	2300      	movs	r3, #0
 8004a64:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004a66:	2301      	movs	r3, #1
 8004a68:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8004a72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a76:	3b23      	subs	r3, #35	; 0x23
 8004a78:	2b0d      	cmp	r3, #13
 8004a7a:	d83f      	bhi.n	8004afc <_VPrintTarget+0xf4>
 8004a7c:	a201      	add	r2, pc, #4	; (adr r2, 8004a84 <_VPrintTarget+0x7c>)
 8004a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a82:	bf00      	nop
 8004a84:	08004aed 	.word	0x08004aed
 8004a88:	08004afd 	.word	0x08004afd
 8004a8c:	08004afd 	.word	0x08004afd
 8004a90:	08004afd 	.word	0x08004afd
 8004a94:	08004afd 	.word	0x08004afd
 8004a98:	08004afd 	.word	0x08004afd
 8004a9c:	08004afd 	.word	0x08004afd
 8004aa0:	08004afd 	.word	0x08004afd
 8004aa4:	08004add 	.word	0x08004add
 8004aa8:	08004afd 	.word	0x08004afd
 8004aac:	08004abd 	.word	0x08004abd
 8004ab0:	08004afd 	.word	0x08004afd
 8004ab4:	08004afd 	.word	0x08004afd
 8004ab8:	08004acd 	.word	0x08004acd
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004abe:	f043 0301 	orr.w	r3, r3, #1
 8004ac2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	60fb      	str	r3, [r7, #12]
 8004aca:	e01a      	b.n	8004b02 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004acc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ace:	f043 0302 	orr.w	r3, r3, #2
 8004ad2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	60fb      	str	r3, [r7, #12]
 8004ada:	e012      	b.n	8004b02 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ade:	f043 0304 	orr.w	r3, r3, #4
 8004ae2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	60fb      	str	r3, [r7, #12]
 8004aea:	e00a      	b.n	8004b02 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aee:	f043 0308 	orr.w	r3, r3, #8
 8004af2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	3301      	adds	r3, #1
 8004af8:	60fb      	str	r3, [r7, #12]
 8004afa:	e002      	b.n	8004b02 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004afc:	2300      	movs	r3, #0
 8004afe:	653b      	str	r3, [r7, #80]	; 0x50
 8004b00:	bf00      	nop
        }
      } while (v);
 8004b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1b0      	bne.n	8004a6a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004b14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b18:	2b2f      	cmp	r3, #47	; 0x2f
 8004b1a:	d912      	bls.n	8004b42 <_VPrintTarget+0x13a>
 8004b1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b20:	2b39      	cmp	r3, #57	; 0x39
 8004b22:	d80e      	bhi.n	8004b42 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	3301      	adds	r3, #1
 8004b28:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004b2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	461a      	mov	r2, r3
 8004b36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b3a:	4413      	add	r3, r2
 8004b3c:	3b30      	subs	r3, #48	; 0x30
 8004b3e:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004b40:	e7e4      	b.n	8004b0c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004b42:	2300      	movs	r3, #0
 8004b44:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004b4e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b52:	2b2e      	cmp	r3, #46	; 0x2e
 8004b54:	d11d      	bne.n	8004b92 <_VPrintTarget+0x18a>
        sFormat++;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004b64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b68:	2b2f      	cmp	r3, #47	; 0x2f
 8004b6a:	d912      	bls.n	8004b92 <_VPrintTarget+0x18a>
 8004b6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b70:	2b39      	cmp	r3, #57	; 0x39
 8004b72:	d80e      	bhi.n	8004b92 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	3301      	adds	r3, #1
 8004b78:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004b7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	461a      	mov	r2, r3
 8004b86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b8a:	4413      	add	r3, r2
 8004b8c:	3b30      	subs	r3, #48	; 0x30
 8004b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004b90:	e7e4      	b.n	8004b5c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004b9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b9e:	2b6c      	cmp	r3, #108	; 0x6c
 8004ba0:	d003      	beq.n	8004baa <_VPrintTarget+0x1a2>
 8004ba2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ba6:	2b68      	cmp	r3, #104	; 0x68
 8004ba8:	d107      	bne.n	8004bba <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004bb8:	e7ef      	b.n	8004b9a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004bba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bbe:	2b25      	cmp	r3, #37	; 0x25
 8004bc0:	f000 80b3 	beq.w	8004d2a <_VPrintTarget+0x322>
 8004bc4:	2b25      	cmp	r3, #37	; 0x25
 8004bc6:	f2c0 80b7 	blt.w	8004d38 <_VPrintTarget+0x330>
 8004bca:	2b78      	cmp	r3, #120	; 0x78
 8004bcc:	f300 80b4 	bgt.w	8004d38 <_VPrintTarget+0x330>
 8004bd0:	2b58      	cmp	r3, #88	; 0x58
 8004bd2:	f2c0 80b1 	blt.w	8004d38 <_VPrintTarget+0x330>
 8004bd6:	3b58      	subs	r3, #88	; 0x58
 8004bd8:	2b20      	cmp	r3, #32
 8004bda:	f200 80ad 	bhi.w	8004d38 <_VPrintTarget+0x330>
 8004bde:	a201      	add	r2, pc, #4	; (adr r2, 8004be4 <_VPrintTarget+0x1dc>)
 8004be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be4:	08004cdb 	.word	0x08004cdb
 8004be8:	08004d39 	.word	0x08004d39
 8004bec:	08004d39 	.word	0x08004d39
 8004bf0:	08004d39 	.word	0x08004d39
 8004bf4:	08004d39 	.word	0x08004d39
 8004bf8:	08004d39 	.word	0x08004d39
 8004bfc:	08004d39 	.word	0x08004d39
 8004c00:	08004d39 	.word	0x08004d39
 8004c04:	08004d39 	.word	0x08004d39
 8004c08:	08004d39 	.word	0x08004d39
 8004c0c:	08004d39 	.word	0x08004d39
 8004c10:	08004c69 	.word	0x08004c69
 8004c14:	08004c8f 	.word	0x08004c8f
 8004c18:	08004d39 	.word	0x08004d39
 8004c1c:	08004d39 	.word	0x08004d39
 8004c20:	08004d39 	.word	0x08004d39
 8004c24:	08004d39 	.word	0x08004d39
 8004c28:	08004d39 	.word	0x08004d39
 8004c2c:	08004d39 	.word	0x08004d39
 8004c30:	08004d39 	.word	0x08004d39
 8004c34:	08004d39 	.word	0x08004d39
 8004c38:	08004d39 	.word	0x08004d39
 8004c3c:	08004d39 	.word	0x08004d39
 8004c40:	08004d39 	.word	0x08004d39
 8004c44:	08004d05 	.word	0x08004d05
 8004c48:	08004d39 	.word	0x08004d39
 8004c4c:	08004d39 	.word	0x08004d39
 8004c50:	08004d39 	.word	0x08004d39
 8004c54:	08004d39 	.word	0x08004d39
 8004c58:	08004cb5 	.word	0x08004cb5
 8004c5c:	08004d39 	.word	0x08004d39
 8004c60:	08004d39 	.word	0x08004d39
 8004c64:	08004cdb 	.word	0x08004cdb
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	1d19      	adds	r1, r3, #4
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	6011      	str	r1, [r2, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004c76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8004c7c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004c80:	f107 0314 	add.w	r3, r7, #20
 8004c84:	4611      	mov	r1, r2
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff fd1c 	bl	80046c4 <_StoreChar>
        break;
 8004c8c:	e055      	b.n	8004d3a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	1d19      	adds	r1, r3, #4
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6011      	str	r1, [r2, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004c9c:	f107 0014 	add.w	r0, r7, #20
 8004ca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ca2:	9301      	str	r3, [sp, #4]
 8004ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004caa:	220a      	movs	r2, #10
 8004cac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004cae:	f7ff fe1b 	bl	80048e8 <_PrintInt>
        break;
 8004cb2:	e042      	b.n	8004d3a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	1d19      	adds	r1, r3, #4
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6011      	str	r1, [r2, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004cc2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004cc4:	f107 0014 	add.w	r0, r7, #20
 8004cc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cca:	9301      	str	r3, [sp, #4]
 8004ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cce:	9300      	str	r3, [sp, #0]
 8004cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cd2:	220a      	movs	r2, #10
 8004cd4:	f7ff fd72 	bl	80047bc <_PrintUnsigned>
        break;
 8004cd8:	e02f      	b.n	8004d3a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	1d19      	adds	r1, r3, #4
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	6011      	str	r1, [r2, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004ce8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004cea:	f107 0014 	add.w	r0, r7, #20
 8004cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cf0:	9301      	str	r3, [sp, #4]
 8004cf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cf8:	2210      	movs	r2, #16
 8004cfa:	f7ff fd5f 	bl	80047bc <_PrintUnsigned>
        break;
 8004cfe:	e01c      	b.n	8004d3a <_VPrintTarget+0x332>
 8004d00:	2001434c 	.word	0x2001434c
      case 'p':
        v = va_arg(*pParamList, int);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	1d19      	adds	r1, r3, #4
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	6011      	str	r1, [r2, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004d12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004d14:	f107 0014 	add.w	r0, r7, #20
 8004d18:	2300      	movs	r3, #0
 8004d1a:	9301      	str	r3, [sp, #4]
 8004d1c:	2308      	movs	r3, #8
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	2308      	movs	r3, #8
 8004d22:	2210      	movs	r2, #16
 8004d24:	f7ff fd4a 	bl	80047bc <_PrintUnsigned>
        break;
 8004d28:	e007      	b.n	8004d3a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004d2a:	f107 0314 	add.w	r3, r7, #20
 8004d2e:	2125      	movs	r1, #37	; 0x25
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7ff fcc7 	bl	80046c4 <_StoreChar>
        break;
 8004d36:	e000      	b.n	8004d3a <_VPrintTarget+0x332>
      default:
        break;
 8004d38:	bf00      	nop
      }
      sFormat++;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	e007      	b.n	8004d52 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8004d42:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004d46:	f107 0314 	add.w	r3, r7, #20
 8004d4a:	4611      	mov	r1, r2
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7ff fcb9 	bl	80046c4 <_StoreChar>
    }
  } while (*sFormat);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f47f ae72 	bne.w	8004a40 <_VPrintTarget+0x38>
 8004d5c:	e000      	b.n	8004d60 <_VPrintTarget+0x358>
      break;
 8004d5e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d041      	beq.n	8004dea <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8004d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	643b      	str	r3, [r7, #64]	; 0x40
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d76:	e00b      	b.n	8004d90 <_VPrintTarget+0x388>
 8004d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d7e:	1c59      	adds	r1, r3, #1
 8004d80:	6439      	str	r1, [r7, #64]	; 0x40
 8004d82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	701a      	strb	r2, [r3, #0]
 8004d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d8c:	09db      	lsrs	r3, r3, #7
 8004d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d92:	2b7f      	cmp	r3, #127	; 0x7f
 8004d94:	d8f0      	bhi.n	8004d78 <_VPrintTarget+0x370>
 8004d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d98:	1c5a      	adds	r2, r3, #1
 8004d9a:	643a      	str	r2, [r7, #64]	; 0x40
 8004d9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	701a      	strb	r2, [r3, #0]
 8004da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004da4:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004daa:	2300      	movs	r3, #0
 8004dac:	637b      	str	r3, [r7, #52]	; 0x34
 8004dae:	e00b      	b.n	8004dc8 <_VPrintTarget+0x3c0>
 8004db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db6:	1c59      	adds	r1, r3, #1
 8004db8:	63b9      	str	r1, [r7, #56]	; 0x38
 8004dba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	701a      	strb	r2, [r3, #0]
 8004dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc4:	09db      	lsrs	r3, r3, #7
 8004dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8004dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dca:	2b7f      	cmp	r3, #127	; 0x7f
 8004dcc:	d8f0      	bhi.n	8004db0 <_VPrintTarget+0x3a8>
 8004dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd0:	1c5a      	adds	r2, r3, #1
 8004dd2:	63ba      	str	r2, [r7, #56]	; 0x38
 8004dd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	701a      	strb	r2, [r3, #0]
 8004dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ddc:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	69b9      	ldr	r1, [r7, #24]
 8004de2:	221a      	movs	r2, #26
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff fafd 	bl	80043e4 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dec:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004df0:	bf00      	nop
 8004df2:	3758      	adds	r7, #88	; 0x58
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af02      	add	r7, sp, #8
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
 8004e04:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004e06:	2300      	movs	r3, #0
 8004e08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e0c:	4917      	ldr	r1, [pc, #92]	; (8004e6c <SEGGER_SYSVIEW_Init+0x74>)
 8004e0e:	4818      	ldr	r0, [pc, #96]	; (8004e70 <SEGGER_SYSVIEW_Init+0x78>)
 8004e10:	f7ff f8d8 	bl	8003fc4 <SEGGER_RTT_AllocUpBuffer>
 8004e14:	4603      	mov	r3, r0
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	4b16      	ldr	r3, [pc, #88]	; (8004e74 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e1a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004e1c:	4b15      	ldr	r3, [pc, #84]	; (8004e74 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e1e:	785a      	ldrb	r2, [r3, #1]
 8004e20:	4b14      	ldr	r3, [pc, #80]	; (8004e74 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e22:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004e24:	4b13      	ldr	r3, [pc, #76]	; (8004e74 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e26:	7e1b      	ldrb	r3, [r3, #24]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	2308      	movs	r3, #8
 8004e30:	4a11      	ldr	r2, [pc, #68]	; (8004e78 <SEGGER_SYSVIEW_Init+0x80>)
 8004e32:	490f      	ldr	r1, [pc, #60]	; (8004e70 <SEGGER_SYSVIEW_Init+0x78>)
 8004e34:	f7ff f94a 	bl	80040cc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004e38:	4b0e      	ldr	r3, [pc, #56]	; (8004e74 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004e3e:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <SEGGER_SYSVIEW_Init+0x84>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a0c      	ldr	r2, [pc, #48]	; (8004e74 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e44:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004e46:	4a0b      	ldr	r2, [pc, #44]	; (8004e74 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004e4c:	4a09      	ldr	r2, [pc, #36]	; (8004e74 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004e52:	4a08      	ldr	r2, [pc, #32]	; (8004e74 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004e58:	4a06      	ldr	r2, [pc, #24]	; (8004e74 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004e5e:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004e64:	bf00      	nop
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	20013314 	.word	0x20013314
 8004e70:	08005d28 	.word	0x08005d28
 8004e74:	2001431c 	.word	0x2001431c
 8004e78:	20014314 	.word	0x20014314
 8004e7c:	e0001004 	.word	0xe0001004

08004e80 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004e88:	4a04      	ldr	r2, [pc, #16]	; (8004e9c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6113      	str	r3, [r2, #16]
}
 8004e8e:	bf00      	nop
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	2001431c 	.word	0x2001431c

08004ea0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ea8:	f3ef 8311 	mrs	r3, BASEPRI
 8004eac:	f04f 0120 	mov.w	r1, #32
 8004eb0:	f381 8811 	msr	BASEPRI, r1
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	4808      	ldr	r0, [pc, #32]	; (8004ed8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004eb8:	f7ff f9a4 	bl	8004204 <_PreparePacket>
 8004ebc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	68b9      	ldr	r1, [r7, #8]
 8004ec2:	68b8      	ldr	r0, [r7, #8]
 8004ec4:	f7ff fa8e 	bl	80043e4 <_SendPacket>
  RECORD_END();
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f383 8811 	msr	BASEPRI, r3
}
 8004ece:	bf00      	nop
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	2001434c 	.word	0x2001434c

08004edc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b088      	sub	sp, #32
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ee6:	f3ef 8311 	mrs	r3, BASEPRI
 8004eea:	f04f 0120 	mov.w	r1, #32
 8004eee:	f381 8811 	msr	BASEPRI, r1
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	4816      	ldr	r0, [pc, #88]	; (8004f50 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004ef6:	f7ff f985 	bl	8004204 <_PreparePacket>
 8004efa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	61fb      	str	r3, [r7, #28]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	61bb      	str	r3, [r7, #24]
 8004f08:	e00b      	b.n	8004f22 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	1c59      	adds	r1, r3, #1
 8004f12:	61f9      	str	r1, [r7, #28]
 8004f14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f18:	b2d2      	uxtb	r2, r2
 8004f1a:	701a      	strb	r2, [r3, #0]
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	09db      	lsrs	r3, r3, #7
 8004f20:	61bb      	str	r3, [r7, #24]
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b7f      	cmp	r3, #127	; 0x7f
 8004f26:	d8f0      	bhi.n	8004f0a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	61fa      	str	r2, [r7, #28]
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	b2d2      	uxtb	r2, r2
 8004f32:	701a      	strb	r2, [r3, #0]
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	68f9      	ldr	r1, [r7, #12]
 8004f3c:	6938      	ldr	r0, [r7, #16]
 8004f3e:	f7ff fa51 	bl	80043e4 <_SendPacket>
  RECORD_END();
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f383 8811 	msr	BASEPRI, r3
}
 8004f48:	bf00      	nop
 8004f4a:	3720      	adds	r7, #32
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	2001434c 	.word	0x2001434c

08004f54 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b08c      	sub	sp, #48	; 0x30
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f60:	f3ef 8311 	mrs	r3, BASEPRI
 8004f64:	f04f 0120 	mov.w	r1, #32
 8004f68:	f381 8811 	msr	BASEPRI, r1
 8004f6c:	61fb      	str	r3, [r7, #28]
 8004f6e:	4825      	ldr	r0, [pc, #148]	; (8005004 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004f70:	f7ff f948 	bl	8004204 <_PreparePacket>
 8004f74:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f82:	e00b      	b.n	8004f9c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8a:	1c59      	adds	r1, r3, #1
 8004f8c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004f8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f92:	b2d2      	uxtb	r2, r2
 8004f94:	701a      	strb	r2, [r3, #0]
 8004f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f98:	09db      	lsrs	r3, r3, #7
 8004f9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9e:	2b7f      	cmp	r3, #127	; 0x7f
 8004fa0:	d8f0      	bhi.n	8004f84 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa4:	1c5a      	adds	r2, r3, #1
 8004fa6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	701a      	strb	r2, [r3, #0]
 8004fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	623b      	str	r3, [r7, #32]
 8004fba:	e00b      	b.n	8004fd4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
 8004fbe:	b2da      	uxtb	r2, r3
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	1c59      	adds	r1, r3, #1
 8004fc4:	6279      	str	r1, [r7, #36]	; 0x24
 8004fc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	701a      	strb	r2, [r3, #0]
 8004fce:	6a3b      	ldr	r3, [r7, #32]
 8004fd0:	09db      	lsrs	r3, r3, #7
 8004fd2:	623b      	str	r3, [r7, #32]
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	2b7f      	cmp	r3, #127	; 0x7f
 8004fd8:	d8f0      	bhi.n	8004fbc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	1c5a      	adds	r2, r3, #1
 8004fde:	627a      	str	r2, [r7, #36]	; 0x24
 8004fe0:	6a3a      	ldr	r2, [r7, #32]
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	701a      	strb	r2, [r3, #0]
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	6979      	ldr	r1, [r7, #20]
 8004fee:	69b8      	ldr	r0, [r7, #24]
 8004ff0:	f7ff f9f8 	bl	80043e4 <_SendPacket>
  RECORD_END();
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	f383 8811 	msr	BASEPRI, r3
}
 8004ffa:	bf00      	nop
 8004ffc:	3730      	adds	r7, #48	; 0x30
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	2001434c 	.word	0x2001434c

08005008 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005008:	b580      	push	{r7, lr}
 800500a:	b08c      	sub	sp, #48	; 0x30
 800500c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800500e:	4b59      	ldr	r3, [pc, #356]	; (8005174 <SEGGER_SYSVIEW_Start+0x16c>)
 8005010:	2201      	movs	r2, #1
 8005012:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005014:	f3ef 8311 	mrs	r3, BASEPRI
 8005018:	f04f 0120 	mov.w	r1, #32
 800501c:	f381 8811 	msr	BASEPRI, r1
 8005020:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005022:	4b54      	ldr	r3, [pc, #336]	; (8005174 <SEGGER_SYSVIEW_Start+0x16c>)
 8005024:	785b      	ldrb	r3, [r3, #1]
 8005026:	220a      	movs	r2, #10
 8005028:	4953      	ldr	r1, [pc, #332]	; (8005178 <SEGGER_SYSVIEW_Start+0x170>)
 800502a:	4618      	mov	r0, r3
 800502c:	f7fb f8d0 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005036:	f7fe fc97 	bl	8003968 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800503a:	200a      	movs	r0, #10
 800503c:	f7ff ff30 	bl	8004ea0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005040:	f3ef 8311 	mrs	r3, BASEPRI
 8005044:	f04f 0120 	mov.w	r1, #32
 8005048:	f381 8811 	msr	BASEPRI, r1
 800504c:	60bb      	str	r3, [r7, #8]
 800504e:	484b      	ldr	r0, [pc, #300]	; (800517c <SEGGER_SYSVIEW_Start+0x174>)
 8005050:	f7ff f8d8 	bl	8004204 <_PreparePacket>
 8005054:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800505e:	4b45      	ldr	r3, [pc, #276]	; (8005174 <SEGGER_SYSVIEW_Start+0x16c>)
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	62bb      	str	r3, [r7, #40]	; 0x28
 8005064:	e00b      	b.n	800507e <SEGGER_SYSVIEW_Start+0x76>
 8005066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005068:	b2da      	uxtb	r2, r3
 800506a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506c:	1c59      	adds	r1, r3, #1
 800506e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005070:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	701a      	strb	r2, [r3, #0]
 8005078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507a:	09db      	lsrs	r3, r3, #7
 800507c:	62bb      	str	r3, [r7, #40]	; 0x28
 800507e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005080:	2b7f      	cmp	r3, #127	; 0x7f
 8005082:	d8f0      	bhi.n	8005066 <SEGGER_SYSVIEW_Start+0x5e>
 8005084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	62fa      	str	r2, [r7, #44]	; 0x2c
 800508a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800508c:	b2d2      	uxtb	r2, r2
 800508e:	701a      	strb	r2, [r3, #0]
 8005090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005092:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	627b      	str	r3, [r7, #36]	; 0x24
 8005098:	4b36      	ldr	r3, [pc, #216]	; (8005174 <SEGGER_SYSVIEW_Start+0x16c>)
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	623b      	str	r3, [r7, #32]
 800509e:	e00b      	b.n	80050b8 <SEGGER_SYSVIEW_Start+0xb0>
 80050a0:	6a3b      	ldr	r3, [r7, #32]
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	1c59      	adds	r1, r3, #1
 80050a8:	6279      	str	r1, [r7, #36]	; 0x24
 80050aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	701a      	strb	r2, [r3, #0]
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	09db      	lsrs	r3, r3, #7
 80050b6:	623b      	str	r3, [r7, #32]
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	2b7f      	cmp	r3, #127	; 0x7f
 80050bc:	d8f0      	bhi.n	80050a0 <SEGGER_SYSVIEW_Start+0x98>
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	627a      	str	r2, [r7, #36]	; 0x24
 80050c4:	6a3a      	ldr	r2, [r7, #32]
 80050c6:	b2d2      	uxtb	r2, r2
 80050c8:	701a      	strb	r2, [r3, #0]
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	61fb      	str	r3, [r7, #28]
 80050d2:	4b28      	ldr	r3, [pc, #160]	; (8005174 <SEGGER_SYSVIEW_Start+0x16c>)
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	61bb      	str	r3, [r7, #24]
 80050d8:	e00b      	b.n	80050f2 <SEGGER_SYSVIEW_Start+0xea>
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	1c59      	adds	r1, r3, #1
 80050e2:	61f9      	str	r1, [r7, #28]
 80050e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050e8:	b2d2      	uxtb	r2, r2
 80050ea:	701a      	strb	r2, [r3, #0]
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	09db      	lsrs	r3, r3, #7
 80050f0:	61bb      	str	r3, [r7, #24]
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	2b7f      	cmp	r3, #127	; 0x7f
 80050f6:	d8f0      	bhi.n	80050da <SEGGER_SYSVIEW_Start+0xd2>
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	1c5a      	adds	r2, r3, #1
 80050fc:	61fa      	str	r2, [r7, #28]
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	b2d2      	uxtb	r2, r2
 8005102:	701a      	strb	r2, [r3, #0]
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	617b      	str	r3, [r7, #20]
 800510c:	2300      	movs	r3, #0
 800510e:	613b      	str	r3, [r7, #16]
 8005110:	e00b      	b.n	800512a <SEGGER_SYSVIEW_Start+0x122>
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	b2da      	uxtb	r2, r3
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	1c59      	adds	r1, r3, #1
 800511a:	6179      	str	r1, [r7, #20]
 800511c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005120:	b2d2      	uxtb	r2, r2
 8005122:	701a      	strb	r2, [r3, #0]
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	09db      	lsrs	r3, r3, #7
 8005128:	613b      	str	r3, [r7, #16]
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	2b7f      	cmp	r3, #127	; 0x7f
 800512e:	d8f0      	bhi.n	8005112 <SEGGER_SYSVIEW_Start+0x10a>
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	1c5a      	adds	r2, r3, #1
 8005134:	617a      	str	r2, [r7, #20]
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	b2d2      	uxtb	r2, r2
 800513a:	701a      	strb	r2, [r3, #0]
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005140:	2218      	movs	r2, #24
 8005142:	6839      	ldr	r1, [r7, #0]
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7ff f94d 	bl	80043e4 <_SendPacket>
      RECORD_END();
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005150:	4b08      	ldr	r3, [pc, #32]	; (8005174 <SEGGER_SYSVIEW_Start+0x16c>)
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	2b00      	cmp	r3, #0
 8005156:	d002      	beq.n	800515e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005158:	4b06      	ldr	r3, [pc, #24]	; (8005174 <SEGGER_SYSVIEW_Start+0x16c>)
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800515e:	f000 f9eb 	bl	8005538 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005162:	f000 f9b1 	bl	80054c8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005166:	f000 fc13 	bl	8005990 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800516a:	bf00      	nop
 800516c:	3730      	adds	r7, #48	; 0x30
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	2001431c 	.word	0x2001431c
 8005178:	08005d68 	.word	0x08005d68
 800517c:	2001434c 	.word	0x2001434c

08005180 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005186:	f3ef 8311 	mrs	r3, BASEPRI
 800518a:	f04f 0120 	mov.w	r1, #32
 800518e:	f381 8811 	msr	BASEPRI, r1
 8005192:	607b      	str	r3, [r7, #4]
 8005194:	480b      	ldr	r0, [pc, #44]	; (80051c4 <SEGGER_SYSVIEW_Stop+0x44>)
 8005196:	f7ff f835 	bl	8004204 <_PreparePacket>
 800519a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800519c:	4b0a      	ldr	r3, [pc, #40]	; (80051c8 <SEGGER_SYSVIEW_Stop+0x48>)
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d007      	beq.n	80051b4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80051a4:	220b      	movs	r2, #11
 80051a6:	6839      	ldr	r1, [r7, #0]
 80051a8:	6838      	ldr	r0, [r7, #0]
 80051aa:	f7ff f91b 	bl	80043e4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80051ae:	4b06      	ldr	r3, [pc, #24]	; (80051c8 <SEGGER_SYSVIEW_Stop+0x48>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f383 8811 	msr	BASEPRI, r3
}
 80051ba:	bf00      	nop
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	2001434c 	.word	0x2001434c
 80051c8:	2001431c 	.word	0x2001431c

080051cc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b08c      	sub	sp, #48	; 0x30
 80051d0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80051d2:	f3ef 8311 	mrs	r3, BASEPRI
 80051d6:	f04f 0120 	mov.w	r1, #32
 80051da:	f381 8811 	msr	BASEPRI, r1
 80051de:	60fb      	str	r3, [r7, #12]
 80051e0:	4845      	ldr	r0, [pc, #276]	; (80052f8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80051e2:	f7ff f80f 	bl	8004204 <_PreparePacket>
 80051e6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051f0:	4b42      	ldr	r3, [pc, #264]	; (80052fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80051f6:	e00b      	b.n	8005210 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80051f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fe:	1c59      	adds	r1, r3, #1
 8005200:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005202:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520c:	09db      	lsrs	r3, r3, #7
 800520e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005212:	2b7f      	cmp	r3, #127	; 0x7f
 8005214:	d8f0      	bhi.n	80051f8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800521c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800521e:	b2d2      	uxtb	r2, r2
 8005220:	701a      	strb	r2, [r3, #0]
 8005222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005224:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	627b      	str	r3, [r7, #36]	; 0x24
 800522a:	4b34      	ldr	r3, [pc, #208]	; (80052fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	623b      	str	r3, [r7, #32]
 8005230:	e00b      	b.n	800524a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	b2da      	uxtb	r2, r3
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	1c59      	adds	r1, r3, #1
 800523a:	6279      	str	r1, [r7, #36]	; 0x24
 800523c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005240:	b2d2      	uxtb	r2, r2
 8005242:	701a      	strb	r2, [r3, #0]
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	09db      	lsrs	r3, r3, #7
 8005248:	623b      	str	r3, [r7, #32]
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	2b7f      	cmp	r3, #127	; 0x7f
 800524e:	d8f0      	bhi.n	8005232 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	1c5a      	adds	r2, r3, #1
 8005254:	627a      	str	r2, [r7, #36]	; 0x24
 8005256:	6a3a      	ldr	r2, [r7, #32]
 8005258:	b2d2      	uxtb	r2, r2
 800525a:	701a      	strb	r2, [r3, #0]
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	61fb      	str	r3, [r7, #28]
 8005264:	4b25      	ldr	r3, [pc, #148]	; (80052fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	61bb      	str	r3, [r7, #24]
 800526a:	e00b      	b.n	8005284 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	b2da      	uxtb	r2, r3
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	1c59      	adds	r1, r3, #1
 8005274:	61f9      	str	r1, [r7, #28]
 8005276:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	701a      	strb	r2, [r3, #0]
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	09db      	lsrs	r3, r3, #7
 8005282:	61bb      	str	r3, [r7, #24]
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	2b7f      	cmp	r3, #127	; 0x7f
 8005288:	d8f0      	bhi.n	800526c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	1c5a      	adds	r2, r3, #1
 800528e:	61fa      	str	r2, [r7, #28]
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	b2d2      	uxtb	r2, r2
 8005294:	701a      	strb	r2, [r3, #0]
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	617b      	str	r3, [r7, #20]
 800529e:	2300      	movs	r3, #0
 80052a0:	613b      	str	r3, [r7, #16]
 80052a2:	e00b      	b.n	80052bc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	1c59      	adds	r1, r3, #1
 80052ac:	6179      	str	r1, [r7, #20]
 80052ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052b2:	b2d2      	uxtb	r2, r2
 80052b4:	701a      	strb	r2, [r3, #0]
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	09db      	lsrs	r3, r3, #7
 80052ba:	613b      	str	r3, [r7, #16]
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	2b7f      	cmp	r3, #127	; 0x7f
 80052c0:	d8f0      	bhi.n	80052a4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	1c5a      	adds	r2, r3, #1
 80052c6:	617a      	str	r2, [r7, #20]
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	701a      	strb	r2, [r3, #0]
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80052d2:	2218      	movs	r2, #24
 80052d4:	6879      	ldr	r1, [r7, #4]
 80052d6:	68b8      	ldr	r0, [r7, #8]
 80052d8:	f7ff f884 	bl	80043e4 <_SendPacket>
  RECORD_END();
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80052e2:	4b06      	ldr	r3, [pc, #24]	; (80052fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d002      	beq.n	80052f0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80052ea:	4b04      	ldr	r3, [pc, #16]	; (80052fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80052ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ee:	4798      	blx	r3
  }
}
 80052f0:	bf00      	nop
 80052f2:	3730      	adds	r7, #48	; 0x30
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	2001434c 	.word	0x2001434c
 80052fc:	2001431c 	.word	0x2001431c

08005300 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005300:	b580      	push	{r7, lr}
 8005302:	b092      	sub	sp, #72	; 0x48
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005308:	f3ef 8311 	mrs	r3, BASEPRI
 800530c:	f04f 0120 	mov.w	r1, #32
 8005310:	f381 8811 	msr	BASEPRI, r1
 8005314:	617b      	str	r3, [r7, #20]
 8005316:	486a      	ldr	r0, [pc, #424]	; (80054c0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005318:	f7fe ff74 	bl	8004204 <_PreparePacket>
 800531c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	647b      	str	r3, [r7, #68]	; 0x44
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	4b66      	ldr	r3, [pc, #408]	; (80054c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	643b      	str	r3, [r7, #64]	; 0x40
 8005332:	e00b      	b.n	800534c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005336:	b2da      	uxtb	r2, r3
 8005338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800533a:	1c59      	adds	r1, r3, #1
 800533c:	6479      	str	r1, [r7, #68]	; 0x44
 800533e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005342:	b2d2      	uxtb	r2, r2
 8005344:	701a      	strb	r2, [r3, #0]
 8005346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005348:	09db      	lsrs	r3, r3, #7
 800534a:	643b      	str	r3, [r7, #64]	; 0x40
 800534c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800534e:	2b7f      	cmp	r3, #127	; 0x7f
 8005350:	d8f0      	bhi.n	8005334 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005354:	1c5a      	adds	r2, r3, #1
 8005356:	647a      	str	r2, [r7, #68]	; 0x44
 8005358:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	701a      	strb	r2, [r3, #0]
 800535e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005360:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	63bb      	str	r3, [r7, #56]	; 0x38
 800536c:	e00b      	b.n	8005386 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800536e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005370:	b2da      	uxtb	r2, r3
 8005372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005374:	1c59      	adds	r1, r3, #1
 8005376:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005378:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	701a      	strb	r2, [r3, #0]
 8005380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005382:	09db      	lsrs	r3, r3, #7
 8005384:	63bb      	str	r3, [r7, #56]	; 0x38
 8005386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005388:	2b7f      	cmp	r3, #127	; 0x7f
 800538a:	d8f0      	bhi.n	800536e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800538c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800538e:	1c5a      	adds	r2, r3, #1
 8005390:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005392:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005394:	b2d2      	uxtb	r2, r2
 8005396:	701a      	strb	r2, [r3, #0]
 8005398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800539a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	2220      	movs	r2, #32
 80053a2:	4619      	mov	r1, r3
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f7fe fedd 	bl	8004164 <_EncodeStr>
 80053aa:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80053ac:	2209      	movs	r2, #9
 80053ae:	68f9      	ldr	r1, [r7, #12]
 80053b0:	6938      	ldr	r0, [r7, #16]
 80053b2:	f7ff f817 	bl	80043e4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	637b      	str	r3, [r7, #52]	; 0x34
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	4b40      	ldr	r3, [pc, #256]	; (80054c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	633b      	str	r3, [r7, #48]	; 0x30
 80053ca:	e00b      	b.n	80053e4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80053cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d2:	1c59      	adds	r1, r3, #1
 80053d4:	6379      	str	r1, [r7, #52]	; 0x34
 80053d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	701a      	strb	r2, [r3, #0]
 80053de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e0:	09db      	lsrs	r3, r3, #7
 80053e2:	633b      	str	r3, [r7, #48]	; 0x30
 80053e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e6:	2b7f      	cmp	r3, #127	; 0x7f
 80053e8:	d8f0      	bhi.n	80053cc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80053ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	637a      	str	r2, [r7, #52]	; 0x34
 80053f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	701a      	strb	r2, [r3, #0]
 80053f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	62bb      	str	r3, [r7, #40]	; 0x28
 8005404:	e00b      	b.n	800541e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005408:	b2da      	uxtb	r2, r3
 800540a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540c:	1c59      	adds	r1, r3, #1
 800540e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005410:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005414:	b2d2      	uxtb	r2, r2
 8005416:	701a      	strb	r2, [r3, #0]
 8005418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541a:	09db      	lsrs	r3, r3, #7
 800541c:	62bb      	str	r3, [r7, #40]	; 0x28
 800541e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005420:	2b7f      	cmp	r3, #127	; 0x7f
 8005422:	d8f0      	bhi.n	8005406 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005426:	1c5a      	adds	r2, r3, #1
 8005428:	62fa      	str	r2, [r7, #44]	; 0x2c
 800542a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800542c:	b2d2      	uxtb	r2, r2
 800542e:	701a      	strb	r2, [r3, #0]
 8005430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005432:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	627b      	str	r3, [r7, #36]	; 0x24
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	623b      	str	r3, [r7, #32]
 800543e:	e00b      	b.n	8005458 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005440:	6a3b      	ldr	r3, [r7, #32]
 8005442:	b2da      	uxtb	r2, r3
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	1c59      	adds	r1, r3, #1
 8005448:	6279      	str	r1, [r7, #36]	; 0x24
 800544a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	701a      	strb	r2, [r3, #0]
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	09db      	lsrs	r3, r3, #7
 8005456:	623b      	str	r3, [r7, #32]
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	2b7f      	cmp	r3, #127	; 0x7f
 800545c:	d8f0      	bhi.n	8005440 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	627a      	str	r2, [r7, #36]	; 0x24
 8005464:	6a3a      	ldr	r2, [r7, #32]
 8005466:	b2d2      	uxtb	r2, r2
 8005468:	701a      	strb	r2, [r3, #0]
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	61fb      	str	r3, [r7, #28]
 8005472:	2300      	movs	r3, #0
 8005474:	61bb      	str	r3, [r7, #24]
 8005476:	e00b      	b.n	8005490 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	b2da      	uxtb	r2, r3
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	1c59      	adds	r1, r3, #1
 8005480:	61f9      	str	r1, [r7, #28]
 8005482:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005486:	b2d2      	uxtb	r2, r2
 8005488:	701a      	strb	r2, [r3, #0]
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	09db      	lsrs	r3, r3, #7
 800548e:	61bb      	str	r3, [r7, #24]
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	2b7f      	cmp	r3, #127	; 0x7f
 8005494:	d8f0      	bhi.n	8005478 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	61fa      	str	r2, [r7, #28]
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	b2d2      	uxtb	r2, r2
 80054a0:	701a      	strb	r2, [r3, #0]
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80054a6:	2215      	movs	r2, #21
 80054a8:	68f9      	ldr	r1, [r7, #12]
 80054aa:	6938      	ldr	r0, [r7, #16]
 80054ac:	f7fe ff9a 	bl	80043e4 <_SendPacket>
  RECORD_END();
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f383 8811 	msr	BASEPRI, r3
}
 80054b6:	bf00      	nop
 80054b8:	3748      	adds	r7, #72	; 0x48
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	2001434c 	.word	0x2001434c
 80054c4:	2001431c 	.word	0x2001431c

080054c8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80054c8:	b580      	push	{r7, lr}
 80054ca:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80054cc:	4b07      	ldr	r3, [pc, #28]	; (80054ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d008      	beq.n	80054e6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80054d4:	4b05      	ldr	r3, [pc, #20]	; (80054ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80054de:	4b03      	ldr	r3, [pc, #12]	; (80054ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	4798      	blx	r3
  }
}
 80054e6:	bf00      	nop
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	2001431c 	.word	0x2001431c

080054f0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80054f8:	f3ef 8311 	mrs	r3, BASEPRI
 80054fc:	f04f 0120 	mov.w	r1, #32
 8005500:	f381 8811 	msr	BASEPRI, r1
 8005504:	617b      	str	r3, [r7, #20]
 8005506:	480b      	ldr	r0, [pc, #44]	; (8005534 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005508:	f7fe fe7c 	bl	8004204 <_PreparePacket>
 800550c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800550e:	2280      	movs	r2, #128	; 0x80
 8005510:	6879      	ldr	r1, [r7, #4]
 8005512:	6938      	ldr	r0, [r7, #16]
 8005514:	f7fe fe26 	bl	8004164 <_EncodeStr>
 8005518:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800551a:	220e      	movs	r2, #14
 800551c:	68f9      	ldr	r1, [r7, #12]
 800551e:	6938      	ldr	r0, [r7, #16]
 8005520:	f7fe ff60 	bl	80043e4 <_SendPacket>
  RECORD_END();
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f383 8811 	msr	BASEPRI, r3
}
 800552a:	bf00      	nop
 800552c:	3718      	adds	r7, #24
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	2001434c 	.word	0x2001434c

08005538 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005538:	b590      	push	{r4, r7, lr}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800553e:	4b15      	ldr	r3, [pc, #84]	; (8005594 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d01a      	beq.n	800557c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005546:	4b13      	ldr	r3, [pc, #76]	; (8005594 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d015      	beq.n	800557c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005550:	4b10      	ldr	r3, [pc, #64]	; (8005594 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4798      	blx	r3
 8005558:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800555c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800555e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005562:	f04f 0200 	mov.w	r2, #0
 8005566:	f04f 0300 	mov.w	r3, #0
 800556a:	000a      	movs	r2, r1
 800556c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800556e:	4613      	mov	r3, r2
 8005570:	461a      	mov	r2, r3
 8005572:	4621      	mov	r1, r4
 8005574:	200d      	movs	r0, #13
 8005576:	f7ff fced 	bl	8004f54 <SEGGER_SYSVIEW_RecordU32x2>
 800557a:	e006      	b.n	800558a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800557c:	4b06      	ldr	r3, [pc, #24]	; (8005598 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4619      	mov	r1, r3
 8005582:	200c      	movs	r0, #12
 8005584:	f7ff fcaa 	bl	8004edc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005588:	bf00      	nop
 800558a:	bf00      	nop
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	bd90      	pop	{r4, r7, pc}
 8005592:	bf00      	nop
 8005594:	2001431c 	.word	0x2001431c
 8005598:	e0001004 	.word	0xe0001004

0800559c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80055a2:	f3ef 8311 	mrs	r3, BASEPRI
 80055a6:	f04f 0120 	mov.w	r1, #32
 80055aa:	f381 8811 	msr	BASEPRI, r1
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	4819      	ldr	r0, [pc, #100]	; (8005618 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80055b2:	f7fe fe27 	bl	8004204 <_PreparePacket>
 80055b6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80055bc:	4b17      	ldr	r3, [pc, #92]	; (800561c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055c4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	617b      	str	r3, [r7, #20]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	613b      	str	r3, [r7, #16]
 80055ce:	e00b      	b.n	80055e8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	1c59      	adds	r1, r3, #1
 80055d8:	6179      	str	r1, [r7, #20]
 80055da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	701a      	strb	r2, [r3, #0]
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	09db      	lsrs	r3, r3, #7
 80055e6:	613b      	str	r3, [r7, #16]
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	2b7f      	cmp	r3, #127	; 0x7f
 80055ec:	d8f0      	bhi.n	80055d0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	1c5a      	adds	r2, r3, #1
 80055f2:	617a      	str	r2, [r7, #20]
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	701a      	strb	r2, [r3, #0]
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80055fe:	2202      	movs	r2, #2
 8005600:	6879      	ldr	r1, [r7, #4]
 8005602:	68b8      	ldr	r0, [r7, #8]
 8005604:	f7fe feee 	bl	80043e4 <_SendPacket>
  RECORD_END();
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f383 8811 	msr	BASEPRI, r3
}
 800560e:	bf00      	nop
 8005610:	3718      	adds	r7, #24
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	2001434c 	.word	0x2001434c
 800561c:	e000ed04 	.word	0xe000ed04

08005620 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005626:	f3ef 8311 	mrs	r3, BASEPRI
 800562a:	f04f 0120 	mov.w	r1, #32
 800562e:	f381 8811 	msr	BASEPRI, r1
 8005632:	607b      	str	r3, [r7, #4]
 8005634:	4807      	ldr	r0, [pc, #28]	; (8005654 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005636:	f7fe fde5 	bl	8004204 <_PreparePacket>
 800563a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800563c:	2203      	movs	r2, #3
 800563e:	6839      	ldr	r1, [r7, #0]
 8005640:	6838      	ldr	r0, [r7, #0]
 8005642:	f7fe fecf 	bl	80043e4 <_SendPacket>
  RECORD_END();
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f383 8811 	msr	BASEPRI, r3
}
 800564c:	bf00      	nop
 800564e:	3708      	adds	r7, #8
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	2001434c 	.word	0x2001434c

08005658 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800565e:	f3ef 8311 	mrs	r3, BASEPRI
 8005662:	f04f 0120 	mov.w	r1, #32
 8005666:	f381 8811 	msr	BASEPRI, r1
 800566a:	607b      	str	r3, [r7, #4]
 800566c:	4807      	ldr	r0, [pc, #28]	; (800568c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800566e:	f7fe fdc9 	bl	8004204 <_PreparePacket>
 8005672:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005674:	2212      	movs	r2, #18
 8005676:	6839      	ldr	r1, [r7, #0]
 8005678:	6838      	ldr	r0, [r7, #0]
 800567a:	f7fe feb3 	bl	80043e4 <_SendPacket>
  RECORD_END();
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f383 8811 	msr	BASEPRI, r3
}
 8005684:	bf00      	nop
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	2001434c 	.word	0x2001434c

08005690 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005696:	f3ef 8311 	mrs	r3, BASEPRI
 800569a:	f04f 0120 	mov.w	r1, #32
 800569e:	f381 8811 	msr	BASEPRI, r1
 80056a2:	607b      	str	r3, [r7, #4]
 80056a4:	4807      	ldr	r0, [pc, #28]	; (80056c4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80056a6:	f7fe fdad 	bl	8004204 <_PreparePacket>
 80056aa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80056ac:	2211      	movs	r2, #17
 80056ae:	6839      	ldr	r1, [r7, #0]
 80056b0:	6838      	ldr	r0, [r7, #0]
 80056b2:	f7fe fe97 	bl	80043e4 <_SendPacket>
  RECORD_END();
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f383 8811 	msr	BASEPRI, r3
}
 80056bc:	bf00      	nop
 80056be:	3708      	adds	r7, #8
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	2001434c 	.word	0x2001434c

080056c8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b088      	sub	sp, #32
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056d0:	f3ef 8311 	mrs	r3, BASEPRI
 80056d4:	f04f 0120 	mov.w	r1, #32
 80056d8:	f381 8811 	msr	BASEPRI, r1
 80056dc:	617b      	str	r3, [r7, #20]
 80056de:	4819      	ldr	r0, [pc, #100]	; (8005744 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80056e0:	f7fe fd90 	bl	8004204 <_PreparePacket>
 80056e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80056ea:	4b17      	ldr	r3, [pc, #92]	; (8005748 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	61fb      	str	r3, [r7, #28]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	61bb      	str	r3, [r7, #24]
 80056fc:	e00b      	b.n	8005716 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	b2da      	uxtb	r2, r3
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	1c59      	adds	r1, r3, #1
 8005706:	61f9      	str	r1, [r7, #28]
 8005708:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800570c:	b2d2      	uxtb	r2, r2
 800570e:	701a      	strb	r2, [r3, #0]
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	09db      	lsrs	r3, r3, #7
 8005714:	61bb      	str	r3, [r7, #24]
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	2b7f      	cmp	r3, #127	; 0x7f
 800571a:	d8f0      	bhi.n	80056fe <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	1c5a      	adds	r2, r3, #1
 8005720:	61fa      	str	r2, [r7, #28]
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	701a      	strb	r2, [r3, #0]
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800572c:	2208      	movs	r2, #8
 800572e:	68f9      	ldr	r1, [r7, #12]
 8005730:	6938      	ldr	r0, [r7, #16]
 8005732:	f7fe fe57 	bl	80043e4 <_SendPacket>
  RECORD_END();
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f383 8811 	msr	BASEPRI, r3
}
 800573c:	bf00      	nop
 800573e:	3720      	adds	r7, #32
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	2001434c 	.word	0x2001434c
 8005748:	2001431c 	.word	0x2001431c

0800574c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800574c:	b580      	push	{r7, lr}
 800574e:	b088      	sub	sp, #32
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005754:	f3ef 8311 	mrs	r3, BASEPRI
 8005758:	f04f 0120 	mov.w	r1, #32
 800575c:	f381 8811 	msr	BASEPRI, r1
 8005760:	617b      	str	r3, [r7, #20]
 8005762:	4819      	ldr	r0, [pc, #100]	; (80057c8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005764:	f7fe fd4e 	bl	8004204 <_PreparePacket>
 8005768:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800576e:	4b17      	ldr	r3, [pc, #92]	; (80057cc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	61fb      	str	r3, [r7, #28]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	61bb      	str	r3, [r7, #24]
 8005780:	e00b      	b.n	800579a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	b2da      	uxtb	r2, r3
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	1c59      	adds	r1, r3, #1
 800578a:	61f9      	str	r1, [r7, #28]
 800578c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005790:	b2d2      	uxtb	r2, r2
 8005792:	701a      	strb	r2, [r3, #0]
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	09db      	lsrs	r3, r3, #7
 8005798:	61bb      	str	r3, [r7, #24]
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	2b7f      	cmp	r3, #127	; 0x7f
 800579e:	d8f0      	bhi.n	8005782 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	1c5a      	adds	r2, r3, #1
 80057a4:	61fa      	str	r2, [r7, #28]
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	b2d2      	uxtb	r2, r2
 80057aa:	701a      	strb	r2, [r3, #0]
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80057b0:	2204      	movs	r2, #4
 80057b2:	68f9      	ldr	r1, [r7, #12]
 80057b4:	6938      	ldr	r0, [r7, #16]
 80057b6:	f7fe fe15 	bl	80043e4 <_SendPacket>
  RECORD_END();
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f383 8811 	msr	BASEPRI, r3
}
 80057c0:	bf00      	nop
 80057c2:	3720      	adds	r7, #32
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	2001434c 	.word	0x2001434c
 80057cc:	2001431c 	.word	0x2001431c

080057d0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b088      	sub	sp, #32
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80057d8:	f3ef 8311 	mrs	r3, BASEPRI
 80057dc:	f04f 0120 	mov.w	r1, #32
 80057e0:	f381 8811 	msr	BASEPRI, r1
 80057e4:	617b      	str	r3, [r7, #20]
 80057e6:	4819      	ldr	r0, [pc, #100]	; (800584c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80057e8:	f7fe fd0c 	bl	8004204 <_PreparePacket>
 80057ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80057f2:	4b17      	ldr	r3, [pc, #92]	; (8005850 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	61fb      	str	r3, [r7, #28]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	61bb      	str	r3, [r7, #24]
 8005804:	e00b      	b.n	800581e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	b2da      	uxtb	r2, r3
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	1c59      	adds	r1, r3, #1
 800580e:	61f9      	str	r1, [r7, #28]
 8005810:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	701a      	strb	r2, [r3, #0]
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	09db      	lsrs	r3, r3, #7
 800581c:	61bb      	str	r3, [r7, #24]
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	2b7f      	cmp	r3, #127	; 0x7f
 8005822:	d8f0      	bhi.n	8005806 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	1c5a      	adds	r2, r3, #1
 8005828:	61fa      	str	r2, [r7, #28]
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	b2d2      	uxtb	r2, r2
 800582e:	701a      	strb	r2, [r3, #0]
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005834:	2206      	movs	r2, #6
 8005836:	68f9      	ldr	r1, [r7, #12]
 8005838:	6938      	ldr	r0, [r7, #16]
 800583a:	f7fe fdd3 	bl	80043e4 <_SendPacket>
  RECORD_END();
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f383 8811 	msr	BASEPRI, r3
}
 8005844:	bf00      	nop
 8005846:	3720      	adds	r7, #32
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	2001434c 	.word	0x2001434c
 8005850:	2001431c 	.word	0x2001431c

08005854 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005854:	b580      	push	{r7, lr}
 8005856:	b08c      	sub	sp, #48	; 0x30
 8005858:	af00      	add	r7, sp, #0
 800585a:	4603      	mov	r3, r0
 800585c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800585e:	4b3b      	ldr	r3, [pc, #236]	; (800594c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d06d      	beq.n	8005942 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005866:	4b39      	ldr	r3, [pc, #228]	; (800594c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800586c:	2300      	movs	r3, #0
 800586e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005870:	e008      	b.n	8005884 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587a:	2b00      	cmp	r3, #0
 800587c:	d007      	beq.n	800588e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800587e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005880:	3301      	adds	r3, #1
 8005882:	62bb      	str	r3, [r7, #40]	; 0x28
 8005884:	79fb      	ldrb	r3, [r7, #7]
 8005886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005888:	429a      	cmp	r2, r3
 800588a:	d3f2      	bcc.n	8005872 <SEGGER_SYSVIEW_SendModule+0x1e>
 800588c:	e000      	b.n	8005890 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800588e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005892:	2b00      	cmp	r3, #0
 8005894:	d055      	beq.n	8005942 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005896:	f3ef 8311 	mrs	r3, BASEPRI
 800589a:	f04f 0120 	mov.w	r1, #32
 800589e:	f381 8811 	msr	BASEPRI, r1
 80058a2:	617b      	str	r3, [r7, #20]
 80058a4:	482a      	ldr	r0, [pc, #168]	; (8005950 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80058a6:	f7fe fcad 	bl	8004204 <_PreparePacket>
 80058aa:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	627b      	str	r3, [r7, #36]	; 0x24
 80058b4:	79fb      	ldrb	r3, [r7, #7]
 80058b6:	623b      	str	r3, [r7, #32]
 80058b8:	e00b      	b.n	80058d2 <SEGGER_SYSVIEW_SendModule+0x7e>
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	1c59      	adds	r1, r3, #1
 80058c2:	6279      	str	r1, [r7, #36]	; 0x24
 80058c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058c8:	b2d2      	uxtb	r2, r2
 80058ca:	701a      	strb	r2, [r3, #0]
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	09db      	lsrs	r3, r3, #7
 80058d0:	623b      	str	r3, [r7, #32]
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	2b7f      	cmp	r3, #127	; 0x7f
 80058d6:	d8f0      	bhi.n	80058ba <SEGGER_SYSVIEW_SendModule+0x66>
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	627a      	str	r2, [r7, #36]	; 0x24
 80058de:	6a3a      	ldr	r2, [r7, #32]
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	701a      	strb	r2, [r3, #0]
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	61fb      	str	r3, [r7, #28]
 80058ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	61bb      	str	r3, [r7, #24]
 80058f2:	e00b      	b.n	800590c <SEGGER_SYSVIEW_SendModule+0xb8>
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	b2da      	uxtb	r2, r3
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	1c59      	adds	r1, r3, #1
 80058fc:	61f9      	str	r1, [r7, #28]
 80058fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	701a      	strb	r2, [r3, #0]
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	09db      	lsrs	r3, r3, #7
 800590a:	61bb      	str	r3, [r7, #24]
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	2b7f      	cmp	r3, #127	; 0x7f
 8005910:	d8f0      	bhi.n	80058f4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	1c5a      	adds	r2, r3, #1
 8005916:	61fa      	str	r2, [r7, #28]
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	b2d2      	uxtb	r2, r2
 800591c:	701a      	strb	r2, [r3, #0]
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2280      	movs	r2, #128	; 0x80
 8005928:	4619      	mov	r1, r3
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f7fe fc1a 	bl	8004164 <_EncodeStr>
 8005930:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005932:	2216      	movs	r2, #22
 8005934:	68f9      	ldr	r1, [r7, #12]
 8005936:	6938      	ldr	r0, [r7, #16]
 8005938:	f7fe fd54 	bl	80043e4 <_SendPacket>
      RECORD_END();
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005942:	bf00      	nop
 8005944:	3730      	adds	r7, #48	; 0x30
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	20014344 	.word	0x20014344
 8005950:	2001434c 	.word	0x2001434c

08005954 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800595a:	4b0c      	ldr	r3, [pc, #48]	; (800598c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00f      	beq.n	8005982 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005962:	4b0a      	ldr	r3, [pc, #40]	; (800598c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d002      	beq.n	8005976 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1f2      	bne.n	8005968 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005982:	bf00      	nop
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	20014344 	.word	0x20014344

08005990 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005996:	f3ef 8311 	mrs	r3, BASEPRI
 800599a:	f04f 0120 	mov.w	r1, #32
 800599e:	f381 8811 	msr	BASEPRI, r1
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	4817      	ldr	r0, [pc, #92]	; (8005a04 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80059a6:	f7fe fc2d 	bl	8004204 <_PreparePacket>
 80059aa:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	617b      	str	r3, [r7, #20]
 80059b4:	4b14      	ldr	r3, [pc, #80]	; (8005a08 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	613b      	str	r3, [r7, #16]
 80059ba:	e00b      	b.n	80059d4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	1c59      	adds	r1, r3, #1
 80059c4:	6179      	str	r1, [r7, #20]
 80059c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	701a      	strb	r2, [r3, #0]
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	09db      	lsrs	r3, r3, #7
 80059d2:	613b      	str	r3, [r7, #16]
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	2b7f      	cmp	r3, #127	; 0x7f
 80059d8:	d8f0      	bhi.n	80059bc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	1c5a      	adds	r2, r3, #1
 80059de:	617a      	str	r2, [r7, #20]
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	b2d2      	uxtb	r2, r2
 80059e4:	701a      	strb	r2, [r3, #0]
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80059ea:	221b      	movs	r2, #27
 80059ec:	6879      	ldr	r1, [r7, #4]
 80059ee:	68b8      	ldr	r0, [r7, #8]
 80059f0:	f7fe fcf8 	bl	80043e4 <_SendPacket>
  RECORD_END();
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f383 8811 	msr	BASEPRI, r3
}
 80059fa:	bf00      	nop
 80059fc:	3718      	adds	r7, #24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	2001434c 	.word	0x2001434c
 8005a08:	20014348 	.word	0x20014348

08005a0c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005a0c:	b40f      	push	{r0, r1, r2, r3}
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b082      	sub	sp, #8
 8005a12:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005a14:	f107 0314 	add.w	r3, r7, #20
 8005a18:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005a1a:	1d3b      	adds	r3, r7, #4
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	2100      	movs	r1, #0
 8005a20:	6938      	ldr	r0, [r7, #16]
 8005a22:	f7fe fff1 	bl	8004a08 <_VPrintTarget>
  va_end(ParamList);
}
 8005a26:	bf00      	nop
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a30:	b004      	add	sp, #16
 8005a32:	4770      	bx	lr

08005a34 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08a      	sub	sp, #40	; 0x28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a3c:	f3ef 8311 	mrs	r3, BASEPRI
 8005a40:	f04f 0120 	mov.w	r1, #32
 8005a44:	f381 8811 	msr	BASEPRI, r1
 8005a48:	617b      	str	r3, [r7, #20]
 8005a4a:	4827      	ldr	r0, [pc, #156]	; (8005ae8 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005a4c:	f7fe fbda 	bl	8004204 <_PreparePacket>
 8005a50:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a52:	2280      	movs	r2, #128	; 0x80
 8005a54:	6879      	ldr	r1, [r7, #4]
 8005a56:	6938      	ldr	r0, [r7, #16]
 8005a58:	f7fe fb84 	bl	8004164 <_EncodeStr>
 8005a5c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	627b      	str	r3, [r7, #36]	; 0x24
 8005a62:	2301      	movs	r3, #1
 8005a64:	623b      	str	r3, [r7, #32]
 8005a66:	e00b      	b.n	8005a80 <SEGGER_SYSVIEW_Warn+0x4c>
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	1c59      	adds	r1, r3, #1
 8005a70:	6279      	str	r1, [r7, #36]	; 0x24
 8005a72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a76:	b2d2      	uxtb	r2, r2
 8005a78:	701a      	strb	r2, [r3, #0]
 8005a7a:	6a3b      	ldr	r3, [r7, #32]
 8005a7c:	09db      	lsrs	r3, r3, #7
 8005a7e:	623b      	str	r3, [r7, #32]
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	2b7f      	cmp	r3, #127	; 0x7f
 8005a84:	d8f0      	bhi.n	8005a68 <SEGGER_SYSVIEW_Warn+0x34>
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	1c5a      	adds	r2, r3, #1
 8005a8a:	627a      	str	r2, [r7, #36]	; 0x24
 8005a8c:	6a3a      	ldr	r2, [r7, #32]
 8005a8e:	b2d2      	uxtb	r2, r2
 8005a90:	701a      	strb	r2, [r3, #0]
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	61fb      	str	r3, [r7, #28]
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	61bb      	str	r3, [r7, #24]
 8005a9e:	e00b      	b.n	8005ab8 <SEGGER_SYSVIEW_Warn+0x84>
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	1c59      	adds	r1, r3, #1
 8005aa8:	61f9      	str	r1, [r7, #28]
 8005aaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aae:	b2d2      	uxtb	r2, r2
 8005ab0:	701a      	strb	r2, [r3, #0]
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	09db      	lsrs	r3, r3, #7
 8005ab6:	61bb      	str	r3, [r7, #24]
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	2b7f      	cmp	r3, #127	; 0x7f
 8005abc:	d8f0      	bhi.n	8005aa0 <SEGGER_SYSVIEW_Warn+0x6c>
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	61fa      	str	r2, [r7, #28]
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	b2d2      	uxtb	r2, r2
 8005ac8:	701a      	strb	r2, [r3, #0]
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005ace:	221a      	movs	r2, #26
 8005ad0:	68f9      	ldr	r1, [r7, #12]
 8005ad2:	6938      	ldr	r0, [r7, #16]
 8005ad4:	f7fe fc86 	bl	80043e4 <_SendPacket>
  RECORD_END();
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f383 8811 	msr	BASEPRI, r3
}
 8005ade:	bf00      	nop
 8005ae0:	3728      	adds	r7, #40	; 0x28
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	2001434c 	.word	0x2001434c

08005aec <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005aec:	b580      	push	{r7, lr}
 8005aee:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005af0:	4b13      	ldr	r3, [pc, #76]	; (8005b40 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005af2:	7e1b      	ldrb	r3, [r3, #24]
 8005af4:	4619      	mov	r1, r3
 8005af6:	4a13      	ldr	r2, [pc, #76]	; (8005b44 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005af8:	460b      	mov	r3, r1
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	440b      	add	r3, r1
 8005afe:	00db      	lsls	r3, r3, #3
 8005b00:	4413      	add	r3, r2
 8005b02:	336c      	adds	r3, #108	; 0x6c
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	4b0e      	ldr	r3, [pc, #56]	; (8005b40 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b08:	7e1b      	ldrb	r3, [r3, #24]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	490d      	ldr	r1, [pc, #52]	; (8005b44 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005b0e:	4603      	mov	r3, r0
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	4403      	add	r3, r0
 8005b14:	00db      	lsls	r3, r3, #3
 8005b16:	440b      	add	r3, r1
 8005b18:	3370      	adds	r3, #112	; 0x70
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d00b      	beq.n	8005b38 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005b20:	4b07      	ldr	r3, [pc, #28]	; (8005b40 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b22:	789b      	ldrb	r3, [r3, #2]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d107      	bne.n	8005b38 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005b28:	4b05      	ldr	r3, [pc, #20]	; (8005b40 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005b2e:	f7fe fb75 	bl	800421c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005b32:	4b03      	ldr	r3, [pc, #12]	; (8005b40 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8005b38:	4b01      	ldr	r3, [pc, #4]	; (8005b40 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b3a:	781b      	ldrb	r3, [r3, #0]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	2001431c 	.word	0x2001431c
 8005b44:	20012e5c 	.word	0x20012e5c

08005b48 <__libc_init_array>:
 8005b48:	b570      	push	{r4, r5, r6, lr}
 8005b4a:	4d0d      	ldr	r5, [pc, #52]	; (8005b80 <__libc_init_array+0x38>)
 8005b4c:	4c0d      	ldr	r4, [pc, #52]	; (8005b84 <__libc_init_array+0x3c>)
 8005b4e:	1b64      	subs	r4, r4, r5
 8005b50:	10a4      	asrs	r4, r4, #2
 8005b52:	2600      	movs	r6, #0
 8005b54:	42a6      	cmp	r6, r4
 8005b56:	d109      	bne.n	8005b6c <__libc_init_array+0x24>
 8005b58:	4d0b      	ldr	r5, [pc, #44]	; (8005b88 <__libc_init_array+0x40>)
 8005b5a:	4c0c      	ldr	r4, [pc, #48]	; (8005b8c <__libc_init_array+0x44>)
 8005b5c:	f000 f83e 	bl	8005bdc <_init>
 8005b60:	1b64      	subs	r4, r4, r5
 8005b62:	10a4      	asrs	r4, r4, #2
 8005b64:	2600      	movs	r6, #0
 8005b66:	42a6      	cmp	r6, r4
 8005b68:	d105      	bne.n	8005b76 <__libc_init_array+0x2e>
 8005b6a:	bd70      	pop	{r4, r5, r6, pc}
 8005b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b70:	4798      	blx	r3
 8005b72:	3601      	adds	r6, #1
 8005b74:	e7ee      	b.n	8005b54 <__libc_init_array+0xc>
 8005b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b7a:	4798      	blx	r3
 8005b7c:	3601      	adds	r6, #1
 8005b7e:	e7f2      	b.n	8005b66 <__libc_init_array+0x1e>
 8005b80:	08005d8c 	.word	0x08005d8c
 8005b84:	08005d8c 	.word	0x08005d8c
 8005b88:	08005d8c 	.word	0x08005d8c
 8005b8c:	08005d90 	.word	0x08005d90

08005b90 <memcmp>:
 8005b90:	b510      	push	{r4, lr}
 8005b92:	3901      	subs	r1, #1
 8005b94:	4402      	add	r2, r0
 8005b96:	4290      	cmp	r0, r2
 8005b98:	d101      	bne.n	8005b9e <memcmp+0xe>
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	e005      	b.n	8005baa <memcmp+0x1a>
 8005b9e:	7803      	ldrb	r3, [r0, #0]
 8005ba0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005ba4:	42a3      	cmp	r3, r4
 8005ba6:	d001      	beq.n	8005bac <memcmp+0x1c>
 8005ba8:	1b18      	subs	r0, r3, r4
 8005baa:	bd10      	pop	{r4, pc}
 8005bac:	3001      	adds	r0, #1
 8005bae:	e7f2      	b.n	8005b96 <memcmp+0x6>

08005bb0 <memcpy>:
 8005bb0:	440a      	add	r2, r1
 8005bb2:	4291      	cmp	r1, r2
 8005bb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bb8:	d100      	bne.n	8005bbc <memcpy+0xc>
 8005bba:	4770      	bx	lr
 8005bbc:	b510      	push	{r4, lr}
 8005bbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bc6:	4291      	cmp	r1, r2
 8005bc8:	d1f9      	bne.n	8005bbe <memcpy+0xe>
 8005bca:	bd10      	pop	{r4, pc}

08005bcc <memset>:
 8005bcc:	4402      	add	r2, r0
 8005bce:	4603      	mov	r3, r0
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d100      	bne.n	8005bd6 <memset+0xa>
 8005bd4:	4770      	bx	lr
 8005bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8005bda:	e7f9      	b.n	8005bd0 <memset+0x4>

08005bdc <_init>:
 8005bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bde:	bf00      	nop
 8005be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005be2:	bc08      	pop	{r3}
 8005be4:	469e      	mov	lr, r3
 8005be6:	4770      	bx	lr

08005be8 <_fini>:
 8005be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bea:	bf00      	nop
 8005bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bee:	bc08      	pop	{r3}
 8005bf0:	469e      	mov	lr, r3
 8005bf2:	4770      	bx	lr
